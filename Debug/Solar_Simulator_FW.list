
Solar_Simulator_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f178  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001560  0800f3d0  0800f3d0  000103d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010930  08010930  000121d8  2**0
                  CONTENTS
  4 .ARM          00000008  08010930  08010930  00011930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010938  08010938  000121d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010938  08010938  00011938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801093c  0801093c  0001193c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08010940  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d28  200001d8  08010b18  000121d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003f00  08010b18  00012f00  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000233c3  00000000  00000000  0001220e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b04  00000000  00000000  000355d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  000390d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000253a0  00000000  00000000  0003ade0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002357f  00000000  00000000  00060180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ec528  00000000  00000000  000836ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0016fc27  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000016a7  00000000  00000000  0016fc6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000091f8  00000000  00000000  00171314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0017a50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200001d8 	.word	0x200001d8
 8000274:	00000000 	.word	0x00000000
 8000278:	0800f3b8 	.word	0x0800f3b8

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200001dc 	.word	0x200001dc
 8000294:	0800f3b8 	.word	0x0800f3b8

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b97e 	b.w	8000fc4 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f806 	bl	8000ce0 <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__udivmoddi4>:
 8000ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ce4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000ce6:	460c      	mov	r4, r1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d14d      	bne.n	8000d88 <__udivmoddi4+0xa8>
 8000cec:	428a      	cmp	r2, r1
 8000cee:	460f      	mov	r7, r1
 8000cf0:	4684      	mov	ip, r0
 8000cf2:	4696      	mov	lr, r2
 8000cf4:	fab2 f382 	clz	r3, r2
 8000cf8:	d960      	bls.n	8000dbc <__udivmoddi4+0xdc>
 8000cfa:	b14b      	cbz	r3, 8000d10 <__udivmoddi4+0x30>
 8000cfc:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d00:	f1c3 0220 	rsb	r2, r3, #32
 8000d04:	409f      	lsls	r7, r3
 8000d06:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d0e:	4317      	orrs	r7, r2
 8000d10:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d14:	fa1f f48e 	uxth.w	r4, lr
 8000d18:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d1c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d20:	fb06 7711 	mls	r7, r6, r1, r7
 8000d24:	fb01 f004 	mul.w	r0, r1, r4
 8000d28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x62>
 8000d30:	eb1e 0202 	adds.w	r2, lr, r2
 8000d34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x60>
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	f200 812d 	bhi.w	8000f9a <__udivmoddi4+0x2ba>
 8000d40:	4639      	mov	r1, r7
 8000d42:	1a12      	subs	r2, r2, r0
 8000d44:	fa1f fc8c 	uxth.w	ip, ip
 8000d48:	fbb2 f0f6 	udiv	r0, r2, r6
 8000d4c:	fb06 2210 	mls	r2, r6, r0, r2
 8000d50:	fb00 f404 	mul.w	r4, r0, r4
 8000d54:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d58:	4564      	cmp	r4, ip
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x8e>
 8000d5c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x8c>
 8000d66:	4564      	cmp	r4, ip
 8000d68:	f200 811a 	bhi.w	8000fa0 <__udivmoddi4+0x2c0>
 8000d6c:	4610      	mov	r0, r2
 8000d6e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d72:	ebac 0c04 	sub.w	ip, ip, r4
 8000d76:	2100      	movs	r1, #0
 8000d78:	b125      	cbz	r5, 8000d84 <__udivmoddi4+0xa4>
 8000d7a:	fa2c f303 	lsr.w	r3, ip, r3
 8000d7e:	2200      	movs	r2, #0
 8000d80:	e9c5 3200 	strd	r3, r2, [r5]
 8000d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d905      	bls.n	8000d98 <__udivmoddi4+0xb8>
 8000d8c:	b10d      	cbz	r5, 8000d92 <__udivmoddi4+0xb2>
 8000d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d92:	2100      	movs	r1, #0
 8000d94:	4608      	mov	r0, r1
 8000d96:	e7f5      	b.n	8000d84 <__udivmoddi4+0xa4>
 8000d98:	fab3 f183 	clz	r1, r3
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	d14d      	bne.n	8000e3c <__udivmoddi4+0x15c>
 8000da0:	42a3      	cmp	r3, r4
 8000da2:	f0c0 80f2 	bcc.w	8000f8a <__udivmoddi4+0x2aa>
 8000da6:	4290      	cmp	r0, r2
 8000da8:	f080 80ef 	bcs.w	8000f8a <__udivmoddi4+0x2aa>
 8000dac:	4606      	mov	r6, r0
 8000dae:	4623      	mov	r3, r4
 8000db0:	4608      	mov	r0, r1
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e6      	beq.n	8000d84 <__udivmoddi4+0xa4>
 8000db6:	e9c5 6300 	strd	r6, r3, [r5]
 8000dba:	e7e3      	b.n	8000d84 <__udivmoddi4+0xa4>
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f040 80a2 	bne.w	8000f06 <__udivmoddi4+0x226>
 8000dc2:	1a8a      	subs	r2, r1, r2
 8000dc4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000dc8:	fa1f f68e 	uxth.w	r6, lr
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fbb2 f4f7 	udiv	r4, r2, r7
 8000dd2:	fb07 2014 	mls	r0, r7, r4, r2
 8000dd6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000dda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dde:	fb06 f004 	mul.w	r0, r6, r4
 8000de2:	4290      	cmp	r0, r2
 8000de4:	d90f      	bls.n	8000e06 <__udivmoddi4+0x126>
 8000de6:	eb1e 0202 	adds.w	r2, lr, r2
 8000dea:	f104 38ff 	add.w	r8, r4, #4294967295
 8000dee:	bf2c      	ite	cs
 8000df0:	f04f 0901 	movcs.w	r9, #1
 8000df4:	f04f 0900 	movcc.w	r9, #0
 8000df8:	4290      	cmp	r0, r2
 8000dfa:	d903      	bls.n	8000e04 <__udivmoddi4+0x124>
 8000dfc:	f1b9 0f00 	cmp.w	r9, #0
 8000e00:	f000 80c8 	beq.w	8000f94 <__udivmoddi4+0x2b4>
 8000e04:	4644      	mov	r4, r8
 8000e06:	1a12      	subs	r2, r2, r0
 8000e08:	fa1f fc8c 	uxth.w	ip, ip
 8000e0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e10:	fb07 2210 	mls	r2, r7, r0, r2
 8000e14:	fb00 f606 	mul.w	r6, r0, r6
 8000e18:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e1c:	4566      	cmp	r6, ip
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x152>
 8000e20:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e28:	d202      	bcs.n	8000e30 <__udivmoddi4+0x150>
 8000e2a:	4566      	cmp	r6, ip
 8000e2c:	f200 80bb 	bhi.w	8000fa6 <__udivmoddi4+0x2c6>
 8000e30:	4610      	mov	r0, r2
 8000e32:	ebac 0c06 	sub.w	ip, ip, r6
 8000e36:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e3a:	e79d      	b.n	8000d78 <__udivmoddi4+0x98>
 8000e3c:	f1c1 0620 	rsb	r6, r1, #32
 8000e40:	408b      	lsls	r3, r1
 8000e42:	fa04 fe01 	lsl.w	lr, r4, r1
 8000e46:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4a:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e4e:	40f4      	lsrs	r4, r6
 8000e50:	408a      	lsls	r2, r1
 8000e52:	431f      	orrs	r7, r3
 8000e54:	ea4e 030c 	orr.w	r3, lr, ip
 8000e58:	fa00 fe01 	lsl.w	lr, r0, r1
 8000e5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e60:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e64:	fa1f fc87 	uxth.w	ip, r7
 8000e68:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6c:	fb08 4410 	mls	r4, r8, r0, r4
 8000e70:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e74:	fb00 f90c 	mul.w	r9, r0, ip
 8000e78:	45a1      	cmp	r9, r4
 8000e7a:	d90e      	bls.n	8000e9a <__udivmoddi4+0x1ba>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e82:	bf2c      	ite	cs
 8000e84:	f04f 0b01 	movcs.w	fp, #1
 8000e88:	f04f 0b00 	movcc.w	fp, #0
 8000e8c:	45a1      	cmp	r9, r4
 8000e8e:	d903      	bls.n	8000e98 <__udivmoddi4+0x1b8>
 8000e90:	f1bb 0f00 	cmp.w	fp, #0
 8000e94:	f000 8093 	beq.w	8000fbe <__udivmoddi4+0x2de>
 8000e98:	4650      	mov	r0, sl
 8000e9a:	eba4 0409 	sub.w	r4, r4, r9
 8000e9e:	fa1f f983 	uxth.w	r9, r3
 8000ea2:	fbb4 f3f8 	udiv	r3, r4, r8
 8000ea6:	fb08 4413 	mls	r4, r8, r3, r4
 8000eaa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d906      	bls.n	8000ec4 <__udivmoddi4+0x1e4>
 8000eb6:	193c      	adds	r4, r7, r4
 8000eb8:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ebc:	d201      	bcs.n	8000ec2 <__udivmoddi4+0x1e2>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d87a      	bhi.n	8000fb8 <__udivmoddi4+0x2d8>
 8000ec2:	4643      	mov	r3, r8
 8000ec4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ec8:	eba4 040c 	sub.w	r4, r4, ip
 8000ecc:	fba0 9802 	umull	r9, r8, r0, r2
 8000ed0:	4544      	cmp	r4, r8
 8000ed2:	46cc      	mov	ip, r9
 8000ed4:	4643      	mov	r3, r8
 8000ed6:	d302      	bcc.n	8000ede <__udivmoddi4+0x1fe>
 8000ed8:	d106      	bne.n	8000ee8 <__udivmoddi4+0x208>
 8000eda:	45ce      	cmp	lr, r9
 8000edc:	d204      	bcs.n	8000ee8 <__udivmoddi4+0x208>
 8000ede:	3801      	subs	r0, #1
 8000ee0:	ebb9 0c02 	subs.w	ip, r9, r2
 8000ee4:	eb68 0307 	sbc.w	r3, r8, r7
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x222>
 8000eea:	ebbe 020c 	subs.w	r2, lr, ip
 8000eee:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef2:	fa04 f606 	lsl.w	r6, r4, r6
 8000ef6:	fa22 f301 	lsr.w	r3, r2, r1
 8000efa:	40cc      	lsrs	r4, r1
 8000efc:	431e      	orrs	r6, r3
 8000efe:	e9c5 6400 	strd	r6, r4, [r5]
 8000f02:	2100      	movs	r1, #0
 8000f04:	e73e      	b.n	8000d84 <__udivmoddi4+0xa4>
 8000f06:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f0a:	f1c3 0120 	rsb	r1, r3, #32
 8000f0e:	fa04 f203 	lsl.w	r2, r4, r3
 8000f12:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f16:	40cc      	lsrs	r4, r1
 8000f18:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f1c:	fa20 f101 	lsr.w	r1, r0, r1
 8000f20:	fa1f f68e 	uxth.w	r6, lr
 8000f24:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	fb07 4410 	mls	r4, r7, r0, r4
 8000f2e:	0c11      	lsrs	r1, r2, #16
 8000f30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000f34:	fb00 f406 	mul.w	r4, r0, r6
 8000f38:	428c      	cmp	r4, r1
 8000f3a:	d90e      	bls.n	8000f5a <__udivmoddi4+0x27a>
 8000f3c:	eb1e 0101 	adds.w	r1, lr, r1
 8000f40:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f44:	bf2c      	ite	cs
 8000f46:	f04f 0901 	movcs.w	r9, #1
 8000f4a:	f04f 0900 	movcc.w	r9, #0
 8000f4e:	428c      	cmp	r4, r1
 8000f50:	d902      	bls.n	8000f58 <__udivmoddi4+0x278>
 8000f52:	f1b9 0f00 	cmp.w	r9, #0
 8000f56:	d02c      	beq.n	8000fb2 <__udivmoddi4+0x2d2>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	1b09      	subs	r1, r1, r4
 8000f5c:	b292      	uxth	r2, r2
 8000f5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f62:	fb07 1114 	mls	r1, r7, r4, r1
 8000f66:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f6a:	fb04 f106 	mul.w	r1, r4, r6
 8000f6e:	4291      	cmp	r1, r2
 8000f70:	d907      	bls.n	8000f82 <__udivmoddi4+0x2a2>
 8000f72:	eb1e 0202 	adds.w	r2, lr, r2
 8000f76:	f104 38ff 	add.w	r8, r4, #4294967295
 8000f7a:	d201      	bcs.n	8000f80 <__udivmoddi4+0x2a0>
 8000f7c:	4291      	cmp	r1, r2
 8000f7e:	d815      	bhi.n	8000fac <__udivmoddi4+0x2cc>
 8000f80:	4644      	mov	r4, r8
 8000f82:	1a52      	subs	r2, r2, r1
 8000f84:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000f88:	e721      	b.n	8000dce <__udivmoddi4+0xee>
 8000f8a:	1a86      	subs	r6, r0, r2
 8000f8c:	eb64 0303 	sbc.w	r3, r4, r3
 8000f90:	2001      	movs	r0, #1
 8000f92:	e70e      	b.n	8000db2 <__udivmoddi4+0xd2>
 8000f94:	3c02      	subs	r4, #2
 8000f96:	4472      	add	r2, lr
 8000f98:	e735      	b.n	8000e06 <__udivmoddi4+0x126>
 8000f9a:	3902      	subs	r1, #2
 8000f9c:	4472      	add	r2, lr
 8000f9e:	e6d0      	b.n	8000d42 <__udivmoddi4+0x62>
 8000fa0:	44f4      	add	ip, lr
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	e6e3      	b.n	8000d6e <__udivmoddi4+0x8e>
 8000fa6:	44f4      	add	ip, lr
 8000fa8:	3802      	subs	r0, #2
 8000faa:	e742      	b.n	8000e32 <__udivmoddi4+0x152>
 8000fac:	3c02      	subs	r4, #2
 8000fae:	4472      	add	r2, lr
 8000fb0:	e7e7      	b.n	8000f82 <__udivmoddi4+0x2a2>
 8000fb2:	3802      	subs	r0, #2
 8000fb4:	4471      	add	r1, lr
 8000fb6:	e7d0      	b.n	8000f5a <__udivmoddi4+0x27a>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	443c      	add	r4, r7
 8000fbc:	e782      	b.n	8000ec4 <__udivmoddi4+0x1e4>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	e76a      	b.n	8000e9a <__udivmoddi4+0x1ba>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <SPI_Transmit>:
    	return 0xFFFF;
    }
}

void SPI_Transmit(uint8_t *txData, uint16_t len)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
    // Enable the chip select (CS) line if using software NSS
    //HAL_GPIO_WritePin(GPIOB, DISP_CS_Pin, GPIO_PIN_RESET);
    // Transmit data
    //uint16_t length = 1;//strlen((char *)txData);

    if (HAL_SPI_Transmit(&hspi2, txData, len, HAL_MAX_DELAY) != HAL_OK)
 8000fd4:	887a      	ldrh	r2, [r7, #2]
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <SPI_Transmit+0x2c>)
 8000fde:	f009 f969 	bl	800a2b4 <HAL_SPI_Transmit>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SPI_Transmit+0x24>
    {
        // Handle error
        Error_Handler();
 8000fe8:	f002 fb10 	bl	800360c <Error_Handler>
    }

    // Disable the chip select (CS) line
    //HAL_GPIO_WritePin(GPIOB, DISP_CS_Pin, GPIO_PIN_SET);
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200002e8 	.word	0x200002e8

08000ff8 <writeBuffer>:
  uint8_t tog_cmd[] = {Vcom, 0x00};
  SPI_Transmit(&tog_cmd, 2); //write line command (bits reversed)
  HAL_GPIO_WritePin(GPIOB, DISP_CS_Pin, GPIO_PIN_RESET);
}

void writeBuffer(){
 8000ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ffc:	b087      	sub	sp, #28
 8000ffe:	af00      	add	r7, sp, #0
  uint16_t i, currentline;
  HAL_GPIO_WritePin(GPIOB, DISP_CS_Pin, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001006:	4844      	ldr	r0, [pc, #272]	@ (8001118 <writeBuffer+0x120>)
 8001008:	f005 feb2 	bl	8006d70 <HAL_GPIO_WritePin>

  uint8_t temp = (0x01 | Vcom);
 800100c:	4b43      	ldr	r3, [pc, #268]	@ (800111c <writeBuffer+0x124>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	b2db      	uxtb	r3, r3
 8001016:	717b      	strb	r3, [r7, #5]
  SPI_Transmit(&temp, 1);
 8001018:	1d7b      	adds	r3, r7, #5
 800101a:	2101      	movs	r1, #1
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ffd3 	bl	8000fc8 <SPI_Transmit>
  Vcom = Vcom ? 0x00 : 0x02;
 8001022:	4b3e      	ldr	r3, [pc, #248]	@ (800111c <writeBuffer+0x124>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <writeBuffer+0x36>
 800102a:	2200      	movs	r2, #0
 800102c:	e000      	b.n	8001030 <writeBuffer+0x38>
 800102e:	2202      	movs	r2, #2
 8001030:	4b3a      	ldr	r3, [pc, #232]	@ (800111c <writeBuffer+0x124>)
 8001032:	701a      	strb	r2, [r3, #0]

  uint8_t bytes_per_line = 50;
 8001034:	2332      	movs	r3, #50	@ 0x32
 8001036:	757b      	strb	r3, [r7, #21]
  uint16_t totalbytes = 12000;
 8001038:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 800103c:	827b      	strh	r3, [r7, #18]

  for (i = 0; i < totalbytes; i += bytes_per_line) {
 800103e:	2300      	movs	r3, #0
 8001040:	82fb      	strh	r3, [r7, #22]
 8001042:	e053      	b.n	80010ec <writeBuffer+0xf4>
 8001044:	466b      	mov	r3, sp
 8001046:	461e      	mov	r6, r3
    uint8_t line[bytes_per_line + 2];
 8001048:	7d7b      	ldrb	r3, [r7, #21]
 800104a:	1c99      	adds	r1, r3, #2
 800104c:	1e4b      	subs	r3, r1, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	460a      	mov	r2, r1
 8001052:	2300      	movs	r3, #0
 8001054:	4614      	mov	r4, r2
 8001056:	461d      	mov	r5, r3
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	00eb      	lsls	r3, r5, #3
 8001062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001066:	00e2      	lsls	r2, r4, #3
 8001068:	460a      	mov	r2, r1
 800106a:	2300      	movs	r3, #0
 800106c:	4690      	mov	r8, r2
 800106e:	4699      	mov	r9, r3
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800107c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001080:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001084:	460b      	mov	r3, r1
 8001086:	3307      	adds	r3, #7
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	ebad 0d03 	sub.w	sp, sp, r3
 8001090:	466b      	mov	r3, sp
 8001092:	3300      	adds	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]

    // Send address byte
    currentline = ((i + 1) / (400 / 8)) + 1;
 8001096:	8afb      	ldrh	r3, [r7, #22]
 8001098:	3301      	adds	r3, #1
 800109a:	4a21      	ldr	r2, [pc, #132]	@ (8001120 <writeBuffer+0x128>)
 800109c:	fb82 1203 	smull	r1, r2, r2, r3
 80010a0:	1112      	asrs	r2, r2, #4
 80010a2:	17db      	asrs	r3, r3, #31
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	3301      	adds	r3, #1
 80010aa:	80fb      	strh	r3, [r7, #6]
    line[0] = currentline;
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	701a      	strb	r2, [r3, #0]
    // copy over this line
    memcpy(line + 1, sharpmem_buffer + i, bytes_per_line);
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	1c58      	adds	r0, r3, #1
 80010b8:	8afb      	ldrh	r3, [r7, #22]
 80010ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001124 <writeBuffer+0x12c>)
 80010bc:	4413      	add	r3, r2
 80010be:	7d7a      	ldrb	r2, [r7, #21]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f00c f826 	bl	800d112 <memcpy>
    // Send end of line
    line[bytes_per_line + 1] = 0x00;
 80010c6:	7d7b      	ldrb	r3, [r7, #21]
 80010c8:	3301      	adds	r3, #1
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	2100      	movs	r1, #0
 80010ce:	54d1      	strb	r1, [r2, r3]
    // send it!
    //spidev->transfer(line, bytes_per_line + 2);
    SPI_Transmit(line, bytes_per_line + 2);
 80010d0:	7d7b      	ldrb	r3, [r7, #21]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	3302      	adds	r3, #2
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	4619      	mov	r1, r3
 80010da:	68b8      	ldr	r0, [r7, #8]
 80010dc:	f7ff ff74 	bl	8000fc8 <SPI_Transmit>
 80010e0:	46b5      	mov	sp, r6
  for (i = 0; i < totalbytes; i += bytes_per_line) {
 80010e2:	7d7b      	ldrb	r3, [r7, #21]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	8afb      	ldrh	r3, [r7, #22]
 80010e8:	4413      	add	r3, r2
 80010ea:	82fb      	strh	r3, [r7, #22]
 80010ec:	8afa      	ldrh	r2, [r7, #22]
 80010ee:	8a7b      	ldrh	r3, [r7, #18]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d3a7      	bcc.n	8001044 <writeBuffer+0x4c>
  }
  uint8_t zerob = 0b00000000;
 80010f4:	2300      	movs	r3, #0
 80010f6:	713b      	strb	r3, [r7, #4]
  SPI_Transmit(&zerob, 1);
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2101      	movs	r1, #1
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff63 	bl	8000fc8 <SPI_Transmit>

  HAL_GPIO_WritePin(GPIOB, DISP_CS_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001108:	4803      	ldr	r0, [pc, #12]	@ (8001118 <writeBuffer+0x120>)
 800110a:	f005 fe31 	bl	8006d70 <HAL_GPIO_WritePin>

}
 800110e:	bf00      	nop
 8001110:	371c      	adds	r7, #28
 8001112:	46bd      	mov	sp, r7
 8001114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001118:	42020400 	.word	0x42020400
 800111c:	200007e2 	.word	0x200007e2
 8001120:	51eb851f 	.word	0x51eb851f
 8001124:	200007e4 	.word	0x200007e4

08001128 <init_buffer>:

void init_buffer(){
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b085      	sub	sp, #20
 800112c:	af04      	add	r7, sp, #16


	  // set all pixels in frame buffer to 1
	  for (i = 0; i < 12000; i++) {
 800112e:	4b60      	ldr	r3, [pc, #384]	@ (80012b0 <init_buffer+0x188>)
 8001130:	2200      	movs	r2, #0
 8001132:	801a      	strh	r2, [r3, #0]
 8001134:	e00d      	b.n	8001152 <init_buffer+0x2a>
		  sharpmem_buffer[i] = 255;
 8001136:	4b5e      	ldr	r3, [pc, #376]	@ (80012b0 <init_buffer+0x188>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	b29b      	uxth	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	4b5d      	ldr	r3, [pc, #372]	@ (80012b4 <init_buffer+0x18c>)
 8001140:	21ff      	movs	r1, #255	@ 0xff
 8001142:	5499      	strb	r1, [r3, r2]
	  for (i = 0; i < 12000; i++) {
 8001144:	4b5a      	ldr	r3, [pc, #360]	@ (80012b0 <init_buffer+0x188>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	b29b      	uxth	r3, r3
 800114a:	3301      	adds	r3, #1
 800114c:	b29a      	uxth	r2, r3
 800114e:	4b58      	ldr	r3, [pc, #352]	@ (80012b0 <init_buffer+0x188>)
 8001150:	801a      	strh	r2, [r3, #0]
 8001152:	4b57      	ldr	r3, [pc, #348]	@ (80012b0 <init_buffer+0x188>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	b29b      	uxth	r3, r3
 8001158:	f642 62df 	movw	r2, #11999	@ 0x2edf
 800115c:	4293      	cmp	r3, r2
 800115e:	d9ea      	bls.n	8001136 <init_buffer+0xe>
	  writeLine(30, 110, 260, 110, 0);

	  writeLine(30, 130, 30, 230, 0);
	  writeLine(30, 230, 260, 230, 0); */

	  writeLine(40, 50, 40, 200, 0);
 8001160:	2300      	movs	r3, #0
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	23c8      	movs	r3, #200	@ 0xc8
 8001166:	2228      	movs	r2, #40	@ 0x28
 8001168:	2132      	movs	r1, #50	@ 0x32
 800116a:	2028      	movs	r0, #40	@ 0x28
 800116c:	f000 fa20 	bl	80015b0 <writeLine>
	  writeLine(40, 200, 320, 200, 0);
 8001170:	2300      	movs	r3, #0
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	23c8      	movs	r3, #200	@ 0xc8
 8001176:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800117a:	21c8      	movs	r1, #200	@ 0xc8
 800117c:	2028      	movs	r0, #40	@ 0x28
 800117e:	f000 fa17 	bl	80015b0 <writeLine>
		  uint16_t y2_mapped =  map(V_sc[i+1]/Z_sc[i+1], 0, .075, 110, 10);

		  writeLine(x1_mapped, y1_mapped, x2_mapped, y2_mapped, 0);
	  }*/

	  for (i = 0; i < 60; i++) {
 8001182:	4b4b      	ldr	r3, [pc, #300]	@ (80012b0 <init_buffer+0x188>)
 8001184:	2200      	movs	r2, #0
 8001186:	801a      	strh	r2, [r3, #0]
 8001188:	e156      	b.n	8001438 <init_buffer+0x310>


			  if(A_buffer_active == 1){
 800118a:	4b4b      	ldr	r3, [pc, #300]	@ (80012b8 <init_buffer+0x190>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b01      	cmp	r3, #1
 8001192:	f040 80ab 	bne.w	80012ec <init_buffer+0x1c4>
				  x1_mapped =  map(V_sc_interp_A[i], 0, 5, 40, 320);
 8001196:	4b46      	ldr	r3, [pc, #280]	@ (80012b0 <init_buffer+0x188>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4a47      	ldr	r2, [pc, #284]	@ (80012bc <init_buffer+0x194>)
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	ed9f 2a46 	vldr	s4, [pc, #280]	@ 80012c0 <init_buffer+0x198>
 80011aa:	eddf 1a46 	vldr	s3, [pc, #280]	@ 80012c4 <init_buffer+0x19c>
 80011ae:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 80011b2:	eddf 0a45 	vldr	s1, [pc, #276]	@ 80012c8 <init_buffer+0x1a0>
 80011b6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ba:	f000 fd87 	bl	8001ccc <map>
 80011be:	eef0 7a40 	vmov.f32	s15, s0
 80011c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011c6:	ee17 3a90 	vmov	r3, s15
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b3f      	ldr	r3, [pc, #252]	@ (80012cc <init_buffer+0x1a4>)
 80011ce:	801a      	strh	r2, [r3, #0]
				  x2_mapped =  map(V_sc_interp_A[i+1], 0, 5, 40, 320);
 80011d0:	4b37      	ldr	r3, [pc, #220]	@ (80012b0 <init_buffer+0x188>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	3301      	adds	r3, #1
 80011d8:	4a38      	ldr	r2, [pc, #224]	@ (80012bc <init_buffer+0x194>)
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	ed9f 2a37 	vldr	s4, [pc, #220]	@ 80012c0 <init_buffer+0x198>
 80011e6:	eddf 1a37 	vldr	s3, [pc, #220]	@ 80012c4 <init_buffer+0x19c>
 80011ea:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 80011ee:	eddf 0a36 	vldr	s1, [pc, #216]	@ 80012c8 <init_buffer+0x1a0>
 80011f2:	eeb0 0a67 	vmov.f32	s0, s15
 80011f6:	f000 fd69 	bl	8001ccc <map>
 80011fa:	eef0 7a40 	vmov.f32	s15, s0
 80011fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001202:	ee17 3a90 	vmov	r3, s15
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b31      	ldr	r3, [pc, #196]	@ (80012d0 <init_buffer+0x1a8>)
 800120a:	801a      	strh	r2, [r3, #0]
				  y1_mapped =  map(V_sc_interp_A[i]/Z_sc_interp_A[i], 0, .05, 200, 50);
 800120c:	4b28      	ldr	r3, [pc, #160]	@ (80012b0 <init_buffer+0x188>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	b29b      	uxth	r3, r3
 8001212:	4a2a      	ldr	r2, [pc, #168]	@ (80012bc <init_buffer+0x194>)
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	ed93 7a00 	vldr	s14, [r3]
 800121c:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <init_buffer+0x188>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	b29b      	uxth	r3, r3
 8001222:	4a2c      	ldr	r2, [pc, #176]	@ (80012d4 <init_buffer+0x1ac>)
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	edd3 7a00 	vldr	s15, [r3]
 800122c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001230:	ed9f 2a29 	vldr	s4, [pc, #164]	@ 80012d8 <init_buffer+0x1b0>
 8001234:	eddf 1a29 	vldr	s3, [pc, #164]	@ 80012dc <init_buffer+0x1b4>
 8001238:	ed9f 1a29 	vldr	s2, [pc, #164]	@ 80012e0 <init_buffer+0x1b8>
 800123c:	eddf 0a22 	vldr	s1, [pc, #136]	@ 80012c8 <init_buffer+0x1a0>
 8001240:	eeb0 0a66 	vmov.f32	s0, s13
 8001244:	f000 fd42 	bl	8001ccc <map>
 8001248:	eef0 7a40 	vmov.f32	s15, s0
 800124c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001250:	ee17 3a90 	vmov	r3, s15
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b23      	ldr	r3, [pc, #140]	@ (80012e4 <init_buffer+0x1bc>)
 8001258:	801a      	strh	r2, [r3, #0]
				  y2_mapped =  map(V_sc_interp_A[i+1]/Z_sc_interp_A[i+1], 0, .05, 200, 50);
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <init_buffer+0x188>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	b29b      	uxth	r3, r3
 8001260:	3301      	adds	r3, #1
 8001262:	4a16      	ldr	r2, [pc, #88]	@ (80012bc <init_buffer+0x194>)
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	ed93 7a00 	vldr	s14, [r3]
 800126c:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <init_buffer+0x188>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	b29b      	uxth	r3, r3
 8001272:	3301      	adds	r3, #1
 8001274:	4a17      	ldr	r2, [pc, #92]	@ (80012d4 <init_buffer+0x1ac>)
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	edd3 7a00 	vldr	s15, [r3]
 800127e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001282:	ed9f 2a15 	vldr	s4, [pc, #84]	@ 80012d8 <init_buffer+0x1b0>
 8001286:	eddf 1a15 	vldr	s3, [pc, #84]	@ 80012dc <init_buffer+0x1b4>
 800128a:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 80012e0 <init_buffer+0x1b8>
 800128e:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 80012c8 <init_buffer+0x1a0>
 8001292:	eeb0 0a66 	vmov.f32	s0, s13
 8001296:	f000 fd19 	bl	8001ccc <map>
 800129a:	eef0 7a40 	vmov.f32	s15, s0
 800129e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a2:	ee17 3a90 	vmov	r3, s15
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <init_buffer+0x1c0>)
 80012aa:	801a      	strh	r2, [r3, #0]
 80012ac:	e0a9      	b.n	8001402 <init_buffer+0x2da>
 80012ae:	bf00      	nop
 80012b0:	200037b4 	.word	0x200037b4
 80012b4:	200007e4 	.word	0x200007e4
 80012b8:	20000000 	.word	0x20000000
 80012bc:	200037b8 	.word	0x200037b8
 80012c0:	43a00000 	.word	0x43a00000
 80012c4:	42200000 	.word	0x42200000
 80012c8:	00000000 	.word	0x00000000
 80012cc:	200037ac 	.word	0x200037ac
 80012d0:	200037ae 	.word	0x200037ae
 80012d4:	200038b4 	.word	0x200038b4
 80012d8:	42480000 	.word	0x42480000
 80012dc:	43480000 	.word	0x43480000
 80012e0:	3d4ccccd 	.word	0x3d4ccccd
 80012e4:	200037b0 	.word	0x200037b0
 80012e8:	200037b2 	.word	0x200037b2
			  }
			  else{
				  x1_mapped =  map(V_sc_interp_B[i], 0, 5, 40, 320);
 80012ec:	4b5d      	ldr	r3, [pc, #372]	@ (8001464 <init_buffer+0x33c>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4a5d      	ldr	r2, [pc, #372]	@ (8001468 <init_buffer+0x340>)
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ed9f 2a5b 	vldr	s4, [pc, #364]	@ 800146c <init_buffer+0x344>
 8001300:	eddf 1a5b 	vldr	s3, [pc, #364]	@ 8001470 <init_buffer+0x348>
 8001304:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8001308:	eddf 0a5a 	vldr	s1, [pc, #360]	@ 8001474 <init_buffer+0x34c>
 800130c:	eeb0 0a67 	vmov.f32	s0, s15
 8001310:	f000 fcdc 	bl	8001ccc <map>
 8001314:	eef0 7a40 	vmov.f32	s15, s0
 8001318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800131c:	ee17 3a90 	vmov	r3, s15
 8001320:	b29a      	uxth	r2, r3
 8001322:	4b55      	ldr	r3, [pc, #340]	@ (8001478 <init_buffer+0x350>)
 8001324:	801a      	strh	r2, [r3, #0]
				  x2_mapped =  map(V_sc_interp_B[i+1], 0, 5, 40, 320);
 8001326:	4b4f      	ldr	r3, [pc, #316]	@ (8001464 <init_buffer+0x33c>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	3301      	adds	r3, #1
 800132e:	4a4e      	ldr	r2, [pc, #312]	@ (8001468 <init_buffer+0x340>)
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	edd3 7a00 	vldr	s15, [r3]
 8001338:	ed9f 2a4c 	vldr	s4, [pc, #304]	@ 800146c <init_buffer+0x344>
 800133c:	eddf 1a4c 	vldr	s3, [pc, #304]	@ 8001470 <init_buffer+0x348>
 8001340:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8001344:	eddf 0a4b 	vldr	s1, [pc, #300]	@ 8001474 <init_buffer+0x34c>
 8001348:	eeb0 0a67 	vmov.f32	s0, s15
 800134c:	f000 fcbe 	bl	8001ccc <map>
 8001350:	eef0 7a40 	vmov.f32	s15, s0
 8001354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001358:	ee17 3a90 	vmov	r3, s15
 800135c:	b29a      	uxth	r2, r3
 800135e:	4b47      	ldr	r3, [pc, #284]	@ (800147c <init_buffer+0x354>)
 8001360:	801a      	strh	r2, [r3, #0]
				  y1_mapped =  map(V_sc_interp_B[i]/Z_sc_interp_B[i], 0, .05, 200, 50);
 8001362:	4b40      	ldr	r3, [pc, #256]	@ (8001464 <init_buffer+0x33c>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	b29b      	uxth	r3, r3
 8001368:	4a3f      	ldr	r2, [pc, #252]	@ (8001468 <init_buffer+0x340>)
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	ed93 7a00 	vldr	s14, [r3]
 8001372:	4b3c      	ldr	r3, [pc, #240]	@ (8001464 <init_buffer+0x33c>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	b29b      	uxth	r3, r3
 8001378:	4a41      	ldr	r2, [pc, #260]	@ (8001480 <init_buffer+0x358>)
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001386:	ed9f 2a3f 	vldr	s4, [pc, #252]	@ 8001484 <init_buffer+0x35c>
 800138a:	eddf 1a3f 	vldr	s3, [pc, #252]	@ 8001488 <init_buffer+0x360>
 800138e:	ed9f 1a3f 	vldr	s2, [pc, #252]	@ 800148c <init_buffer+0x364>
 8001392:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8001474 <init_buffer+0x34c>
 8001396:	eeb0 0a66 	vmov.f32	s0, s13
 800139a:	f000 fc97 	bl	8001ccc <map>
 800139e:	eef0 7a40 	vmov.f32	s15, s0
 80013a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013a6:	ee17 3a90 	vmov	r3, s15
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	4b38      	ldr	r3, [pc, #224]	@ (8001490 <init_buffer+0x368>)
 80013ae:	801a      	strh	r2, [r3, #0]
				  y2_mapped =  map(V_sc_interp_B[i+1]/Z_sc_interp_B[i+1], 0, .05, 200, 50);
 80013b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001464 <init_buffer+0x33c>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	3301      	adds	r3, #1
 80013b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001468 <init_buffer+0x340>)
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	ed93 7a00 	vldr	s14, [r3]
 80013c2:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <init_buffer+0x33c>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	3301      	adds	r3, #1
 80013ca:	4a2d      	ldr	r2, [pc, #180]	@ (8001480 <init_buffer+0x358>)
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013d8:	ed9f 2a2a 	vldr	s4, [pc, #168]	@ 8001484 <init_buffer+0x35c>
 80013dc:	eddf 1a2a 	vldr	s3, [pc, #168]	@ 8001488 <init_buffer+0x360>
 80013e0:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 800148c <init_buffer+0x364>
 80013e4:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8001474 <init_buffer+0x34c>
 80013e8:	eeb0 0a66 	vmov.f32	s0, s13
 80013ec:	f000 fc6e 	bl	8001ccc <map>
 80013f0:	eef0 7a40 	vmov.f32	s15, s0
 80013f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f8:	ee17 3a90 	vmov	r3, s15
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	4b25      	ldr	r3, [pc, #148]	@ (8001494 <init_buffer+0x36c>)
 8001400:	801a      	strh	r2, [r3, #0]
			  }
		  writeLine(x1_mapped, y1_mapped, x2_mapped, y2_mapped, 0);
 8001402:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <init_buffer+0x350>)
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	b29b      	uxth	r3, r3
 8001408:	b218      	sxth	r0, r3
 800140a:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <init_buffer+0x368>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	b219      	sxth	r1, r3
 8001412:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <init_buffer+0x354>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	b21a      	sxth	r2, r3
 800141a:	4b1e      	ldr	r3, [pc, #120]	@ (8001494 <init_buffer+0x36c>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	b29b      	uxth	r3, r3
 8001420:	b21b      	sxth	r3, r3
 8001422:	2400      	movs	r4, #0
 8001424:	9400      	str	r4, [sp, #0]
 8001426:	f000 f8c3 	bl	80015b0 <writeLine>
	  for (i = 0; i < 60; i++) {
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <init_buffer+0x33c>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	3301      	adds	r3, #1
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <init_buffer+0x33c>)
 8001436:	801a      	strh	r2, [r3, #0]
 8001438:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <init_buffer+0x33c>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001440:	f67f aea3 	bls.w	800118a <init_buffer+0x62>
	  }

	  drawString(120,205,"Output Voltage [V]", 0, 1, 1, 1);
 8001444:	2301      	movs	r3, #1
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	2301      	movs	r3, #1
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	2301      	movs	r3, #1
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	2300      	movs	r3, #0
 8001452:	4a11      	ldr	r2, [pc, #68]	@ (8001498 <init_buffer+0x370>)
 8001454:	21cd      	movs	r1, #205	@ 0xcd
 8001456:	2078      	movs	r0, #120	@ 0x78
 8001458:	f000 fbae 	bl	8001bb8 <drawString>
	  fillRect(100,50,50,50,0);
	  drawChar(25, 25, 'a', 0, 1, 2, 2);
	  drawString(25, 50, "Vout=2.436 V",  0, 1, 1, 1);

*/
}
 800145c:	bf00      	nop
 800145e:	3704      	adds	r7, #4
 8001460:	46bd      	mov	sp, r7
 8001462:	bd90      	pop	{r4, r7, pc}
 8001464:	200037b4 	.word	0x200037b4
 8001468:	200039b0 	.word	0x200039b0
 800146c:	43a00000 	.word	0x43a00000
 8001470:	42200000 	.word	0x42200000
 8001474:	00000000 	.word	0x00000000
 8001478:	200037ac 	.word	0x200037ac
 800147c:	200037ae 	.word	0x200037ae
 8001480:	20003aac 	.word	0x20003aac
 8001484:	42480000 	.word	0x42480000
 8001488:	43480000 	.word	0x43480000
 800148c:	3d4ccccd 	.word	0x3d4ccccd
 8001490:	200037b0 	.word	0x200037b0
 8001494:	200037b2 	.word	0x200037b2
 8001498:	0800f3d0 	.word	0x0800f3d0

0800149c <clearDisplay>:

void clearDisplay() {
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
  // MLCD write line command 0x80, reversed 0x01
  // MLCD clear memory command 0x20, reversed 0x04
  // MLCD static mode command 0x00
  // MLCD VCOM bit 0x40 , reversed 0x02
  HAL_GPIO_WritePin(GPIOB, DISP_CS_Pin, GPIO_PIN_SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014a8:	4811      	ldr	r0, [pc, #68]	@ (80014f0 <clearDisplay+0x54>)
 80014aa:	f005 fc61 	bl	8006d70 <HAL_GPIO_WritePin>
  uint8_t clear_cmd[] = {(0x04 | Vcom), 0};
 80014ae:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <clearDisplay+0x58>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	713b      	strb	r3, [r7, #4]
 80014ba:	2300      	movs	r3, #0
 80014bc:	717b      	strb	r3, [r7, #5]
  SPI_Transmit(&clear_cmd, 2);
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2102      	movs	r1, #2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fd80 	bl	8000fc8 <SPI_Transmit>
  Vcom = Vcom ? 0x00 : 0x02;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <clearDisplay+0x58>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <clearDisplay+0x38>
 80014d0:	2200      	movs	r2, #0
 80014d2:	e000      	b.n	80014d6 <clearDisplay+0x3a>
 80014d4:	2202      	movs	r2, #2
 80014d6:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <clearDisplay+0x58>)
 80014d8:	701a      	strb	r2, [r3, #0]
  //uint8_t temp = (0x04 | Vcom);
  //SPI_Transmit(&temp);
  //uint8_t zerob = 0b00000000;
  //SPI_Transmit(&zerob);
  HAL_GPIO_WritePin(GPIOB, DISP_CS_Pin, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014e0:	4803      	ldr	r0, [pc, #12]	@ (80014f0 <clearDisplay+0x54>)
 80014e2:	f005 fc45 	bl	8006d70 <HAL_GPIO_WritePin>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	42020400 	.word	0x42020400
 80014f4:	200007e2 	.word	0x200007e2

080014f8 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color){
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	80fb      	strh	r3, [r7, #6]
 8001502:	460b      	mov	r3, r1
 8001504:	80bb      	strh	r3, [r7, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= 400) || (y < 0) || (y >= 240))
 800150a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db41      	blt.n	8001596 <drawPixel+0x9e>
 8001512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001516:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800151a:	da3c      	bge.n	8001596 <drawPixel+0x9e>
 800151c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db38      	blt.n	8001596 <drawPixel+0x9e>
 8001524:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001528:	2bef      	cmp	r3, #239	@ 0xef
 800152a:	dc34      	bgt.n	8001596 <drawPixel+0x9e>
	    return;

	  if (color) {
 800152c:	887b      	ldrh	r3, [r7, #2]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d018      	beq.n	8001564 <drawPixel+0x6c>
	    sharpmem_buffer[(y * 400 + x) / 8] |= set[x & 7];
 8001532:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001536:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800153a:	fb03 f202 	mul.w	r2, r3, r2
 800153e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001542:	4413      	add	r3, r2
 8001544:	2b00      	cmp	r3, #0
 8001546:	da00      	bge.n	800154a <drawPixel+0x52>
 8001548:	3307      	adds	r3, #7
 800154a:	10db      	asrs	r3, r3, #3
 800154c:	4a15      	ldr	r2, [pc, #84]	@ (80015a4 <drawPixel+0xac>)
 800154e:	5cd1      	ldrb	r1, [r2, r3]
 8001550:	88fa      	ldrh	r2, [r7, #6]
 8001552:	f002 0207 	and.w	r2, r2, #7
 8001556:	4814      	ldr	r0, [pc, #80]	@ (80015a8 <drawPixel+0xb0>)
 8001558:	5c82      	ldrb	r2, [r0, r2]
 800155a:	430a      	orrs	r2, r1
 800155c:	b2d1      	uxtb	r1, r2
 800155e:	4a11      	ldr	r2, [pc, #68]	@ (80015a4 <drawPixel+0xac>)
 8001560:	54d1      	strb	r1, [r2, r3]
 8001562:	e019      	b.n	8001598 <drawPixel+0xa0>
	  } else {
	    sharpmem_buffer[(y * 400 + x) / 8] &= clr[x & 7];
 8001564:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001568:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800156c:	fb03 f202 	mul.w	r2, r3, r2
 8001570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001574:	4413      	add	r3, r2
 8001576:	2b00      	cmp	r3, #0
 8001578:	da00      	bge.n	800157c <drawPixel+0x84>
 800157a:	3307      	adds	r3, #7
 800157c:	10db      	asrs	r3, r3, #3
 800157e:	4a09      	ldr	r2, [pc, #36]	@ (80015a4 <drawPixel+0xac>)
 8001580:	5cd1      	ldrb	r1, [r2, r3]
 8001582:	88fa      	ldrh	r2, [r7, #6]
 8001584:	f002 0207 	and.w	r2, r2, #7
 8001588:	4808      	ldr	r0, [pc, #32]	@ (80015ac <drawPixel+0xb4>)
 800158a:	5c82      	ldrb	r2, [r0, r2]
 800158c:	400a      	ands	r2, r1
 800158e:	b2d1      	uxtb	r1, r2
 8001590:	4a04      	ldr	r2, [pc, #16]	@ (80015a4 <drawPixel+0xac>)
 8001592:	54d1      	strb	r1, [r2, r3]
 8001594:	e000      	b.n	8001598 <drawPixel+0xa0>
	    return;
 8001596:	bf00      	nop
	  }
}
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	200007e4 	.word	0x200007e4
 80015a8:	0801056c 	.word	0x0801056c
 80015ac:	08010574 	.word	0x08010574

080015b0 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b089      	sub	sp, #36	@ 0x24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4604      	mov	r4, r0
 80015b8:	4608      	mov	r0, r1
 80015ba:	4611      	mov	r1, r2
 80015bc:	461a      	mov	r2, r3
 80015be:	4623      	mov	r3, r4
 80015c0:	80fb      	strh	r3, [r7, #6]
 80015c2:	4603      	mov	r3, r0
 80015c4:	80bb      	strh	r3, [r7, #4]
 80015c6:	460b      	mov	r3, r1
 80015c8:	807b      	strh	r3, [r7, #2]
 80015ca:	4613      	mov	r3, r2
 80015cc:	803b      	strh	r3, [r7, #0]

  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80015ce:	f9b7 2000 	ldrsh.w	r2, [r7]
 80015d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80015dc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80015e0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80015e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e8:	1acb      	subs	r3, r1, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	bfb8      	it	lt
 80015ee:	425b      	neglt	r3, r3
 80015f0:	429a      	cmp	r2, r3
 80015f2:	bfcc      	ite	gt
 80015f4:	2301      	movgt	r3, #1
 80015f6:	2300      	movle	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	837b      	strh	r3, [r7, #26]
  if (steep) {
 80015fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00b      	beq.n	800161c <writeLine+0x6c>
    _swap_int16_t(x0, y0);
 8001604:	88fb      	ldrh	r3, [r7, #6]
 8001606:	833b      	strh	r3, [r7, #24]
 8001608:	88bb      	ldrh	r3, [r7, #4]
 800160a:	80fb      	strh	r3, [r7, #6]
 800160c:	8b3b      	ldrh	r3, [r7, #24]
 800160e:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8001610:	887b      	ldrh	r3, [r7, #2]
 8001612:	82fb      	strh	r3, [r7, #22]
 8001614:	883b      	ldrh	r3, [r7, #0]
 8001616:	807b      	strh	r3, [r7, #2]
 8001618:	8afb      	ldrh	r3, [r7, #22]
 800161a:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 800161c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001620:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001624:	429a      	cmp	r2, r3
 8001626:	dd0b      	ble.n	8001640 <writeLine+0x90>
    _swap_int16_t(x0, x1);
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	82bb      	strh	r3, [r7, #20]
 800162c:	887b      	ldrh	r3, [r7, #2]
 800162e:	80fb      	strh	r3, [r7, #6]
 8001630:	8abb      	ldrh	r3, [r7, #20]
 8001632:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 8001634:	88bb      	ldrh	r3, [r7, #4]
 8001636:	827b      	strh	r3, [r7, #18]
 8001638:	883b      	ldrh	r3, [r7, #0]
 800163a:	80bb      	strh	r3, [r7, #4]
 800163c:	8a7b      	ldrh	r3, [r7, #18]
 800163e:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8001640:	887a      	ldrh	r2, [r7, #2]
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	b29b      	uxth	r3, r3
 8001648:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 800164a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800164e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	bfb8      	it	lt
 8001658:	425b      	neglt	r3, r3
 800165a:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 800165c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001660:	0fda      	lsrs	r2, r3, #31
 8001662:	4413      	add	r3, r2
 8001664:	105b      	asrs	r3, r3, #1
 8001666:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 8001668:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800166c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001670:	429a      	cmp	r2, r3
 8001672:	da02      	bge.n	800167a <writeLine+0xca>
    ystep = 1;
 8001674:	2301      	movs	r3, #1
 8001676:	83bb      	strh	r3, [r7, #28]
 8001678:	e031      	b.n	80016de <writeLine+0x12e>
  } else {
    ystep = -1;
 800167a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800167e:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0 <= x1; x0++) {
 8001680:	e02d      	b.n	80016de <writeLine+0x12e>
    if (steep) {
 8001682:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <writeLine+0xec>
      drawPixel(y0, x0, color);
 800168a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800168c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001690:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff2f 	bl	80014f8 <drawPixel>
 800169a:	e007      	b.n	80016ac <writeLine+0xfc>
    } else {
      drawPixel(x0, y0, color);
 800169c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800169e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80016a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff26 	bl	80014f8 <drawPixel>
    }
    err -= dy;
 80016ac:	8bfa      	ldrh	r2, [r7, #30]
 80016ae:	89fb      	ldrh	r3, [r7, #14]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 80016b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	da09      	bge.n	80016d2 <writeLine+0x122>
      y0 += ystep;
 80016be:	88ba      	ldrh	r2, [r7, #4]
 80016c0:	8bbb      	ldrh	r3, [r7, #28]
 80016c2:	4413      	add	r3, r2
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	80bb      	strh	r3, [r7, #4]
      err += dx;
 80016c8:	8bfa      	ldrh	r2, [r7, #30]
 80016ca:	8a3b      	ldrh	r3, [r7, #16]
 80016cc:	4413      	add	r3, r2
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	83fb      	strh	r3, [r7, #30]
  for (; x0 <= x1; x0++) {
 80016d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	3301      	adds	r3, #1
 80016da:	b29b      	uxth	r3, r3
 80016dc:	80fb      	strh	r3, [r7, #6]
 80016de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	ddcb      	ble.n	8001682 <writeLine+0xd2>
    }
  }
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	3724      	adds	r7, #36	@ 0x24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd90      	pop	{r4, r7, pc}

080016f4 <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4604      	mov	r4, r0
 80016fc:	4608      	mov	r0, r1
 80016fe:	4611      	mov	r1, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4623      	mov	r3, r4
 8001704:	80fb      	strh	r3, [r7, #6]
 8001706:	4603      	mov	r3, r0
 8001708:	80bb      	strh	r3, [r7, #4]
 800170a:	460b      	mov	r3, r1
 800170c:	807b      	strh	r3, [r7, #2]
 800170e:	4613      	mov	r3, r2
 8001710:	803b      	strh	r3, [r7, #0]

  int16_t f = 1 - r;
 8001712:	887b      	ldrh	r3, [r7, #2]
 8001714:	f1c3 0301 	rsb	r3, r3, #1
 8001718:	b29b      	uxth	r3, r3
 800171a:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 800171c:	2301      	movs	r3, #1
 800171e:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8001720:	887b      	ldrh	r3, [r7, #2]
 8001722:	461a      	mov	r2, r3
 8001724:	03d2      	lsls	r2, r2, #15
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	b29b      	uxth	r3, r3
 800172c:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 8001732:	887b      	ldrh	r3, [r7, #2]
 8001734:	81fb      	strh	r3, [r7, #14]

  drawPixel(x0, y0 + r, color);
 8001736:	88ba      	ldrh	r2, [r7, #4]
 8001738:	887b      	ldrh	r3, [r7, #2]
 800173a:	4413      	add	r3, r2
 800173c:	b29b      	uxth	r3, r3
 800173e:	b219      	sxth	r1, r3
 8001740:	883a      	ldrh	r2, [r7, #0]
 8001742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fed6 	bl	80014f8 <drawPixel>
  drawPixel(x0, y0 - r, color);
 800174c:	88ba      	ldrh	r2, [r7, #4]
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	b29b      	uxth	r3, r3
 8001754:	b219      	sxth	r1, r3
 8001756:	883a      	ldrh	r2, [r7, #0]
 8001758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fecb 	bl	80014f8 <drawPixel>
  drawPixel(x0 + r, y0, color);
 8001762:	88fa      	ldrh	r2, [r7, #6]
 8001764:	887b      	ldrh	r3, [r7, #2]
 8001766:	4413      	add	r3, r2
 8001768:	b29b      	uxth	r3, r3
 800176a:	b21b      	sxth	r3, r3
 800176c:	883a      	ldrh	r2, [r7, #0]
 800176e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fec0 	bl	80014f8 <drawPixel>
  drawPixel(x0 - r, y0, color);
 8001778:	88fa      	ldrh	r2, [r7, #6]
 800177a:	887b      	ldrh	r3, [r7, #2]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	b29b      	uxth	r3, r3
 8001780:	b21b      	sxth	r3, r3
 8001782:	883a      	ldrh	r2, [r7, #0]
 8001784:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff feb5 	bl	80014f8 <drawPixel>

  while (x < y) {
 800178e:	e091      	b.n	80018b4 <drawCircle+0x1c0>
    if (f >= 0) {
 8001790:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0e      	blt.n	80017b6 <drawCircle+0xc2>
      y--;
 8001798:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800179c:	b29b      	uxth	r3, r3
 800179e:	3b01      	subs	r3, #1
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 80017a4:	8a7b      	ldrh	r3, [r7, #18]
 80017a6:	3302      	adds	r3, #2
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 80017ac:	8afa      	ldrh	r2, [r7, #22]
 80017ae:	8a7b      	ldrh	r3, [r7, #18]
 80017b0:	4413      	add	r3, r2
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 80017b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	3301      	adds	r3, #1
 80017be:	b29b      	uxth	r3, r3
 80017c0:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 80017c2:	8abb      	ldrh	r3, [r7, #20]
 80017c4:	3302      	adds	r3, #2
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 80017ca:	8afa      	ldrh	r2, [r7, #22]
 80017cc:	8abb      	ldrh	r3, [r7, #20]
 80017ce:	4413      	add	r3, r2
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	82fb      	strh	r3, [r7, #22]

    drawPixel(x0 + x, y0 + y, color);
 80017d4:	88fa      	ldrh	r2, [r7, #6]
 80017d6:	8a3b      	ldrh	r3, [r7, #16]
 80017d8:	4413      	add	r3, r2
 80017da:	b29b      	uxth	r3, r3
 80017dc:	b218      	sxth	r0, r3
 80017de:	88ba      	ldrh	r2, [r7, #4]
 80017e0:	89fb      	ldrh	r3, [r7, #14]
 80017e2:	4413      	add	r3, r2
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	883a      	ldrh	r2, [r7, #0]
 80017ea:	4619      	mov	r1, r3
 80017ec:	f7ff fe84 	bl	80014f8 <drawPixel>
    drawPixel(x0 - x, y0 + y, color);
 80017f0:	88fa      	ldrh	r2, [r7, #6]
 80017f2:	8a3b      	ldrh	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	b218      	sxth	r0, r3
 80017fa:	88ba      	ldrh	r2, [r7, #4]
 80017fc:	89fb      	ldrh	r3, [r7, #14]
 80017fe:	4413      	add	r3, r2
 8001800:	b29b      	uxth	r3, r3
 8001802:	b21b      	sxth	r3, r3
 8001804:	883a      	ldrh	r2, [r7, #0]
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff fe76 	bl	80014f8 <drawPixel>
    drawPixel(x0 + x, y0 - y, color);
 800180c:	88fa      	ldrh	r2, [r7, #6]
 800180e:	8a3b      	ldrh	r3, [r7, #16]
 8001810:	4413      	add	r3, r2
 8001812:	b29b      	uxth	r3, r3
 8001814:	b218      	sxth	r0, r3
 8001816:	88ba      	ldrh	r2, [r7, #4]
 8001818:	89fb      	ldrh	r3, [r7, #14]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	b29b      	uxth	r3, r3
 800181e:	b21b      	sxth	r3, r3
 8001820:	883a      	ldrh	r2, [r7, #0]
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff fe68 	bl	80014f8 <drawPixel>
    drawPixel(x0 - x, y0 - y, color);
 8001828:	88fa      	ldrh	r2, [r7, #6]
 800182a:	8a3b      	ldrh	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	b29b      	uxth	r3, r3
 8001830:	b218      	sxth	r0, r3
 8001832:	88ba      	ldrh	r2, [r7, #4]
 8001834:	89fb      	ldrh	r3, [r7, #14]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	b29b      	uxth	r3, r3
 800183a:	b21b      	sxth	r3, r3
 800183c:	883a      	ldrh	r2, [r7, #0]
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff fe5a 	bl	80014f8 <drawPixel>
    drawPixel(x0 + y, y0 + x, color);
 8001844:	88fa      	ldrh	r2, [r7, #6]
 8001846:	89fb      	ldrh	r3, [r7, #14]
 8001848:	4413      	add	r3, r2
 800184a:	b29b      	uxth	r3, r3
 800184c:	b218      	sxth	r0, r3
 800184e:	88ba      	ldrh	r2, [r7, #4]
 8001850:	8a3b      	ldrh	r3, [r7, #16]
 8001852:	4413      	add	r3, r2
 8001854:	b29b      	uxth	r3, r3
 8001856:	b21b      	sxth	r3, r3
 8001858:	883a      	ldrh	r2, [r7, #0]
 800185a:	4619      	mov	r1, r3
 800185c:	f7ff fe4c 	bl	80014f8 <drawPixel>
    drawPixel(x0 - y, y0 + x, color);
 8001860:	88fa      	ldrh	r2, [r7, #6]
 8001862:	89fb      	ldrh	r3, [r7, #14]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	b29b      	uxth	r3, r3
 8001868:	b218      	sxth	r0, r3
 800186a:	88ba      	ldrh	r2, [r7, #4]
 800186c:	8a3b      	ldrh	r3, [r7, #16]
 800186e:	4413      	add	r3, r2
 8001870:	b29b      	uxth	r3, r3
 8001872:	b21b      	sxth	r3, r3
 8001874:	883a      	ldrh	r2, [r7, #0]
 8001876:	4619      	mov	r1, r3
 8001878:	f7ff fe3e 	bl	80014f8 <drawPixel>
    drawPixel(x0 + y, y0 - x, color);
 800187c:	88fa      	ldrh	r2, [r7, #6]
 800187e:	89fb      	ldrh	r3, [r7, #14]
 8001880:	4413      	add	r3, r2
 8001882:	b29b      	uxth	r3, r3
 8001884:	b218      	sxth	r0, r3
 8001886:	88ba      	ldrh	r2, [r7, #4]
 8001888:	8a3b      	ldrh	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	b29b      	uxth	r3, r3
 800188e:	b21b      	sxth	r3, r3
 8001890:	883a      	ldrh	r2, [r7, #0]
 8001892:	4619      	mov	r1, r3
 8001894:	f7ff fe30 	bl	80014f8 <drawPixel>
    drawPixel(x0 - y, y0 - x, color);
 8001898:	88fa      	ldrh	r2, [r7, #6]
 800189a:	89fb      	ldrh	r3, [r7, #14]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	b29b      	uxth	r3, r3
 80018a0:	b218      	sxth	r0, r3
 80018a2:	88ba      	ldrh	r2, [r7, #4]
 80018a4:	8a3b      	ldrh	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	b21b      	sxth	r3, r3
 80018ac:	883a      	ldrh	r2, [r7, #0]
 80018ae:	4619      	mov	r1, r3
 80018b0:	f7ff fe22 	bl	80014f8 <drawPixel>
  while (x < y) {
 80018b4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80018b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018bc:	429a      	cmp	r2, r3
 80018be:	f6ff af67 	blt.w	8001790 <drawCircle+0x9c>
  }
}
 80018c2:	bf00      	nop
 80018c4:	bf00      	nop
 80018c6:	371c      	adds	r7, #28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd90      	pop	{r4, r7, pc}

080018cc <drawFastVLine>:

  drawFastRawHLine(x, y, w, color);

}

void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	4604      	mov	r4, r0
 80018d4:	4608      	mov	r0, r1
 80018d6:	4611      	mov	r1, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	4623      	mov	r3, r4
 80018dc:	80fb      	strh	r3, [r7, #6]
 80018de:	4603      	mov	r3, r0
 80018e0:	80bb      	strh	r3, [r7, #4]
 80018e2:	460b      	mov	r3, r1
 80018e4:	807b      	strh	r3, [r7, #2]
 80018e6:	4613      	mov	r3, r2
 80018e8:	803b      	strh	r3, [r7, #0]
  if (y + h > 240) { // Clip bottom
    h = 240 - y;
  }

  drawFastRawVLine(x, y, h, color);*/
  writeLine(x, y, x, y + h - 1, color);
 80018ea:	88ba      	ldrh	r2, [r7, #4]
 80018ec:	887b      	ldrh	r3, [r7, #2]
 80018ee:	4413      	add	r3, r2
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	b21c      	sxth	r4, r3
 80018f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018fc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001900:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001904:	883b      	ldrh	r3, [r7, #0]
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	4623      	mov	r3, r4
 800190a:	f7ff fe51 	bl	80015b0 <writeLine>
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bd90      	pop	{r4, r7, pc}

08001916 <fillRect>:
    	 sharpmem_buffer[i] = color;
    }
  }
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8001916:	b590      	push	{r4, r7, lr}
 8001918:	b085      	sub	sp, #20
 800191a:	af00      	add	r7, sp, #0
 800191c:	4604      	mov	r4, r0
 800191e:	4608      	mov	r0, r1
 8001920:	4611      	mov	r1, r2
 8001922:	461a      	mov	r2, r3
 8001924:	4623      	mov	r3, r4
 8001926:	80fb      	strh	r3, [r7, #6]
 8001928:	4603      	mov	r3, r0
 800192a:	80bb      	strh	r3, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]
 8001930:	4613      	mov	r3, r2
 8001932:	803b      	strh	r3, [r7, #0]
  for (int16_t i = x; i < x + w; i++) {
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	81fb      	strh	r3, [r7, #14]
 8001938:	e00e      	b.n	8001958 <fillRect+0x42>
    drawFastVLine(i, y, h, color);
 800193a:	8c3b      	ldrh	r3, [r7, #32]
 800193c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001940:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001944:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001948:	f7ff ffc0 	bl	80018cc <drawFastVLine>
  for (int16_t i = x; i < x + w; i++) {
 800194c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001950:	b29b      	uxth	r3, r3
 8001952:	3301      	adds	r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	81fb      	strh	r3, [r7, #14]
 8001958:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800195c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001960:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001964:	440b      	add	r3, r1
 8001966:	429a      	cmp	r2, r3
 8001968:	dbe7      	blt.n	800193a <fillRect+0x24>
  }
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	bd90      	pop	{r4, r7, pc}

08001974 <drawChar>:

void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b087      	sub	sp, #28
 8001978:	af02      	add	r7, sp, #8
 800197a:	4604      	mov	r4, r0
 800197c:	4608      	mov	r0, r1
 800197e:	4611      	mov	r1, r2
 8001980:	461a      	mov	r2, r3
 8001982:	4623      	mov	r3, r4
 8001984:	80fb      	strh	r3, [r7, #6]
 8001986:	4603      	mov	r3, r0
 8001988:	80bb      	strh	r3, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	70fb      	strb	r3, [r7, #3]
 800198e:	4613      	mov	r3, r2
 8001990:	803b      	strh	r3, [r7, #0]


	if ((x >= 400) ||              // Clip right
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800199a:	f280 8106 	bge.w	8001baa <drawChar+0x236>
 800199e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019a2:	2bef      	cmp	r3, #239	@ 0xef
 80019a4:	f300 8101 	bgt.w	8001baa <drawChar+0x236>
		(y >= 240) ||             // Clip bottom
		((x + 6 * size_x - 1) < 0) || // Clip left
 80019a8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80019ac:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80019b0:	4613      	mov	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	440b      	add	r3, r1
		(y >= 240) ||             // Clip bottom
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f340 80f5 	ble.w	8001baa <drawChar+0x236>
		((y + 8 * size_y - 1) < 0))   // Clip top
 80019c0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80019c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4413      	add	r3, r2
		((x + 6 * size_x - 1) < 0) || // Clip left
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f340 80ec 	ble.w	8001baa <drawChar+0x236>
	  return;

	if ((c >= 176))
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	2baf      	cmp	r3, #175	@ 0xaf
 80019d6:	d902      	bls.n	80019de <drawChar+0x6a>
	  c++; // Handle 'classic' charset behavior
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	3301      	adds	r3, #1
 80019dc:	70fb      	strb	r3, [r7, #3]

	for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 80019de:	2300      	movs	r3, #0
 80019e0:	73fb      	strb	r3, [r7, #15]
 80019e2:	e0aa      	b.n	8001b3a <drawChar+0x1c6>
	  uint8_t line = font[c * 5 + i];
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	441a      	add	r2, r3
 80019ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a70      	ldr	r2, [pc, #448]	@ (8001bb4 <drawChar+0x240>)
 80019f4:	5cd3      	ldrb	r3, [r2, r3]
 80019f6:	73bb      	strb	r3, [r7, #14]
	  for (int8_t j = 0; j < 8; j++, line >>= 1) {
 80019f8:	2300      	movs	r3, #0
 80019fa:	737b      	strb	r3, [r7, #13]
 80019fc:	e092      	b.n	8001b24 <drawChar+0x1b0>
		if (line & 1) {
 80019fe:	7bbb      	ldrb	r3, [r7, #14]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d040      	beq.n	8001a8a <drawChar+0x116>
		  if (size_x == 1 && size_y == 1)
 8001a08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d116      	bne.n	8001a3e <drawChar+0xca>
 8001a10:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d112      	bne.n	8001a3e <drawChar+0xca>
			drawPixel(x + i, y + j, color);
 8001a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	4413      	add	r3, r2
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	b218      	sxth	r0, r3
 8001a26:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	88bb      	ldrh	r3, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	883a      	ldrh	r2, [r7, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	f7ff fd5e 	bl	80014f8 <drawPixel>
 8001a3c:	e069      	b.n	8001b12 <drawChar+0x19e>
		  else
			fillRect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8001a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	fb12 f303 	smulbb	r3, r2, r3
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	4413      	add	r3, r2
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b218      	sxth	r0, r3
 8001a58:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	fb12 f303 	smulbb	r3, r2, r3
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	b219      	sxth	r1, r3
 8001a72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001a76:	b21a      	sxth	r2, r3
 8001a78:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a7c:	b21c      	sxth	r4, r3
 8001a7e:	883b      	ldrh	r3, [r7, #0]
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	4623      	mov	r3, r4
 8001a84:	f7ff ff47 	bl	8001916 <fillRect>
 8001a88:	e043      	b.n	8001b12 <drawChar+0x19e>
		} else if (bg != color) {
 8001a8a:	8c3a      	ldrh	r2, [r7, #32]
 8001a8c:	883b      	ldrh	r3, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d03f      	beq.n	8001b12 <drawChar+0x19e>
		  if (size_x == 1 && size_y == 1)
 8001a92:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d116      	bne.n	8001ac8 <drawChar+0x154>
 8001a9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d112      	bne.n	8001ac8 <drawChar+0x154>
			  drawPixel(x + i, y + j, bg);
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	4413      	add	r3, r2
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	b218      	sxth	r0, r3
 8001ab0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	88bb      	ldrh	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	8c3a      	ldrh	r2, [r7, #32]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f7ff fd19 	bl	80014f8 <drawPixel>
 8001ac6:	e024      	b.n	8001b12 <drawChar+0x19e>
		  else
			fillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8001ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	fb12 f303 	smulbb	r3, r2, r3
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	4413      	add	r3, r2
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	b218      	sxth	r0, r3
 8001ae2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	fb12 f303 	smulbb	r3, r2, r3
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	88bb      	ldrh	r3, [r7, #4]
 8001af6:	4413      	add	r3, r2
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	b219      	sxth	r1, r3
 8001afc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b00:	b21a      	sxth	r2, r3
 8001b02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001b06:	b21c      	sxth	r4, r3
 8001b08:	8c3b      	ldrh	r3, [r7, #32]
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	4623      	mov	r3, r4
 8001b0e:	f7ff ff02 	bl	8001916 <fillRect>
	  for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8001b12:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	3301      	adds	r3, #1
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	737b      	strb	r3, [r7, #13]
 8001b1e:	7bbb      	ldrb	r3, [r7, #14]
 8001b20:	085b      	lsrs	r3, r3, #1
 8001b22:	73bb      	strb	r3, [r7, #14]
 8001b24:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001b28:	2b07      	cmp	r3, #7
 8001b2a:	f77f af68 	ble.w	80019fe <drawChar+0x8a>
	for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8001b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	3301      	adds	r3, #1
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	73fb      	strb	r3, [r7, #15]
 8001b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	f77f af50 	ble.w	80019e4 <drawChar+0x70>
		}
	  }
	}
	if (bg != color) { // If opaque, draw vertical line for last column
 8001b44:	8c3a      	ldrh	r2, [r7, #32]
 8001b46:	883b      	ldrh	r3, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d02f      	beq.n	8001bac <drawChar+0x238>
	  if (size_x == 1 && size_y == 1)
 8001b4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d10e      	bne.n	8001b72 <drawChar+0x1fe>
 8001b54:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d10a      	bne.n	8001b72 <drawChar+0x1fe>
		drawFastVLine(x + 5, y, 8, bg);
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	3305      	adds	r3, #5
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	b218      	sxth	r0, r3
 8001b64:	8c3b      	ldrh	r3, [r7, #32]
 8001b66:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001b6a:	2208      	movs	r2, #8
 8001b6c:	f7ff feae 	bl	80018cc <drawFastVLine>
 8001b70:	e01c      	b.n	8001bac <drawChar+0x238>
	  else
		fillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8001b72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	4413      	add	r3, r2
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	b218      	sxth	r0, r3
 8001b88:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	b21c      	sxth	r4, r3
 8001b9a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001b9e:	8c3b      	ldrh	r3, [r7, #32]
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	4623      	mov	r3, r4
 8001ba4:	f7ff feb7 	bl	8001916 <fillRect>
 8001ba8:	e000      	b.n	8001bac <drawChar+0x238>
	  return;
 8001baa:	bf00      	nop
	}

}
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd90      	pop	{r4, r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	0801006c 	.word	0x0801006c

08001bb8 <drawString>:

void drawString(int16_t x, int16_t y, const char *str,  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y){
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b08d      	sub	sp, #52	@ 0x34
 8001bbc:	af04      	add	r7, sp, #16
 8001bbe:	60ba      	str	r2, [r7, #8]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	81fb      	strh	r3, [r7, #14]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	81bb      	strh	r3, [r7, #12]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	80fb      	strh	r3, [r7, #6]
	int16_t cursor_x = x;
 8001bce:	89fb      	ldrh	r3, [r7, #14]
 8001bd0:	83fb      	strh	r3, [r7, #30]
	int16_t cursor_y = y;
 8001bd2:	89bb      	ldrh	r3, [r7, #12]
 8001bd4:	82fb      	strh	r3, [r7, #22]
	int16_t len = strlen(str);
 8001bd6:	68b8      	ldr	r0, [r7, #8]
 8001bd8:	f7fe fb5e 	bl	8000298 <strlen>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	82bb      	strh	r3, [r7, #20]


	uint32_t i = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61bb      	str	r3, [r7, #24]
	for(i; i<len; i++){
 8001be4:	e01a      	b.n	8001c1c <drawString+0x64>
		drawChar(cursor_x, cursor_y, str[i], color, bg, size_x, size_y);
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	4413      	add	r3, r2
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	88fc      	ldrh	r4, [r7, #6]
 8001bf0:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8001bf4:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 8001bf8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001bfc:	9302      	str	r3, [sp, #8]
 8001bfe:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001c02:	9301      	str	r3, [sp, #4]
 8001c04:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	4623      	mov	r3, r4
 8001c0a:	f7ff feb3 	bl	8001974 <drawChar>
		cursor_x += 6;
 8001c0e:	8bfb      	ldrh	r3, [r7, #30]
 8001c10:	3306      	adds	r3, #6
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	83fb      	strh	r3, [r7, #30]
	for(i; i<len; i++){
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	61bb      	str	r3, [r7, #24]
 8001c1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d3df      	bcc.n	8001be6 <drawString+0x2e>
	}

}
 8001c26:	bf00      	nop
 8001c28:	bf00      	nop
 8001c2a:	3724      	adds	r7, #36	@ 0x24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd90      	pop	{r4, r7, pc}

08001c30 <drawDouble>:

void drawDouble(float val, int16_t x, int16_t y){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b094      	sub	sp, #80	@ 0x50
 8001c34:	af04      	add	r7, sp, #16
 8001c36:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	460a      	mov	r2, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
 8001c40:	4613      	mov	r3, r2
 8001c42:	803b      	strh	r3, [r7, #0]
	char count_str[50];
	sprintf(count_str, "%.3f", val);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7fe fc93 	bl	8000570 <__aeabi_f2d>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	f107 000c 	add.w	r0, r7, #12
 8001c52:	490b      	ldr	r1, [pc, #44]	@ (8001c80 <drawDouble+0x50>)
 8001c54:	f00b f96c 	bl	800cf30 <siprintf>
	drawString(x, y, count_str,  0, 1, 1, 1);
 8001c58:	f107 020c 	add.w	r2, r7, #12
 8001c5c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001c60:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8001c64:	2301      	movs	r3, #1
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	2301      	movs	r3, #1
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	2300      	movs	r3, #0
 8001c72:	f7ff ffa1 	bl	8001bb8 <drawString>
}
 8001c76:	bf00      	nop
 8001c78:	3740      	adds	r7, #64	@ 0x40
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	0800f3e4 	.word	0x0800f3e4

08001c84 <drawInt>:

void drawInt(int val, int16_t x, int16_t y){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b094      	sub	sp, #80	@ 0x50
 8001c88:	af04      	add	r7, sp, #16
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]
 8001c90:	4613      	mov	r3, r2
 8001c92:	803b      	strh	r3, [r7, #0]
	char count_str[50];
	sprintf(count_str, "%d", val);
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	490b      	ldr	r1, [pc, #44]	@ (8001cc8 <drawInt+0x44>)
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f00b f947 	bl	800cf30 <siprintf>
	drawString(x, y, count_str,  0, 1, 1, 1);
 8001ca2:	f107 020c 	add.w	r2, r7, #12
 8001ca6:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001caa:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8001cae:	2301      	movs	r3, #1
 8001cb0:	9302      	str	r3, [sp, #8]
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f7ff ff7c 	bl	8001bb8 <drawString>
}
 8001cc0:	bf00      	nop
 8001cc2:	3740      	adds	r7, #64	@ 0x40
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	0800f3ec 	.word	0x0800f3ec

08001ccc <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8001ccc:	b480      	push	{r7}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	ed87 0a05 	vstr	s0, [r7, #20]
 8001cd6:	edc7 0a04 	vstr	s1, [r7, #16]
 8001cda:	ed87 1a03 	vstr	s2, [r7, #12]
 8001cde:	edc7 1a02 	vstr	s3, [r7, #8]
 8001ce2:	ed87 2a01 	vstr	s4, [r7, #4]
    // Handle division by zero and avoid NaN results
    if (in_max - in_min == 0) {
 8001ce6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cea:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfa:	d102      	bne.n	8001d02 <map+0x36>
        return 0; // Return a default value
 8001cfc:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8001d44 <map+0x78>
 8001d00:	e019      	b.n	8001d36 <map+0x6a>
    }
    // Map the input value to the new range
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001d02:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d06:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d0e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001d12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d1a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d1e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d32:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001d36:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3a:	371c      	adds	r7, #28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	00000000 	.word	0x00000000

08001d48 <HAL_TIM_PeriodElapsedCallback>:

// Timer callback implementation
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1)  // Check if interrupt is from TIM1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d103      	bne.n	8001d62 <HAL_TIM_PeriodElapsedCallback+0x1a>
    {
        slow_timer_flag = 1;  // Set the flag
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_test);
    	HAL_GPIO_TogglePin(GPIOB, LED_RED_Pin);*/

    }
}
 8001d60:	e00a      	b.n	8001d78 <HAL_TIM_PeriodElapsedCallback+0x30>
    else if (htim->Instance == TIM3)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a08      	ldr	r2, [pc, #32]	@ (8001d88 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d105      	bne.n	8001d78 <HAL_TIM_PeriodElapsedCallback+0x30>
    	HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d72:	4806      	ldr	r0, [pc, #24]	@ (8001d8c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001d74:	f004 fffc 	bl	8006d70 <HAL_GPIO_WritePin>
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40012c00 	.word	0x40012c00
 8001d84:	200007d4 	.word	0x200007d4
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	42020400 	.word	0x42020400

08001d90 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d90:	b5b0      	push	{r4, r5, r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4abe      	ldr	r2, [pc, #760]	@ (8002098 <HAL_ADC_ConvCpltCallback+0x308>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	f040 8254 	bne.w	800224c <HAL_ADC_ConvCpltCallback+0x4bc>
    {
    	//HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
        ADC_LOAD_VOL_V  = (float)adc_buffer[0]*0.00366300366; ///4095.0*2.5*6.0
 8001da4:	4bbd      	ldr	r3, [pc, #756]	@ (800209c <HAL_ADC_ConvCpltCallback+0x30c>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db2:	ee17 0a90 	vmov	r0, s15
 8001db6:	f7fe fbdb 	bl	8000570 <__aeabi_f2d>
 8001dba:	a3ab      	add	r3, pc, #684	@ (adr r3, 8002068 <HAL_ADC_ConvCpltCallback+0x2d8>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fc2e 	bl	8000620 <__aeabi_dmul>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f7fe ff20 	bl	8000c10 <__aeabi_d2f>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4ab3      	ldr	r2, [pc, #716]	@ (80020a0 <HAL_ADC_ConvCpltCallback+0x310>)
 8001dd4:	6013      	str	r3, [r2, #0]
		ADC_LOAD_CUR_A  = ((float)adc_buffer[1]*0.00015262515 - 0.031095); ///4095.0*2.5 - 0.12438)/0.20/20.0
 8001dd6:	4bb1      	ldr	r3, [pc, #708]	@ (800209c <HAL_ADC_ConvCpltCallback+0x30c>)
 8001dd8:	885b      	ldrh	r3, [r3, #2]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	ee07 3a90 	vmov	s15, r3
 8001de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001de4:	ee17 0a90 	vmov	r0, s15
 8001de8:	f7fe fbc2 	bl	8000570 <__aeabi_f2d>
 8001dec:	a3a0      	add	r3, pc, #640	@ (adr r3, 8002070 <HAL_ADC_ConvCpltCallback+0x2e0>)
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	f7fe fc15 	bl	8000620 <__aeabi_dmul>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	a39e      	add	r3, pc, #632	@ (adr r3, 8002078 <HAL_ADC_ConvCpltCallback+0x2e8>)
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	f7fe fa54 	bl	80002b0 <__aeabi_dsub>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7fe fefe 	bl	8000c10 <__aeabi_d2f>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4aa3      	ldr	r2, [pc, #652]	@ (80020a4 <HAL_ADC_ConvCpltCallback+0x314>)
 8001e18:	6013      	str	r3, [r2, #0]

	    Z_out = ADC_LOAD_VOL_V / ADC_LOAD_CUR_A;
 8001e1a:	4ba1      	ldr	r3, [pc, #644]	@ (80020a0 <HAL_ADC_ConvCpltCallback+0x310>)
 8001e1c:	edd3 6a00 	vldr	s13, [r3]
 8001e20:	4ba0      	ldr	r3, [pc, #640]	@ (80020a4 <HAL_ADC_ConvCpltCallback+0x314>)
 8001e22:	ed93 7a00 	vldr	s14, [r3]
 8001e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e2a:	4b9f      	ldr	r3, [pc, #636]	@ (80020a8 <HAL_ADC_ConvCpltCallback+0x318>)
 8001e2c:	edc3 7a00 	vstr	s15, [r3]
	    Z_out = limit(Z_out, .25, 22e3);
 8001e30:	4b9d      	ldr	r3, [pc, #628]	@ (80020a8 <HAL_ADC_ConvCpltCallback+0x318>)
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	ed9f 1a9d 	vldr	s2, [pc, #628]	@ 80020ac <HAL_ADC_ConvCpltCallback+0x31c>
 8001e3a:	eef5 0a00 	vmov.f32	s1, #80	@ 0x3e800000  0.250
 8001e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e42:	f000 fa63 	bl	800230c <limit>
 8001e46:	eef0 7a40 	vmov.f32	s15, s0
 8001e4a:	4b97      	ldr	r3, [pc, #604]	@ (80020a8 <HAL_ADC_ConvCpltCallback+0x318>)
 8001e4c:	edc3 7a00 	vstr	s15, [r3]

	    //alpha = calculate_alpha(1000, 50e3);
	    Z_out_filt = 0.38586954509 * Z_out + (0.6141304549)*Z_out_filt_prev;
 8001e50:	4b95      	ldr	r3, [pc, #596]	@ (80020a8 <HAL_ADC_ConvCpltCallback+0x318>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fb8b 	bl	8000570 <__aeabi_f2d>
 8001e5a:	a389      	add	r3, pc, #548	@ (adr r3, 8002080 <HAL_ADC_ConvCpltCallback+0x2f0>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe fbde 	bl	8000620 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4614      	mov	r4, r2
 8001e6a:	461d      	mov	r5, r3
 8001e6c:	4b90      	ldr	r3, [pc, #576]	@ (80020b0 <HAL_ADC_ConvCpltCallback+0x320>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fb7d 	bl	8000570 <__aeabi_f2d>
 8001e76:	a384      	add	r3, pc, #528	@ (adr r3, 8002088 <HAL_ADC_ConvCpltCallback+0x2f8>)
 8001e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7c:	f7fe fbd0 	bl	8000620 <__aeabi_dmul>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4620      	mov	r0, r4
 8001e86:	4629      	mov	r1, r5
 8001e88:	f7fe fa14 	bl	80002b4 <__adddf3>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	f7fe febc 	bl	8000c10 <__aeabi_d2f>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4a86      	ldr	r2, [pc, #536]	@ (80020b4 <HAL_ADC_ConvCpltCallback+0x324>)
 8001e9c:	6013      	str	r3, [r2, #0]
	    Z_out_filt_prev = Z_out_filt;
 8001e9e:	4b85      	ldr	r3, [pc, #532]	@ (80020b4 <HAL_ADC_ConvCpltCallback+0x324>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a83      	ldr	r2, [pc, #524]	@ (80020b0 <HAL_ADC_ConvCpltCallback+0x320>)
 8001ea4:	6013      	str	r3, [r2, #0]

        // A_buffer being used in high speed loop
    	if(A_buffer_active == 1 && initial_run==1){
 8001ea6:	4b84      	ldr	r3, [pc, #528]	@ (80020b8 <HAL_ADC_ConvCpltCallback+0x328>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d147      	bne.n	8001f40 <HAL_ADC_ConvCpltCallback+0x1b0>
 8001eb0:	4b82      	ldr	r3, [pc, #520]	@ (80020bc <HAL_ADC_ConvCpltCallback+0x32c>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d142      	bne.n	8001f40 <HAL_ADC_ConvCpltCallback+0x1b0>
    		Z_target_ind = find_indices(Z_sc_interp_A, 63, Z_out);
 8001eba:	4b7b      	ldr	r3, [pc, #492]	@ (80020a8 <HAL_ADC_ConvCpltCallback+0x318>)
 8001ebc:	edd3 7a00 	vldr	s15, [r3]
 8001ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec4:	213f      	movs	r1, #63	@ 0x3f
 8001ec6:	487e      	ldr	r0, [pc, #504]	@ (80020c0 <HAL_ADC_ConvCpltCallback+0x330>)
 8001ec8:	f000 f9e8 	bl	800229c <find_indices>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	4b7c      	ldr	r3, [pc, #496]	@ (80020c4 <HAL_ADC_ConvCpltCallback+0x334>)
 8001ed2:	801a      	strh	r2, [r3, #0]
    		//Z_target_ind = 50;
    		V_target = linear_interpolate(Z_sc_interp_A[Z_target_ind], Z_sc_interp_A[Z_target_ind-1], V_sc_interp_A[Z_target_ind], Z_out, Z_V_slopes_A[Z_target_ind]);
 8001ed4:	4b7b      	ldr	r3, [pc, #492]	@ (80020c4 <HAL_ADC_ConvCpltCallback+0x334>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	4a79      	ldr	r2, [pc, #484]	@ (80020c0 <HAL_ADC_ConvCpltCallback+0x330>)
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	4b77      	ldr	r3, [pc, #476]	@ (80020c4 <HAL_ADC_ConvCpltCallback+0x334>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	3b01      	subs	r3, #1
 8001eec:	4a74      	ldr	r2, [pc, #464]	@ (80020c0 <HAL_ADC_ConvCpltCallback+0x330>)
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	ed93 7a00 	vldr	s14, [r3]
 8001ef6:	4b73      	ldr	r3, [pc, #460]	@ (80020c4 <HAL_ADC_ConvCpltCallback+0x334>)
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	4a72      	ldr	r2, [pc, #456]	@ (80020c8 <HAL_ADC_ConvCpltCallback+0x338>)
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	edd3 6a00 	vldr	s13, [r3]
 8001f06:	4b68      	ldr	r3, [pc, #416]	@ (80020a8 <HAL_ADC_ConvCpltCallback+0x318>)
 8001f08:	ed93 6a00 	vldr	s12, [r3]
 8001f0c:	4b6d      	ldr	r3, [pc, #436]	@ (80020c4 <HAL_ADC_ConvCpltCallback+0x334>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	4a6e      	ldr	r2, [pc, #440]	@ (80020cc <HAL_ADC_ConvCpltCallback+0x33c>)
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	edd3 5a00 	vldr	s11, [r3]
 8001f1c:	eeb0 2a65 	vmov.f32	s4, s11
 8001f20:	eef0 1a46 	vmov.f32	s3, s12
 8001f24:	eeb0 1a66 	vmov.f32	s2, s13
 8001f28:	eef0 0a47 	vmov.f32	s1, s14
 8001f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f30:	f000 fa16 	bl	8002360 <linear_interpolate>
 8001f34:	eef0 7a40 	vmov.f32	s15, s0
 8001f38:	4b65      	ldr	r3, [pc, #404]	@ (80020d0 <HAL_ADC_ConvCpltCallback+0x340>)
 8001f3a:	edc3 7a00 	vstr	s15, [r3]
 8001f3e:	e04f      	b.n	8001fe0 <HAL_ADC_ConvCpltCallback+0x250>
    		//ADC_LOAD_VOL_V = V_target;

    	}

    	// B_buffer being used in high speed loop
    	else if(A_buffer_active == 0 && initial_run==1){
 8001f40:	4b5d      	ldr	r3, [pc, #372]	@ (80020b8 <HAL_ADC_ConvCpltCallback+0x328>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d147      	bne.n	8001fda <HAL_ADC_ConvCpltCallback+0x24a>
 8001f4a:	4b5c      	ldr	r3, [pc, #368]	@ (80020bc <HAL_ADC_ConvCpltCallback+0x32c>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d142      	bne.n	8001fda <HAL_ADC_ConvCpltCallback+0x24a>
    		Z_target_ind = find_indices(Z_sc_interp_B, 63, Z_out);
 8001f54:	4b54      	ldr	r3, [pc, #336]	@ (80020a8 <HAL_ADC_ConvCpltCallback+0x318>)
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f5e:	213f      	movs	r1, #63	@ 0x3f
 8001f60:	485c      	ldr	r0, [pc, #368]	@ (80020d4 <HAL_ADC_ConvCpltCallback+0x344>)
 8001f62:	f000 f99b 	bl	800229c <find_indices>
 8001f66:	4603      	mov	r3, r0
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	4b56      	ldr	r3, [pc, #344]	@ (80020c4 <HAL_ADC_ConvCpltCallback+0x334>)
 8001f6c:	801a      	strh	r2, [r3, #0]
    		//Z_target_ind = 50;
    		V_target = linear_interpolate(Z_sc_interp_B[Z_target_ind], Z_sc_interp_B[Z_target_ind-1], V_sc_interp_B[Z_target_ind], Z_out, Z_V_slopes_B[Z_target_ind]);
 8001f6e:	4b55      	ldr	r3, [pc, #340]	@ (80020c4 <HAL_ADC_ConvCpltCallback+0x334>)
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4a57      	ldr	r2, [pc, #348]	@ (80020d4 <HAL_ADC_ConvCpltCallback+0x344>)
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	edd3 7a00 	vldr	s15, [r3]
 8001f7e:	4b51      	ldr	r3, [pc, #324]	@ (80020c4 <HAL_ADC_ConvCpltCallback+0x334>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	3b01      	subs	r3, #1
 8001f86:	4a53      	ldr	r2, [pc, #332]	@ (80020d4 <HAL_ADC_ConvCpltCallback+0x344>)
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	ed93 7a00 	vldr	s14, [r3]
 8001f90:	4b4c      	ldr	r3, [pc, #304]	@ (80020c4 <HAL_ADC_ConvCpltCallback+0x334>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	4a50      	ldr	r2, [pc, #320]	@ (80020d8 <HAL_ADC_ConvCpltCallback+0x348>)
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	edd3 6a00 	vldr	s13, [r3]
 8001fa0:	4b41      	ldr	r3, [pc, #260]	@ (80020a8 <HAL_ADC_ConvCpltCallback+0x318>)
 8001fa2:	ed93 6a00 	vldr	s12, [r3]
 8001fa6:	4b47      	ldr	r3, [pc, #284]	@ (80020c4 <HAL_ADC_ConvCpltCallback+0x334>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	4a4b      	ldr	r2, [pc, #300]	@ (80020dc <HAL_ADC_ConvCpltCallback+0x34c>)
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	edd3 5a00 	vldr	s11, [r3]
 8001fb6:	eeb0 2a65 	vmov.f32	s4, s11
 8001fba:	eef0 1a46 	vmov.f32	s3, s12
 8001fbe:	eeb0 1a66 	vmov.f32	s2, s13
 8001fc2:	eef0 0a47 	vmov.f32	s1, s14
 8001fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fca:	f000 f9c9 	bl	8002360 <linear_interpolate>
 8001fce:	eef0 7a40 	vmov.f32	s15, s0
 8001fd2:	4b3f      	ldr	r3, [pc, #252]	@ (80020d0 <HAL_ADC_ConvCpltCallback+0x340>)
 8001fd4:	edc3 7a00 	vstr	s15, [r3]
 8001fd8:	e002      	b.n	8001fe0 <HAL_ADC_ConvCpltCallback+0x250>
    	}

    	else{
    		V_target = 0.1;
 8001fda:	4b3d      	ldr	r3, [pc, #244]	@ (80020d0 <HAL_ADC_ConvCpltCallback+0x340>)
 8001fdc:	4a40      	ldr	r2, [pc, #256]	@ (80020e0 <HAL_ADC_ConvCpltCallback+0x350>)
 8001fde:	601a      	str	r2, [r3, #0]
    	}

    	//Z_target_ind = find_indices(Z_sc, 46, Z_out);
    	//V_target = linear_interpolate(Z_sc[Z_target_ind], Z_sc[Z_target_ind-1], V_sc[Z_target_ind], Z_out, Z_V_slopes[Z_target_ind]);

    	V_target = limit(V_target, 0.1, 7);
 8001fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80020d0 <HAL_ADC_ConvCpltCallback+0x340>)
 8001fe2:	edd3 7a00 	vldr	s15, [r3]
 8001fe6:	eeb1 1a0c 	vmov.f32	s2, #28	@ 0x40e00000  7.0
 8001fea:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 80020e4 <HAL_ADC_ConvCpltCallback+0x354>
 8001fee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff2:	f000 f98b 	bl	800230c <limit>
 8001ff6:	eef0 7a40 	vmov.f32	s15, s0
 8001ffa:	4b35      	ldr	r3, [pc, #212]	@ (80020d0 <HAL_ADC_ConvCpltCallback+0x340>)
 8001ffc:	edc3 7a00 	vstr	s15, [r3]

    	error = V_target - ADC_LOAD_VOL_V;
 8002000:	4b33      	ldr	r3, [pc, #204]	@ (80020d0 <HAL_ADC_ConvCpltCallback+0x340>)
 8002002:	ed93 7a00 	vldr	s14, [r3]
 8002006:	4b26      	ldr	r3, [pc, #152]	@ (80020a0 <HAL_ADC_ConvCpltCallback+0x310>)
 8002008:	edd3 7a00 	vldr	s15, [r3]
 800200c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002010:	4b35      	ldr	r3, [pc, #212]	@ (80020e8 <HAL_ADC_ConvCpltCallback+0x358>)
 8002012:	edc3 7a00 	vstr	s15, [r3]
        if((error < 2e-3) & (error>0)){
 8002016:	4b34      	ldr	r3, [pc, #208]	@ (80020e8 <HAL_ADC_ConvCpltCallback+0x358>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe faa8 	bl	8000570 <__aeabi_f2d>
 8002020:	2301      	movs	r3, #1
 8002022:	461c      	mov	r4, r3
 8002024:	a31a      	add	r3, pc, #104	@ (adr r3, 8002090 <HAL_ADC_ConvCpltCallback+0x300>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f7fe fd6b 	bl	8000b04 <__aeabi_dcmplt>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_ADC_ConvCpltCallback+0x2a8>
 8002034:	2300      	movs	r3, #0
 8002036:	461c      	mov	r4, r3
 8002038:	b2e2      	uxtb	r2, r4
 800203a:	4b2b      	ldr	r3, [pc, #172]	@ (80020e8 <HAL_ADC_ConvCpltCallback+0x358>)
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002048:	bfcc      	ite	gt
 800204a:	2301      	movgt	r3, #1
 800204c:	2300      	movle	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	4013      	ands	r3, r2
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d049      	beq.n	80020ec <HAL_ADC_ConvCpltCallback+0x35c>
        	error = 0;
 8002058:	4b23      	ldr	r3, [pc, #140]	@ (80020e8 <HAL_ADC_ConvCpltCallback+0x358>)
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	e069      	b.n	8002136 <HAL_ADC_ConvCpltCallback+0x3a6>
 8002062:	bf00      	nop
 8002064:	f3af 8000 	nop.w
 8002068:	1d983187 	.word	0x1d983187
 800206c:	3f6e01e0 	.word	0x3f6e01e0
 8002070:	0e3b6bb7 	.word	0x0e3b6bb7
 8002074:	3f240140 	.word	0x3f240140
 8002078:	2046c765 	.word	0x2046c765
 800207c:	3f9fd75e 	.word	0x3f9fd75e
 8002080:	2d2bc5cb 	.word	0x2d2bc5cb
 8002084:	3fd8b216 	.word	0x3fd8b216
 8002088:	e968bd42 	.word	0xe968bd42
 800208c:	3fe3a6f4 	.word	0x3fe3a6f4
 8002090:	d2f1a9fc 	.word	0xd2f1a9fc
 8002094:	3f60624d 	.word	0x3f60624d
 8002098:	42028000 	.word	0x42028000
 800209c:	200007d8 	.word	0x200007d8
 80020a0:	200036c4 	.word	0x200036c4
 80020a4:	200036cc 	.word	0x200036cc
 80020a8:	2000379c 	.word	0x2000379c
 80020ac:	46abe000 	.word	0x46abe000
 80020b0:	200037a4 	.word	0x200037a4
 80020b4:	200037a0 	.word	0x200037a0
 80020b8:	20000000 	.word	0x20000000
 80020bc:	20003da0 	.word	0x20003da0
 80020c0:	200038b4 	.word	0x200038b4
 80020c4:	200036e2 	.word	0x200036e2
 80020c8:	200037b8 	.word	0x200037b8
 80020cc:	20003ba8 	.word	0x20003ba8
 80020d0:	20003798 	.word	0x20003798
 80020d4:	20003aac 	.word	0x20003aac
 80020d8:	200039b0 	.word	0x200039b0
 80020dc:	20003ca4 	.word	0x20003ca4
 80020e0:	3dcccccd 	.word	0x3dcccccd
 80020e4:	3dcccccd 	.word	0x3dcccccd
 80020e8:	200036d0 	.word	0x200036d0
        }
        else if((error > -2e-3) & (error<0)){
 80020ec:	4b60      	ldr	r3, [pc, #384]	@ (8002270 <HAL_ADC_ConvCpltCallback+0x4e0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fa3d 	bl	8000570 <__aeabi_f2d>
 80020f6:	2301      	movs	r3, #1
 80020f8:	461c      	mov	r4, r3
 80020fa:	a357      	add	r3, pc, #348	@ (adr r3, 8002258 <HAL_ADC_ConvCpltCallback+0x4c8>)
 80020fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002100:	f7fe fd1e 	bl	8000b40 <__aeabi_dcmpgt>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_ADC_ConvCpltCallback+0x37e>
 800210a:	2300      	movs	r3, #0
 800210c:	461c      	mov	r4, r3
 800210e:	b2e2      	uxtb	r2, r4
 8002110:	4b57      	ldr	r3, [pc, #348]	@ (8002270 <HAL_ADC_ConvCpltCallback+0x4e0>)
 8002112:	edd3 7a00 	vldr	s15, [r3]
 8002116:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800211a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211e:	bf4c      	ite	mi
 8002120:	2301      	movmi	r3, #1
 8002122:	2300      	movpl	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4013      	ands	r3, r2
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_ADC_ConvCpltCallback+0x3a6>
        	error = 0;
 800212e:	4b50      	ldr	r3, [pc, #320]	@ (8002270 <HAL_ADC_ConvCpltCallback+0x4e0>)
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
        }

        u =  .3*error + 20*err_accum;
 8002136:	4b4e      	ldr	r3, [pc, #312]	@ (8002270 <HAL_ADC_ConvCpltCallback+0x4e0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fa18 	bl	8000570 <__aeabi_f2d>
 8002140:	a347      	add	r3, pc, #284	@ (adr r3, 8002260 <HAL_ADC_ConvCpltCallback+0x4d0>)
 8002142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002146:	f7fe fa6b 	bl	8000620 <__aeabi_dmul>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4614      	mov	r4, r2
 8002150:	461d      	mov	r5, r3
 8002152:	4b48      	ldr	r3, [pc, #288]	@ (8002274 <HAL_ADC_ConvCpltCallback+0x4e4>)
 8002154:	edd3 7a00 	vldr	s15, [r3]
 8002158:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800215c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002160:	ee17 0a90 	vmov	r0, s15
 8002164:	f7fe fa04 	bl	8000570 <__aeabi_f2d>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4620      	mov	r0, r4
 800216e:	4629      	mov	r1, r5
 8002170:	f7fe f8a0 	bl	80002b4 <__adddf3>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	f7fe fd48 	bl	8000c10 <__aeabi_d2f>
 8002180:	4603      	mov	r3, r0
 8002182:	4a3d      	ldr	r2, [pc, #244]	@ (8002278 <HAL_ADC_ConvCpltCallback+0x4e8>)
 8002184:	6013      	str	r3, [r2, #0]
        err_accum = err_accum + error * 1e-4;
 8002186:	4b3b      	ldr	r3, [pc, #236]	@ (8002274 <HAL_ADC_ConvCpltCallback+0x4e4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9f0 	bl	8000570 <__aeabi_f2d>
 8002190:	4604      	mov	r4, r0
 8002192:	460d      	mov	r5, r1
 8002194:	4b36      	ldr	r3, [pc, #216]	@ (8002270 <HAL_ADC_ConvCpltCallback+0x4e0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe f9e9 	bl	8000570 <__aeabi_f2d>
 800219e:	a332      	add	r3, pc, #200	@ (adr r3, 8002268 <HAL_ADC_ConvCpltCallback+0x4d8>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	f7fe fa3c 	bl	8000620 <__aeabi_dmul>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4620      	mov	r0, r4
 80021ae:	4629      	mov	r1, r5
 80021b0:	f7fe f880 	bl	80002b4 <__adddf3>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	f7fe fd28 	bl	8000c10 <__aeabi_d2f>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002274 <HAL_ADC_ConvCpltCallback+0x4e4>)
 80021c4:	6013      	str	r3, [r2, #0]
        //Int_1 = limit(Int_1, -1, .0465);

        //ADC_VIN_V = V_target;

    	REF_V = 2.5 - u;
 80021c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002278 <HAL_ADC_ConvCpltCallback+0x4e8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f9d0 	bl	8000570 <__aeabi_f2d>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	f04f 0000 	mov.w	r0, #0
 80021d8:	4928      	ldr	r1, [pc, #160]	@ (800227c <HAL_ADC_ConvCpltCallback+0x4ec>)
 80021da:	f7fe f869 	bl	80002b0 <__aeabi_dsub>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	f7fe fd13 	bl	8000c10 <__aeabi_d2f>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4a24      	ldr	r2, [pc, #144]	@ (8002280 <HAL_ADC_ConvCpltCallback+0x4f0>)
 80021ee:	6013      	str	r3, [r2, #0]
    	REF_CNTS = (uint16_t)(REF_V*1638); // /2.5*4095.0
 80021f0:	4b23      	ldr	r3, [pc, #140]	@ (8002280 <HAL_ADC_ConvCpltCallback+0x4f0>)
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002284 <HAL_ADC_ConvCpltCallback+0x4f4>
 80021fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002202:	ee17 3a90 	vmov	r3, s15
 8002206:	b29a      	uxth	r2, r3
 8002208:	4b1f      	ldr	r3, [pc, #124]	@ (8002288 <HAL_ADC_ConvCpltCallback+0x4f8>)
 800220a:	801a      	strh	r2, [r3, #0]
    	if(REF_CNTS>4095)
 800220c:	4b1e      	ldr	r3, [pc, #120]	@ (8002288 <HAL_ADC_ConvCpltCallback+0x4f8>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	b29b      	uxth	r3, r3
 8002212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002216:	d304      	bcc.n	8002222 <HAL_ADC_ConvCpltCallback+0x492>
    		REF_CNTS = 4095;
 8002218:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <HAL_ADC_ConvCpltCallback+0x4f8>)
 800221a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800221e:	801a      	strh	r2, [r3, #0]
 8002220:	e001      	b.n	8002226 <HAL_ADC_ConvCpltCallback+0x496>
    	else if(REF_CNTS<0)
 8002222:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <HAL_ADC_ConvCpltCallback+0x4f8>)
 8002224:	881b      	ldrh	r3, [r3, #0]
    		REF_CNTS = 0;

    	//ADC_VIN_V = REF_CNTS;

		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, REF_CNTS);
 8002226:	4b18      	ldr	r3, [pc, #96]	@ (8002288 <HAL_ADC_ConvCpltCallback+0x4f8>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	2200      	movs	r2, #0
 800222e:	2100      	movs	r1, #0
 8002230:	4816      	ldr	r0, [pc, #88]	@ (800228c <HAL_ADC_ConvCpltCallback+0x4fc>)
 8002232:	f003 fc33 	bl	8005a9c <HAL_DAC_SetValue>
    	HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800223c:	4814      	ldr	r0, [pc, #80]	@ (8002290 <HAL_ADC_ConvCpltCallback+0x500>)
 800223e:	f004 fd97 	bl	8006d70 <HAL_GPIO_WritePin>

    	//HAL_GPIO_TogglePin(GPIOB, LED_RED_Pin);
    	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, 5);
 8002242:	2205      	movs	r2, #5
 8002244:	4913      	ldr	r1, [pc, #76]	@ (8002294 <HAL_ADC_ConvCpltCallback+0x504>)
 8002246:	4814      	ldr	r0, [pc, #80]	@ (8002298 <HAL_ADC_ConvCpltCallback+0x508>)
 8002248:	f002 faec 	bl	8004824 <HAL_ADC_Start_DMA>

    }
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bdb0      	pop	{r4, r5, r7, pc}
 8002254:	f3af 8000 	nop.w
 8002258:	d2f1a9fc 	.word	0xd2f1a9fc
 800225c:	bf60624d 	.word	0xbf60624d
 8002260:	33333333 	.word	0x33333333
 8002264:	3fd33333 	.word	0x3fd33333
 8002268:	eb1c432d 	.word	0xeb1c432d
 800226c:	3f1a36e2 	.word	0x3f1a36e2
 8002270:	200036d0 	.word	0x200036d0
 8002274:	200036d4 	.word	0x200036d4
 8002278:	200036dc 	.word	0x200036dc
 800227c:	40040000 	.word	0x40040000
 8002280:	200036d8 	.word	0x200036d8
 8002284:	44ccc000 	.word	0x44ccc000
 8002288:	200036e0 	.word	0x200036e0
 800228c:	200002d4 	.word	0x200002d4
 8002290:	42020400 	.word	0x42020400
 8002294:	200007d8 	.word	0x200007d8
 8002298:	200001f4 	.word	0x200001f4

0800229c <find_indices>:

static inline int find_indices(const float array[], int n, float x) {
 800229c:	b480      	push	{r7}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t i = 1;
 80022aa:	2301      	movs	r3, #1
 80022ac:	75fb      	strb	r3, [r7, #23]
	for (i; i < n; i++) {
 80022ae:	e021      	b.n	80022f4 <find_indices+0x58>
        if (array[i-1] >= x && x > array[i]) {
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
 80022b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80022b6:	3b01      	subs	r3, #1
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4413      	add	r3, r2
 80022be:	edd3 7a00 	vldr	s15, [r3]
 80022c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80022c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ce:	d80e      	bhi.n	80022ee <find_indices+0x52>
 80022d0:	7dfb      	ldrb	r3, [r7, #23]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	edd3 7a00 	vldr	s15, [r3]
 80022dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80022e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e8:	dd01      	ble.n	80022ee <find_indices+0x52>
            return i;
 80022ea:	7dfb      	ldrb	r3, [r7, #23]
 80022ec:	e008      	b.n	8002300 <find_indices+0x64>
	for (i; i < n; i++) {
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
 80022f0:	3301      	adds	r3, #1
 80022f2:	75fb      	strb	r3, [r7, #23]
 80022f4:	7dfb      	ldrb	r3, [r7, #23]
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	dcd9      	bgt.n	80022b0 <find_indices+0x14>
        }
    }
    // If no valid indices are found
    return -1;
 80022fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002300:	4618      	mov	r0, r3
 8002302:	371c      	adds	r7, #28
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <limit>:

static inline float limit(float in, float min, float max){
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	ed87 0a03 	vstr	s0, [r7, #12]
 8002316:	edc7 0a02 	vstr	s1, [r7, #8]
 800231a:	ed87 1a01 	vstr	s2, [r7, #4]
   if(in>max){
 800231e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002322:	edd7 7a01 	vldr	s15, [r7, #4]
 8002326:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800232a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232e:	dd02      	ble.n	8002336 <limit+0x2a>
      in=max;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e00a      	b.n	800234c <limit+0x40>
   }
   else if(in<min){
 8002336:	ed97 7a03 	vldr	s14, [r7, #12]
 800233a:	edd7 7a02 	vldr	s15, [r7, #8]
 800233e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002346:	d501      	bpl.n	800234c <limit+0x40>
      in = min;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	60fb      	str	r3, [r7, #12]
   }
   return in;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	ee07 3a90 	vmov	s15, r3
}
 8002352:	eeb0 0a67 	vmov.f32	s0, s15
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <linear_interpolate>:


static inline float linear_interpolate(float x0, float x1, float y0, float x, float slope){
 8002360:	b480      	push	{r7}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	ed87 0a05 	vstr	s0, [r7, #20]
 800236a:	edc7 0a04 	vstr	s1, [r7, #16]
 800236e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002372:	edc7 1a02 	vstr	s3, [r7, #8]
 8002376:	ed87 2a01 	vstr	s4, [r7, #4]

    return y0 + slope * (x - x0);
 800237a:	ed97 7a02 	vldr	s14, [r7, #8]
 800237e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002382:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002386:	edd7 7a01 	vldr	s15, [r7, #4]
 800238a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800238e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002392:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002396:	eeb0 0a67 	vmov.f32	s0, s15
 800239a:	371c      	adds	r7, #28
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <precompute_slopes>:

void precompute_slopes(const float *x_values, const float *y_values, float *slopes, int size) {
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	@ 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]

	for (uint8_t i = 1; i < size; i++) {
 80023b2:	2301      	movs	r3, #1
 80023b4:	77fb      	strb	r3, [r7, #31]
 80023b6:	e043      	b.n	8002440 <precompute_slopes+0x9c>
        float dx = x_values[i - 1] - x_values[i];
 80023b8:	7ffb      	ldrb	r3, [r7, #31]
 80023ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023be:	3b01      	subs	r3, #1
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4413      	add	r3, r2
 80023c6:	ed93 7a00 	vldr	s14, [r3]
 80023ca:	7ffb      	ldrb	r3, [r7, #31]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4413      	add	r3, r2
 80023d2:	edd3 7a00 	vldr	s15, [r3]
 80023d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023da:	edc7 7a06 	vstr	s15, [r7, #24]
        float dy = y_values[i - 1] - y_values[i];
 80023de:	7ffb      	ldrb	r3, [r7, #31]
 80023e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023e4:	3b01      	subs	r3, #1
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	4413      	add	r3, r2
 80023ec:	ed93 7a00 	vldr	s14, [r3]
 80023f0:	7ffb      	ldrb	r3, [r7, #31]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	4413      	add	r3, r2
 80023f8:	edd3 7a00 	vldr	s15, [r3]
 80023fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002400:	edc7 7a05 	vstr	s15, [r7, #20]

        // Avoid division by zero
        if (dx != 0.0f) {
 8002404:	edd7 7a06 	vldr	s15, [r7, #24]
 8002408:	eef5 7a40 	vcmp.f32	s15, #0.0
 800240c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002410:	d00c      	beq.n	800242c <precompute_slopes+0x88>
            slopes[i] = dy / dx;
 8002412:	7ffb      	ldrb	r3, [r7, #31]
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	edd7 6a05 	vldr	s13, [r7, #20]
 800241e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002426:	edc3 7a00 	vstr	s15, [r3]
 800242a:	e006      	b.n	800243a <precompute_slopes+0x96>
        } else {
            slopes[i] = 0.0f;  // Handle vertical segments
 800242c:	7ffb      	ldrb	r3, [r7, #31]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	4413      	add	r3, r2
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 1; i < size; i++) {
 800243a:	7ffb      	ldrb	r3, [r7, #31]
 800243c:	3301      	adds	r3, #1
 800243e:	77fb      	strb	r3, [r7, #31]
 8002440:	7ffb      	ldrb	r3, [r7, #31]
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	dcb7      	bgt.n	80023b8 <precompute_slopes+0x14>
        }
    }
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	3724      	adds	r7, #36	@ 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <curve_interp_1d>:


void curve_interp_1d(float *x_orig, float *y_orig, uint8_t n_orig, float *x_new, float *y_new, uint8_t n_new)
{
 8002456:	b480      	push	{r7}
 8002458:	b08b      	sub	sp, #44	@ 0x2c
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	603b      	str	r3, [r7, #0]
 8002462:	4613      	mov	r3, r2
 8002464:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < n_new; i++) {
 8002466:	2300      	movs	r3, #0
 8002468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800246c:	e0a4      	b.n	80025b8 <curve_interp_1d+0x162>
    	float x = x_new[i];
 800246e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	4413      	add	r3, r2
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	623b      	str	r3, [r7, #32]

        // Find the interval [x_orig[j], x_orig[j+1]] where x falls
    	uint8_t j;
        for (j = 0; j < n_orig - 1; j++) {
 800247c:	2300      	movs	r3, #0
 800247e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002482:	e021      	b.n	80024c8 <curve_interp_1d+0x72>
            if (x_orig[j] <= x && x <= x_orig[j + 1]) {
 8002484:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4413      	add	r3, r2
 800248e:	edd3 7a00 	vldr	s15, [r3]
 8002492:	ed97 7a08 	vldr	s14, [r7, #32]
 8002496:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800249a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249e:	db0e      	blt.n	80024be <curve_interp_1d+0x68>
 80024a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80024a4:	3301      	adds	r3, #1
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4413      	add	r3, r2
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	ed97 7a08 	vldr	s14, [r7, #32]
 80024b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024bc:	d90b      	bls.n	80024d6 <curve_interp_1d+0x80>
        for (j = 0; j < n_orig - 1; j++) {
 80024be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80024c2:	3301      	adds	r3, #1
 80024c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80024c8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	429a      	cmp	r2, r3
 80024d2:	dbd7      	blt.n	8002484 <curve_interp_1d+0x2e>
 80024d4:	e000      	b.n	80024d8 <curve_interp_1d+0x82>
                break;
 80024d6:	bf00      	nop
            }
        }

        // Handle edge cases where x is outside the range
        if (j == n_orig - 1 || x < x_orig[0]) {
 80024d8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	3b01      	subs	r3, #1
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d009      	beq.n	80024f8 <curve_interp_1d+0xa2>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ed97 7a08 	vldr	s14, [r7, #32]
 80024ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f6:	d51b      	bpl.n	8002530 <curve_interp_1d+0xda>
            y_new[i] = (x < x_orig[0]) ? y_orig[0] : y_orig[n_orig - 1];
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	edd3 7a00 	vldr	s15, [r3]
 80024fe:	ed97 7a08 	vldr	s14, [r7, #32]
 8002502:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250a:	d502      	bpl.n	8002512 <curve_interp_1d+0xbc>
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	e007      	b.n	8002522 <curve_interp_1d+0xcc>
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002518:	3b01      	subs	r3, #1
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	4413      	add	r3, r2
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002526:	0092      	lsls	r2, r2, #2
 8002528:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800252a:	440a      	add	r2, r1
 800252c:	6013      	str	r3, [r2, #0]
            continue;
 800252e:	e03e      	b.n	80025ae <curve_interp_1d+0x158>
        }

        // Linear interpolation formula
        float x1 = x_orig[j], y1 = y_orig[j];
 8002530:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4413      	add	r3, r2
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	4413      	add	r3, r2
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	61bb      	str	r3, [r7, #24]
        float x2 = x_orig[j + 1], y2 = y_orig[j + 1];
 800254c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002550:	3301      	adds	r3, #1
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4413      	add	r3, r2
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002560:	3301      	adds	r3, #1
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	4413      	add	r3, r2
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	613b      	str	r3, [r7, #16]
        y_new[i] = y1 + (y2 - y1) / (x2 - x1) * (x - x1);
 800256c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002570:	edd7 7a06 	vldr	s15, [r7, #24]
 8002574:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002578:	ed97 7a05 	vldr	s14, [r7, #20]
 800257c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002584:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002588:	edd7 6a08 	vldr	s13, [r7, #32]
 800258c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002590:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002594:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002598:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025a0:	4413      	add	r3, r2
 80025a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80025a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025aa:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < n_new; i++) {
 80025ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025b2:	3301      	adds	r3, #1
 80025b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80025b8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80025bc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80025c0:	429a      	cmp	r2, r3
 80025c2:	f4ff af54 	bcc.w	800246e <curve_interp_1d+0x18>
    }
}
 80025c6:	bf00      	nop
 80025c8:	bf00      	nop
 80025ca:	372c      	adds	r7, #44	@ 0x2c
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <curve_interp>:


void curve_interp(uint16_t irradiance, float *V_sc_interp_inactive, float *Z_sc_interp_inactive){
 80025d4:	b580      	push	{r7, lr}
 80025d6:	f5ad 6d8a 	sub.w	sp, sp, #1104	@ 0x450
 80025da:	af02      	add	r7, sp, #8
 80025dc:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80025e0:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 80025e4:	6019      	str	r1, [r3, #0]
 80025e6:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80025ea:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80025f4:	f2a3 433a 	subw	r3, r3, #1082	@ 0x43a
 80025f8:	4602      	mov	r2, r0
 80025fa:	801a      	strh	r2, [r3, #0]

	char buffert[50];

	uint16_t curve_num_low  = (uint16_t)floor((float)irradiance / 100);
 80025fc:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8002600:	f2a3 433a 	subw	r3, r3, #1082	@ 0x43a
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	ee07 3a90 	vmov	s15, r3
 800260a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800260e:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 80028cc <curve_interp+0x2f8>
 8002612:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002616:	ee16 0a90 	vmov	r0, s13
 800261a:	f7fd ffa9 	bl	8000570 <__aeabi_f2d>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	ec43 2b10 	vmov	d0, r2, r3
 8002626:	f00c fe43 	bl	800f2b0 <floor>
 800262a:	ec53 2b10 	vmov	r2, r3, d0
 800262e:	4610      	mov	r0, r2
 8002630:	4619      	mov	r1, r3
 8002632:	f7fe facd 	bl	8000bd0 <__aeabi_d2uiz>
 8002636:	4603      	mov	r3, r0
 8002638:	f8a7 343e 	strh.w	r3, [r7, #1086]	@ 0x43e
	uint16_t curve_num_high = (uint16_t)ceil((float)irradiance / 100);
 800263c:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8002640:	f2a3 433a 	subw	r3, r3, #1082	@ 0x43a
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800264e:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 80028cc <curve_interp+0x2f8>
 8002652:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002656:	ee16 0a90 	vmov	r0, s13
 800265a:	f7fd ff89 	bl	8000570 <__aeabi_f2d>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	ec43 2b10 	vmov	d0, r2, r3
 8002666:	f00c fda7 	bl	800f1b8 <ceil>
 800266a:	ec53 2b10 	vmov	r2, r3, d0
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	f7fe faad 	bl	8000bd0 <__aeabi_d2uiz>
 8002676:	4603      	mov	r3, r0
 8002678:	f8a7 343c 	strh.w	r3, [r7, #1084]	@ 0x43c
	float alpha = ((float)(irradiance - curve_num_low*100))/100;
 800267c:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8002680:	f2a3 433a 	subw	r3, r3, #1082	@ 0x43a
 8002684:	881a      	ldrh	r2, [r3, #0]
 8002686:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	@ 0x43e
 800268a:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	ee07 3a90 	vmov	s15, r3
 8002698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800269c:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 80028cc <curve_interp+0x2f8>
 80026a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026a4:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80026a8:	edc3 7a00 	vstr	s15, [r3]


	float x_max_1 = V_max[curve_num_low-1];
 80026ac:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	@ 0x43e
 80026b0:	3b01      	subs	r3, #1
 80026b2:	4a87      	ldr	r2, [pc, #540]	@ (80028d0 <curve_interp+0x2fc>)
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f207 4234 	addw	r2, r7, #1076	@ 0x434
 80026be:	6013      	str	r3, [r2, #0]
	float x_max_2 = V_max[curve_num_high-1];
 80026c0:	f8b7 343c 	ldrh.w	r3, [r7, #1084]	@ 0x43c
 80026c4:	3b01      	subs	r3, #1
 80026c6:	4a82      	ldr	r2, [pc, #520]	@ (80028d0 <curve_interp+0x2fc>)
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f507 6286 	add.w	r2, r7, #1072	@ 0x430
 80026d2:	6013      	str	r3, [r2, #0]
	float x_max_new = x_max_1 + (x_max_2 - x_max_1) * alpha;
 80026d4:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80026d8:	ed93 7a00 	vldr	s14, [r3]
 80026dc:	f207 4334 	addw	r3, r7, #1076	@ 0x434
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026e8:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f4:	f207 4334 	addw	r3, r7, #1076	@ 0x434
 80026f8:	ed93 7a00 	vldr	s14, [r3]
 80026fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002700:	f207 432c 	addw	r3, r7, #1068	@ 0x42c
 8002704:	edc3 7a00 	vstr	s15, [r3]
	float x2_norm[62];
	float y2_interp_norm[62];
	float y1;
	float y2[62];

	for(int i=0; i<62; i++){
 8002708:	2300      	movs	r3, #0
 800270a:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 800270e:	e04a      	b.n	80027a6 <curve_interp+0x1d2>
		x1_norm[i] = V_sc_irr[i] / x_max_1;
 8002710:	4a70      	ldr	r2, [pc, #448]	@ (80028d4 <curve_interp+0x300>)
 8002712:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	edd3 6a00 	vldr	s13, [r3]
 800271e:	f207 4334 	addw	r3, r7, #1076	@ 0x434
 8002722:	ed93 7a00 	vldr	s14, [r3]
 8002726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800272a:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800272e:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 8002732:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	edc3 7a00 	vstr	s15, [r3]
		x2_norm[i] = V_sc_irr[i] / x_max_2;
 800273e:	4a65      	ldr	r2, [pc, #404]	@ (80028d4 <curve_interp+0x300>)
 8002740:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	edd3 6a00 	vldr	s13, [r3]
 800274c:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8002750:	ed93 7a00 	vldr	s14, [r3]
 8002754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002758:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800275c:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 8002760:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	edc3 7a00 	vstr	s15, [r3]
		y2[i] = Z_sc_irr[(62 * (curve_num_high-1) + i)];
 800276c:	f8b7 343c 	ldrh.w	r3, [r7, #1084]	@ 0x43c
 8002770:	1e5a      	subs	r2, r3, #1
 8002772:	4613      	mov	r3, r2
 8002774:	015b      	lsls	r3, r3, #5
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	461a      	mov	r2, r3
 800277c:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8002780:	4413      	add	r3, r2
 8002782:	4a55      	ldr	r2, [pc, #340]	@ (80028d8 <curve_interp+0x304>)
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800278e:	f2a3 4134 	subw	r1, r3, #1076	@ 0x434
 8002792:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	601a      	str	r2, [r3, #0]
	for(int i=0; i<62; i++){
 800279c:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80027a0:	3301      	adds	r3, #1
 80027a2:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 80027a6:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80027aa:	2b3d      	cmp	r3, #61	@ 0x3d
 80027ac:	ddb0      	ble.n	8002710 <curve_interp+0x13c>
		//sprintf(buffert, "%.3f\r\n", y2[i]);
		//sendData(buffert);
	}

	curve_interp_1d(x2_norm, y2, 62, x1_norm, y2_interp_norm, 62);
 80027ae:	f507 723f 	add.w	r2, r7, #764	@ 0x2fc
 80027b2:	f107 0114 	add.w	r1, r7, #20
 80027b6:	f507 7001 	add.w	r0, r7, #516	@ 0x204
 80027ba:	233e      	movs	r3, #62	@ 0x3e
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	4613      	mov	r3, r2
 80027c6:	223e      	movs	r2, #62	@ 0x3e
 80027c8:	f7ff fe45 	bl	8002456 <curve_interp_1d>


	for(int i=0; i<62; i++){
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
 80027d2:	e060      	b.n	8002896 <curve_interp+0x2c2>
		y1 = Z_sc_irr[(62 * (curve_num_low-1) + i)];
 80027d4:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	@ 0x43e
 80027d8:	1e5a      	subs	r2, r3, #1
 80027da:	4613      	mov	r3, r2
 80027dc:	015b      	lsls	r3, r3, #5
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	461a      	mov	r2, r3
 80027e4:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80027e8:	4413      	add	r3, r2
 80027ea:	4a3b      	ldr	r2, [pc, #236]	@ (80028d8 <curve_interp+0x304>)
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 80027f6:	6013      	str	r3, [r2, #0]
		Z_sc_interp_inactive[61-i] =  (1 - alpha) * y1 + alpha * y2_interp_norm[i];
 80027f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80027fc:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002808:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800280c:	edd3 7a00 	vldr	s15, [r3]
 8002810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002814:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8002818:	f5a3 724f 	sub.w	r2, r3, #828	@ 0x33c
 800281c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	edd3 6a00 	vldr	s13, [r3]
 8002828:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800282c:	edd3 7a00 	vldr	s15, [r3]
 8002830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002834:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8002838:	f1c3 033d 	rsb	r3, r3, #61	@ 0x3d
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	f507 6289 	add.w	r2, r7, #1096	@ 0x448
 8002842:	f2a2 4244 	subw	r2, r2, #1092	@ 0x444
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	4413      	add	r3, r2
 800284a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800284e:	edc3 7a00 	vstr	s15, [r3]
		V_sc_interp_inactive[61-i] = x1_norm[i] * x_max_new;
 8002852:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8002856:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 800285a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	ed93 7a00 	vldr	s14, [r3]
 8002866:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 800286a:	f1c3 033d 	rsb	r3, r3, #61	@ 0x3d
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	f507 6289 	add.w	r2, r7, #1096	@ 0x448
 8002874:	f5a2 6288 	sub.w	r2, r2, #1088	@ 0x440
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	4413      	add	r3, r2
 800287c:	f207 422c 	addw	r2, r7, #1068	@ 0x42c
 8002880:	edd2 7a00 	vldr	s15, [r2]
 8002884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002888:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<62; i++){
 800288c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8002890:	3301      	adds	r3, #1
 8002892:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
 8002896:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 800289a:	2b3d      	cmp	r3, #61	@ 0x3d
 800289c:	dd9a      	ble.n	80027d4 <curve_interp+0x200>
		/*sprintf(buffert, "%.3f\r\n", Z_sc_interp_inactive[i]);
		//sprintf(buffert, "%.3f\r\n", y2_interp_norm[i]);
		sendData(buffert);*/
	}
	V_sc_interp_inactive[62] = 0;
 800289e:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80028a2:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	33f8      	adds	r3, #248	@ 0xf8
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
	Z_sc_interp_inactive[62] = 0;
 80028b0:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80028b4:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	33f8      	adds	r3, #248	@ 0xf8
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
}
 80028c2:	bf00      	nop
 80028c4:	f507 6789 	add.w	r7, r7, #1096	@ 0x448
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	42c80000 	.word	0x42c80000
 80028d0:	08010044 	.word	0x08010044
 80028d4:	0800ff4c 	.word	0x0800ff4c
 80028d8:	0800f59c 	.word	0x0800f59c
 80028dc:	00000000 	.word	0x00000000

080028e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028e0:	b5b0      	push	{r4, r5, r7, lr}
 80028e2:	b08a      	sub	sp, #40	@ 0x28
 80028e4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028e6:	f001 fb35 	bl	8003f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028ea:	f000 fad9 	bl	8002ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028ee:	f000 fe25 	bl	800353c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80028f2:	f000 fc33 	bl	800315c <MX_GPDMA1_Init>
  MX_ADC1_Init();
 80028f6:	f000 fb51 	bl	8002f9c <MX_ADC1_Init>
  MX_DAC1_Init();
 80028fa:	f000 fbf7 	bl	80030ec <MX_DAC1_Init>
  MX_SPI2_Init();
 80028fe:	f000 fc4d 	bl	800319c <MX_SPI2_Init>
  MX_TIM2_Init();
 8002902:	f000 fcf5 	bl	80032f0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8002906:	f000 fd9b 	bl	8003440 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 800290a:	f000 fde5 	bl	80034d8 <MX_USB_PCD_Init>
  MX_TIM3_Init();
 800290e:	f000 fd49 	bl	80033a4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8002912:	f000 fc99 	bl	8003248 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, EN_Pin, GPIO_PIN_RESET);
 8002916:	2200      	movs	r2, #0
 8002918:	2140      	movs	r1, #64	@ 0x40
 800291a:	4899      	ldr	r0, [pc, #612]	@ (8002b80 <main+0x2a0>)
 800291c:	f004 fa28 	bl	8006d70 <HAL_GPIO_WritePin>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002920:	217f      	movs	r1, #127	@ 0x7f
 8002922:	4898      	ldr	r0, [pc, #608]	@ (8002b84 <main+0x2a4>)
 8002924:	f002 fe3a 	bl	800559c <HAL_ADCEx_Calibration_Start>
  HAL_GPIO_WritePin(GPIOB, DISP_CS_Pin, GPIO_PIN_RESET);
 8002928:	2200      	movs	r2, #0
 800292a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800292e:	4896      	ldr	r0, [pc, #600]	@ (8002b88 <main+0x2a8>)
 8002930:	f004 fa1e 	bl	8006d70 <HAL_GPIO_WritePin>
  clearDisplay();
 8002934:	f7fe fdb2 	bl	800149c <clearDisplay>
  init_buffer();
 8002938:	f7fe fbf6 	bl	8001128 <init_buffer>
  writeBuffer();
 800293c:	f7fe fb5c 	bl	8000ff8 <writeBuffer>

  precompute_slopes(Z_sc, V_sc, Z_V_slopes, 46);
 8002940:	232e      	movs	r3, #46	@ 0x2e
 8002942:	4a92      	ldr	r2, [pc, #584]	@ (8002b8c <main+0x2ac>)
 8002944:	4992      	ldr	r1, [pc, #584]	@ (8002b90 <main+0x2b0>)
 8002946:	4893      	ldr	r0, [pc, #588]	@ (8002b94 <main+0x2b4>)
 8002948:	f7ff fd2c 	bl	80023a4 <precompute_slopes>


  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // Start DAC
 800294c:	2100      	movs	r1, #0
 800294e:	4892      	ldr	r0, [pc, #584]	@ (8002b98 <main+0x2b8>)
 8002950:	f003 f838 	bl	80059c4 <HAL_DAC_Start>

  HAL_TIM_Base_Start_IT(&htim1);  // Slow LCD interrupt (T = 300ms)
 8002954:	4891      	ldr	r0, [pc, #580]	@ (8002b9c <main+0x2bc>)
 8002956:	f007 ffef 	bl	800a938 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);  // Fast control loop interrupt (f = 10kHz)
 800295a:	4891      	ldr	r0, [pc, #580]	@ (8002ba0 <main+0x2c0>)
 800295c:	f007 ffec 	bl	800a938 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, 5);
 8002960:	2205      	movs	r2, #5
 8002962:	4990      	ldr	r1, [pc, #576]	@ (8002ba4 <main+0x2c4>)
 8002964:	4887      	ldr	r0, [pc, #540]	@ (8002b84 <main+0x2a4>)
 8002966:	f001 ff5d 	bl	8004824 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(slow_timer_flag){
 800296a:	4b8f      	ldr	r3, [pc, #572]	@ (8002ba8 <main+0x2c8>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0fa      	beq.n	800296a <main+0x8a>
		  //ADC_LOAD_VOL_CNTS           = Read_ADC_Value(ADC_CHANNEL_1);
		  //uint32_t ADC_LOAD_CURR_CNTS = Read_ADC_Value(ADC_CHANNEL_0);
		  //uint32_t ADC_POT_CNTS       = Read_ADC_Value(ADC_CHANNEL_14);
		  //uint32_t ADC_TEMP_CNTS      = Read_ADC_Value(ADC_CHANNEL_9);

		  ADC_VIN_V       = (float)adc_buffer[2]/4095.0*2.5*6.1;
 8002974:	4b8b      	ldr	r3, [pc, #556]	@ (8002ba4 <main+0x2c4>)
 8002976:	889b      	ldrh	r3, [r3, #4]
 8002978:	b29b      	uxth	r3, r3
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002982:	ee17 0a90 	vmov	r0, s15
 8002986:	f7fd fdf3 	bl	8000570 <__aeabi_f2d>
 800298a:	a375      	add	r3, pc, #468	@ (adr r3, 8002b60 <main+0x280>)
 800298c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002990:	f7fd ff70 	bl	8000874 <__aeabi_ddiv>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	4b82      	ldr	r3, [pc, #520]	@ (8002bac <main+0x2cc>)
 80029a2:	f7fd fe3d 	bl	8000620 <__aeabi_dmul>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	a36e      	add	r3, pc, #440	@ (adr r3, 8002b68 <main+0x288>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f7fd fe34 	bl	8000620 <__aeabi_dmul>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f7fe f926 	bl	8000c10 <__aeabi_d2f>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4a7a      	ldr	r2, [pc, #488]	@ (8002bb0 <main+0x2d0>)
 80029c8:	6013      	str	r3, [r2, #0]
		  //ADC_LOAD_VOL_V         = (double)ADC_LOAD_VOL_CNTS/4095.0*2.5*6.0;
		  //double ADC_LOAD_CUR_A  = ((double)adc_buffer[1]/4095.0*2.5 - 0.12438)/0.20/20.0;
		  float ADC_TEMP_DC     = ((float)adc_buffer[3]/4095.0*2.5 - 0.5)/0.010;
 80029ca:	4b76      	ldr	r3, [pc, #472]	@ (8002ba4 <main+0x2c4>)
 80029cc:	88db      	ldrh	r3, [r3, #6]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d8:	ee17 0a90 	vmov	r0, s15
 80029dc:	f7fd fdc8 	bl	8000570 <__aeabi_f2d>
 80029e0:	a35f      	add	r3, pc, #380	@ (adr r3, 8002b60 <main+0x280>)
 80029e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e6:	f7fd ff45 	bl	8000874 <__aeabi_ddiv>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4610      	mov	r0, r2
 80029f0:	4619      	mov	r1, r3
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	4b6d      	ldr	r3, [pc, #436]	@ (8002bac <main+0x2cc>)
 80029f8:	f7fd fe12 	bl	8000620 <__aeabi_dmul>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4610      	mov	r0, r2
 8002a02:	4619      	mov	r1, r3
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb4 <main+0x2d4>)
 8002a0a:	f7fd fc51 	bl	80002b0 <__aeabi_dsub>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4610      	mov	r0, r2
 8002a14:	4619      	mov	r1, r3
 8002a16:	a356      	add	r3, pc, #344	@ (adr r3, 8002b70 <main+0x290>)
 8002a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1c:	f7fd ff2a 	bl	8000874 <__aeabi_ddiv>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	f7fe f8f2 	bl	8000c10 <__aeabi_d2f>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	617b      	str	r3, [r7, #20]
		  uint16_t ADC_POT_IRR  = (uint16_t)((float)adc_buffer[4]*0.2442002442);
 8002a30:	4b5c      	ldr	r3, [pc, #368]	@ (8002ba4 <main+0x2c4>)
 8002a32:	891b      	ldrh	r3, [r3, #8]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a3e:	ee17 0a90 	vmov	r0, s15
 8002a42:	f7fd fd95 	bl	8000570 <__aeabi_f2d>
 8002a46:	a34c      	add	r3, pc, #304	@ (adr r3, 8002b78 <main+0x298>)
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	f7fd fde8 	bl	8000620 <__aeabi_dmul>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4610      	mov	r0, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	f7fe f8ba 	bl	8000bd0 <__aeabi_d2uiz>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	827b      	strh	r3, [r7, #18]

		  ADC_POT_IRR_FILT = (uint16_t)((.75 * (float)ADC_POT_IRR) + (0.25 * (float)ADC_POT_IRR_FILT_PREV));
 8002a60:	8a7b      	ldrh	r3, [r7, #18]
 8002a62:	ee07 3a90 	vmov	s15, r3
 8002a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a6a:	ee17 0a90 	vmov	r0, s15
 8002a6e:	f7fd fd7f 	bl	8000570 <__aeabi_f2d>
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	4b50      	ldr	r3, [pc, #320]	@ (8002bb8 <main+0x2d8>)
 8002a78:	f7fd fdd2 	bl	8000620 <__aeabi_dmul>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4614      	mov	r4, r2
 8002a82:	461d      	mov	r5, r3
 8002a84:	4b4d      	ldr	r3, [pc, #308]	@ (8002bbc <main+0x2dc>)
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	ee07 3a90 	vmov	s15, r3
 8002a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a90:	ee17 0a90 	vmov	r0, s15
 8002a94:	f7fd fd6c 	bl	8000570 <__aeabi_f2d>
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	4b48      	ldr	r3, [pc, #288]	@ (8002bc0 <main+0x2e0>)
 8002a9e:	f7fd fdbf 	bl	8000620 <__aeabi_dmul>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	f7fd fc03 	bl	80002b4 <__adddf3>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f7fe f88b 	bl	8000bd0 <__aeabi_d2uiz>
 8002aba:	4603      	mov	r3, r0
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	4b41      	ldr	r3, [pc, #260]	@ (8002bc4 <main+0x2e4>)
 8002ac0:	801a      	strh	r2, [r3, #0]

		  	 // *******************
		  uint32_t currentTime = HAL_GetTick(); // Current system time in ms
 8002ac2:	f001 faf9 	bl	80040b8 <HAL_GetTick>
 8002ac6:	60f8      	str	r0, [r7, #12]

		  //if(abs(ADC_POT_IRR_FILT_PREV - ADC_POT_IRR_FILT)  > 3){
		  if(ADC_POT_IRR_FILT != ADC_POT_IRR_FILT_PREV){
 8002ac8:	4b3e      	ldr	r3, [pc, #248]	@ (8002bc4 <main+0x2e4>)
 8002aca:	881a      	ldrh	r2, [r3, #0]
 8002acc:	4b3b      	ldr	r3, [pc, #236]	@ (8002bbc <main+0x2dc>)
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d009      	beq.n	8002ae8 <main+0x208>
			  lastStableTime = currentTime;
 8002ad4:	4a3c      	ldr	r2, [pc, #240]	@ (8002bc8 <main+0x2e8>)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6013      	str	r3, [r2, #0]
			  isStable = false;
 8002ada:	4b3c      	ldr	r3, [pc, #240]	@ (8002bcc <main+0x2ec>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
			  hasRun = false;
 8002ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd0 <main+0x2f0>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	e010      	b.n	8002b0a <main+0x22a>
		  } else if (!isStable && (currentTime - lastStableTime >= 300)) {
 8002ae8:	4b38      	ldr	r3, [pc, #224]	@ (8002bcc <main+0x2ec>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	f083 0301 	eor.w	r3, r3, #1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <main+0x22a>
 8002af6:	4b34      	ldr	r3, [pc, #208]	@ (8002bc8 <main+0x2e8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002b02:	d302      	bcc.n	8002b0a <main+0x22a>
		      // Value remained unchanged for the required duration
			  isStable = true;
 8002b04:	4b31      	ldr	r3, [pc, #196]	@ (8002bcc <main+0x2ec>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	701a      	strb	r2, [r3, #0]
		    }
		    if (isStable && !hasRun) {
 8002b0a:	4b30      	ldr	r3, [pc, #192]	@ (8002bcc <main+0x2ec>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d07b      	beq.n	8002c0a <main+0x32a>
 8002b12:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd0 <main+0x2f0>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	f083 0301 	eor.w	r3, r3, #1
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d074      	beq.n	8002c0a <main+0x32a>
		        hasRun = true; // Ensure this block only runs once
 8002b20:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd0 <main+0x2f0>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	701a      	strb	r2, [r3, #0]
		        HAL_GPIO_TogglePin(GPIOB, LED_YELLOW_Pin);
 8002b26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b2a:	4817      	ldr	r0, [pc, #92]	@ (8002b88 <main+0x2a8>)
 8002b2c:	f004 f938 	bl	8006da0 <HAL_GPIO_TogglePin>


		            // A_buffer being used in high speed loop
		        	if(A_buffer_active == 1){
 8002b30:	4b28      	ldr	r3, [pc, #160]	@ (8002bd4 <main+0x2f4>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d154      	bne.n	8002be4 <main+0x304>
		        		curve_interp(ADC_POT_IRR_FILT, V_sc_interp_B, Z_sc_interp_B);
 8002b3a:	4b22      	ldr	r3, [pc, #136]	@ (8002bc4 <main+0x2e4>)
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	4a26      	ldr	r2, [pc, #152]	@ (8002bd8 <main+0x2f8>)
 8002b40:	4926      	ldr	r1, [pc, #152]	@ (8002bdc <main+0x2fc>)
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fd46 	bl	80025d4 <curve_interp>
		        		precompute_slopes(Z_sc_interp_B, V_sc_interp_B, Z_V_slopes_B, 63);
 8002b48:	233f      	movs	r3, #63	@ 0x3f
 8002b4a:	4a25      	ldr	r2, [pc, #148]	@ (8002be0 <main+0x300>)
 8002b4c:	4923      	ldr	r1, [pc, #140]	@ (8002bdc <main+0x2fc>)
 8002b4e:	4822      	ldr	r0, [pc, #136]	@ (8002bd8 <main+0x2f8>)
 8002b50:	f7ff fc28 	bl	80023a4 <precompute_slopes>
		        		A_buffer_active = 0;
 8002b54:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd4 <main+0x2f4>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
 8002b5a:	e053      	b.n	8002c04 <main+0x324>
 8002b5c:	f3af 8000 	nop.w
 8002b60:	00000000 	.word	0x00000000
 8002b64:	40affe00 	.word	0x40affe00
 8002b68:	66666666 	.word	0x66666666
 8002b6c:	40186666 	.word	0x40186666
 8002b70:	47ae147b 	.word	0x47ae147b
 8002b74:	3f847ae1 	.word	0x3f847ae1
 8002b78:	1f41d1c1 	.word	0x1f41d1c1
 8002b7c:	3fcf41f4 	.word	0x3fcf41f4
 8002b80:	42020000 	.word	0x42020000
 8002b84:	200001f4 	.word	0x200001f4
 8002b88:	42020400 	.word	0x42020400
 8002b8c:	200036e4 	.word	0x200036e4
 8002b90:	0800f42c 	.word	0x0800f42c
 8002b94:	0800f4e4 	.word	0x0800f4e4
 8002b98:	200002d4 	.word	0x200002d4
 8002b9c:	20000378 	.word	0x20000378
 8002ba0:	20000410 	.word	0x20000410
 8002ba4:	200007d8 	.word	0x200007d8
 8002ba8:	200007d4 	.word	0x200007d4
 8002bac:	40040000 	.word	0x40040000
 8002bb0:	200036c8 	.word	0x200036c8
 8002bb4:	3fe00000 	.word	0x3fe00000
 8002bb8:	3fe80000 	.word	0x3fe80000
 8002bbc:	200037aa 	.word	0x200037aa
 8002bc0:	3fd00000 	.word	0x3fd00000
 8002bc4:	200037a8 	.word	0x200037a8
 8002bc8:	20003da4 	.word	0x20003da4
 8002bcc:	20003da8 	.word	0x20003da8
 8002bd0:	20003da9 	.word	0x20003da9
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	20003aac 	.word	0x20003aac
 8002bdc:	200039b0 	.word	0x200039b0
 8002be0:	20003ca4 	.word	0x20003ca4

		        	}

		        	// B_buffer being used in high speed loop
		        	else{
		        		curve_interp(ADC_POT_IRR_FILT, V_sc_interp_A, Z_sc_interp_A);
 8002be4:	4b91      	ldr	r3, [pc, #580]	@ (8002e2c <main+0x54c>)
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	4a91      	ldr	r2, [pc, #580]	@ (8002e30 <main+0x550>)
 8002bea:	4992      	ldr	r1, [pc, #584]	@ (8002e34 <main+0x554>)
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fcf1 	bl	80025d4 <curve_interp>
		        		precompute_slopes(Z_sc_interp_A, V_sc_interp_A, Z_V_slopes_A, 63);
 8002bf2:	233f      	movs	r3, #63	@ 0x3f
 8002bf4:	4a90      	ldr	r2, [pc, #576]	@ (8002e38 <main+0x558>)
 8002bf6:	498f      	ldr	r1, [pc, #572]	@ (8002e34 <main+0x554>)
 8002bf8:	488d      	ldr	r0, [pc, #564]	@ (8002e30 <main+0x550>)
 8002bfa:	f7ff fbd3 	bl	80023a4 <precompute_slopes>
		        		A_buffer_active = 1;
 8002bfe:	4b8f      	ldr	r3, [pc, #572]	@ (8002e3c <main+0x55c>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
		        	}

		        //

				initial_run = 1;
 8002c04:	4b8e      	ldr	r3, [pc, #568]	@ (8002e40 <main+0x560>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	701a      	strb	r2, [r3, #0]

		    } //**************************
		    ADC_POT_IRR_FILT_PREV = ADC_POT_IRR_FILT;
 8002c0a:	4b88      	ldr	r3, [pc, #544]	@ (8002e2c <main+0x54c>)
 8002c0c:	881a      	ldrh	r2, [r3, #0]
 8002c0e:	4b8d      	ldr	r3, [pc, #564]	@ (8002e44 <main+0x564>)
 8002c10:	801a      	strh	r2, [r3, #0]

		  sendData(adcBuffer1);
		  sprintf(adcBuffer1, "%lu\n\n", ADC_LOAD_CURR_CNTS);  // Convert to string (optional)
		  sendData(adcBuffer1);*/

		  uint8_t OUTPUT_EN_SW_STATE =  HAL_GPIO_ReadPin(GPIOA, OUTPUT_EN_SW_Pin);
 8002c12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c16:	488c      	ldr	r0, [pc, #560]	@ (8002e48 <main+0x568>)
 8002c18:	f004 f892 	bl	8006d40 <HAL_GPIO_ReadPin>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	72fb      	strb	r3, [r7, #11]
		  HAL_GPIO_WritePin(GPIOA, EN_Pin, OUTPUT_EN_SW_STATE);
 8002c20:	7afb      	ldrb	r3, [r7, #11]
 8002c22:	461a      	mov	r2, r3
 8002c24:	2140      	movs	r1, #64	@ 0x40
 8002c26:	4888      	ldr	r0, [pc, #544]	@ (8002e48 <main+0x568>)
 8002c28:	f004 f8a2 	bl	8006d70 <HAL_GPIO_WritePin>

		  HAL_GPIO_TogglePin(GPIOB, LED_BLUE_Pin);
 8002c2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002c30:	4886      	ldr	r0, [pc, #536]	@ (8002e4c <main+0x56c>)
 8002c32:	f004 f8b5 	bl	8006da0 <HAL_GPIO_TogglePin>

		  init_buffer();
 8002c36:	f7fe fa77 	bl	8001128 <init_buffer>

		  drawString(290, 20, "Vout = ",  0, 1, 1, 1);
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	9302      	str	r3, [sp, #8]
 8002c3e:	2301      	movs	r3, #1
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	2301      	movs	r3, #1
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	2300      	movs	r3, #0
 8002c48:	4a81      	ldr	r2, [pc, #516]	@ (8002e50 <main+0x570>)
 8002c4a:	2114      	movs	r1, #20
 8002c4c:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8002c50:	f7fe ffb2 	bl	8001bb8 <drawString>
		  drawDouble(ADC_LOAD_VOL_V, 330, 20);
 8002c54:	4b7f      	ldr	r3, [pc, #508]	@ (8002e54 <main+0x574>)
 8002c56:	edd3 7a00 	vldr	s15, [r3]
 8002c5a:	2114      	movs	r1, #20
 8002c5c:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8002c60:	eeb0 0a67 	vmov.f32	s0, s15
 8002c64:	f7fe ffe4 	bl	8001c30 <drawDouble>
		  drawString(365, 20, "V",  0, 1, 1, 1);
 8002c68:	2301      	movs	r3, #1
 8002c6a:	9302      	str	r3, [sp, #8]
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	9301      	str	r3, [sp, #4]
 8002c70:	2301      	movs	r3, #1
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	2300      	movs	r3, #0
 8002c76:	4a78      	ldr	r2, [pc, #480]	@ (8002e58 <main+0x578>)
 8002c78:	2114      	movs	r1, #20
 8002c7a:	f240 106d 	movw	r0, #365	@ 0x16d
 8002c7e:	f7fe ff9b 	bl	8001bb8 <drawString>

		  drawString(290, 35, "Iout = ",  0, 1, 1, 1);
 8002c82:	2301      	movs	r3, #1
 8002c84:	9302      	str	r3, [sp, #8]
 8002c86:	2301      	movs	r3, #1
 8002c88:	9301      	str	r3, [sp, #4]
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	4a72      	ldr	r2, [pc, #456]	@ (8002e5c <main+0x57c>)
 8002c92:	2123      	movs	r1, #35	@ 0x23
 8002c94:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8002c98:	f7fe ff8e 	bl	8001bb8 <drawString>
		  drawDouble(ADC_LOAD_CUR_A*1000, 330, 35);
 8002c9c:	4b70      	ldr	r3, [pc, #448]	@ (8002e60 <main+0x580>)
 8002c9e:	edd3 7a00 	vldr	s15, [r3]
 8002ca2:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8002e64 <main+0x584>
 8002ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002caa:	2123      	movs	r1, #35	@ 0x23
 8002cac:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8002cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8002cb4:	f7fe ffbc 	bl	8001c30 <drawDouble>
		  drawString(370, 35, "mA",  0, 1, 1, 1);
 8002cb8:	2301      	movs	r3, #1
 8002cba:	9302      	str	r3, [sp, #8]
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	9301      	str	r3, [sp, #4]
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	4a68      	ldr	r2, [pc, #416]	@ (8002e68 <main+0x588>)
 8002cc8:	2123      	movs	r1, #35	@ 0x23
 8002cca:	f44f 70b9 	mov.w	r0, #370	@ 0x172
 8002cce:	f7fe ff73 	bl	8001bb8 <drawString>

		  drawString(290, 50, "Temp = ",  0, 1, 1, 1);
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	9302      	str	r3, [sp, #8]
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	2301      	movs	r3, #1
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	4a62      	ldr	r2, [pc, #392]	@ (8002e6c <main+0x58c>)
 8002ce2:	2132      	movs	r1, #50	@ 0x32
 8002ce4:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8002ce8:	f7fe ff66 	bl	8001bb8 <drawString>
		  drawDouble(ADC_TEMP_DC, 330, 50);
 8002cec:	2132      	movs	r1, #50	@ 0x32
 8002cee:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8002cf2:	ed97 0a05 	vldr	s0, [r7, #20]
 8002cf6:	f7fe ff9b 	bl	8001c30 <drawDouble>
		  drawString(370, 50, "C",  0, 1, 1, 1);
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	9302      	str	r3, [sp, #8]
 8002cfe:	2301      	movs	r3, #1
 8002d00:	9301      	str	r3, [sp, #4]
 8002d02:	2301      	movs	r3, #1
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	2300      	movs	r3, #0
 8002d08:	4a59      	ldr	r2, [pc, #356]	@ (8002e70 <main+0x590>)
 8002d0a:	2132      	movs	r1, #50	@ 0x32
 8002d0c:	f44f 70b9 	mov.w	r0, #370	@ 0x172
 8002d10:	f7fe ff52 	bl	8001bb8 <drawString>

		  drawString(290, 65, "Vin = ",  0, 1, 1, 1);
 8002d14:	2301      	movs	r3, #1
 8002d16:	9302      	str	r3, [sp, #8]
 8002d18:	2301      	movs	r3, #1
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2300      	movs	r3, #0
 8002d22:	4a54      	ldr	r2, [pc, #336]	@ (8002e74 <main+0x594>)
 8002d24:	2141      	movs	r1, #65	@ 0x41
 8002d26:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8002d2a:	f7fe ff45 	bl	8001bb8 <drawString>
		  drawDouble(ADC_VIN_V, 330, 65);
 8002d2e:	4b52      	ldr	r3, [pc, #328]	@ (8002e78 <main+0x598>)
 8002d30:	edd3 7a00 	vldr	s15, [r3]
 8002d34:	2141      	movs	r1, #65	@ 0x41
 8002d36:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8002d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d3e:	f7fe ff77 	bl	8001c30 <drawDouble>
		  drawString(365, 65, "V",  0, 1, 1, 1);
 8002d42:	2301      	movs	r3, #1
 8002d44:	9302      	str	r3, [sp, #8]
 8002d46:	2301      	movs	r3, #1
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	4a41      	ldr	r2, [pc, #260]	@ (8002e58 <main+0x578>)
 8002d52:	2141      	movs	r1, #65	@ 0x41
 8002d54:	f240 106d 	movw	r0, #365	@ 0x16d
 8002d58:	f7fe ff2e 	bl	8001bb8 <drawString>

		  drawString(290, 80, "Irr = ",  0, 1, 1, 1);
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	9302      	str	r3, [sp, #8]
 8002d60:	2301      	movs	r3, #1
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	2301      	movs	r3, #1
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	4a44      	ldr	r2, [pc, #272]	@ (8002e7c <main+0x59c>)
 8002d6c:	2150      	movs	r1, #80	@ 0x50
 8002d6e:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8002d72:	f7fe ff21 	bl	8001bb8 <drawString>
		  drawInt(ADC_POT_IRR_FILT, 330, 80);
 8002d76:	4b2d      	ldr	r3, [pc, #180]	@ (8002e2c <main+0x54c>)
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	2250      	movs	r2, #80	@ 0x50
 8002d7c:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe ff7f 	bl	8001c84 <drawInt>
		  drawString(350, 80, "W/m^2",  0, 1, 1, 1);
 8002d86:	2301      	movs	r3, #1
 8002d88:	9302      	str	r3, [sp, #8]
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	9301      	str	r3, [sp, #4]
 8002d8e:	2301      	movs	r3, #1
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	2300      	movs	r3, #0
 8002d94:	4a3a      	ldr	r2, [pc, #232]	@ (8002e80 <main+0x5a0>)
 8002d96:	2150      	movs	r1, #80	@ 0x50
 8002d98:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8002d9c:	f7fe ff0c 	bl	8001bb8 <drawString>

		  //
		  //uint16_t ADC_LOAD_VOL_MAPPED   = (uint16_t)roundf(map(ADC_LOAD_VOL_V, 0, 3, 30, 260));
		  uint16_t ADC_LOAD_VOL_MAPPED   = (uint16_t)roundf(map(ADC_LOAD_VOL_V, 0, 5, 40, 320));
 8002da0:	4b2c      	ldr	r3, [pc, #176]	@ (8002e54 <main+0x574>)
 8002da2:	edd3 7a00 	vldr	s15, [r3]
 8002da6:	ed9f 2a37 	vldr	s4, [pc, #220]	@ 8002e84 <main+0x5a4>
 8002daa:	eddf 1a37 	vldr	s3, [pc, #220]	@ 8002e88 <main+0x5a8>
 8002dae:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8002db2:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8002e8c <main+0x5ac>
 8002db6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dba:	f7fe ff87 	bl	8001ccc <map>
 8002dbe:	eef0 7a40 	vmov.f32	s15, s0
 8002dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc6:	f00c faf3 	bl	800f3b0 <roundf>
 8002dca:	eef0 7a40 	vmov.f32	s15, s0
 8002dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dd2:	ee17 3a90 	vmov	r3, s15
 8002dd6:	813b      	strh	r3, [r7, #8]
		  uint16_t ADC_LOAD_CUR_A_MAPPED = (uint16_t)roundf(map(ADC_LOAD_CUR_A, 0, .05, 200, 50));
 8002dd8:	4b21      	ldr	r3, [pc, #132]	@ (8002e60 <main+0x580>)
 8002dda:	edd3 7a00 	vldr	s15, [r3]
 8002dde:	ed9f 2a2c 	vldr	s4, [pc, #176]	@ 8002e90 <main+0x5b0>
 8002de2:	eddf 1a2c 	vldr	s3, [pc, #176]	@ 8002e94 <main+0x5b4>
 8002de6:	ed9f 1a2c 	vldr	s2, [pc, #176]	@ 8002e98 <main+0x5b8>
 8002dea:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8002e8c <main+0x5ac>
 8002dee:	eeb0 0a67 	vmov.f32	s0, s15
 8002df2:	f7fe ff6b 	bl	8001ccc <map>
 8002df6:	eef0 7a40 	vmov.f32	s15, s0
 8002dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8002dfe:	f00c fad7 	bl	800f3b0 <roundf>
 8002e02:	eef0 7a40 	vmov.f32	s15, s0
 8002e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e0a:	ee17 3a90 	vmov	r3, s15
 8002e0e:	80fb      	strh	r3, [r7, #6]
		  drawCircle(ADC_LOAD_VOL_MAPPED, ADC_LOAD_CUR_A_MAPPED, 2, 0);
 8002e10:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8002e14:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f7fe fc6a 	bl	80016f4 <drawCircle>

		  writeBuffer();
 8002e20:	f7fe f8ea 	bl	8000ff8 <writeBuffer>

		  slow_timer_flag = 0;
 8002e24:	4b1d      	ldr	r3, [pc, #116]	@ (8002e9c <main+0x5bc>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	701a      	strb	r2, [r3, #0]
	  if(slow_timer_flag){
 8002e2a:	e59e      	b.n	800296a <main+0x8a>
 8002e2c:	200037a8 	.word	0x200037a8
 8002e30:	200038b4 	.word	0x200038b4
 8002e34:	200037b8 	.word	0x200037b8
 8002e38:	20003ba8 	.word	0x20003ba8
 8002e3c:	20000000 	.word	0x20000000
 8002e40:	20003da0 	.word	0x20003da0
 8002e44:	200037aa 	.word	0x200037aa
 8002e48:	42020000 	.word	0x42020000
 8002e4c:	42020400 	.word	0x42020400
 8002e50:	0800f3f0 	.word	0x0800f3f0
 8002e54:	200036c4 	.word	0x200036c4
 8002e58:	0800f3f8 	.word	0x0800f3f8
 8002e5c:	0800f3fc 	.word	0x0800f3fc
 8002e60:	200036cc 	.word	0x200036cc
 8002e64:	447a0000 	.word	0x447a0000
 8002e68:	0800f404 	.word	0x0800f404
 8002e6c:	0800f408 	.word	0x0800f408
 8002e70:	0800f410 	.word	0x0800f410
 8002e74:	0800f414 	.word	0x0800f414
 8002e78:	200036c8 	.word	0x200036c8
 8002e7c:	0800f41c 	.word	0x0800f41c
 8002e80:	0800f424 	.word	0x0800f424
 8002e84:	43a00000 	.word	0x43a00000
 8002e88:	42200000 	.word	0x42200000
 8002e8c:	00000000 	.word	0x00000000
 8002e90:	42480000 	.word	0x42480000
 8002e94:	43480000 	.word	0x43480000
 8002e98:	3d4ccccd 	.word	0x3d4ccccd
 8002e9c:	200007d4 	.word	0x200007d4

08002ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b09c      	sub	sp, #112	@ 0x70
 8002ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ea6:	f107 0320 	add.w	r3, r7, #32
 8002eaa:	2250      	movs	r2, #80	@ 0x50
 8002eac:	2100      	movs	r1, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f00a f8a1 	bl	800cff6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eb4:	f107 0308 	add.w	r3, r7, #8
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
 8002ec4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002ec6:	4b33      	ldr	r3, [pc, #204]	@ (8002f94 <SystemClock_Config+0xf4>)
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	4a32      	ldr	r2, [pc, #200]	@ (8002f94 <SystemClock_Config+0xf4>)
 8002ecc:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002ed0:	6113      	str	r3, [r2, #16]
 8002ed2:	4b30      	ldr	r3, [pc, #192]	@ (8002f94 <SystemClock_Config+0xf4>)
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002eda:	607b      	str	r3, [r7, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002ede:	bf00      	nop
 8002ee0:	4b2c      	ldr	r3, [pc, #176]	@ (8002f94 <SystemClock_Config+0xf4>)
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d1f9      	bne.n	8002ee0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8002eec:	233a      	movs	r3, #58	@ 0x3a
 8002eee:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_CSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8002ef4:	2308      	movs	r3, #8
 8002ef6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ef8:	2340      	movs	r3, #64	@ 0x40
 8002efa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002efc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002f00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002f02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f06:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8002f08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8002f0e:	2320      	movs	r3, #32
 8002f10:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f12:	2302      	movs	r3, #2
 8002f14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSI;
 8002f16:	2301      	movs	r3, #1
 8002f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 26;
 8002f1e:	231a      	movs	r3, #26
 8002f20:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002f22:	2302      	movs	r3, #2
 8002f24:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 16;
 8002f26:	2310      	movs	r3, #16
 8002f28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8002f2e:	230c      	movs	r3, #12
 8002f30:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8002f32:	2300      	movs	r3, #0
 8002f34:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f3a:	f107 0320 	add.w	r3, r7, #32
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f004 f86c 	bl	800701c <HAL_RCC_OscConfig>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002f4a:	f000 fb5f 	bl	800360c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f4e:	231f      	movs	r3, #31
 8002f50:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f52:	2303      	movs	r3, #3
 8002f54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002f56:	2308      	movs	r3, #8
 8002f58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f66:	f107 0308 	add.w	r3, r7, #8
 8002f6a:	2104      	movs	r1, #4
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f004 fc8d 	bl	800788c <HAL_RCC_ClockConfig>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8002f78:	f000 fb48 	bl	800360c <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8002f7c:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <SystemClock_Config+0xf8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002f84:	4a04      	ldr	r2, [pc, #16]	@ (8002f98 <SystemClock_Config+0xf8>)
 8002f86:	f043 0320 	orr.w	r3, r3, #32
 8002f8a:	6013      	str	r3, [r2, #0]
}
 8002f8c:	bf00      	nop
 8002f8e:	3770      	adds	r7, #112	@ 0x70
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	44020800 	.word	0x44020800
 8002f98:	40022000 	.word	0x40022000

08002f9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002fa2:	463b      	mov	r3, r7
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f00a f824 	bl	800cff6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002fae:	4b49      	ldr	r3, [pc, #292]	@ (80030d4 <MX_ADC1_Init+0x138>)
 8002fb0:	4a49      	ldr	r2, [pc, #292]	@ (80030d8 <MX_ADC1_Init+0x13c>)
 8002fb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002fb4:	4b47      	ldr	r3, [pc, #284]	@ (80030d4 <MX_ADC1_Init+0x138>)
 8002fb6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002fba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002fbc:	4b45      	ldr	r3, [pc, #276]	@ (80030d4 <MX_ADC1_Init+0x138>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fc2:	4b44      	ldr	r3, [pc, #272]	@ (80030d4 <MX_ADC1_Init+0x138>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002fc8:	4b42      	ldr	r3, [pc, #264]	@ (80030d4 <MX_ADC1_Init+0x138>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002fce:	4b41      	ldr	r3, [pc, #260]	@ (80030d4 <MX_ADC1_Init+0x138>)
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80030d4 <MX_ADC1_Init+0x138>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002fda:	4b3e      	ldr	r3, [pc, #248]	@ (80030d4 <MX_ADC1_Init+0x138>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8002fe0:	4b3c      	ldr	r3, [pc, #240]	@ (80030d4 <MX_ADC1_Init+0x138>)
 8002fe2:	2205      	movs	r2, #5
 8002fe4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80030d4 <MX_ADC1_Init+0x138>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8002fee:	4b39      	ldr	r3, [pc, #228]	@ (80030d4 <MX_ADC1_Init+0x138>)
 8002ff0:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8002ff4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002ff6:	4b37      	ldr	r3, [pc, #220]	@ (80030d4 <MX_ADC1_Init+0x138>)
 8002ff8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ffe:	4b35      	ldr	r3, [pc, #212]	@ (80030d4 <MX_ADC1_Init+0x138>)
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8003006:	4b33      	ldr	r3, [pc, #204]	@ (80030d4 <MX_ADC1_Init+0x138>)
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800300c:	4b31      	ldr	r3, [pc, #196]	@ (80030d4 <MX_ADC1_Init+0x138>)
 800300e:	2200      	movs	r2, #0
 8003010:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003012:	4b30      	ldr	r3, [pc, #192]	@ (80030d4 <MX_ADC1_Init+0x138>)
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800301a:	482e      	ldr	r0, [pc, #184]	@ (80030d4 <MX_ADC1_Init+0x138>)
 800301c:	f001 fab4 	bl	8004588 <HAL_ADC_Init>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003026:	f000 faf1 	bl	800360c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800302a:	4b2c      	ldr	r3, [pc, #176]	@ (80030dc <MX_ADC1_Init+0x140>)
 800302c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800302e:	2306      	movs	r3, #6
 8003030:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8003032:	2302      	movs	r3, #2
 8003034:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003036:	237f      	movs	r3, #127	@ 0x7f
 8003038:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800303a:	2304      	movs	r3, #4
 800303c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003042:	463b      	mov	r3, r7
 8003044:	4619      	mov	r1, r3
 8003046:	4823      	ldr	r0, [pc, #140]	@ (80030d4 <MX_ADC1_Init+0x138>)
 8003048:	f001 fcf8 	bl	8004a3c <HAL_ADC_ConfigChannel>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8003052:	f000 fadb 	bl	800360c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003056:	2301      	movs	r3, #1
 8003058:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800305a:	230c      	movs	r3, #12
 800305c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800305e:	463b      	mov	r3, r7
 8003060:	4619      	mov	r1, r3
 8003062:	481c      	ldr	r0, [pc, #112]	@ (80030d4 <MX_ADC1_Init+0x138>)
 8003064:	f001 fcea 	bl	8004a3c <HAL_ADC_ConfigChannel>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800306e:	f000 facd 	bl	800360c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8003072:	4b1b      	ldr	r3, [pc, #108]	@ (80030e0 <MX_ADC1_Init+0x144>)
 8003074:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003076:	2312      	movs	r3, #18
 8003078:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800307a:	2301      	movs	r3, #1
 800307c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800307e:	463b      	mov	r3, r7
 8003080:	4619      	mov	r1, r3
 8003082:	4814      	ldr	r0, [pc, #80]	@ (80030d4 <MX_ADC1_Init+0x138>)
 8003084:	f001 fcda 	bl	8004a3c <HAL_ADC_ConfigChannel>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 800308e:	f000 fabd 	bl	800360c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003092:	4b14      	ldr	r3, [pc, #80]	@ (80030e4 <MX_ADC1_Init+0x148>)
 8003094:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003096:	2318      	movs	r3, #24
 8003098:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800309a:	463b      	mov	r3, r7
 800309c:	4619      	mov	r1, r3
 800309e:	480d      	ldr	r0, [pc, #52]	@ (80030d4 <MX_ADC1_Init+0x138>)
 80030a0:	f001 fccc 	bl	8004a3c <HAL_ADC_ConfigChannel>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 80030aa:	f000 faaf 	bl	800360c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80030ae:	4b0e      	ldr	r3, [pc, #56]	@ (80030e8 <MX_ADC1_Init+0x14c>)
 80030b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80030b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030b8:	463b      	mov	r3, r7
 80030ba:	4619      	mov	r1, r3
 80030bc:	4805      	ldr	r0, [pc, #20]	@ (80030d4 <MX_ADC1_Init+0x138>)
 80030be:	f001 fcbd 	bl	8004a3c <HAL_ADC_ConfigChannel>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 80030c8:	f000 faa0 	bl	800360c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80030cc:	bf00      	nop
 80030ce:	3720      	adds	r7, #32
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	200001f4 	.word	0x200001f4
 80030d8:	42028000 	.word	0x42028000
 80030dc:	04300002 	.word	0x04300002
 80030e0:	4fb80000 	.word	0x4fb80000
 80030e4:	25b00200 	.word	0x25b00200
 80030e8:	3ac04000 	.word	0x3ac04000

080030ec <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08c      	sub	sp, #48	@ 0x30
 80030f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80030f2:	1d3b      	adds	r3, r7, #4
 80030f4:	222c      	movs	r2, #44	@ 0x2c
 80030f6:	2100      	movs	r1, #0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f009 ff7c 	bl	800cff6 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80030fe:	4b15      	ldr	r3, [pc, #84]	@ (8003154 <MX_DAC1_Init+0x68>)
 8003100:	4a15      	ldr	r2, [pc, #84]	@ (8003158 <MX_DAC1_Init+0x6c>)
 8003102:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003104:	4813      	ldr	r0, [pc, #76]	@ (8003154 <MX_DAC1_Init+0x68>)
 8003106:	f002 fc3b 	bl	8005980 <HAL_DAC_Init>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8003110:	f000 fa7c 	bl	800360c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003114:	2300      	movs	r3, #0
 8003116:	607b      	str	r3, [r7, #4]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003118:	2300      	movs	r3, #0
 800311a:	723b      	strb	r3, [r7, #8]
  sConfig.DAC_SignedFormat = DISABLE;
 800311c:	2300      	movs	r3, #0
 800311e:	727b      	strb	r3, [r7, #9]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800312c:	2301      	movs	r3, #1
 800312e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003130:	2300      	movs	r3, #0
 8003132:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003134:	1d3b      	adds	r3, r7, #4
 8003136:	2200      	movs	r2, #0
 8003138:	4619      	mov	r1, r3
 800313a:	4806      	ldr	r0, [pc, #24]	@ (8003154 <MX_DAC1_Init+0x68>)
 800313c:	f002 fcdc 	bl	8005af8 <HAL_DAC_ConfigChannel>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_DAC1_Init+0x5e>
  {
    Error_Handler();
 8003146:	f000 fa61 	bl	800360c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800314a:	bf00      	nop
 800314c:	3730      	adds	r7, #48	@ 0x30
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	200002d4 	.word	0x200002d4
 8003158:	42028400 	.word	0x42028400

0800315c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8003162:	4b0d      	ldr	r3, [pc, #52]	@ (8003198 <MX_GPDMA1_Init+0x3c>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003168:	4a0b      	ldr	r2, [pc, #44]	@ (8003198 <MX_GPDMA1_Init+0x3c>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8003172:	4b09      	ldr	r3, [pc, #36]	@ (8003198 <MX_GPDMA1_Init+0x3c>)
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel7_IRQn, 0, 0);
 8003180:	2200      	movs	r2, #0
 8003182:	2100      	movs	r1, #0
 8003184:	2022      	movs	r0, #34	@ 0x22
 8003186:	f002 fb23 	bl	80057d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel7_IRQn);
 800318a:	2022      	movs	r0, #34	@ 0x22
 800318c:	f002 fb3a 	bl	8005804 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	44020c00 	.word	0x44020c00

0800319c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80031a0:	4b27      	ldr	r3, [pc, #156]	@ (8003240 <MX_SPI2_Init+0xa4>)
 80031a2:	4a28      	ldr	r2, [pc, #160]	@ (8003244 <MX_SPI2_Init+0xa8>)
 80031a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80031a6:	4b26      	ldr	r3, [pc, #152]	@ (8003240 <MX_SPI2_Init+0xa4>)
 80031a8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80031ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80031ae:	4b24      	ldr	r3, [pc, #144]	@ (8003240 <MX_SPI2_Init+0xa4>)
 80031b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031b4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80031b6:	4b22      	ldr	r3, [pc, #136]	@ (8003240 <MX_SPI2_Init+0xa4>)
 80031b8:	2207      	movs	r2, #7
 80031ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031bc:	4b20      	ldr	r3, [pc, #128]	@ (8003240 <MX_SPI2_Init+0xa4>)
 80031be:	2200      	movs	r2, #0
 80031c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003240 <MX_SPI2_Init+0xa4>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80031c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003240 <MX_SPI2_Init+0xa4>)
 80031ca:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80031ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <MX_SPI2_Init+0xa4>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80031d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003240 <MX_SPI2_Init+0xa4>)
 80031d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80031dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80031de:	4b18      	ldr	r3, [pc, #96]	@ (8003240 <MX_SPI2_Init+0xa4>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e4:	4b16      	ldr	r3, [pc, #88]	@ (8003240 <MX_SPI2_Init+0xa4>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 80031ea:	4b15      	ldr	r3, [pc, #84]	@ (8003240 <MX_SPI2_Init+0xa4>)
 80031ec:	2207      	movs	r2, #7
 80031ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80031f0:	4b13      	ldr	r3, [pc, #76]	@ (8003240 <MX_SPI2_Init+0xa4>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80031f6:	4b12      	ldr	r3, [pc, #72]	@ (8003240 <MX_SPI2_Init+0xa4>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80031fc:	4b10      	ldr	r3, [pc, #64]	@ (8003240 <MX_SPI2_Init+0xa4>)
 80031fe:	2200      	movs	r2, #0
 8003200:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003202:	4b0f      	ldr	r3, [pc, #60]	@ (8003240 <MX_SPI2_Init+0xa4>)
 8003204:	2200      	movs	r2, #0
 8003206:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003208:	4b0d      	ldr	r3, [pc, #52]	@ (8003240 <MX_SPI2_Init+0xa4>)
 800320a:	2200      	movs	r2, #0
 800320c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800320e:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <MX_SPI2_Init+0xa4>)
 8003210:	2200      	movs	r2, #0
 8003212:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003214:	4b0a      	ldr	r3, [pc, #40]	@ (8003240 <MX_SPI2_Init+0xa4>)
 8003216:	2200      	movs	r2, #0
 8003218:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800321a:	4b09      	ldr	r3, [pc, #36]	@ (8003240 <MX_SPI2_Init+0xa4>)
 800321c:	2200      	movs	r2, #0
 800321e:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8003220:	4b07      	ldr	r3, [pc, #28]	@ (8003240 <MX_SPI2_Init+0xa4>)
 8003222:	2200      	movs	r2, #0
 8003224:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8003226:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <MX_SPI2_Init+0xa4>)
 8003228:	2200      	movs	r2, #0
 800322a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800322c:	4804      	ldr	r0, [pc, #16]	@ (8003240 <MX_SPI2_Init+0xa4>)
 800322e:	f006 ff41 	bl	800a0b4 <HAL_SPI_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8003238:	f000 f9e8 	bl	800360c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}
 8003240:	200002e8 	.word	0x200002e8
 8003244:	40003800 	.word	0x40003800

08003248 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800324e:	f107 0310 	add.w	r3, r7, #16
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	609a      	str	r2, [r3, #8]
 800325a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800325c:	1d3b      	adds	r3, r7, #4
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	605a      	str	r2, [r3, #4]
 8003264:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003266:	4b20      	ldr	r3, [pc, #128]	@ (80032e8 <MX_TIM1_Init+0xa0>)
 8003268:	4a20      	ldr	r2, [pc, #128]	@ (80032ec <MX_TIM1_Init+0xa4>)
 800326a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 519;
 800326c:	4b1e      	ldr	r3, [pc, #120]	@ (80032e8 <MX_TIM1_Init+0xa0>)
 800326e:	f240 2207 	movw	r2, #519	@ 0x207
 8003272:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003274:	4b1c      	ldr	r3, [pc, #112]	@ (80032e8 <MX_TIM1_Init+0xa0>)
 8003276:	2200      	movs	r2, #0
 8003278:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 800327a:	4b1b      	ldr	r3, [pc, #108]	@ (80032e8 <MX_TIM1_Init+0xa0>)
 800327c:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8003280:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003282:	4b19      	ldr	r3, [pc, #100]	@ (80032e8 <MX_TIM1_Init+0xa0>)
 8003284:	2200      	movs	r2, #0
 8003286:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003288:	4b17      	ldr	r3, [pc, #92]	@ (80032e8 <MX_TIM1_Init+0xa0>)
 800328a:	2200      	movs	r2, #0
 800328c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800328e:	4b16      	ldr	r3, [pc, #88]	@ (80032e8 <MX_TIM1_Init+0xa0>)
 8003290:	2200      	movs	r2, #0
 8003292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003294:	4814      	ldr	r0, [pc, #80]	@ (80032e8 <MX_TIM1_Init+0xa0>)
 8003296:	f007 faf8 	bl	800a88a <HAL_TIM_Base_Init>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80032a0:	f000 f9b4 	bl	800360c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80032aa:	f107 0310 	add.w	r3, r7, #16
 80032ae:	4619      	mov	r1, r3
 80032b0:	480d      	ldr	r0, [pc, #52]	@ (80032e8 <MX_TIM1_Init+0xa0>)
 80032b2:	f007 fe4f 	bl	800af54 <HAL_TIM_ConfigClockSource>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80032bc:	f000 f9a6 	bl	800360c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032c0:	2300      	movs	r3, #0
 80032c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032cc:	1d3b      	adds	r3, r7, #4
 80032ce:	4619      	mov	r1, r3
 80032d0:	4805      	ldr	r0, [pc, #20]	@ (80032e8 <MX_TIM1_Init+0xa0>)
 80032d2:	f008 fad1 	bl	800b878 <HAL_TIMEx_MasterConfigSynchronization>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80032dc:	f000 f996 	bl	800360c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80032e0:	bf00      	nop
 80032e2:	3720      	adds	r7, #32
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20000378 	.word	0x20000378
 80032ec:	40012c00 	.word	0x40012c00

080032f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	@ 0x28
 80032f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032f6:	f107 031c 	add.w	r3, r7, #28
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	605a      	str	r2, [r3, #4]
 8003300:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003302:	463b      	mov	r3, r7
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
 8003310:	615a      	str	r2, [r3, #20]
 8003312:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003314:	4b22      	ldr	r3, [pc, #136]	@ (80033a0 <MX_TIM2_Init+0xb0>)
 8003316:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800331a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800331c:	4b20      	ldr	r3, [pc, #128]	@ (80033a0 <MX_TIM2_Init+0xb0>)
 800331e:	2200      	movs	r2, #0
 8003320:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003322:	4b1f      	ldr	r3, [pc, #124]	@ (80033a0 <MX_TIM2_Init+0xb0>)
 8003324:	2200      	movs	r2, #0
 8003326:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003328:	4b1d      	ldr	r3, [pc, #116]	@ (80033a0 <MX_TIM2_Init+0xb0>)
 800332a:	f04f 32ff 	mov.w	r2, #4294967295
 800332e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003330:	4b1b      	ldr	r3, [pc, #108]	@ (80033a0 <MX_TIM2_Init+0xb0>)
 8003332:	2200      	movs	r2, #0
 8003334:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003336:	4b1a      	ldr	r3, [pc, #104]	@ (80033a0 <MX_TIM2_Init+0xb0>)
 8003338:	2200      	movs	r2, #0
 800333a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800333c:	4818      	ldr	r0, [pc, #96]	@ (80033a0 <MX_TIM2_Init+0xb0>)
 800333e:	f007 fb4f 	bl	800a9e0 <HAL_TIM_PWM_Init>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003348:	f000 f960 	bl	800360c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800334c:	2300      	movs	r3, #0
 800334e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003350:	2300      	movs	r3, #0
 8003352:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003354:	f107 031c 	add.w	r3, r7, #28
 8003358:	4619      	mov	r1, r3
 800335a:	4811      	ldr	r0, [pc, #68]	@ (80033a0 <MX_TIM2_Init+0xb0>)
 800335c:	f008 fa8c 	bl	800b878 <HAL_TIMEx_MasterConfigSynchronization>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003366:	f000 f951 	bl	800360c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800336a:	2360      	movs	r3, #96	@ 0x60
 800336c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003376:	2300      	movs	r3, #0
 8003378:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800337a:	463b      	mov	r3, r7
 800337c:	220c      	movs	r2, #12
 800337e:	4619      	mov	r1, r3
 8003380:	4807      	ldr	r0, [pc, #28]	@ (80033a0 <MX_TIM2_Init+0xb0>)
 8003382:	f007 fcd3 	bl	800ad2c <HAL_TIM_PWM_ConfigChannel>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800338c:	f000 f93e 	bl	800360c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003390:	4803      	ldr	r0, [pc, #12]	@ (80033a0 <MX_TIM2_Init+0xb0>)
 8003392:	f000 fb3f 	bl	8003a14 <HAL_TIM_MspPostInit>

}
 8003396:	bf00      	nop
 8003398:	3728      	adds	r7, #40	@ 0x28
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200003c4 	.word	0x200003c4

080033a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033aa:	f107 0310 	add.w	r3, r7, #16
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	605a      	str	r2, [r3, #4]
 80033b4:	609a      	str	r2, [r3, #8]
 80033b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033b8:	1d3b      	adds	r3, r7, #4
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003438 <MX_TIM3_Init+0x94>)
 80033c4:	4a1d      	ldr	r2, [pc, #116]	@ (800343c <MX_TIM3_Init+0x98>)
 80033c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80033c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003438 <MX_TIM3_Init+0x94>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003438 <MX_TIM3_Init+0x94>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10399;
 80033d4:	4b18      	ldr	r3, [pc, #96]	@ (8003438 <MX_TIM3_Init+0x94>)
 80033d6:	f642 029f 	movw	r2, #10399	@ 0x289f
 80033da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033dc:	4b16      	ldr	r3, [pc, #88]	@ (8003438 <MX_TIM3_Init+0x94>)
 80033de:	2200      	movs	r2, #0
 80033e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033e2:	4b15      	ldr	r3, [pc, #84]	@ (8003438 <MX_TIM3_Init+0x94>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80033e8:	4813      	ldr	r0, [pc, #76]	@ (8003438 <MX_TIM3_Init+0x94>)
 80033ea:	f007 fa4e 	bl	800a88a <HAL_TIM_Base_Init>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80033f4:	f000 f90a 	bl	800360c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80033fe:	f107 0310 	add.w	r3, r7, #16
 8003402:	4619      	mov	r1, r3
 8003404:	480c      	ldr	r0, [pc, #48]	@ (8003438 <MX_TIM3_Init+0x94>)
 8003406:	f007 fda5 	bl	800af54 <HAL_TIM_ConfigClockSource>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003410:	f000 f8fc 	bl	800360c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003414:	2320      	movs	r3, #32
 8003416:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800341c:	1d3b      	adds	r3, r7, #4
 800341e:	4619      	mov	r1, r3
 8003420:	4805      	ldr	r0, [pc, #20]	@ (8003438 <MX_TIM3_Init+0x94>)
 8003422:	f008 fa29 	bl	800b878 <HAL_TIMEx_MasterConfigSynchronization>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800342c:	f000 f8ee 	bl	800360c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003430:	bf00      	nop
 8003432:	3720      	adds	r7, #32
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20000410 	.word	0x20000410
 800343c:	40000400 	.word	0x40000400

08003440 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003444:	4b22      	ldr	r3, [pc, #136]	@ (80034d0 <MX_USART3_UART_Init+0x90>)
 8003446:	4a23      	ldr	r2, [pc, #140]	@ (80034d4 <MX_USART3_UART_Init+0x94>)
 8003448:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800344a:	4b21      	ldr	r3, [pc, #132]	@ (80034d0 <MX_USART3_UART_Init+0x90>)
 800344c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003450:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003452:	4b1f      	ldr	r3, [pc, #124]	@ (80034d0 <MX_USART3_UART_Init+0x90>)
 8003454:	2200      	movs	r2, #0
 8003456:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003458:	4b1d      	ldr	r3, [pc, #116]	@ (80034d0 <MX_USART3_UART_Init+0x90>)
 800345a:	2200      	movs	r2, #0
 800345c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800345e:	4b1c      	ldr	r3, [pc, #112]	@ (80034d0 <MX_USART3_UART_Init+0x90>)
 8003460:	2200      	movs	r2, #0
 8003462:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003464:	4b1a      	ldr	r3, [pc, #104]	@ (80034d0 <MX_USART3_UART_Init+0x90>)
 8003466:	220c      	movs	r2, #12
 8003468:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800346a:	4b19      	ldr	r3, [pc, #100]	@ (80034d0 <MX_USART3_UART_Init+0x90>)
 800346c:	2200      	movs	r2, #0
 800346e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003470:	4b17      	ldr	r3, [pc, #92]	@ (80034d0 <MX_USART3_UART_Init+0x90>)
 8003472:	2200      	movs	r2, #0
 8003474:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003476:	4b16      	ldr	r3, [pc, #88]	@ (80034d0 <MX_USART3_UART_Init+0x90>)
 8003478:	2200      	movs	r2, #0
 800347a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800347c:	4b14      	ldr	r3, [pc, #80]	@ (80034d0 <MX_USART3_UART_Init+0x90>)
 800347e:	2200      	movs	r2, #0
 8003480:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003482:	4b13      	ldr	r3, [pc, #76]	@ (80034d0 <MX_USART3_UART_Init+0x90>)
 8003484:	2200      	movs	r2, #0
 8003486:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003488:	4811      	ldr	r0, [pc, #68]	@ (80034d0 <MX_USART3_UART_Init+0x90>)
 800348a:	f008 faa3 	bl	800b9d4 <HAL_UART_Init>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003494:	f000 f8ba 	bl	800360c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003498:	2100      	movs	r1, #0
 800349a:	480d      	ldr	r0, [pc, #52]	@ (80034d0 <MX_USART3_UART_Init+0x90>)
 800349c:	f008 fec0 	bl	800c220 <HAL_UARTEx_SetTxFifoThreshold>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80034a6:	f000 f8b1 	bl	800360c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034aa:	2100      	movs	r1, #0
 80034ac:	4808      	ldr	r0, [pc, #32]	@ (80034d0 <MX_USART3_UART_Init+0x90>)
 80034ae:	f008 fef5 	bl	800c29c <HAL_UARTEx_SetRxFifoThreshold>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80034b8:	f000 f8a8 	bl	800360c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80034bc:	4804      	ldr	r0, [pc, #16]	@ (80034d0 <MX_USART3_UART_Init+0x90>)
 80034be:	f008 fe76 	bl	800c1ae <HAL_UARTEx_DisableFifoMode>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80034c8:	f000 f8a0 	bl	800360c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80034cc:	bf00      	nop
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	2000045c 	.word	0x2000045c
 80034d4:	40004800 	.word	0x40004800

080034d8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80034dc:	4b15      	ldr	r3, [pc, #84]	@ (8003534 <MX_USB_PCD_Init+0x5c>)
 80034de:	4a16      	ldr	r2, [pc, #88]	@ (8003538 <MX_USB_PCD_Init+0x60>)
 80034e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80034e2:	4b14      	ldr	r3, [pc, #80]	@ (8003534 <MX_USB_PCD_Init+0x5c>)
 80034e4:	2208      	movs	r2, #8
 80034e6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 80034e8:	4b12      	ldr	r3, [pc, #72]	@ (8003534 <MX_USB_PCD_Init+0x5c>)
 80034ea:	2202      	movs	r2, #2
 80034ec:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80034ee:	4b11      	ldr	r3, [pc, #68]	@ (8003534 <MX_USB_PCD_Init+0x5c>)
 80034f0:	2202      	movs	r2, #2
 80034f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80034f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003534 <MX_USB_PCD_Init+0x5c>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80034fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003534 <MX_USB_PCD_Init+0x5c>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8003500:	4b0c      	ldr	r3, [pc, #48]	@ (8003534 <MX_USB_PCD_Init+0x5c>)
 8003502:	2200      	movs	r2, #0
 8003504:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8003506:	4b0b      	ldr	r3, [pc, #44]	@ (8003534 <MX_USB_PCD_Init+0x5c>)
 8003508:	2200      	movs	r2, #0
 800350a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800350c:	4b09      	ldr	r3, [pc, #36]	@ (8003534 <MX_USB_PCD_Init+0x5c>)
 800350e:	2200      	movs	r2, #0
 8003510:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8003512:	4b08      	ldr	r3, [pc, #32]	@ (8003534 <MX_USB_PCD_Init+0x5c>)
 8003514:	2200      	movs	r2, #0
 8003516:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8003518:	4b06      	ldr	r3, [pc, #24]	@ (8003534 <MX_USB_PCD_Init+0x5c>)
 800351a:	2200      	movs	r2, #0
 800351c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800351e:	4805      	ldr	r0, [pc, #20]	@ (8003534 <MX_USB_PCD_Init+0x5c>)
 8003520:	f003 fc58 	bl	8006dd4 <HAL_PCD_Init>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 800352a:	f000 f86f 	bl	800360c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	200004f0 	.word	0x200004f0
 8003538:	40016000 	.word	0x40016000

0800353c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003542:	f107 030c 	add.w	r3, r7, #12
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	609a      	str	r2, [r3, #8]
 800354e:	60da      	str	r2, [r3, #12]
 8003550:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003552:	4b2b      	ldr	r3, [pc, #172]	@ (8003600 <MX_GPIO_Init+0xc4>)
 8003554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003558:	4a29      	ldr	r2, [pc, #164]	@ (8003600 <MX_GPIO_Init+0xc4>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003562:	4b27      	ldr	r3, [pc, #156]	@ (8003600 <MX_GPIO_Init+0xc4>)
 8003564:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003570:	4b23      	ldr	r3, [pc, #140]	@ (8003600 <MX_GPIO_Init+0xc4>)
 8003572:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003576:	4a22      	ldr	r2, [pc, #136]	@ (8003600 <MX_GPIO_Init+0xc4>)
 8003578:	f043 0302 	orr.w	r3, r3, #2
 800357c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003580:	4b1f      	ldr	r3, [pc, #124]	@ (8003600 <MX_GPIO_Init+0xc4>)
 8003582:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	607b      	str	r3, [r7, #4]
 800358c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 800358e:	2200      	movs	r2, #0
 8003590:	2140      	movs	r1, #64	@ 0x40
 8003592:	481c      	ldr	r0, [pc, #112]	@ (8003604 <MX_GPIO_Init+0xc8>)
 8003594:	f003 fbec 	bl	8006d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISP_CS_Pin|LED_RED_Pin|LED_BLUE_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8003598:	2200      	movs	r2, #0
 800359a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800359e:	481a      	ldr	r0, [pc, #104]	@ (8003608 <MX_GPIO_Init+0xcc>)
 80035a0:	f003 fbe6 	bl	8006d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 80035a4:	2340      	movs	r3, #64	@ 0x40
 80035a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a8:	2301      	movs	r3, #1
 80035aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 80035b4:	f107 030c 	add.w	r3, r7, #12
 80035b8:	4619      	mov	r1, r3
 80035ba:	4812      	ldr	r0, [pc, #72]	@ (8003604 <MX_GPIO_Init+0xc8>)
 80035bc:	f003 fa6e 	bl	8006a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_CS_Pin LED_RED_Pin LED_BLUE_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = DISP_CS_Pin|LED_RED_Pin|LED_BLUE_Pin|LED_YELLOW_Pin;
 80035c0:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80035c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035c6:	2301      	movs	r3, #1
 80035c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d2:	f107 030c 	add.w	r3, r7, #12
 80035d6:	4619      	mov	r1, r3
 80035d8:	480b      	ldr	r0, [pc, #44]	@ (8003608 <MX_GPIO_Init+0xcc>)
 80035da:	f003 fa5f 	bl	8006a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OUTPUT_EN_SW_Pin */
  GPIO_InitStruct.Pin = OUTPUT_EN_SW_Pin;
 80035de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035e4:	2300      	movs	r3, #0
 80035e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(OUTPUT_EN_SW_GPIO_Port, &GPIO_InitStruct);
 80035ec:	f107 030c 	add.w	r3, r7, #12
 80035f0:	4619      	mov	r1, r3
 80035f2:	4804      	ldr	r0, [pc, #16]	@ (8003604 <MX_GPIO_Init+0xc8>)
 80035f4:	f003 fa52 	bl	8006a9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80035f8:	bf00      	nop
 80035fa:	3720      	adds	r7, #32
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	44020c00 	.word	0x44020c00
 8003604:	42020000 	.word	0x42020000
 8003608:	42020400 	.word	0x42020400

0800360c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003610:	b672      	cpsid	i
}
 8003612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003614:	bf00      	nop
 8003616:	e7fd      	b.n	8003614 <Error_Handler+0x8>

08003618 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800361c:	bf00      	nop
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b0ae      	sub	sp, #184	@ 0xb8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003630:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003640:	f107 0318 	add.w	r3, r7, #24
 8003644:	2288      	movs	r2, #136	@ 0x88
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f009 fcd4 	bl	800cff6 <memset>
  if(hadc->Instance==ADC1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a54      	ldr	r2, [pc, #336]	@ (80037a4 <HAL_ADC_MspInit+0x17c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	f040 80a1 	bne.w	800379c <HAL_ADC_MspInit+0x174>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800365a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8003666:	2300      	movs	r3, #0
 8003668:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800366a:	f107 0318 	add.w	r3, r7, #24
 800366e:	4618      	mov	r0, r3
 8003670:	f004 fc4e 	bl	8007f10 <HAL_RCCEx_PeriphCLKConfig>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_ADC_MspInit+0x56>
    {
      Error_Handler();
 800367a:	f7ff ffc7 	bl	800360c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800367e:	4b4a      	ldr	r3, [pc, #296]	@ (80037a8 <HAL_ADC_MspInit+0x180>)
 8003680:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003684:	4a48      	ldr	r2, [pc, #288]	@ (80037a8 <HAL_ADC_MspInit+0x180>)
 8003686:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800368a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800368e:	4b46      	ldr	r3, [pc, #280]	@ (80037a8 <HAL_ADC_MspInit+0x180>)
 8003690:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800369c:	4b42      	ldr	r3, [pc, #264]	@ (80037a8 <HAL_ADC_MspInit+0x180>)
 800369e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036a2:	4a41      	ldr	r2, [pc, #260]	@ (80037a8 <HAL_ADC_MspInit+0x180>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80036ac:	4b3e      	ldr	r3, [pc, #248]	@ (80037a8 <HAL_ADC_MspInit+0x180>)
 80036ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ba:	4b3b      	ldr	r3, [pc, #236]	@ (80037a8 <HAL_ADC_MspInit+0x180>)
 80036bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036c0:	4a39      	ldr	r2, [pc, #228]	@ (80037a8 <HAL_ADC_MspInit+0x180>)
 80036c2:	f043 0302 	orr.w	r3, r3, #2
 80036c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80036ca:	4b37      	ldr	r3, [pc, #220]	@ (80037a8 <HAL_ADC_MspInit+0x180>)
 80036cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_INP14
    PA5     ------> ADC1_INP19
    PA7     ------> ADC1_INP7
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = ADC_LOAD_CURR_Pin|ADC_LOAD_VOL_Pin|ADC_POT_Pin|ADC_VIN_Pin
 80036d8:	23a7      	movs	r3, #167	@ 0xa7
 80036da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |_5V_DIV_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036de:	2303      	movs	r3, #3
 80036e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80036ee:	4619      	mov	r1, r3
 80036f0:	482e      	ldr	r0, [pc, #184]	@ (80037ac <HAL_ADC_MspInit+0x184>)
 80036f2:	f003 f9d3 	bl	8006a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_TEMP_Pin;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036fc:	2303      	movs	r3, #3
 80036fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	2300      	movs	r3, #0
 8003704:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(ADC_TEMP_GPIO_Port, &GPIO_InitStruct);
 8003708:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800370c:	4619      	mov	r1, r3
 800370e:	4828      	ldr	r0, [pc, #160]	@ (80037b0 <HAL_ADC_MspInit+0x188>)
 8003710:	f003 f9c4 	bl	8006a9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    handle_GPDMA1_Channel7.Instance = GPDMA1_Channel7;
 8003714:	4b27      	ldr	r3, [pc, #156]	@ (80037b4 <HAL_ADC_MspInit+0x18c>)
 8003716:	4a28      	ldr	r2, [pc, #160]	@ (80037b8 <HAL_ADC_MspInit+0x190>)
 8003718:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel7.Init.Request = GPDMA1_REQUEST_ADC1;
 800371a:	4b26      	ldr	r3, [pc, #152]	@ (80037b4 <HAL_ADC_MspInit+0x18c>)
 800371c:	2200      	movs	r2, #0
 800371e:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel7.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8003720:	4b24      	ldr	r3, [pc, #144]	@ (80037b4 <HAL_ADC_MspInit+0x18c>)
 8003722:	2200      	movs	r2, #0
 8003724:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel7.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003726:	4b23      	ldr	r3, [pc, #140]	@ (80037b4 <HAL_ADC_MspInit+0x18c>)
 8003728:	2200      	movs	r2, #0
 800372a:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel7.Init.SrcInc = DMA_SINC_FIXED;
 800372c:	4b21      	ldr	r3, [pc, #132]	@ (80037b4 <HAL_ADC_MspInit+0x18c>)
 800372e:	2200      	movs	r2, #0
 8003730:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel7.Init.DestInc = DMA_DINC_INCREMENTED;
 8003732:	4b20      	ldr	r3, [pc, #128]	@ (80037b4 <HAL_ADC_MspInit+0x18c>)
 8003734:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003738:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel7.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800373a:	4b1e      	ldr	r3, [pc, #120]	@ (80037b4 <HAL_ADC_MspInit+0x18c>)
 800373c:	2201      	movs	r2, #1
 800373e:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel7.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8003740:	4b1c      	ldr	r3, [pc, #112]	@ (80037b4 <HAL_ADC_MspInit+0x18c>)
 8003742:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003746:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel7.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8003748:	4b1a      	ldr	r3, [pc, #104]	@ (80037b4 <HAL_ADC_MspInit+0x18c>)
 800374a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800374e:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel7.Init.SrcBurstLength = 1;
 8003750:	4b18      	ldr	r3, [pc, #96]	@ (80037b4 <HAL_ADC_MspInit+0x18c>)
 8003752:	2201      	movs	r2, #1
 8003754:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel7.Init.DestBurstLength = 1;
 8003756:	4b17      	ldr	r3, [pc, #92]	@ (80037b4 <HAL_ADC_MspInit+0x18c>)
 8003758:	2201      	movs	r2, #1
 800375a:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel7.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800375c:	4b15      	ldr	r3, [pc, #84]	@ (80037b4 <HAL_ADC_MspInit+0x18c>)
 800375e:	2200      	movs	r2, #0
 8003760:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel7.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8003762:	4b14      	ldr	r3, [pc, #80]	@ (80037b4 <HAL_ADC_MspInit+0x18c>)
 8003764:	2200      	movs	r2, #0
 8003766:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel7.Init.Mode = DMA_NORMAL;
 8003768:	4b12      	ldr	r3, [pc, #72]	@ (80037b4 <HAL_ADC_MspInit+0x18c>)
 800376a:	2200      	movs	r2, #0
 800376c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel7) != HAL_OK)
 800376e:	4811      	ldr	r0, [pc, #68]	@ (80037b4 <HAL_ADC_MspInit+0x18c>)
 8003770:	f002 fb7c 	bl	8005e6c <HAL_DMA_Init>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_ADC_MspInit+0x156>
    {
      Error_Handler();
 800377a:	f7ff ff47 	bl	800360c <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel7);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a0c      	ldr	r2, [pc, #48]	@ (80037b4 <HAL_ADC_MspInit+0x18c>)
 8003782:	651a      	str	r2, [r3, #80]	@ 0x50
 8003784:	4a0b      	ldr	r2, [pc, #44]	@ (80037b4 <HAL_ADC_MspInit+0x18c>)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel7, DMA_CHANNEL_NPRIV) != HAL_OK)
 800378a:	2110      	movs	r1, #16
 800378c:	4809      	ldr	r0, [pc, #36]	@ (80037b4 <HAL_ADC_MspInit+0x18c>)
 800378e:	f002 fde4 	bl	800635a <HAL_DMA_ConfigChannelAttributes>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_ADC_MspInit+0x174>
    {
      Error_Handler();
 8003798:	f7ff ff38 	bl	800360c <Error_Handler>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800379c:	bf00      	nop
 800379e:	37b8      	adds	r7, #184	@ 0xb8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	42028000 	.word	0x42028000
 80037a8:	44020c00 	.word	0x44020c00
 80037ac:	42020000 	.word	0x42020000
 80037b0:	42020400 	.word	0x42020400
 80037b4:	2000025c 	.word	0x2000025c
 80037b8:	400203d0 	.word	0x400203d0

080037bc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	@ 0x28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c4:	f107 0314 	add.w	r3, r7, #20
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	60da      	str	r2, [r3, #12]
 80037d2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a18      	ldr	r2, [pc, #96]	@ (800383c <HAL_DAC_MspInit+0x80>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d129      	bne.n	8003832 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80037de:	4b18      	ldr	r3, [pc, #96]	@ (8003840 <HAL_DAC_MspInit+0x84>)
 80037e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037e4:	4a16      	ldr	r2, [pc, #88]	@ (8003840 <HAL_DAC_MspInit+0x84>)
 80037e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80037ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80037ee:	4b14      	ldr	r3, [pc, #80]	@ (8003840 <HAL_DAC_MspInit+0x84>)
 80037f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037fc:	4b10      	ldr	r3, [pc, #64]	@ (8003840 <HAL_DAC_MspInit+0x84>)
 80037fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003802:	4a0f      	ldr	r2, [pc, #60]	@ (8003840 <HAL_DAC_MspInit+0x84>)
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800380c:	4b0c      	ldr	r3, [pc, #48]	@ (8003840 <HAL_DAC_MspInit+0x84>)
 800380e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800381a:	2310      	movs	r3, #16
 800381c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800381e:	2303      	movs	r3, #3
 8003820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003826:	f107 0314 	add.w	r3, r7, #20
 800382a:	4619      	mov	r1, r3
 800382c:	4805      	ldr	r0, [pc, #20]	@ (8003844 <HAL_DAC_MspInit+0x88>)
 800382e:	f003 f935 	bl	8006a9c <HAL_GPIO_Init>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8003832:	bf00      	nop
 8003834:	3728      	adds	r7, #40	@ 0x28
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	42028400 	.word	0x42028400
 8003840:	44020c00 	.word	0x44020c00
 8003844:	42020000 	.word	0x42020000

08003848 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b0ac      	sub	sp, #176	@ 0xb0
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003850:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	60da      	str	r2, [r3, #12]
 800385e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003860:	f107 0310 	add.w	r3, r7, #16
 8003864:	2288      	movs	r2, #136	@ 0x88
 8003866:	2100      	movs	r1, #0
 8003868:	4618      	mov	r0, r3
 800386a:	f009 fbc4 	bl	800cff6 <memset>
  if(hspi->Instance==SPI2)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a31      	ldr	r2, [pc, #196]	@ (8003938 <HAL_SPI_MspInit+0xf0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d15a      	bne.n	800392e <HAL_SPI_MspInit+0xe6>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2Source = RCC_PLL2_SOURCE_CSI;
 8003884:	2302      	movs	r3, #2
 8003886:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8003888:	2301      	movs	r3, #1
 800388a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 32;
 800388c:	2320      	movs	r3, #32
 800388e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 32;
 8003890:	2320      	movs	r3, #32
 8003892:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8003894:	2301      	movs	r3, #1
 8003896:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003898:	2302      	movs	r3, #2
 800389a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2_VCIRANGE_2;
 800389c:	2308      	movs	r3, #8
 800389e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2_VCORANGE_WIDE;
 80038a0:	2300      	movs	r3, #0
 80038a2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2ClockOut = RCC_PLL2_DIVP;
 80038a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL2P;
 80038ae:	2308      	movs	r3, #8
 80038b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038b4:	f107 0310 	add.w	r3, r7, #16
 80038b8:	4618      	mov	r0, r3
 80038ba:	f004 fb29 	bl	8007f10 <HAL_RCCEx_PeriphCLKConfig>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 80038c4:	f7ff fea2 	bl	800360c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80038c8:	4b1c      	ldr	r3, [pc, #112]	@ (800393c <HAL_SPI_MspInit+0xf4>)
 80038ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038ce:	4a1b      	ldr	r2, [pc, #108]	@ (800393c <HAL_SPI_MspInit+0xf4>)
 80038d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038d4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80038d8:	4b18      	ldr	r3, [pc, #96]	@ (800393c <HAL_SPI_MspInit+0xf4>)
 80038da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038e6:	4b15      	ldr	r3, [pc, #84]	@ (800393c <HAL_SPI_MspInit+0xf4>)
 80038e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038ec:	4a13      	ldr	r2, [pc, #76]	@ (800393c <HAL_SPI_MspInit+0xf4>)
 80038ee:	f043 0302 	orr.w	r3, r3, #2
 80038f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80038f6:	4b11      	ldr	r3, [pc, #68]	@ (800393c <HAL_SPI_MspInit+0xf4>)
 80038f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB1     ------> SPI2_MOSI
    PB2     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003904:	2306      	movs	r3, #6
 8003906:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390a:	2302      	movs	r3, #2
 800390c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003910:	2300      	movs	r3, #0
 8003912:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003916:	2300      	movs	r3, #0
 8003918:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 800391c:	2306      	movs	r3, #6
 800391e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003922:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003926:	4619      	mov	r1, r3
 8003928:	4805      	ldr	r0, [pc, #20]	@ (8003940 <HAL_SPI_MspInit+0xf8>)
 800392a:	f003 f8b7 	bl	8006a9c <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 800392e:	bf00      	nop
 8003930:	37b0      	adds	r7, #176	@ 0xb0
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40003800 	.word	0x40003800
 800393c:	44020c00 	.word	0x44020c00
 8003940:	42020400 	.word	0x42020400

08003944 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1d      	ldr	r2, [pc, #116]	@ (80039c8 <HAL_TIM_Base_MspInit+0x84>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d117      	bne.n	8003986 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003956:	4b1d      	ldr	r3, [pc, #116]	@ (80039cc <HAL_TIM_Base_MspInit+0x88>)
 8003958:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800395c:	4a1b      	ldr	r2, [pc, #108]	@ (80039cc <HAL_TIM_Base_MspInit+0x88>)
 800395e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003962:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003966:	4b19      	ldr	r3, [pc, #100]	@ (80039cc <HAL_TIM_Base_MspInit+0x88>)
 8003968:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800396c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 8003974:	2200      	movs	r2, #0
 8003976:	2101      	movs	r1, #1
 8003978:	202a      	movs	r0, #42	@ 0x2a
 800397a:	f001 ff29 	bl	80057d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800397e:	202a      	movs	r0, #42	@ 0x2a
 8003980:	f001 ff40 	bl	8005804 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003984:	e01b      	b.n	80039be <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM3)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a11      	ldr	r2, [pc, #68]	@ (80039d0 <HAL_TIM_Base_MspInit+0x8c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d116      	bne.n	80039be <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003990:	4b0e      	ldr	r3, [pc, #56]	@ (80039cc <HAL_TIM_Base_MspInit+0x88>)
 8003992:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003996:	4a0d      	ldr	r2, [pc, #52]	@ (80039cc <HAL_TIM_Base_MspInit+0x88>)
 8003998:	f043 0302 	orr.w	r3, r3, #2
 800399c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80039a0:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <HAL_TIM_Base_MspInit+0x88>)
 80039a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80039ae:	2200      	movs	r2, #0
 80039b0:	2100      	movs	r1, #0
 80039b2:	202e      	movs	r0, #46	@ 0x2e
 80039b4:	f001 ff0c 	bl	80057d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80039b8:	202e      	movs	r0, #46	@ 0x2e
 80039ba:	f001 ff23 	bl	8005804 <HAL_NVIC_EnableIRQ>
}
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	44020c00 	.word	0x44020c00
 80039d0:	40000400 	.word	0x40000400

080039d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039e4:	d10e      	bne.n	8003a04 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003a10 <HAL_TIM_PWM_MspInit+0x3c>)
 80039e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039ec:	4a08      	ldr	r2, [pc, #32]	@ (8003a10 <HAL_TIM_PWM_MspInit+0x3c>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80039f6:	4b06      	ldr	r3, [pc, #24]	@ (8003a10 <HAL_TIM_PWM_MspInit+0x3c>)
 80039f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003a04:	bf00      	nop
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	44020c00 	.word	0x44020c00

08003a14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a1c:	f107 030c 	add.w	r3, r7, #12
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	609a      	str	r2, [r3, #8]
 8003a28:	60da      	str	r2, [r3, #12]
 8003a2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a34:	d11e      	bne.n	8003a74 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a36:	4b11      	ldr	r3, [pc, #68]	@ (8003a7c <HAL_TIM_MspPostInit+0x68>)
 8003a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a3c:	4a0f      	ldr	r2, [pc, #60]	@ (8003a7c <HAL_TIM_MspPostInit+0x68>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003a46:	4b0d      	ldr	r3, [pc, #52]	@ (8003a7c <HAL_TIM_MspPostInit+0x68>)
 8003a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8003a54:	2308      	movs	r3, #8
 8003a56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a64:	2301      	movs	r3, #1
 8003a66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8003a68:	f107 030c 	add.w	r3, r7, #12
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4804      	ldr	r0, [pc, #16]	@ (8003a80 <HAL_TIM_MspPostInit+0x6c>)
 8003a70:	f003 f814 	bl	8006a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003a74:	bf00      	nop
 8003a76:	3720      	adds	r7, #32
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	44020c00 	.word	0x44020c00
 8003a80:	42020000 	.word	0x42020000

08003a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b0ac      	sub	sp, #176	@ 0xb0
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a9c:	f107 0310 	add.w	r3, r7, #16
 8003aa0:	2288      	movs	r2, #136	@ 0x88
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f009 faa6 	bl	800cff6 <memset>
  if(huart->Instance==USART3)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a31      	ldr	r2, [pc, #196]	@ (8003b74 <HAL_UART_MspInit+0xf0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d15b      	bne.n	8003b6c <HAL_UART_MspInit+0xe8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003ab4:	f04f 0204 	mov.w	r2, #4
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 8003ac0:	23c0      	movs	r3, #192	@ 0xc0
 8003ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ac4:	f107 0310 	add.w	r3, r7, #16
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f004 fa21 	bl	8007f10 <HAL_RCCEx_PeriphCLKConfig>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8003ad4:	f7ff fd9a 	bl	800360c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ad8:	4b27      	ldr	r3, [pc, #156]	@ (8003b78 <HAL_UART_MspInit+0xf4>)
 8003ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ade:	4a26      	ldr	r2, [pc, #152]	@ (8003b78 <HAL_UART_MspInit+0xf4>)
 8003ae0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ae4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003ae8:	4b23      	ldr	r3, [pc, #140]	@ (8003b78 <HAL_UART_MspInit+0xf4>)
 8003aea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003aee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003af6:	4b20      	ldr	r3, [pc, #128]	@ (8003b78 <HAL_UART_MspInit+0xf4>)
 8003af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003afc:	4a1e      	ldr	r2, [pc, #120]	@ (8003b78 <HAL_UART_MspInit+0xf4>)
 8003afe:	f043 0302 	orr.w	r3, r3, #2
 8003b02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003b06:	4b1c      	ldr	r3, [pc, #112]	@ (8003b78 <HAL_UART_MspInit+0xf4>)
 8003b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB8     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b2e:	2307      	movs	r3, #7
 8003b30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b34:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4810      	ldr	r0, [pc, #64]	@ (8003b7c <HAL_UART_MspInit+0xf8>)
 8003b3c:	f002 ffae 	bl	8006a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003b40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b54:	2300      	movs	r3, #0
 8003b56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8003b5a:	230d      	movs	r3, #13
 8003b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b60:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003b64:	4619      	mov	r1, r3
 8003b66:	4805      	ldr	r0, [pc, #20]	@ (8003b7c <HAL_UART_MspInit+0xf8>)
 8003b68:	f002 ff98 	bl	8006a9c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003b6c:	bf00      	nop
 8003b6e:	37b0      	adds	r7, #176	@ 0xb0
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40004800 	.word	0x40004800
 8003b78:	44020c00 	.word	0x44020c00
 8003b7c:	42020400 	.word	0x42020400

08003b80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b0a6      	sub	sp, #152	@ 0x98
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b88:	f107 0310 	add.w	r3, r7, #16
 8003b8c:	2288      	movs	r2, #136	@ 0x88
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f009 fa30 	bl	800cff6 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a14      	ldr	r2, [pc, #80]	@ (8003bec <HAL_PCD_MspInit+0x6c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d121      	bne.n	8003be4 <HAL_PCD_MspInit+0x64>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0310 	mov.w	r3, #16
 8003ba8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003bac:	2330      	movs	r3, #48	@ 0x30
 8003bae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bb2:	f107 0310 	add.w	r3, r7, #16
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f004 f9aa 	bl	8007f10 <HAL_RCCEx_PeriphCLKConfig>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 8003bc2:	f7ff fd23 	bl	800360c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf0 <HAL_PCD_MspInit+0x70>)
 8003bc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003bcc:	4a08      	ldr	r2, [pc, #32]	@ (8003bf0 <HAL_PCD_MspInit+0x70>)
 8003bce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bd2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003bd6:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <HAL_PCD_MspInit+0x70>)
 8003bd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003bdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8003be4:	bf00      	nop
 8003be6:	3798      	adds	r7, #152	@ 0x98
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40016000 	.word	0x40016000
 8003bf0:	44020c00 	.word	0x44020c00

08003bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003bf8:	bf00      	nop
 8003bfa:	e7fd      	b.n	8003bf8 <NMI_Handler+0x4>

08003bfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c00:	bf00      	nop
 8003c02:	e7fd      	b.n	8003c00 <HardFault_Handler+0x4>

08003c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c08:	bf00      	nop
 8003c0a:	e7fd      	b.n	8003c08 <MemManage_Handler+0x4>

08003c0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c10:	bf00      	nop
 8003c12:	e7fd      	b.n	8003c10 <BusFault_Handler+0x4>

08003c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c18:	bf00      	nop
 8003c1a:	e7fd      	b.n	8003c18 <UsageFault_Handler+0x4>

08003c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c20:	bf00      	nop
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c3c:	bf00      	nop
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c4a:	f000 fa21 	bl	8004090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <GPDMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 7 global interrupt.
  */
void GPDMA1_Channel7_IRQHandler(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel7_IRQn 0 */

  /* USER CODE END GPDMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel7);
 8003c58:	4802      	ldr	r0, [pc, #8]	@ (8003c64 <GPDMA1_Channel7_IRQHandler+0x10>)
 8003c5a:	f002 fa1d 	bl	8006098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel7_IRQn 1 */

  /* USER CODE END GPDMA1_Channel7_IRQn 1 */
}
 8003c5e:	bf00      	nop
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	2000025c 	.word	0x2000025c

08003c68 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c6c:	4802      	ldr	r0, [pc, #8]	@ (8003c78 <TIM1_UP_IRQHandler+0x10>)
 8003c6e:	f006 ff0e 	bl	800aa8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000378 	.word	0x20000378

08003c7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c80:	4802      	ldr	r0, [pc, #8]	@ (8003c8c <TIM3_IRQHandler+0x10>)
 8003c82:	f006 ff04 	bl	800aa8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c86:	bf00      	nop
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000410 	.word	0x20000410

08003c90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return 1;
 8003c94:	2301      	movs	r3, #1
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <_kill>:

int _kill(int pid, int sig)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003caa:	f009 f9f7 	bl	800d09c <__errno>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2216      	movs	r2, #22
 8003cb2:	601a      	str	r2, [r3, #0]
  return -1;
 8003cb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <_exit>:

void _exit (int status)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff ffe7 	bl	8003ca0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003cd2:	bf00      	nop
 8003cd4:	e7fd      	b.n	8003cd2 <_exit+0x12>

08003cd6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b086      	sub	sp, #24
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	e00a      	b.n	8003cfe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ce8:	f3af 8000 	nop.w
 8003cec:	4601      	mov	r1, r0
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	60ba      	str	r2, [r7, #8]
 8003cf4:	b2ca      	uxtb	r2, r1
 8003cf6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	dbf0      	blt.n	8003ce8 <_read+0x12>
  }

  return len;
 8003d06:	687b      	ldr	r3, [r7, #4]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e009      	b.n	8003d36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	60ba      	str	r2, [r7, #8]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	3301      	adds	r3, #1
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	dbf1      	blt.n	8003d22 <_write+0x12>
  }
  return len;
 8003d3e:	687b      	ldr	r3, [r7, #4]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <_close>:

int _close(int file)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d70:	605a      	str	r2, [r3, #4]
  return 0;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <_isatty>:

int _isatty(int file)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d88:	2301      	movs	r3, #1
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b085      	sub	sp, #20
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003db8:	4a14      	ldr	r2, [pc, #80]	@ (8003e0c <_sbrk+0x5c>)
 8003dba:	4b15      	ldr	r3, [pc, #84]	@ (8003e10 <_sbrk+0x60>)
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dc4:	4b13      	ldr	r3, [pc, #76]	@ (8003e14 <_sbrk+0x64>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d102      	bne.n	8003dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dcc:	4b11      	ldr	r3, [pc, #68]	@ (8003e14 <_sbrk+0x64>)
 8003dce:	4a12      	ldr	r2, [pc, #72]	@ (8003e18 <_sbrk+0x68>)
 8003dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dd2:	4b10      	ldr	r3, [pc, #64]	@ (8003e14 <_sbrk+0x64>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4413      	add	r3, r2
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d207      	bcs.n	8003df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003de0:	f009 f95c 	bl	800d09c <__errno>
 8003de4:	4603      	mov	r3, r0
 8003de6:	220c      	movs	r2, #12
 8003de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dea:	f04f 33ff 	mov.w	r3, #4294967295
 8003dee:	e009      	b.n	8003e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003df0:	4b08      	ldr	r3, [pc, #32]	@ (8003e14 <_sbrk+0x64>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003df6:	4b07      	ldr	r3, [pc, #28]	@ (8003e14 <_sbrk+0x64>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	4a05      	ldr	r2, [pc, #20]	@ (8003e14 <_sbrk+0x64>)
 8003e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e02:	68fb      	ldr	r3, [r7, #12]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	20008000 	.word	0x20008000
 8003e10:	00000400 	.word	0x00000400
 8003e14:	20003dac 	.word	0x20003dac
 8003e18:	20003f00 	.word	0x20003f00

08003e1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003e22:	4b30      	ldr	r3, [pc, #192]	@ (8003ee4 <SystemInit+0xc8>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e28:	4a2e      	ldr	r2, [pc, #184]	@ (8003ee4 <SystemInit+0xc8>)
 8003e2a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e2e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8003e32:	4b2d      	ldr	r3, [pc, #180]	@ (8003ee8 <SystemInit+0xcc>)
 8003e34:	2201      	movs	r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8003e38:	4b2b      	ldr	r3, [pc, #172]	@ (8003ee8 <SystemInit+0xcc>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ee8 <SystemInit+0xcc>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8003e44:	4b28      	ldr	r3, [pc, #160]	@ (8003ee8 <SystemInit+0xcc>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	4927      	ldr	r1, [pc, #156]	@ (8003ee8 <SystemInit+0xcc>)
 8003e4a:	4b28      	ldr	r3, [pc, #160]	@ (8003eec <SystemInit+0xd0>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8003e50:	4b25      	ldr	r3, [pc, #148]	@ (8003ee8 <SystemInit+0xcc>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8003e56:	4b24      	ldr	r3, [pc, #144]	@ (8003ee8 <SystemInit+0xcc>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8003e5c:	4b22      	ldr	r3, [pc, #136]	@ (8003ee8 <SystemInit+0xcc>)
 8003e5e:	4a24      	ldr	r2, [pc, #144]	@ (8003ef0 <SystemInit+0xd4>)
 8003e60:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8003e62:	4b21      	ldr	r3, [pc, #132]	@ (8003ee8 <SystemInit+0xcc>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8003e68:	4b1f      	ldr	r3, [pc, #124]	@ (8003ee8 <SystemInit+0xcc>)
 8003e6a:	4a21      	ldr	r2, [pc, #132]	@ (8003ef0 <SystemInit+0xd4>)
 8003e6c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8003e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ee8 <SystemInit+0xcc>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003e74:	4b1c      	ldr	r3, [pc, #112]	@ (8003ee8 <SystemInit+0xcc>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1b      	ldr	r2, [pc, #108]	@ (8003ee8 <SystemInit+0xcc>)
 8003e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003e80:	4b19      	ldr	r3, [pc, #100]	@ (8003ee8 <SystemInit+0xcc>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e86:	4b17      	ldr	r3, [pc, #92]	@ (8003ee4 <SystemInit+0xc8>)
 8003e88:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003e8c:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8003e8e:	4b19      	ldr	r3, [pc, #100]	@ (8003ef4 <SystemInit+0xd8>)
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8003e96:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8003e9e:	d003      	beq.n	8003ea8 <SystemInit+0x8c>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003ea6:	d117      	bne.n	8003ed8 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8003ea8:	4b12      	ldr	r3, [pc, #72]	@ (8003ef4 <SystemInit+0xd8>)
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8003eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef4 <SystemInit+0xd8>)
 8003eb6:	4a10      	ldr	r2, [pc, #64]	@ (8003ef8 <SystemInit+0xdc>)
 8003eb8:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8003eba:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef4 <SystemInit+0xd8>)
 8003ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8003efc <SystemInit+0xe0>)
 8003ebe:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef4 <SystemInit+0xd8>)
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8003ef4 <SystemInit+0xd8>)
 8003ec6:	f043 0302 	orr.w	r3, r3, #2
 8003eca:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8003ecc:	4b09      	ldr	r3, [pc, #36]	@ (8003ef4 <SystemInit+0xd8>)
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	4a08      	ldr	r2, [pc, #32]	@ (8003ef4 <SystemInit+0xd8>)
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	61d3      	str	r3, [r2, #28]
  }
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	e000ed00 	.word	0xe000ed00
 8003ee8:	44020c00 	.word	0x44020c00
 8003eec:	fae2eae3 	.word	0xfae2eae3
 8003ef0:	01010280 	.word	0x01010280
 8003ef4:	40022000 	.word	0x40022000
 8003ef8:	08192a3b 	.word	0x08192a3b
 8003efc:	4c5d6e7f 	.word	0x4c5d6e7f

08003f00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003f00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003f04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003f06:	e003      	b.n	8003f10 <LoopCopyDataInit>

08003f08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003f08:	4b0c      	ldr	r3, [pc, #48]	@ (8003f3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003f0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003f0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003f0e:	3104      	adds	r1, #4

08003f10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003f10:	480b      	ldr	r0, [pc, #44]	@ (8003f40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003f12:	4b0c      	ldr	r3, [pc, #48]	@ (8003f44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003f14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003f16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003f18:	d3f6      	bcc.n	8003f08 <CopyDataInit>
	ldr	r2, =_sbss
 8003f1a:	4a0b      	ldr	r2, [pc, #44]	@ (8003f48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003f1c:	e002      	b.n	8003f24 <LoopFillZerobss>

08003f1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003f1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003f20:	f842 3b04 	str.w	r3, [r2], #4

08003f24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003f24:	4b09      	ldr	r3, [pc, #36]	@ (8003f4c <LoopForever+0x16>)
	cmp	r2, r3
 8003f26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003f28:	d3f9      	bcc.n	8003f1e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f2a:	f7ff ff77 	bl	8003e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f2e:	f009 f8bb 	bl	800d0a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f32:	f7fe fcd5 	bl	80028e0 <main>

08003f36 <LoopForever>:

LoopForever:
    b LoopForever
 8003f36:	e7fe      	b.n	8003f36 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003f38:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8003f3c:	08010940 	.word	0x08010940
	ldr	r0, =_sdata
 8003f40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003f44:	200001d8 	.word	0x200001d8
	ldr	r2, =_sbss
 8003f48:	200001d8 	.word	0x200001d8
	ldr	r3, = _ebss
 8003f4c:	20003f00 	.word	0x20003f00

08003f50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f50:	e7fe      	b.n	8003f50 <ADC1_IRQHandler>
	...

08003f54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f58:	2003      	movs	r0, #3
 8003f5a:	f001 fc2e 	bl	80057ba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003f5e:	f003 fe4d 	bl	8007bfc <HAL_RCC_GetSysClockFreq>
 8003f62:	4602      	mov	r2, r0
 8003f64:	4b0c      	ldr	r3, [pc, #48]	@ (8003f98 <HAL_Init+0x44>)
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	490b      	ldr	r1, [pc, #44]	@ (8003f9c <HAL_Init+0x48>)
 8003f6e:	5ccb      	ldrb	r3, [r1, r3]
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
 8003f74:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa0 <HAL_Init+0x4c>)
 8003f76:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003f78:	2004      	movs	r0, #4
 8003f7a:	f001 fc73 	bl	8005864 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f7e:	200f      	movs	r0, #15
 8003f80:	f000 f810 	bl	8003fa4 <HAL_InitTick>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e002      	b.n	8003f94 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f8e:	f7ff fb43 	bl	8003618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	44020c00 	.word	0x44020c00
 8003f9c:	0801057c 	.word	0x0801057c
 8003fa0:	20000004 	.word	0x20000004

08003fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003fb0:	4b33      	ldr	r3, [pc, #204]	@ (8004080 <HAL_InitTick+0xdc>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e05c      	b.n	8004076 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003fbc:	4b31      	ldr	r3, [pc, #196]	@ (8004084 <HAL_InitTick+0xe0>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d10c      	bne.n	8003fe2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8003fc8:	4b2f      	ldr	r3, [pc, #188]	@ (8004088 <HAL_InitTick+0xe4>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b2c      	ldr	r3, [pc, #176]	@ (8004080 <HAL_InitTick+0xdc>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	e037      	b.n	8004052 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8003fe2:	f001 fc97 	bl	8005914 <HAL_SYSTICK_GetCLKSourceConfig>
 8003fe6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d023      	beq.n	8004036 <HAL_InitTick+0x92>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d82d      	bhi.n	8004050 <HAL_InitTick+0xac>
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_InitTick+0x5e>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d00d      	beq.n	800401c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8004000:	e026      	b.n	8004050 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8004002:	4b21      	ldr	r3, [pc, #132]	@ (8004088 <HAL_InitTick+0xe4>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4b1e      	ldr	r3, [pc, #120]	@ (8004080 <HAL_InitTick+0xdc>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	4619      	mov	r1, r3
 800400c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8004010:	fbb3 f3f1 	udiv	r3, r3, r1
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	60fb      	str	r3, [r7, #12]
        break;
 800401a:	e01a      	b.n	8004052 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800401c:	4b18      	ldr	r3, [pc, #96]	@ (8004080 <HAL_InitTick+0xdc>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004026:	fbb3 f3f2 	udiv	r3, r3, r2
 800402a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800402e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004032:	60fb      	str	r3, [r7, #12]
        break;
 8004034:	e00d      	b.n	8004052 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8004036:	4b12      	ldr	r3, [pc, #72]	@ (8004080 <HAL_InitTick+0xdc>)
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004040:	fbb3 f3f2 	udiv	r3, r3, r2
 8004044:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	60fb      	str	r3, [r7, #12]
        break;
 800404e:	e000      	b.n	8004052 <HAL_InitTick+0xae>
        break;
 8004050:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f001 fbe4 	bl	8005820 <HAL_SYSTICK_Config>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e009      	b.n	8004076 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004062:	2200      	movs	r2, #0
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	f04f 30ff 	mov.w	r0, #4294967295
 800406a:	f001 fbb1 	bl	80057d0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800406e:	4a07      	ldr	r2, [pc, #28]	@ (800408c <HAL_InitTick+0xe8>)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	2000000c 	.word	0x2000000c
 8004084:	e000e010 	.word	0xe000e010
 8004088:	20000004 	.word	0x20000004
 800408c:	20000008 	.word	0x20000008

08004090 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004094:	4b06      	ldr	r3, [pc, #24]	@ (80040b0 <HAL_IncTick+0x20>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	4b06      	ldr	r3, [pc, #24]	@ (80040b4 <HAL_IncTick+0x24>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4413      	add	r3, r2
 80040a0:	4a04      	ldr	r2, [pc, #16]	@ (80040b4 <HAL_IncTick+0x24>)
 80040a2:	6013      	str	r3, [r2, #0]
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	2000000c 	.word	0x2000000c
 80040b4:	20003db0 	.word	0x20003db0

080040b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return uwTick;
 80040bc:	4b03      	ldr	r3, [pc, #12]	@ (80040cc <HAL_GetTick+0x14>)
 80040be:	681b      	ldr	r3, [r3, #0]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20003db0 	.word	0x20003db0

080040d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	609a      	str	r2, [r3, #8]
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	609a      	str	r2, [r3, #8]
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP1       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP1);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004146:	f043 0202 	orr.w	r2, r3, #2
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8004164:	4b06      	ldr	r3, [pc, #24]	@ (8004180 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8004166:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800416a:	4a05      	ldr	r2, [pc, #20]	@ (8004180 <LL_ADC_EnableChannel0_GPIO+0x24>)
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	42028000 	.word	0x42028000

08004184 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3360      	adds	r3, #96	@ 0x60
 8004196:	461a      	mov	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	4b08      	ldr	r3, [pc, #32]	@ (80041c8 <LL_ADC_SetOffset+0x44>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80041bc:	bf00      	nop
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	03fff000 	.word	0x03fff000

080041cc <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3360      	adds	r3, #96	@ 0x60
 80041da:	461a      	mov	r2, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3360      	adds	r3, #96	@ 0x60
 8004208:	461a      	mov	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	431a      	orrs	r2, r3
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004222:	bf00      	nop
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800422e:	b480      	push	{r7}
 8004230:	b087      	sub	sp, #28
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3360      	adds	r3, #96	@ 0x60
 800423e:	461a      	mov	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	431a      	orrs	r2, r3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3360      	adds	r3, #96	@ 0x60
 8004274:	461a      	mov	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	431a      	orrs	r2, r3
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800428e:	bf00      	nop
 8004290:	371c      	adds	r7, #28
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	615a      	str	r2, [r3, #20]
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b087      	sub	sp, #28
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3330      	adds	r3, #48	@ 0x30
 80042f6:	461a      	mov	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	0a1b      	lsrs	r3, r3, #8
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	f003 030c 	and.w	r3, r3, #12
 8004302:	4413      	add	r3, r2
 8004304:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f003 031f 	and.w	r3, r3, #31
 8004310:	211f      	movs	r1, #31
 8004312:	fa01 f303 	lsl.w	r3, r1, r3
 8004316:	43db      	mvns	r3, r3
 8004318:	401a      	ands	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	0e9b      	lsrs	r3, r3, #26
 800431e:	f003 011f 	and.w	r1, r3, #31
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f003 031f 	and.w	r3, r3, #31
 8004328:	fa01 f303 	lsl.w	r3, r1, r3
 800432c:	431a      	orrs	r2, r3
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004332:	bf00      	nop
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800433e:	b480      	push	{r7}
 8004340:	b087      	sub	sp, #28
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3314      	adds	r3, #20
 800434e:	461a      	mov	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	0e5b      	lsrs	r3, r3, #25
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	4413      	add	r3, r2
 800435c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	0d1b      	lsrs	r3, r3, #20
 8004366:	f003 031f 	and.w	r3, r3, #31
 800436a:	2107      	movs	r1, #7
 800436c:	fa01 f303 	lsl.w	r3, r1, r3
 8004370:	43db      	mvns	r3, r3
 8004372:	401a      	ands	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	0d1b      	lsrs	r3, r3, #20
 8004378:	f003 031f 	and.w	r3, r3, #31
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	fa01 f303 	lsl.w	r3, r1, r3
 8004382:	431a      	orrs	r2, r3
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004388:	bf00      	nop
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043ac:	43db      	mvns	r3, r3
 80043ae:	401a      	ands	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 0318 	and.w	r3, r3, #24
 80043b6:	4908      	ldr	r1, [pc, #32]	@ (80043d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80043b8:	40d9      	lsrs	r1, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	400b      	ands	r3, r1
 80043be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043c2:	431a      	orrs	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	000fffff 	.word	0x000fffff

080043dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80043ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6093      	str	r3, [r2, #8]
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004414:	d101      	bne.n	800441a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004438:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800443c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004460:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004464:	d101      	bne.n	800446a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004488:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800448c:	f043 0201 	orr.w	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044b4:	f043 0202 	orr.w	r2, r3, #2
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <LL_ADC_IsEnabled+0x18>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <LL_ADC_IsEnabled+0x1a>
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d101      	bne.n	8004506 <LL_ADC_IsDisableOngoing+0x18>
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <LL_ADC_IsDisableOngoing+0x1a>
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004524:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004528:	f043 0204 	orr.w	r2, r3, #4
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b04      	cmp	r3, #4
 800454e:	d101      	bne.n	8004554 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004550:	2301      	movs	r3, #1
 8004552:	e000      	b.n	8004556 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b08      	cmp	r3, #8
 8004574:	d101      	bne.n	800457a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e131      	b.n	8004806 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7ff f839 	bl	8003628 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff ff19 	bl	8004400 <LL_ADC_IsDeepPowerDownEnabled>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d004      	beq.n	80045de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff feff 	bl	80043dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff ff34 	bl	8004450 <LL_ADC_IsInternalRegulatorEnabled>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d115      	bne.n	800461a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff ff18 	bl	8004428 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045f8:	4b85      	ldr	r3, [pc, #532]	@ (8004810 <HAL_ADC_Init+0x288>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	099b      	lsrs	r3, r3, #6
 80045fe:	4a85      	ldr	r2, [pc, #532]	@ (8004814 <HAL_ADC_Init+0x28c>)
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
 8004604:	099b      	lsrs	r3, r3, #6
 8004606:	3301      	adds	r3, #1
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800460c:	e002      	b.n	8004614 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3b01      	subs	r3, #1
 8004612:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f9      	bne.n	800460e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff ff16 	bl	8004450 <LL_ADC_IsInternalRegulatorEnabled>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10d      	bne.n	8004646 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462e:	f043 0210 	orr.w	r2, r3, #16
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800463a:	f043 0201 	orr.w	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff ff76 	bl	800453c <LL_ADC_REG_IsConversionOngoing>
 8004650:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	2b00      	cmp	r3, #0
 800465c:	f040 80ca 	bne.w	80047f4 <HAL_ADC_Init+0x26c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f040 80c6 	bne.w	80047f4 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800466c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004670:	f043 0202 	orr.w	r2, r3, #2
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff ff23 	bl	80044c8 <LL_ADC_IsEnabled>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10b      	bne.n	80046a0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004688:	4863      	ldr	r0, [pc, #396]	@ (8004818 <HAL_ADC_Init+0x290>)
 800468a:	f7ff ff1d 	bl	80044c8 <LL_ADC_IsEnabled>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d105      	bne.n	80046a0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	4619      	mov	r1, r3
 800469a:	4860      	ldr	r0, [pc, #384]	@ (800481c <HAL_ADC_Init+0x294>)
 800469c:	f7ff fd18 	bl	80040d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	7e5b      	ldrb	r3, [r3, #25]
 80046a4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046aa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80046b0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80046b6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046be:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d106      	bne.n	80046dc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	3b01      	subs	r3, #1
 80046d4:	045b      	lsls	r3, r3, #17
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4313      	orrs	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d009      	beq.n	80046f8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	4b48      	ldr	r3, [pc, #288]	@ (8004820 <HAL_ADC_Init+0x298>)
 8004700:	4013      	ands	r3, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	69b9      	ldr	r1, [r7, #24]
 8004708:	430b      	orrs	r3, r1
 800470a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff ff1b 	bl	8004562 <LL_ADC_INJ_IsConversionOngoing>
 800472c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d13d      	bne.n	80047b0 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d13a      	bne.n	80047b0 <HAL_ADC_Init+0x228>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	7e1b      	ldrb	r3, [r3, #24]
 800473e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004746:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8004748:	4313      	orrs	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004756:	f023 0302 	bic.w	r3, r3, #2
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6812      	ldr	r2, [r2, #0]
 800475e:	69b9      	ldr	r1, [r7, #24]
 8004760:	430b      	orrs	r3, r1
 8004762:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800476a:	2b01      	cmp	r3, #1
 800476c:	d118      	bne.n	80047a0 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004778:	f023 0304 	bic.w	r3, r3, #4
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004784:	4311      	orrs	r1, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800478a:	4311      	orrs	r1, r2
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004790:	430a      	orrs	r2, r1
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0201 	orr.w	r2, r2, #1
 800479c:	611a      	str	r2, [r3, #16]
 800479e:	e007      	b.n	80047b0 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691a      	ldr	r2, [r3, #16]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0201 	bic.w	r2, r2, #1
 80047ae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d10c      	bne.n	80047d2 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047be:	f023 010f 	bic.w	r1, r3, #15
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	1e5a      	subs	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80047d0:	e007      	b.n	80047e2 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 020f 	bic.w	r2, r2, #15
 80047e0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e6:	f023 0303 	bic.w	r3, r3, #3
 80047ea:	f043 0201 	orr.w	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80047f2:	e007      	b.n	8004804 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f8:	f043 0210 	orr.w	r2, r3, #16
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004804:	7ffb      	ldrb	r3, [r7, #31]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3720      	adds	r7, #32
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000004 	.word	0x20000004
 8004814:	053e2d63 	.word	0x053e2d63
 8004818:	42028000 	.word	0x42028000
 800481c:	42028300 	.word	0x42028300
 8004820:	fff04007 	.word	0xfff04007

08004824 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b0a2      	sub	sp, #136	@ 0x88
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff fe81 	bl	800453c <LL_ADC_REG_IsConversionOngoing>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	f040 80d9 	bne.w	80049f4 <HAL_ADC_Start_DMA+0x1d0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_ADC_Start_DMA+0x2c>
 800484c:	2302      	movs	r3, #2
 800484e:	e0d6      	b.n	80049fe <HAL_ADC_Start_DMA+0x1da>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 fcfd 	bl	8005258 <ADC_Enable>
 800485e:	4603      	mov	r3, r0
 8004860:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004864:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004868:	2b00      	cmp	r3, #0
 800486a:	f040 80be 	bne.w	80049ea <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004872:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004886:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d006      	beq.n	800489c <HAL_ADC_Start_DMA+0x78>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004892:	f023 0206 	bic.w	r2, r3, #6
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	65da      	str	r2, [r3, #92]	@ 0x5c
 800489a:	e002      	b.n	80048a2 <HAL_ADC_Start_DMA+0x7e>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a6:	4a58      	ldr	r2, [pc, #352]	@ (8004a08 <HAL_ADC_Start_DMA+0x1e4>)
 80048a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ae:	4a57      	ldr	r2, [pc, #348]	@ (8004a0c <HAL_ADC_Start_DMA+0x1e8>)
 80048b0:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048b6:	4a56      	ldr	r2, [pc, #344]	@ (8004a10 <HAL_ADC_Start_DMA+0x1ec>)
 80048b8:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	221c      	movs	r2, #28
 80048c0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0210 	orr.w	r2, r2, #16
 80048d8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0201 	orr.w	r2, r2, #1
 80048e8:	60da      	str	r2, [r3, #12]

        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d04d      	beq.n	8004994 <HAL_ADC_Start_DMA+0x170>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d046      	beq.n	8004990 <HAL_ADC_Start_DMA+0x16c>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d040      	beq.n	8004990 <HAL_ADC_Start_DMA+0x16c>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	f107 0314 	add.w	r3, r7, #20
 800491a:	4611      	mov	r1, r2
 800491c:	4618      	mov	r0, r3
 800491e:	f001 ff6d 	bl	80067fc <HAL_DMAEx_List_GetNodeConfig>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_ADC_Start_DMA+0x108>
            {
              return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e068      	b.n	80049fe <HAL_ADC_Start_DMA+0x1da>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800492c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800492e:	2b02      	cmp	r3, #2
 8004930:	d104      	bne.n	800493c <HAL_ADC_Start_DMA+0x118>
            {
              /* Word -> Bytes */
              length_bytes = Length * 4U;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800493a:	e00a      	b.n	8004952 <HAL_ADC_Start_DMA+0x12e>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800493c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493e:	2b01      	cmp	r3, #1
 8004940:	d104      	bne.n	800494c <HAL_ADC_Start_DMA+0x128>
            {
              /* Halfword -> Bytes */
              length_bytes = Length * 2U;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800494a:	e002      	b.n	8004952 <HAL_ADC_Start_DMA+0x12e>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              length_bytes = Length;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)length_bytes;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800495e:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800496c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004982:	4618      	mov	r0, r3
 8004984:	f001 fea6 	bl	80066d4 <HAL_DMAEx_List_Start_IT>
 8004988:	4603      	mov	r3, r0
 800498a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800498e:	e026      	b.n	80049de <HAL_ADC_Start_DMA+0x1ba>
          }
          else
          {
            return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e034      	b.n	80049fe <HAL_ADC_Start_DMA+0x1da>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d104      	bne.n	80049a8 <HAL_ADC_Start_DMA+0x184>
          {
            /* Word -> Bytes */
            length_bytes = Length * 4U;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049a6:	e00c      	b.n	80049c2 <HAL_ADC_Start_DMA+0x19e>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d104      	bne.n	80049bc <HAL_ADC_Start_DMA+0x198>
          {
            /* Halfword -> Bytes */
            length_bytes = Length * 2U;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049ba:	e002      	b.n	80049c2 <HAL_ADC_Start_DMA+0x19e>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            length_bytes = Length;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          /* Start the DMA channel */
          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3340      	adds	r3, #64	@ 0x40
 80049cc:	4619      	mov	r1, r3
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049d4:	f001 fb00 	bl	8005fd8 <HAL_DMA_Start_IT>
 80049d8:	4603      	mov	r3, r0
 80049da:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff fd96 	bl	8004514 <LL_ADC_REG_StartConversion>
 80049e8:	e007      	b.n	80049fa <HAL_ADC_Start_DMA+0x1d6>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80049f2:	e002      	b.n	80049fa <HAL_ADC_Start_DMA+0x1d6>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80049f4:	2302      	movs	r3, #2
 80049f6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  /* Return function status */
  return tmp_hal_status;
 80049fa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3788      	adds	r7, #136	@ 0x88
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	0800541b 	.word	0x0800541b
 8004a0c:	080054f3 	.word	0x080054f3
 8004a10:	0800550f 	.word	0x0800550f

08004a14 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b0b6      	sub	sp, #216	@ 0xd8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <HAL_ADC_ConfigChannel+0x22>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e3e6      	b.n	800522c <HAL_ADC_ConfigChannel+0x7f0>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff fd66 	bl	800453c <LL_ADC_REG_IsConversionOngoing>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f040 83cb 	bne.w	800520e <HAL_ADC_ConfigChannel+0x7d2>
  {
    if ((pConfig->Channel == ADC_CHANNEL_0)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d009      	beq.n	8004a94 <HAL_ADC_ConfigChannel+0x58>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4ab0      	ldr	r2, [pc, #704]	@ (8004d48 <HAL_ADC_ConfigChannel+0x30c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d109      	bne.n	8004a9e <HAL_ADC_ConfigChannel+0x62>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	4aaf      	ldr	r2, [pc, #700]	@ (8004d4c <HAL_ADC_ConfigChannel+0x310>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d104      	bne.n	8004a9e <HAL_ADC_ConfigChannel+0x62>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff fb5f 	bl	800415c <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6818      	ldr	r0, [r3, #0]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	6859      	ldr	r1, [r3, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f7ff fc1b 	bl	80042e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff fd41 	bl	800453c <LL_ADC_REG_IsConversionOngoing>
 8004aba:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff fd4d 	bl	8004562 <LL_ADC_INJ_IsConversionOngoing>
 8004ac8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004acc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f040 81dd 	bne.w	8004e90 <HAL_ADC_ConfigChannel+0x454>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ad6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f040 81d8 	bne.w	8004e90 <HAL_ADC_ConfigChannel+0x454>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ae8:	d10f      	bne.n	8004b0a <HAL_ADC_ConfigChannel+0xce>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2200      	movs	r2, #0
 8004af4:	4619      	mov	r1, r3
 8004af6:	f7ff fc22 	bl	800433e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff fbc9 	bl	800429a <LL_ADC_SetSamplingTimeCommonConfig>
 8004b08:	e00e      	b.n	8004b28 <HAL_ADC_ConfigChannel+0xec>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6819      	ldr	r1, [r3, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	461a      	mov	r2, r3
 8004b18:	f7ff fc11 	bl	800433e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2100      	movs	r1, #0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fbb9 	bl	800429a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	695a      	ldr	r2, [r3, #20]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	08db      	lsrs	r3, r3, #3
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d022      	beq.n	8004b90 <HAL_ADC_ConfigChannel+0x154>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	6919      	ldr	r1, [r3, #16]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b5a:	f7ff fb13 	bl	8004184 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	6919      	ldr	r1, [r3, #16]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f7ff fb5f 	bl	800422e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6818      	ldr	r0, [r3, #0]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d102      	bne.n	8004b86 <HAL_ADC_ConfigChannel+0x14a>
 8004b80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b84:	e000      	b.n	8004b88 <HAL_ADC_ConfigChannel+0x14c>
 8004b86:	2300      	movs	r3, #0
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f7ff fb6b 	bl	8004264 <LL_ADC_SetOffsetSaturation>
 8004b8e:	e17f      	b.n	8004e90 <HAL_ADC_ConfigChannel+0x454>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2100      	movs	r1, #0
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff fb18 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10a      	bne.n	8004bbc <HAL_ADC_ConfigChannel+0x180>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2100      	movs	r1, #0
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff fb0d 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	0e9b      	lsrs	r3, r3, #26
 8004bb6:	f003 021f 	and.w	r2, r3, #31
 8004bba:	e01e      	b.n	8004bfa <HAL_ADC_ConfigChannel+0x1be>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff fb02 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004bd2:	fa93 f3a3 	rbit	r3, r3
 8004bd6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8004bda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004bde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8004be2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_ADC_ConfigChannel+0x1b2>
    return 32U;
 8004bea:	2320      	movs	r3, #32
 8004bec:	e004      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x1bc>
  return __builtin_clz(value);
 8004bee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004bf2:	fab3 f383 	clz	r3, r3
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d105      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x1d6>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	0e9b      	lsrs	r3, r3, #26
 8004c0c:	f003 031f 	and.w	r3, r3, #31
 8004c10:	e018      	b.n	8004c44 <HAL_ADC_ConfigChannel+0x208>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004c1e:	fa93 f3a3 	rbit	r3, r3
 8004c22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004c2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_ADC_ConfigChannel+0x1fe>
    return 32U;
 8004c36:	2320      	movs	r3, #32
 8004c38:	e004      	b.n	8004c44 <HAL_ADC_ConfigChannel+0x208>
  return __builtin_clz(value);
 8004c3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c3e:	fab3 f383 	clz	r3, r3
 8004c42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d106      	bne.n	8004c56 <HAL_ADC_ConfigChannel+0x21a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2100      	movs	r1, #0
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff fad1 	bl	80041f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff fab5 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10a      	bne.n	8004c82 <HAL_ADC_ConfigChannel+0x246>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2101      	movs	r1, #1
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff faaa 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	0e9b      	lsrs	r3, r3, #26
 8004c7c:	f003 021f 	and.w	r2, r3, #31
 8004c80:	e01e      	b.n	8004cc0 <HAL_ADC_ConfigChannel+0x284>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2101      	movs	r1, #1
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff fa9f 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c98:	fa93 f3a3 	rbit	r3, r3
 8004c9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004ca0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004ca8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_ADC_ConfigChannel+0x278>
    return 32U;
 8004cb0:	2320      	movs	r3, #32
 8004cb2:	e004      	b.n	8004cbe <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 8004cb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004cb8:	fab3 f383 	clz	r3, r3
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d105      	bne.n	8004cd8 <HAL_ADC_ConfigChannel+0x29c>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	0e9b      	lsrs	r3, r3, #26
 8004cd2:	f003 031f 	and.w	r3, r3, #31
 8004cd6:	e018      	b.n	8004d0a <HAL_ADC_ConfigChannel+0x2ce>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ce4:	fa93 f3a3 	rbit	r3, r3
 8004ce8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004cec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004cf0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004cf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8004cfc:	2320      	movs	r3, #32
 8004cfe:	e004      	b.n	8004d0a <HAL_ADC_ConfigChannel+0x2ce>
  return __builtin_clz(value);
 8004d00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d04:	fab3 f383 	clz	r3, r3
 8004d08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d106      	bne.n	8004d1c <HAL_ADC_ConfigChannel+0x2e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2200      	movs	r2, #0
 8004d14:	2101      	movs	r1, #1
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff fa6e 	bl	80041f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2102      	movs	r1, #2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff fa52 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10e      	bne.n	8004d50 <HAL_ADC_ConfigChannel+0x314>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2102      	movs	r1, #2
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff fa47 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	0e9b      	lsrs	r3, r3, #26
 8004d42:	f003 021f 	and.w	r2, r3, #31
 8004d46:	e022      	b.n	8004d8e <HAL_ADC_ConfigChannel+0x352>
 8004d48:	04300002 	.word	0x04300002
 8004d4c:	407f0000 	.word	0x407f0000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2102      	movs	r1, #2
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff fa38 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d66:	fa93 f3a3 	rbit	r3, r3
 8004d6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004d6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004d76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_ADC_ConfigChannel+0x346>
    return 32U;
 8004d7e:	2320      	movs	r3, #32
 8004d80:	e004      	b.n	8004d8c <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8004d82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004d86:	fab3 f383 	clz	r3, r3
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d105      	bne.n	8004da6 <HAL_ADC_ConfigChannel+0x36a>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	0e9b      	lsrs	r3, r3, #26
 8004da0:	f003 031f 	and.w	r3, r3, #31
 8004da4:	e016      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x398>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004db2:	fa93 f3a3 	rbit	r3, r3
 8004db6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004db8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004dba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004dbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_ADC_ConfigChannel+0x38e>
    return 32U;
 8004dc6:	2320      	movs	r3, #32
 8004dc8:	e004      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x398>
  return __builtin_clz(value);
 8004dca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004dce:	fab3 f383 	clz	r3, r3
 8004dd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d106      	bne.n	8004de6 <HAL_ADC_ConfigChannel+0x3aa>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	2102      	movs	r1, #2
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7ff fa09 	bl	80041f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2103      	movs	r1, #3
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff f9ed 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004df2:	4603      	mov	r3, r0
 8004df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <HAL_ADC_ConfigChannel+0x3d6>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2103      	movs	r1, #3
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff f9e2 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	0e9b      	lsrs	r3, r3, #26
 8004e0c:	f003 021f 	and.w	r2, r3, #31
 8004e10:	e017      	b.n	8004e42 <HAL_ADC_ConfigChannel+0x406>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2103      	movs	r1, #3
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff f9d7 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e24:	fa93 f3a3 	rbit	r3, r3
 8004e28:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004e2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e2c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004e2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004e34:	2320      	movs	r3, #32
 8004e36:	e003      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004e38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e3a:	fab3 f383 	clz	r3, r3
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d105      	bne.n	8004e5a <HAL_ADC_ConfigChannel+0x41e>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	0e9b      	lsrs	r3, r3, #26
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	e011      	b.n	8004e7e <HAL_ADC_ConfigChannel+0x442>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e62:	fa93 f3a3 	rbit	r3, r3
 8004e66:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004e68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004e6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_ADC_ConfigChannel+0x43a>
    return 32U;
 8004e72:	2320      	movs	r3, #32
 8004e74:	e003      	b.n	8004e7e <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 8004e76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e78:	fab3 f383 	clz	r3, r3
 8004e7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d106      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x454>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2200      	movs	r2, #0
 8004e88:	2103      	movs	r1, #3
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff f9b4 	bl	80041f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff fb17 	bl	80044c8 <LL_ADC_IsEnabled>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f040 813f 	bne.w	8005120 <HAL_ADC_ConfigChannel+0x6e4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6819      	ldr	r1, [r3, #0]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f7ff fa70 	bl	8004394 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	4a8e      	ldr	r2, [pc, #568]	@ (80050f4 <HAL_ADC_ConfigChannel+0x6b8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	f040 8130 	bne.w	8005120 <HAL_ADC_ConfigChannel+0x6e4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10b      	bne.n	8004ee8 <HAL_ADC_ConfigChannel+0x4ac>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	0e9b      	lsrs	r3, r3, #26
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	f003 031f 	and.w	r3, r3, #31
 8004edc:	2b09      	cmp	r3, #9
 8004ede:	bf94      	ite	ls
 8004ee0:	2301      	movls	r3, #1
 8004ee2:	2300      	movhi	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	e019      	b.n	8004f1c <HAL_ADC_ConfigChannel+0x4e0>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ef0:	fa93 f3a3 	rbit	r3, r3
 8004ef4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004ef6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ef8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004efa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x4c8>
    return 32U;
 8004f00:	2320      	movs	r3, #32
 8004f02:	e003      	b.n	8004f0c <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8004f04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f06:	fab3 f383 	clz	r3, r3
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	f003 031f 	and.w	r3, r3, #31
 8004f12:	2b09      	cmp	r3, #9
 8004f14:	bf94      	ite	ls
 8004f16:	2301      	movls	r3, #1
 8004f18:	2300      	movhi	r3, #0
 8004f1a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d079      	beq.n	8005014 <HAL_ADC_ConfigChannel+0x5d8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d107      	bne.n	8004f3c <HAL_ADC_ConfigChannel+0x500>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	0e9b      	lsrs	r3, r3, #26
 8004f32:	3301      	adds	r3, #1
 8004f34:	069b      	lsls	r3, r3, #26
 8004f36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f3a:	e015      	b.n	8004f68 <HAL_ADC_ConfigChannel+0x52c>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f44:	fa93 f3a3 	rbit	r3, r3
 8004f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004f4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f4c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <HAL_ADC_ConfigChannel+0x51c>
    return 32U;
 8004f54:	2320      	movs	r3, #32
 8004f56:	e003      	b.n	8004f60 <HAL_ADC_ConfigChannel+0x524>
  return __builtin_clz(value);
 8004f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f5a:	fab3 f383 	clz	r3, r3
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	3301      	adds	r3, #1
 8004f62:	069b      	lsls	r3, r3, #26
 8004f64:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d109      	bne.n	8004f88 <HAL_ADC_ConfigChannel+0x54c>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	0e9b      	lsrs	r3, r3, #26
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	f003 031f 	and.w	r3, r3, #31
 8004f80:	2101      	movs	r1, #1
 8004f82:	fa01 f303 	lsl.w	r3, r1, r3
 8004f86:	e017      	b.n	8004fb8 <HAL_ADC_ConfigChannel+0x57c>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f90:	fa93 f3a3 	rbit	r3, r3
 8004f94:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f98:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004f9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_ADC_ConfigChannel+0x568>
    return 32U;
 8004fa0:	2320      	movs	r3, #32
 8004fa2:	e003      	b.n	8004fac <HAL_ADC_ConfigChannel+0x570>
  return __builtin_clz(value);
 8004fa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fa6:	fab3 f383 	clz	r3, r3
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	3301      	adds	r3, #1
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb8:	ea42 0103 	orr.w	r1, r2, r3
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <HAL_ADC_ConfigChannel+0x5a2>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	0e9b      	lsrs	r3, r3, #26
 8004fce:	3301      	adds	r3, #1
 8004fd0:	f003 021f 	and.w	r2, r3, #31
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	4413      	add	r3, r2
 8004fda:	051b      	lsls	r3, r3, #20
 8004fdc:	e018      	b.n	8005010 <HAL_ADC_ConfigChannel+0x5d4>
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe6:	fa93 f3a3 	rbit	r3, r3
 8004fea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_ADC_ConfigChannel+0x5be>
    return 32U;
 8004ff6:	2320      	movs	r3, #32
 8004ff8:	e003      	b.n	8005002 <HAL_ADC_ConfigChannel+0x5c6>
  return __builtin_clz(value);
 8004ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ffc:	fab3 f383 	clz	r3, r3
 8005000:	b2db      	uxtb	r3, r3
 8005002:	3301      	adds	r3, #1
 8005004:	f003 021f 	and.w	r2, r3, #31
 8005008:	4613      	mov	r3, r2
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	4413      	add	r3, r2
 800500e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005010:	430b      	orrs	r3, r1
 8005012:	e080      	b.n	8005116 <HAL_ADC_ConfigChannel+0x6da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800501c:	2b00      	cmp	r3, #0
 800501e:	d107      	bne.n	8005030 <HAL_ADC_ConfigChannel+0x5f4>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	0e9b      	lsrs	r3, r3, #26
 8005026:	3301      	adds	r3, #1
 8005028:	069b      	lsls	r3, r3, #26
 800502a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800502e:	e015      	b.n	800505c <HAL_ADC_ConfigChannel+0x620>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005038:	fa93 f3a3 	rbit	r3, r3
 800503c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800503e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005040:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_ADC_ConfigChannel+0x610>
    return 32U;
 8005048:	2320      	movs	r3, #32
 800504a:	e003      	b.n	8005054 <HAL_ADC_ConfigChannel+0x618>
  return __builtin_clz(value);
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	fab3 f383 	clz	r3, r3
 8005052:	b2db      	uxtb	r3, r3
 8005054:	3301      	adds	r3, #1
 8005056:	069b      	lsls	r3, r3, #26
 8005058:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005064:	2b00      	cmp	r3, #0
 8005066:	d109      	bne.n	800507c <HAL_ADC_ConfigChannel+0x640>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	0e9b      	lsrs	r3, r3, #26
 800506e:	3301      	adds	r3, #1
 8005070:	f003 031f 	and.w	r3, r3, #31
 8005074:	2101      	movs	r1, #1
 8005076:	fa01 f303 	lsl.w	r3, r1, r3
 800507a:	e017      	b.n	80050ac <HAL_ADC_ConfigChannel+0x670>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	fa93 f3a3 	rbit	r3, r3
 8005088:	61fb      	str	r3, [r7, #28]
  return result;
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_ADC_ConfigChannel+0x65c>
    return 32U;
 8005094:	2320      	movs	r3, #32
 8005096:	e003      	b.n	80050a0 <HAL_ADC_ConfigChannel+0x664>
  return __builtin_clz(value);
 8005098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509a:	fab3 f383 	clz	r3, r3
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	3301      	adds	r3, #1
 80050a2:	f003 031f 	and.w	r3, r3, #31
 80050a6:	2101      	movs	r1, #1
 80050a8:	fa01 f303 	lsl.w	r3, r1, r3
 80050ac:	ea42 0103 	orr.w	r1, r2, r3
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10d      	bne.n	80050d8 <HAL_ADC_ConfigChannel+0x69c>
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	0e9b      	lsrs	r3, r3, #26
 80050c2:	3301      	adds	r3, #1
 80050c4:	f003 021f 	and.w	r2, r3, #31
 80050c8:	4613      	mov	r3, r2
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	4413      	add	r3, r2
 80050ce:	3b1e      	subs	r3, #30
 80050d0:	051b      	lsls	r3, r3, #20
 80050d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80050d6:	e01d      	b.n	8005114 <HAL_ADC_ConfigChannel+0x6d8>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	fa93 f3a3 	rbit	r3, r3
 80050e4:	613b      	str	r3, [r7, #16]
  return result;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d103      	bne.n	80050f8 <HAL_ADC_ConfigChannel+0x6bc>
    return 32U;
 80050f0:	2320      	movs	r3, #32
 80050f2:	e005      	b.n	8005100 <HAL_ADC_ConfigChannel+0x6c4>
 80050f4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	fab3 f383 	clz	r3, r3
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	3301      	adds	r3, #1
 8005102:	f003 021f 	and.w	r2, r3, #31
 8005106:	4613      	mov	r3, r2
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	4413      	add	r3, r2
 800510c:	3b1e      	subs	r3, #30
 800510e:	051b      	lsls	r3, r3, #20
 8005110:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005114:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800511a:	4619      	mov	r1, r3
 800511c:	f7ff f90f 	bl	800433e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4b43      	ldr	r3, [pc, #268]	@ (8005234 <HAL_ADC_ConfigChannel+0x7f8>)
 8005126:	4013      	ands	r3, r2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d079      	beq.n	8005220 <HAL_ADC_ConfigChannel+0x7e4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800512c:	4842      	ldr	r0, [pc, #264]	@ (8005238 <HAL_ADC_ConfigChannel+0x7fc>)
 800512e:	f7fe fff5 	bl	800411c <LL_ADC_GetCommonPathInternalCh>
 8005132:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a40      	ldr	r2, [pc, #256]	@ (800523c <HAL_ADC_ConfigChannel+0x800>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d124      	bne.n	800518a <HAL_ADC_ConfigChannel+0x74e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005140:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005144:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d11e      	bne.n	800518a <HAL_ADC_ConfigChannel+0x74e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a3b      	ldr	r2, [pc, #236]	@ (8005240 <HAL_ADC_ConfigChannel+0x804>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d164      	bne.n	8005220 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005156:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800515a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800515e:	4619      	mov	r1, r3
 8005160:	4835      	ldr	r0, [pc, #212]	@ (8005238 <HAL_ADC_ConfigChannel+0x7fc>)
 8005162:	f7fe ffc8 	bl	80040f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005166:	4b37      	ldr	r3, [pc, #220]	@ (8005244 <HAL_ADC_ConfigChannel+0x808>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	099b      	lsrs	r3, r3, #6
 800516c:	4a36      	ldr	r2, [pc, #216]	@ (8005248 <HAL_ADC_ConfigChannel+0x80c>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	099b      	lsrs	r3, r3, #6
 8005174:	3301      	adds	r3, #1
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800517a:	e002      	b.n	8005182 <HAL_ADC_ConfigChannel+0x746>
          {
            wait_loop_index--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3b01      	subs	r3, #1
 8005180:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1f9      	bne.n	800517c <HAL_ADC_ConfigChannel+0x740>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005188:	e04a      	b.n	8005220 <HAL_ADC_ConfigChannel+0x7e4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a2f      	ldr	r2, [pc, #188]	@ (800524c <HAL_ADC_ConfigChannel+0x810>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d113      	bne.n	80051bc <HAL_ADC_ConfigChannel+0x780>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005194:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005198:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10d      	bne.n	80051bc <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a26      	ldr	r2, [pc, #152]	@ (8005240 <HAL_ADC_ConfigChannel+0x804>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d13a      	bne.n	8005220 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80051ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051b2:	4619      	mov	r1, r3
 80051b4:	4820      	ldr	r0, [pc, #128]	@ (8005238 <HAL_ADC_ConfigChannel+0x7fc>)
 80051b6:	f7fe ff9e 	bl	80040f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051ba:	e031      	b.n	8005220 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a23      	ldr	r2, [pc, #140]	@ (8005250 <HAL_ADC_ConfigChannel+0x814>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d113      	bne.n	80051ee <HAL_ADC_ConfigChannel+0x7b2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80051c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80051ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10d      	bne.n	80051ee <HAL_ADC_ConfigChannel+0x7b2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005240 <HAL_ADC_ConfigChannel+0x804>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d121      	bne.n	8005220 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80051e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80051e4:	4619      	mov	r1, r3
 80051e6:	4814      	ldr	r0, [pc, #80]	@ (8005238 <HAL_ADC_ConfigChannel+0x7fc>)
 80051e8:	f7fe ff85 	bl	80040f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 80051ec:	e018      	b.n	8005220 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a18      	ldr	r2, [pc, #96]	@ (8005254 <HAL_ADC_ConfigChannel+0x818>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d113      	bne.n	8005220 <HAL_ADC_ConfigChannel+0x7e4>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a10      	ldr	r2, [pc, #64]	@ (8005240 <HAL_ADC_ConfigChannel+0x804>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00e      	beq.n	8005220 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4618      	mov	r0, r3
 8005208:	f7fe ff96 	bl	8004138 <LL_ADC_EnableChannelVDDcore>
 800520c:	e008      	b.n	8005220 <HAL_ADC_ConfigChannel+0x7e4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005212:	f043 0220 	orr.w	r2, r3, #32
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8005228:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800522c:	4618      	mov	r0, r3
 800522e:	37d8      	adds	r7, #216	@ 0xd8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	80080000 	.word	0x80080000
 8005238:	42028300 	.word	0x42028300
 800523c:	c3210000 	.word	0xc3210000
 8005240:	42028000 	.word	0x42028000
 8005244:	20000004 	.word	0x20000004
 8005248:	053e2d63 	.word	0x053e2d63
 800524c:	88600004 	.word	0x88600004
 8005250:	c7520000 	.word	0xc7520000
 8005254:	99200040 	.word	0x99200040

08005258 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005260:	2300      	movs	r3, #0
 8005262:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4618      	mov	r0, r3
 800526a:	f7ff f92d 	bl	80044c8 <LL_ADC_IsEnabled>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d166      	bne.n	8005342 <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	4b34      	ldr	r3, [pc, #208]	@ (800534c <ADC_Enable+0xf4>)
 800527c:	4013      	ands	r3, r2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00d      	beq.n	800529e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005286:	f043 0210 	orr.w	r2, r3, #16
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005292:	f043 0201 	orr.w	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e052      	b.n	8005344 <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff f8e8 	bl	8004478 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80052a8:	4829      	ldr	r0, [pc, #164]	@ (8005350 <ADC_Enable+0xf8>)
 80052aa:	f7fe ff37 	bl	800411c <LL_ADC_GetCommonPathInternalCh>
 80052ae:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80052b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d010      	beq.n	80052da <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052b8:	4b26      	ldr	r3, [pc, #152]	@ (8005354 <ADC_Enable+0xfc>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	099b      	lsrs	r3, r3, #6
 80052be:	4a26      	ldr	r2, [pc, #152]	@ (8005358 <ADC_Enable+0x100>)
 80052c0:	fba2 2303 	umull	r2, r3, r2, r3
 80052c4:	099b      	lsrs	r3, r3, #6
 80052c6:	3301      	adds	r3, #1
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80052cc:	e002      	b.n	80052d4 <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f9      	bne.n	80052ce <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80052da:	f7fe feed 	bl	80040b8 <HAL_GetTick>
 80052de:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052e0:	e028      	b.n	8005334 <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff f8ee 	bl	80044c8 <LL_ADC_IsEnabled>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d104      	bne.n	80052fc <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff f8be 	bl	8004478 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80052fc:	f7fe fedc 	bl	80040b8 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d914      	bls.n	8005334 <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b01      	cmp	r3, #1
 8005316:	d00d      	beq.n	8005334 <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800531c:	f043 0210 	orr.w	r2, r3, #16
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005328:	f043 0201 	orr.w	r2, r3, #1
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e007      	b.n	8005344 <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b01      	cmp	r3, #1
 8005340:	d1cf      	bne.n	80052e2 <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	8000003f 	.word	0x8000003f
 8005350:	42028300 	.word	0x42028300
 8005354:	20000004 	.word	0x20000004
 8005358:	053e2d63 	.word	0x053e2d63

0800535c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff f8c0 	bl	80044ee <LL_ADC_IsDisableOngoing>
 800536e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff f8a7 	bl	80044c8 <LL_ADC_IsEnabled>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d047      	beq.n	8005410 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d144      	bne.n	8005410 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 030d 	and.w	r3, r3, #13
 8005390:	2b01      	cmp	r3, #1
 8005392:	d10c      	bne.n	80053ae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff f881 	bl	80044a0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2203      	movs	r2, #3
 80053a4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80053a6:	f7fe fe87 	bl	80040b8 <HAL_GetTick>
 80053aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80053ac:	e029      	b.n	8005402 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b2:	f043 0210 	orr.w	r2, r3, #16
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053be:	f043 0201 	orr.w	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e023      	b.n	8005412 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80053ca:	f7fe fe75 	bl	80040b8 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d914      	bls.n	8005402 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00d      	beq.n	8005402 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ea:	f043 0210 	orr.w	r2, r3, #16
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f6:	f043 0201 	orr.w	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e007      	b.n	8005412 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1dc      	bne.n	80053ca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b084      	sub	sp, #16
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005426:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800542c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005430:	2b00      	cmp	r3, #0
 8005432:	d14b      	bne.n	80054cc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005438:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d021      	beq.n	8005492 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f7fe ff34 	bl	80042c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d032      	beq.n	80054c4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d12b      	bne.n	80054c4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005470:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d11f      	bne.n	80054c4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005488:	f043 0201 	orr.w	r2, r3, #1
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005490:	e018      	b.n	80054c4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d111      	bne.n	80054c4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d105      	bne.n	80054c4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054bc:	f043 0201 	orr.w	r2, r3, #1
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f7fc fc63 	bl	8001d90 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80054ca:	e00e      	b.n	80054ea <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f7ff faa5 	bl	8004a28 <HAL_ADC_ErrorCallback>
}
 80054de:	e004      	b.n	80054ea <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	4798      	blx	r3
}
 80054ea:	bf00      	nop
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f7ff fa87 	bl	8004a14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005506:	bf00      	nop
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800551a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005520:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800552c:	f043 0204 	orr.w	r2, r3, #4
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f7ff fa77 	bl	8004a28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800553a:	bf00      	nop
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <LL_ADC_StartCalibration>:
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005554:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800555e:	4313      	orrs	r3, r2
 8005560:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	609a      	str	r2, [r3, #8]
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <LL_ADC_IsCalibrationOnGoing>:
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005584:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005588:	d101      	bne.n	800558e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_ADCEx_Calibration_Start+0x1c>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e04d      	b.n	8005654 <HAL_ADCEx_Calibration_Start+0xb8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff fecb 	bl	800535c <ADC_Disable>
 80055c6:	4603      	mov	r3, r0
 80055c8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d136      	bne.n	800563e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80055d8:	f023 0302 	bic.w	r3, r3, #2
 80055dc:	f043 0202 	orr.w	r2, r3, #2
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff ffa9 	bl	8005542 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80055f0:	e014      	b.n	800561c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	3301      	adds	r3, #1
 80055f6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4a18      	ldr	r2, [pc, #96]	@ (800565c <HAL_ADCEx_Calibration_Start+0xc0>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d30d      	bcc.n	800561c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005604:	f023 0312 	bic.w	r3, r3, #18
 8005608:	f043 0210 	orr.w	r2, r3, #16
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e01b      	b.n	8005654 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff ffa7 	bl	8005574 <LL_ADC_IsCalibrationOnGoing>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e2      	bne.n	80055f2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005630:	f023 0303 	bic.w	r3, r3, #3
 8005634:	f043 0201 	orr.w	r2, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	659a      	str	r2, [r3, #88]	@ 0x58
 800563c:	e005      	b.n	800564a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005642:	f043 0210 	orr.w	r2, r3, #16
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8005652:	7bfb      	ldrb	r3, [r7, #15]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	25c3f800 	.word	0x25c3f800

08005660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005670:	4b0c      	ldr	r3, [pc, #48]	@ (80056a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800567c:	4013      	ands	r3, r2
 800567e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005688:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800568c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005692:	4a04      	ldr	r2, [pc, #16]	@ (80056a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	60d3      	str	r3, [r2, #12]
}
 8005698:	bf00      	nop
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	e000ed00 	.word	0xe000ed00

080056a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056ac:	4b04      	ldr	r3, [pc, #16]	@ (80056c0 <__NVIC_GetPriorityGrouping+0x18>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	0a1b      	lsrs	r3, r3, #8
 80056b2:	f003 0307 	and.w	r3, r3, #7
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	e000ed00 	.word	0xe000ed00

080056c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80056ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	db0b      	blt.n	80056ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056d6:	88fb      	ldrh	r3, [r7, #6]
 80056d8:	f003 021f 	and.w	r2, r3, #31
 80056dc:	4907      	ldr	r1, [pc, #28]	@ (80056fc <__NVIC_EnableIRQ+0x38>)
 80056de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	2001      	movs	r0, #1
 80056e6:	fa00 f202 	lsl.w	r2, r0, r2
 80056ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	e000e100 	.word	0xe000e100

08005700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	6039      	str	r1, [r7, #0]
 800570a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800570c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005710:	2b00      	cmp	r3, #0
 8005712:	db0a      	blt.n	800572a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	b2da      	uxtb	r2, r3
 8005718:	490c      	ldr	r1, [pc, #48]	@ (800574c <__NVIC_SetPriority+0x4c>)
 800571a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800571e:	0112      	lsls	r2, r2, #4
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	440b      	add	r3, r1
 8005724:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005728:	e00a      	b.n	8005740 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	b2da      	uxtb	r2, r3
 800572e:	4908      	ldr	r1, [pc, #32]	@ (8005750 <__NVIC_SetPriority+0x50>)
 8005730:	88fb      	ldrh	r3, [r7, #6]
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	3b04      	subs	r3, #4
 8005738:	0112      	lsls	r2, r2, #4
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	440b      	add	r3, r1
 800573e:	761a      	strb	r2, [r3, #24]
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	e000e100 	.word	0xe000e100
 8005750:	e000ed00 	.word	0xe000ed00

08005754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005754:	b480      	push	{r7}
 8005756:	b089      	sub	sp, #36	@ 0x24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f1c3 0307 	rsb	r3, r3, #7
 800576e:	2b04      	cmp	r3, #4
 8005770:	bf28      	it	cs
 8005772:	2304      	movcs	r3, #4
 8005774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	3304      	adds	r3, #4
 800577a:	2b06      	cmp	r3, #6
 800577c:	d902      	bls.n	8005784 <NVIC_EncodePriority+0x30>
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	3b03      	subs	r3, #3
 8005782:	e000      	b.n	8005786 <NVIC_EncodePriority+0x32>
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005788:	f04f 32ff 	mov.w	r2, #4294967295
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43da      	mvns	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	401a      	ands	r2, r3
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800579c:	f04f 31ff 	mov.w	r1, #4294967295
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	fa01 f303 	lsl.w	r3, r1, r3
 80057a6:	43d9      	mvns	r1, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057ac:	4313      	orrs	r3, r2
         );
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3724      	adds	r7, #36	@ 0x24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b082      	sub	sp, #8
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7ff ff4c 	bl	8005660 <__NVIC_SetPriorityGrouping>
}
 80057c8:	bf00      	nop
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	4603      	mov	r3, r0
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80057de:	f7ff ff63 	bl	80056a8 <__NVIC_GetPriorityGrouping>
 80057e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	6978      	ldr	r0, [r7, #20]
 80057ea:	f7ff ffb3 	bl	8005754 <NVIC_EncodePriority>
 80057ee:	4602      	mov	r2, r0
 80057f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80057f4:	4611      	mov	r1, r2
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7ff ff82 	bl	8005700 <__NVIC_SetPriority>
}
 80057fc:	bf00      	nop
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	4603      	mov	r3, r0
 800580c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800580e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff ff56 	bl	80056c4 <__NVIC_EnableIRQ>
}
 8005818:	bf00      	nop
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3b01      	subs	r3, #1
 800582c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005830:	d301      	bcc.n	8005836 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8005832:	2301      	movs	r3, #1
 8005834:	e00d      	b.n	8005852 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8005836:	4a0a      	ldr	r2, [pc, #40]	@ (8005860 <HAL_SYSTICK_Config+0x40>)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3b01      	subs	r3, #1
 800583c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800583e:	4b08      	ldr	r3, [pc, #32]	@ (8005860 <HAL_SYSTICK_Config+0x40>)
 8005840:	2200      	movs	r2, #0
 8005842:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005844:	4b06      	ldr	r3, [pc, #24]	@ (8005860 <HAL_SYSTICK_Config+0x40>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a05      	ldr	r2, [pc, #20]	@ (8005860 <HAL_SYSTICK_Config+0x40>)
 800584a:	f043 0303 	orr.w	r3, r3, #3
 800584e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	e000e010 	.word	0xe000e010

08005864 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b04      	cmp	r3, #4
 8005870:	d844      	bhi.n	80058fc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005872:	a201      	add	r2, pc, #4	@ (adr r2, 8005878 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005878:	0800589b 	.word	0x0800589b
 800587c:	080058b9 	.word	0x080058b9
 8005880:	080058db 	.word	0x080058db
 8005884:	080058fd 	.word	0x080058fd
 8005888:	0800588d 	.word	0x0800588d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800588c:	4b1f      	ldr	r3, [pc, #124]	@ (800590c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a1e      	ldr	r2, [pc, #120]	@ (800590c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005892:	f043 0304 	orr.w	r3, r3, #4
 8005896:	6013      	str	r3, [r2, #0]
      break;
 8005898:	e031      	b.n	80058fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800589a:	4b1c      	ldr	r3, [pc, #112]	@ (800590c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a1b      	ldr	r2, [pc, #108]	@ (800590c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80058a0:	f023 0304 	bic.w	r3, r3, #4
 80058a4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80058a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005910 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80058a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058ac:	4a18      	ldr	r2, [pc, #96]	@ (8005910 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80058ae:	f023 030c 	bic.w	r3, r3, #12
 80058b2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80058b6:	e022      	b.n	80058fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80058b8:	4b14      	ldr	r3, [pc, #80]	@ (800590c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a13      	ldr	r2, [pc, #76]	@ (800590c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80058be:	f023 0304 	bic.w	r3, r3, #4
 80058c2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80058c4:	4b12      	ldr	r3, [pc, #72]	@ (8005910 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80058c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058ca:	f023 030c 	bic.w	r3, r3, #12
 80058ce:	4a10      	ldr	r2, [pc, #64]	@ (8005910 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80058d0:	f043 0304 	orr.w	r3, r3, #4
 80058d4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80058d8:	e011      	b.n	80058fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80058da:	4b0c      	ldr	r3, [pc, #48]	@ (800590c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a0b      	ldr	r2, [pc, #44]	@ (800590c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80058e0:	f023 0304 	bic.w	r3, r3, #4
 80058e4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80058e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005910 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80058e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058ec:	f023 030c 	bic.w	r3, r3, #12
 80058f0:	4a07      	ldr	r2, [pc, #28]	@ (8005910 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80058f2:	f043 0308 	orr.w	r3, r3, #8
 80058f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80058fa:	e000      	b.n	80058fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80058fc:	bf00      	nop
  }
}
 80058fe:	bf00      	nop
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	e000e010 	.word	0xe000e010
 8005910:	44020c00 	.word	0x44020c00

08005914 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800591a:	4b17      	ldr	r3, [pc, #92]	@ (8005978 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8005926:	2304      	movs	r3, #4
 8005928:	607b      	str	r3, [r7, #4]
 800592a:	e01e      	b.n	800596a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 800592c:	4b13      	ldr	r3, [pc, #76]	@ (800597c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800592e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005932:	f003 030c 	and.w	r3, r3, #12
 8005936:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2b08      	cmp	r3, #8
 800593c:	d00f      	beq.n	800595e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b08      	cmp	r3, #8
 8005942:	d80f      	bhi.n	8005964 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b04      	cmp	r3, #4
 800594e:	d003      	beq.n	8005958 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8005950:	e008      	b.n	8005964 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005952:	2300      	movs	r3, #0
 8005954:	607b      	str	r3, [r7, #4]
        break;
 8005956:	e008      	b.n	800596a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8005958:	2301      	movs	r3, #1
 800595a:	607b      	str	r3, [r7, #4]
        break;
 800595c:	e005      	b.n	800596a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800595e:	2302      	movs	r3, #2
 8005960:	607b      	str	r3, [r7, #4]
        break;
 8005962:	e002      	b.n	800596a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005964:	2300      	movs	r3, #0
 8005966:	607b      	str	r3, [r7, #4]
        break;
 8005968:	bf00      	nop
    }
  }
  return systick_source;
 800596a:	687b      	ldr	r3, [r7, #4]
}
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	e000e010 	.word	0xe000e010
 800597c:	44020c00 	.word	0x44020c00

08005980 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e014      	b.n	80059bc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	791b      	ldrb	r3, [r3, #4]
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d105      	bne.n	80059a8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7fd ff0a 	bl	80037bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e056      	b.n	8005a86 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	795b      	ldrb	r3, [r3, #5]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_DAC_Start+0x20>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e050      	b.n	8005a86 <HAL_DAC_Start+0xc2>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6819      	ldr	r1, [r3, #0]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	f003 0310 	and.w	r3, r3, #16
 80059fc:	2201      	movs	r2, #1
 80059fe:	409a      	lsls	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a08:	4b22      	ldr	r3, [pc, #136]	@ (8005a94 <HAL_DAC_Start+0xd0>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	099b      	lsrs	r3, r3, #6
 8005a0e:	4a22      	ldr	r2, [pc, #136]	@ (8005a98 <HAL_DAC_Start+0xd4>)
 8005a10:	fba2 2303 	umull	r2, r3, r2, r3
 8005a14:	099b      	lsrs	r3, r3, #6
 8005a16:	3301      	adds	r3, #1
 8005a18:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005a1a:	e002      	b.n	8005a22 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1f9      	bne.n	8005a1c <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10f      	bne.n	8005a4e <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d11d      	bne.n	8005a78 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0201 	orr.w	r2, r2, #1
 8005a4a:	605a      	str	r2, [r3, #4]
 8005a4c:	e014      	b.n	8005a78 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	f003 0310 	and.w	r3, r3, #16
 8005a5e:	2102      	movs	r1, #2
 8005a60:	fa01 f303 	lsl.w	r3, r1, r3
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d107      	bne.n	8005a78 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0202 	orr.w	r2, r2, #2
 8005a76:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	20000004 	.word	0x20000004
 8005a98:	053e2d63 	.word	0x053e2d63

08005a9c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e018      	b.n	8005aea <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d105      	bne.n	8005ad6 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4413      	add	r3, r2
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	e004      	b.n	8005ae0 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4413      	add	r3, r2
 8005adc:	3314      	adds	r3, #20
 8005ade:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	371c      	adds	r7, #28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
	...

08005af8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08c      	sub	sp, #48	@ 0x30
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b04:	2300      	movs	r3, #0
 8005b06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <HAL_DAC_ConfigChannel+0x1e>
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e19d      	b.n	8005e56 <HAL_DAC_ConfigChannel+0x35e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	795b      	ldrb	r3, [r3, #5]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_DAC_ConfigChannel+0x34>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e194      	b.n	8005e56 <HAL_DAC_ConfigChannel+0x35e>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2202      	movs	r2, #2
 8005b36:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d17a      	bne.n	8005c36 <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005b40:	f7fe faba 	bl	80040b8 <HAL_GetTick>
 8005b44:	6238      	str	r0, [r7, #32]

    if (Channel == DAC_CHANNEL_1)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d13d      	bne.n	8005bc8 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005b4c:	e018      	b.n	8005b80 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005b4e:	f7fe fab3 	bl	80040b8 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d911      	bls.n	8005b80 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f043 0208 	orr.w	r2, r3, #8
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2203      	movs	r2, #3
 8005b7a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e16a      	b.n	8005e56 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1df      	bne.n	8005b4e <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	6a12      	ldr	r2, [r2, #32]
 8005b96:	641a      	str	r2, [r3, #64]	@ 0x40
 8005b98:	e020      	b.n	8005bdc <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005b9a:	f7fe fa8d 	bl	80040b8 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d90f      	bls.n	8005bc8 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	da0a      	bge.n	8005bc8 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f043 0208 	orr.w	r2, r3, #8
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e146      	b.n	8005e56 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	dbe3      	blt.n	8005b9a <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	6a12      	ldr	r2, [r2, #32]
 8005bda:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f003 0310 	and.w	r3, r3, #16
 8005be8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005bec:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf0:	43db      	mvns	r3, r3
 8005bf2:	ea02 0103 	and.w	r1, r2, r3
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f003 0310 	and.w	r3, r3, #16
 8005c00:	409a      	lsls	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f003 0310 	and.w	r3, r3, #16
 8005c16:	21ff      	movs	r1, #255	@ 0xff
 8005c18:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1c:	43db      	mvns	r3, r3
 8005c1e:	ea02 0103 	and.w	r1, r2, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	409a      	lsls	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d11d      	bne.n	8005c7a <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c44:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f003 0310 	and.w	r3, r3, #16
 8005c4c:	221f      	movs	r2, #31
 8005c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c52:	43db      	mvns	r3, r3
 8005c54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c56:	4013      	ands	r3, r2
 8005c58:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	61fb      	str	r3, [r7, #28]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f003 0310 	and.w	r3, r3, #16
 8005c66:	69fa      	ldr	r2, [r7, #28]
 8005c68:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c78:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c80:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f003 0310 	and.w	r3, r3, #16
 8005c88:	2207      	movs	r2, #7
 8005c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8e:	43db      	mvns	r3, r3
 8005c90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c92:	4013      	ands	r3, r2
 8005c94:	62bb      	str	r3, [r7, #40]	@ 0x28
#if !defined(TIM8)
  /* Devices STM32H503xx */
  /* On STM32H503EB (package WLCSP25) DAC channel 1 connection to GPIO is not available and should not be configured.
     Package information is stored at the address PACKAGE_BASE, WLCSP25 correspond to the value 0xF (For more
     information, please refer to the Reference Manual) */
  const __IO uint16_t *tmp_package = (uint16_t *)PACKAGE_BASE;
 8005c96:	4b72      	ldr	r3, [pc, #456]	@ (8005e60 <HAL_DAC_ConfigChannel+0x368>)
 8005c98:	61bb      	str	r3, [r7, #24]
  if ((*(tmp_package) & 0x1FUL) == 0x0FUL)
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	f003 031f 	and.w	r3, r3, #31
 8005ca4:	2b0f      	cmp	r3, #15
 8005ca6:	d116      	bne.n	8005cd6 <HAL_DAC_ConfigChannel+0x1de>
  {
    if ((Channel == DAC_CHANNEL_1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d113      	bne.n	8005cd6 <HAL_DAC_ConfigChannel+0x1de>
        && ((sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d003      	beq.n	8005cbe <HAL_DAC_ConfigChannel+0x1c6>
            || (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH)))
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d10b      	bne.n	8005cd6 <HAL_DAC_ConfigChannel+0x1de>
    {
      /* Update return status */
      status = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

      /* Change the DAC state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2204      	movs	r2, #4
 8005cc8:	711a      	strb	r2, [r3, #4]

      /* Update error code */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_INVALID_CONFIG);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f043 0220 	orr.w	r2, r3, #32
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	611a      	str	r2, [r3, #16]
    }
  }
#endif /* Devices STM32H503xx */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d102      	bne.n	8005ce4 <HAL_DAC_ConfigChannel+0x1ec>
  {
    connectOnChip = 0x00000000UL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ce2:	e00f      	b.n	8005d04 <HAL_DAC_ConfigChannel+0x20c>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d102      	bne.n	8005cf2 <HAL_DAC_ConfigChannel+0x1fa>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005cec:	2301      	movs	r3, #1
 8005cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cf0:	e008      	b.n	8005d04 <HAL_DAC_ConfigChannel+0x20c>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d102      	bne.n	8005d00 <HAL_DAC_ConfigChannel+0x208>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cfe:	e001      	b.n	8005d04 <HAL_DAC_ConfigChannel+0x20c>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005d00:	2300      	movs	r3, #0
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d10:	4313      	orrs	r3, r2
 8005d12:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f003 0310 	and.w	r3, r3, #16
 8005d1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d22:	43db      	mvns	r3, r3
 8005d24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d26:	4013      	ands	r3, r2
 8005d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	791b      	ldrb	r3, [r3, #4]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d102      	bne.n	8005d38 <HAL_DAC_ConfigChannel+0x240>
 8005d32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005d36:	e000      	b.n	8005d3a <HAL_DAC_ConfigChannel+0x242>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f003 0310 	and.w	r3, r3, #16
 8005d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4e:	43db      	mvns	r3, r3
 8005d50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d52:	4013      	ands	r3, r2
 8005d54:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	795b      	ldrb	r3, [r3, #5]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d102      	bne.n	8005d64 <HAL_DAC_ConfigChannel+0x26c>
 8005d5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d62:	e000      	b.n	8005d66 <HAL_DAC_ConfigChannel+0x26e>
 8005d64:	2300      	movs	r3, #0
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005d72:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d114      	bne.n	8005da6 <HAL_DAC_ConfigChannel+0x2ae>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005d7c:	f002 f86a 	bl	8007e54 <HAL_RCC_GetHCLKFreq>
 8005d80:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	4a37      	ldr	r2, [pc, #220]	@ (8005e64 <HAL_DAC_ConfigChannel+0x36c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d904      	bls.n	8005d94 <HAL_DAC_ConfigChannel+0x29c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d92:	e00f      	b.n	8005db4 <HAL_DAC_ConfigChannel+0x2bc>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	4a34      	ldr	r2, [pc, #208]	@ (8005e68 <HAL_DAC_ConfigChannel+0x370>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d90a      	bls.n	8005db2 <HAL_DAC_ConfigChannel+0x2ba>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005da2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005da4:	e006      	b.n	8005db4 <HAL_DAC_ConfigChannel+0x2bc>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dac:	4313      	orrs	r3, r2
 8005dae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005db0:	e000      	b.n	8005db4 <HAL_DAC_ConfigChannel+0x2bc>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005db2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f003 0310 	and.w	r3, r3, #16
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dcc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6819      	ldr	r1, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f003 0310 	and.w	r3, r3, #16
 8005dda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005dde:	fa02 f303 	lsl.w	r3, r2, r3
 8005de2:	43da      	mvns	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	400a      	ands	r2, r1
 8005dea:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f003 0310 	and.w	r3, r3, #16
 8005dfa:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	43db      	mvns	r3, r3
 8005e04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e06:	4013      	ands	r3, r2
 8005e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	61fb      	str	r3, [r7, #28]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f003 0310 	and.w	r3, r3, #16
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e28:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6819      	ldr	r1, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f003 0310 	and.w	r3, r3, #16
 8005e36:	22c0      	movs	r2, #192	@ 0xc0
 8005e38:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3c:	43da      	mvns	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	400a      	ands	r2, r1
 8005e44:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005e52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3730      	adds	r7, #48	@ 0x30
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	08fff80e 	.word	0x08fff80e
 8005e64:	09896800 	.word	0x09896800
 8005e68:	04c4b400 	.word	0x04c4b400

08005e6c <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005e74:	f7fe f920 	bl	80040b8 <HAL_GetTick>
 8005e78:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e085      	b.n	8005f90 <HAL_DMA_Init+0x124>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a43      	ldr	r2, [pc, #268]	@ (8005f98 <HAL_DMA_Init+0x12c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d049      	beq.n	8005f22 <HAL_DMA_Init+0xb6>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a42      	ldr	r2, [pc, #264]	@ (8005f9c <HAL_DMA_Init+0x130>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d044      	beq.n	8005f22 <HAL_DMA_Init+0xb6>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a40      	ldr	r2, [pc, #256]	@ (8005fa0 <HAL_DMA_Init+0x134>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d03f      	beq.n	8005f22 <HAL_DMA_Init+0xb6>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a3f      	ldr	r2, [pc, #252]	@ (8005fa4 <HAL_DMA_Init+0x138>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d03a      	beq.n	8005f22 <HAL_DMA_Init+0xb6>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a3d      	ldr	r2, [pc, #244]	@ (8005fa8 <HAL_DMA_Init+0x13c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d035      	beq.n	8005f22 <HAL_DMA_Init+0xb6>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a3c      	ldr	r2, [pc, #240]	@ (8005fac <HAL_DMA_Init+0x140>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d030      	beq.n	8005f22 <HAL_DMA_Init+0xb6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a3a      	ldr	r2, [pc, #232]	@ (8005fb0 <HAL_DMA_Init+0x144>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d02b      	beq.n	8005f22 <HAL_DMA_Init+0xb6>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a39      	ldr	r2, [pc, #228]	@ (8005fb4 <HAL_DMA_Init+0x148>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d026      	beq.n	8005f22 <HAL_DMA_Init+0xb6>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a37      	ldr	r2, [pc, #220]	@ (8005fb8 <HAL_DMA_Init+0x14c>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d021      	beq.n	8005f22 <HAL_DMA_Init+0xb6>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a36      	ldr	r2, [pc, #216]	@ (8005fbc <HAL_DMA_Init+0x150>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d01c      	beq.n	8005f22 <HAL_DMA_Init+0xb6>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a34      	ldr	r2, [pc, #208]	@ (8005fc0 <HAL_DMA_Init+0x154>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d017      	beq.n	8005f22 <HAL_DMA_Init+0xb6>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a33      	ldr	r2, [pc, #204]	@ (8005fc4 <HAL_DMA_Init+0x158>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d012      	beq.n	8005f22 <HAL_DMA_Init+0xb6>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a31      	ldr	r2, [pc, #196]	@ (8005fc8 <HAL_DMA_Init+0x15c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00d      	beq.n	8005f22 <HAL_DMA_Init+0xb6>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a30      	ldr	r2, [pc, #192]	@ (8005fcc <HAL_DMA_Init+0x160>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d008      	beq.n	8005f22 <HAL_DMA_Init+0xb6>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a2e      	ldr	r2, [pc, #184]	@ (8005fd0 <HAL_DMA_Init+0x164>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d003      	beq.n	8005f22 <HAL_DMA_Init+0xb6>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8005fd4 <HAL_DMA_Init+0x168>)
 8005f20:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695a      	ldr	r2, [r3, #20]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f042 0206 	orr.w	r2, r2, #6
 8005f40:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005f42:	e00f      	b.n	8005f64 <HAL_DMA_Init+0xf8>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005f44:	f7fe f8b8 	bl	80040b8 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b05      	cmp	r3, #5
 8005f50:	d908      	bls.n	8005f64 <HAL_DMA_Init+0xf8>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2210      	movs	r2, #16
 8005f56:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2203      	movs	r2, #3
 8005f5c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e015      	b.n	8005f90 <HAL_DMA_Init+0x124>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e8      	bne.n	8005f44 <HAL_DMA_Init+0xd8>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fa52 	bl	800641c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	40020050 	.word	0x40020050
 8005f9c:	400200d0 	.word	0x400200d0
 8005fa0:	40020150 	.word	0x40020150
 8005fa4:	400201d0 	.word	0x400201d0
 8005fa8:	40020250 	.word	0x40020250
 8005fac:	400202d0 	.word	0x400202d0
 8005fb0:	40020350 	.word	0x40020350
 8005fb4:	400203d0 	.word	0x400203d0
 8005fb8:	40021050 	.word	0x40021050
 8005fbc:	400210d0 	.word	0x400210d0
 8005fc0:	40021150 	.word	0x40021150
 8005fc4:	400211d0 	.word	0x400211d0
 8005fc8:	40021250 	.word	0x40021250
 8005fcc:	400212d0 	.word	0x400212d0
 8005fd0:	40021350 	.word	0x40021350
 8005fd4:	400213d0 	.word	0x400213d0

08005fd8 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e04f      	b.n	8006090 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d101      	bne.n	8005ffe <HAL_DMA_Start_IT+0x26>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e048      	b.n	8006090 <HAL_DMA_Start_IT+0xb8>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b01      	cmp	r3, #1
 8006010:	d136      	bne.n	8006080 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2202      	movs	r2, #2
 8006016:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	68b9      	ldr	r1, [r7, #8]
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 f9d3 	bl	80063d2 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695a      	ldr	r2, [r3, #20]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800603a:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006040:	2b00      	cmp	r3, #0
 8006042:	d007      	beq.n	8006054 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695a      	ldr	r2, [r3, #20]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006052:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006058:	2b00      	cmp	r3, #0
 800605a:	d007      	beq.n	800606c <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695a      	ldr	r2, [r3, #20]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800606a:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695a      	ldr	r2, [r3, #20]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0201 	orr.w	r2, r2, #1
 800607a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	e007      	b.n	8006090 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2240      	movs	r2, #64	@ 0x40
 8006084:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80060a8:	f023 030f 	bic.w	r3, r3, #15
 80060ac:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060b6:	3b50      	subs	r3, #80	@ 0x50
 80060b8:	09db      	lsrs	r3, r3, #7
 80060ba:	f003 031f 	and.w	r3, r3, #31
 80060be:	2201      	movs	r2, #1
 80060c0:	fa02 f303 	lsl.w	r3, r2, r3
 80060c4:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	4013      	ands	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 813b 	beq.w	800634e <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d011      	beq.n	800610a <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80060fc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006102:	f043 0201 	orr.w	r2, r3, #1
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006114:	2b00      	cmp	r3, #0
 8006116:	d011      	beq.n	800613c <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800612e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006134:	f043 0202 	orr.w	r2, r3, #2
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d011      	beq.n	800616e <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00a      	beq.n	800616e <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006160:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006166:	f043 0204 	orr.w	r2, r3, #4
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d011      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00a      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006192:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006198:	f043 0208 	orr.w	r2, r3, #8
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d013      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00c      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061c4:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d04c      	beq.n	800627e <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d045      	beq.n	800627e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80061fa:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b04      	cmp	r3, #4
 8006206:	d12e      	bne.n	8006266 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	695a      	ldr	r2, [r3, #20]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006216:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695a      	ldr	r2, [r3, #20]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0202 	orr.w	r2, r2, #2
 8006226:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006238:	2b00      	cmp	r3, #0
 800623a:	d007      	beq.n	800624c <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006240:	2201      	movs	r2, #1
 8006242:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2200      	movs	r2, #0
 800624a:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006258:	2b00      	cmp	r3, #0
 800625a:	d07a      	beq.n	8006352 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	4798      	blx	r3
        }

        return;
 8006264:	e075      	b.n	8006352 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2205      	movs	r2, #5
 800626a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006288:	2b00      	cmp	r3, #0
 800628a:	d039      	beq.n	8006300 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006296:	2b00      	cmp	r3, #0
 8006298:	d032      	beq.n	8006300 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800629e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d012      	beq.n	80062cc <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d116      	bne.n	80062de <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d111      	bne.n	80062de <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062c6:	2201      	movs	r2, #1
 80062c8:	731a      	strb	r2, [r3, #12]
 80062ca:	e008      	b.n	80062de <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d103      	bne.n	80062de <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80062e6:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006304:	2b00      	cmp	r3, #0
 8006306:	d025      	beq.n	8006354 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695a      	ldr	r2, [r3, #20]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0202 	orr.w	r2, r2, #2
 8006316:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006330:	2201      	movs	r2, #1
 8006332:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006340:	2b00      	cmp	r3, #0
 8006342:	d007      	beq.n	8006354 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	4798      	blx	r3
 800634c:	e002      	b.n	8006354 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800634e:	bf00      	nop
 8006350:	e000      	b.n	8006354 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8006352:	bf00      	nop
    }
  }
}
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 800635a:	b480      	push	{r7}
 800635c:	b085      	sub	sp, #20
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e02b      	b.n	80063c6 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006376:	f023 030f 	bic.w	r3, r3, #15
 800637a:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006384:	3b50      	subs	r3, #80	@ 0x50
 8006386:	09db      	lsrs	r3, r3, #7
 8006388:	f003 031f 	and.w	r3, r3, #31
 800638c:	2201      	movs	r2, #1
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	f003 0310 	and.w	r3, r3, #16
 800639a:	2b00      	cmp	r3, #0
 800639c:	d012      	beq.n	80063c4 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	f003 0311 	and.w	r3, r3, #17
 80063a4:	2b11      	cmp	r3, #17
 80063a6:	d106      	bne.n	80063b6 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	431a      	orrs	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	605a      	str	r2, [r3, #4]
 80063b4:	e006      	b.n	80063c4 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	43db      	mvns	r3, r3
 80063be:	401a      	ands	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b085      	sub	sp, #20
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	60f8      	str	r0, [r7, #12]
 80063da:	60b9      	str	r1, [r7, #8]
 80063dc:	607a      	str	r2, [r7, #4]
 80063de:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063e6:	0c1b      	lsrs	r3, r3, #16
 80063e8:	041b      	lsls	r3, r3, #16
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	b291      	uxth	r1, r2
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	6812      	ldr	r2, [r2, #0]
 80063f2:	430b      	orrs	r3, r1
 80063f4:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80063fe:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006410:	bf00      	nop
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	430a      	orrs	r2, r1
 800643c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695a      	ldr	r2, [r3, #20]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	431a      	orrs	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	431a      	orrs	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a82      	ldr	r2, [pc, #520]	@ (8006664 <DMA_Init+0x248>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d04a      	beq.n	80064f6 <DMA_Init+0xda>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a80      	ldr	r2, [pc, #512]	@ (8006668 <DMA_Init+0x24c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d045      	beq.n	80064f6 <DMA_Init+0xda>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a7f      	ldr	r2, [pc, #508]	@ (800666c <DMA_Init+0x250>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d040      	beq.n	80064f6 <DMA_Init+0xda>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a7d      	ldr	r2, [pc, #500]	@ (8006670 <DMA_Init+0x254>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d03b      	beq.n	80064f6 <DMA_Init+0xda>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a7c      	ldr	r2, [pc, #496]	@ (8006674 <DMA_Init+0x258>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d036      	beq.n	80064f6 <DMA_Init+0xda>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a7a      	ldr	r2, [pc, #488]	@ (8006678 <DMA_Init+0x25c>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d031      	beq.n	80064f6 <DMA_Init+0xda>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a79      	ldr	r2, [pc, #484]	@ (800667c <DMA_Init+0x260>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d02c      	beq.n	80064f6 <DMA_Init+0xda>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a77      	ldr	r2, [pc, #476]	@ (8006680 <DMA_Init+0x264>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d027      	beq.n	80064f6 <DMA_Init+0xda>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a76      	ldr	r2, [pc, #472]	@ (8006684 <DMA_Init+0x268>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d022      	beq.n	80064f6 <DMA_Init+0xda>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a74      	ldr	r2, [pc, #464]	@ (8006688 <DMA_Init+0x26c>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d01d      	beq.n	80064f6 <DMA_Init+0xda>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a73      	ldr	r2, [pc, #460]	@ (800668c <DMA_Init+0x270>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d018      	beq.n	80064f6 <DMA_Init+0xda>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a71      	ldr	r2, [pc, #452]	@ (8006690 <DMA_Init+0x274>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d013      	beq.n	80064f6 <DMA_Init+0xda>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a70      	ldr	r2, [pc, #448]	@ (8006694 <DMA_Init+0x278>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d00e      	beq.n	80064f6 <DMA_Init+0xda>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a6e      	ldr	r2, [pc, #440]	@ (8006698 <DMA_Init+0x27c>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d009      	beq.n	80064f6 <DMA_Init+0xda>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a6d      	ldr	r2, [pc, #436]	@ (800669c <DMA_Init+0x280>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d004      	beq.n	80064f6 <DMA_Init+0xda>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a6b      	ldr	r2, [pc, #428]	@ (80066a0 <DMA_Init+0x284>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d101      	bne.n	80064fa <DMA_Init+0xde>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <DMA_Init+0xe0>
 80064fa:	2300      	movs	r3, #0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d012      	beq.n	8006526 <DMA_Init+0x10a>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006508:	3b01      	subs	r3, #1
 800650a:	051b      	lsls	r3, r3, #20
 800650c:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006510:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006516:	3b01      	subs	r3, #1
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800651e:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	689a      	ldr	r2, [r3, #8]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	431a      	orrs	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653e:	4313      	orrs	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800654a:	d159      	bne.n	8006600 <DMA_Init+0x1e4>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a44      	ldr	r2, [pc, #272]	@ (8006664 <DMA_Init+0x248>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d04a      	beq.n	80065ec <DMA_Init+0x1d0>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a43      	ldr	r2, [pc, #268]	@ (8006668 <DMA_Init+0x24c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d045      	beq.n	80065ec <DMA_Init+0x1d0>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a41      	ldr	r2, [pc, #260]	@ (800666c <DMA_Init+0x250>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d040      	beq.n	80065ec <DMA_Init+0x1d0>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a40      	ldr	r2, [pc, #256]	@ (8006670 <DMA_Init+0x254>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d03b      	beq.n	80065ec <DMA_Init+0x1d0>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a3e      	ldr	r2, [pc, #248]	@ (8006674 <DMA_Init+0x258>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d036      	beq.n	80065ec <DMA_Init+0x1d0>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a3d      	ldr	r2, [pc, #244]	@ (8006678 <DMA_Init+0x25c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d031      	beq.n	80065ec <DMA_Init+0x1d0>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a3b      	ldr	r2, [pc, #236]	@ (800667c <DMA_Init+0x260>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d02c      	beq.n	80065ec <DMA_Init+0x1d0>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a3a      	ldr	r2, [pc, #232]	@ (8006680 <DMA_Init+0x264>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d027      	beq.n	80065ec <DMA_Init+0x1d0>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a38      	ldr	r2, [pc, #224]	@ (8006684 <DMA_Init+0x268>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d022      	beq.n	80065ec <DMA_Init+0x1d0>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a37      	ldr	r2, [pc, #220]	@ (8006688 <DMA_Init+0x26c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d01d      	beq.n	80065ec <DMA_Init+0x1d0>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a35      	ldr	r2, [pc, #212]	@ (800668c <DMA_Init+0x270>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d018      	beq.n	80065ec <DMA_Init+0x1d0>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a34      	ldr	r2, [pc, #208]	@ (8006690 <DMA_Init+0x274>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d013      	beq.n	80065ec <DMA_Init+0x1d0>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a32      	ldr	r2, [pc, #200]	@ (8006694 <DMA_Init+0x278>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00e      	beq.n	80065ec <DMA_Init+0x1d0>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a31      	ldr	r2, [pc, #196]	@ (8006698 <DMA_Init+0x27c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d009      	beq.n	80065ec <DMA_Init+0x1d0>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a2f      	ldr	r2, [pc, #188]	@ (800669c <DMA_Init+0x280>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d004      	beq.n	80065ec <DMA_Init+0x1d0>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a2e      	ldr	r2, [pc, #184]	@ (80066a0 <DMA_Init+0x284>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d101      	bne.n	80065f0 <DMA_Init+0x1d4>
 80065ec:	2301      	movs	r3, #1
 80065ee:	e000      	b.n	80065f2 <DMA_Init+0x1d6>
 80065f0:	2300      	movs	r3, #0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00d      	beq.n	8006612 <DMA_Init+0x1f6>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80065fc:	60fb      	str	r3, [r7, #12]
 80065fe:	e008      	b.n	8006612 <DMA_Init+0x1f6>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006608:	d103      	bne.n	8006612 <DMA_Init+0x1f6>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006610:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	4313      	orrs	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006622:	4b20      	ldr	r3, [pc, #128]	@ (80066a4 <DMA_Init+0x288>)
 8006624:	4013      	ands	r3, r2
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	6812      	ldr	r2, [r2, #0]
 800662a:	68f9      	ldr	r1, [r7, #12]
 800662c:	430b      	orrs	r3, r1
 800662e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2200      	movs	r2, #0
 8006636:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a0f      	ldr	r2, [pc, #60]	@ (800667c <DMA_Init+0x260>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00e      	beq.n	8006660 <DMA_Init+0x244>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a0e      	ldr	r2, [pc, #56]	@ (8006680 <DMA_Init+0x264>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d009      	beq.n	8006660 <DMA_Init+0x244>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a12      	ldr	r2, [pc, #72]	@ (800669c <DMA_Init+0x280>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d004      	beq.n	8006660 <DMA_Init+0x244>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a11      	ldr	r2, [pc, #68]	@ (80066a0 <DMA_Init+0x284>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d123      	bne.n	80066a8 <DMA_Init+0x28c>
 8006660:	2301      	movs	r3, #1
 8006662:	e022      	b.n	80066aa <DMA_Init+0x28e>
 8006664:	40020050 	.word	0x40020050
 8006668:	400200d0 	.word	0x400200d0
 800666c:	40020150 	.word	0x40020150
 8006670:	400201d0 	.word	0x400201d0
 8006674:	40020250 	.word	0x40020250
 8006678:	400202d0 	.word	0x400202d0
 800667c:	40020350 	.word	0x40020350
 8006680:	400203d0 	.word	0x400203d0
 8006684:	40021050 	.word	0x40021050
 8006688:	400210d0 	.word	0x400210d0
 800668c:	40021150 	.word	0x40021150
 8006690:	400211d0 	.word	0x400211d0
 8006694:	40021250 	.word	0x40021250
 8006698:	400212d0 	.word	0x400212d0
 800669c:	40021350 	.word	0x40021350
 80066a0:	400213d0 	.word	0x400213d0
 80066a4:	3cc02100 	.word	0x3cc02100
 80066a8:	2300      	movs	r3, #0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <DMA_Init+0x2a2>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2200      	movs	r2, #0
 80066b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2200      	movs	r2, #0
 80066bc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2200      	movs	r2, #0
 80066c4:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80066c6:	bf00      	nop
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop

080066d4 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <HAL_DMAEx_List_Start_IT+0x16>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e082      	b.n	80067f4 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80066f4:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006700:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8006702:	7dfb      	ldrb	r3, [r7, #23]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d005      	beq.n	8006714 <HAL_DMAEx_List_Start_IT+0x40>
 8006708:	7dfb      	ldrb	r3, [r7, #23]
 800670a:	2b02      	cmp	r3, #2
 800670c:	d16a      	bne.n	80067e4 <HAL_DMAEx_List_Start_IT+0x110>
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d067      	beq.n	80067e4 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b01      	cmp	r3, #1
 800671e:	d157      	bne.n	80067d0 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <HAL_DMAEx_List_Start_IT+0x5a>
 800672a:	2302      	movs	r3, #2
 800672c:	e062      	b.n	80067f4 <HAL_DMAEx_List_Start_IT+0x120>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2202      	movs	r2, #2
 800673a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006742:	2202      	movs	r2, #2
 8006744:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006750:	2200      	movs	r2, #0
 8006752:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8006762:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006768:	2b00      	cmp	r3, #0
 800676a:	d007      	beq.n	800677c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	695a      	ldr	r2, [r3, #20]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800677a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006780:	2b00      	cmp	r3, #0
 8006782:	d007      	beq.n	8006794 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	695a      	ldr	r2, [r3, #20]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006792:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f107 010c 	add.w	r1, r7, #12
 800679e:	2200      	movs	r2, #0
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 f94b 	bl	8006a3c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4619      	mov	r1, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	0c0b      	lsrs	r3, r1, #16
 80067b4:	041b      	lsls	r3, r3, #16
 80067b6:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	461a      	mov	r2, r3
 80067c0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80067c4:	4013      	ands	r3, r2
 80067c6:	68f9      	ldr	r1, [r7, #12]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6812      	ldr	r2, [r2, #0]
 80067cc:	430b      	orrs	r3, r1
 80067ce:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	695a      	ldr	r2, [r3, #20]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 0201 	orr.w	r2, r2, #1
 80067de:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
 80067e2:	e007      	b.n	80067f4 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2240      	movs	r2, #64	@ 0x40
 80067e8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <HAL_DMAEx_List_GetNodeConfig+0x16>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e004      	b.n	8006820 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f805 	bl	8006828 <DMA_List_GetNodeConfig>

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	b2da      	uxtb	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0208 	and.w	r2, r3, #8
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0203 	and.w	r2, r3, #3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8006870:	091b      	lsrs	r3, r3, #4
 8006872:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006876:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8006880:	0d1b      	lsrs	r3, r3, #20
 8006882:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006886:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	4b66      	ldr	r3, [pc, #408]	@ (8006a38 <DMA_List_GetNodeConfig+0x210>)
 800689e:	4013      	ands	r3, r2
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d008      	beq.n	80068ce <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068c2:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068ca:	60da      	str	r2, [r3, #12]
 80068cc:	e012      	b.n	80068f4 <DMA_List_GetNodeConfig+0xcc>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d004      	beq.n	80068ee <DMA_List_GetNodeConfig+0xc6>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80068ea:	60da      	str	r2, [r3, #12]
 80068ec:	e002      	b.n	80068f4 <DMA_List_GetNodeConfig+0xcc>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 800691c:	0c1b      	lsrs	r3, r3, #16
 800691e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	b29a      	uxth	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d008      	beq.n	800695a <DMA_List_GetNodeConfig+0x132>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	0c1b      	lsrs	r3, r3, #16
 800694e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006952:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006958:	e002      	b.n	8006960 <DMA_List_GetNodeConfig+0x138>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	68da      	ldr	r2, [r3, #12]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d04a      	beq.n	8006a12 <DMA_List_GetNodeConfig+0x1ea>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	b29b      	uxth	r3, r3
 8006982:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006986:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8006988:	89fa      	ldrh	r2, [r7, #14]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	0c1b      	lsrs	r3, r3, #16
 8006994:	b29b      	uxth	r3, r3
 8006996:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800699a:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 800699c:	89fa      	ldrh	r2, [r7, #14]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d004      	beq.n	80069b8 <DMA_List_GetNodeConfig+0x190>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b2:	425a      	negs	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d004      	beq.n	80069ce <DMA_List_GetNodeConfig+0x1a6>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c8:	425a      	negs	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 80069d4:	89fa      	ldrh	r2, [r7, #14]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	0c1b      	lsrs	r3, r3, #16
 80069e0:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 80069e2:	89fa      	ldrh	r2, [r7, #14]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d004      	beq.n	80069fe <DMA_List_GetNodeConfig+0x1d6>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069f8:	425a      	negs	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	da11      	bge.n	8006a2a <DMA_List_GetNodeConfig+0x202>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a0a:	425a      	negs	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8006a10:	e00b      	b.n	8006a2a <DMA_List_GetNodeConfig+0x202>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006a2a:	bf00      	nop
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	0c002000 	.word	0x0c002000

08006a3c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00c      	beq.n	8006a6e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8006a94 <DMA_List_GetCLLRNodeInfo+0x58>)
 8006a5e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00f      	beq.n	8006a86 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2207      	movs	r2, #7
 8006a6a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8006a6c:	e00b      	b.n	8006a86 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	4a08      	ldr	r2, [pc, #32]	@ (8006a98 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8006a78:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2205      	movs	r2, #5
 8006a84:	601a      	str	r2, [r3, #0]
}
 8006a86:	bf00      	nop
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	fe010000 	.word	0xfe010000
 8006a98:	f8010000 	.word	0xf8010000

08006a9c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006aaa:	e136      	b.n	8006d1a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab8:	4013      	ands	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 8128 	beq.w	8006d14 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d003      	beq.n	8006ad4 <HAL_GPIO_Init+0x38>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	2b12      	cmp	r3, #18
 8006ad2:	d125      	bne.n	8006b20 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	08da      	lsrs	r2, r3, #3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3208      	adds	r2, #8
 8006adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f003 0307 	and.w	r3, r3, #7
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	220f      	movs	r2, #15
 8006aec:	fa02 f303 	lsl.w	r3, r2, r3
 8006af0:	43db      	mvns	r3, r3
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4013      	ands	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	f003 020f 	and.w	r2, r3, #15
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f003 0307 	and.w	r3, r3, #7
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	08da      	lsrs	r2, r3, #3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	3208      	adds	r2, #8
 8006b1a:	6979      	ldr	r1, [r7, #20]
 8006b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	2203      	movs	r2, #3
 8006b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b30:	43db      	mvns	r3, r3
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4013      	ands	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f003 0203 	and.w	r2, r3, #3
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	fa02 f303 	lsl.w	r3, r2, r3
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d00b      	beq.n	8006b74 <HAL_GPIO_Init+0xd8>
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d007      	beq.n	8006b74 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006b68:	2b11      	cmp	r3, #17
 8006b6a:	d003      	beq.n	8006b74 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	2b12      	cmp	r3, #18
 8006b72:	d130      	bne.n	8006bd6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	2203      	movs	r2, #3
 8006b80:	fa02 f303 	lsl.w	r3, r2, r3
 8006b84:	43db      	mvns	r3, r3
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	fa02 f303 	lsl.w	r3, r2, r3
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006baa:	2201      	movs	r2, #1
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb2:	43db      	mvns	r3, r3
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	091b      	lsrs	r3, r3, #4
 8006bc0:	f003 0201 	and.w	r2, r3, #1
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d017      	beq.n	8006c0e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	005b      	lsls	r3, r3, #1
 8006be8:	2203      	movs	r2, #3
 8006bea:	fa02 f303 	lsl.w	r3, r2, r3
 8006bee:	43db      	mvns	r3, r3
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d07c      	beq.n	8006d14 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8006c1a:	4a47      	ldr	r2, [pc, #284]	@ (8006d38 <HAL_GPIO_Init+0x29c>)
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	089b      	lsrs	r3, r3, #2
 8006c20:	3318      	adds	r3, #24
 8006c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c26:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	220f      	movs	r2, #15
 8006c32:	fa02 f303 	lsl.w	r3, r2, r3
 8006c36:	43db      	mvns	r3, r3
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	0a9a      	lsrs	r2, r3, #10
 8006c42:	4b3e      	ldr	r3, [pc, #248]	@ (8006d3c <HAL_GPIO_Init+0x2a0>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	f002 0203 	and.w	r2, r2, #3
 8006c4c:	00d2      	lsls	r2, r2, #3
 8006c4e:	4093      	lsls	r3, r2
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8006c56:	4938      	ldr	r1, [pc, #224]	@ (8006d38 <HAL_GPIO_Init+0x29c>)
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	089b      	lsrs	r3, r3, #2
 8006c5c:	3318      	adds	r3, #24
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8006c64:	4b34      	ldr	r3, [pc, #208]	@ (8006d38 <HAL_GPIO_Init+0x29c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	43db      	mvns	r3, r3
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	4013      	ands	r3, r2
 8006c72:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8006c88:	4a2b      	ldr	r2, [pc, #172]	@ (8006d38 <HAL_GPIO_Init+0x29c>)
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8006c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8006d38 <HAL_GPIO_Init+0x29c>)
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	43db      	mvns	r3, r3
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8006cb2:	4a21      	ldr	r2, [pc, #132]	@ (8006d38 <HAL_GPIO_Init+0x29c>)
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8006cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8006d38 <HAL_GPIO_Init+0x29c>)
 8006cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cbe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	43db      	mvns	r3, r3
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8006cde:	4a16      	ldr	r2, [pc, #88]	@ (8006d38 <HAL_GPIO_Init+0x29c>)
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8006ce6:	4b14      	ldr	r3, [pc, #80]	@ (8006d38 <HAL_GPIO_Init+0x29c>)
 8006ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	43db      	mvns	r3, r3
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8006d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d38 <HAL_GPIO_Init+0x29c>)
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	3301      	adds	r3, #1
 8006d18:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	fa22 f303 	lsr.w	r3, r2, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f47f aec1 	bne.w	8006aac <HAL_GPIO_Init+0x10>
  }
}
 8006d2a:	bf00      	nop
 8006d2c:	bf00      	nop
 8006d2e:	371c      	adds	r7, #28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	44022000 	.word	0x44022000
 8006d3c:	002f7f7f 	.word	0x002f7f7f

08006d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	691a      	ldr	r2, [r3, #16]
 8006d50:	887b      	ldrh	r3, [r7, #2]
 8006d52:	4013      	ands	r3, r2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	73fb      	strb	r3, [r7, #15]
 8006d5c:	e001      	b.n	8006d62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	807b      	strh	r3, [r7, #2]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d80:	787b      	ldrb	r3, [r7, #1]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006d86:	887a      	ldrh	r2, [r7, #2]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006d8c:	e002      	b.n	8006d94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006d8e:	887a      	ldrh	r2, [r7, #2]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	460b      	mov	r3, r1
 8006daa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006db2:	887a      	ldrh	r2, [r7, #2]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4013      	ands	r3, r2
 8006db8:	041a      	lsls	r2, r3, #16
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	43d9      	mvns	r1, r3
 8006dbe:	887b      	ldrh	r3, [r7, #2]
 8006dc0:	400b      	ands	r3, r1
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	619a      	str	r2, [r3, #24]
}
 8006dc8:	bf00      	nop
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af02      	add	r7, sp, #8
 8006dda:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e0f3      	b.n	8006fce <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d106      	bne.n	8006e00 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7fc fec0 	bl	8003b80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2203      	movs	r2, #3
 8006e04:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f005 fb06 	bl	800c41e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6818      	ldr	r0, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	7c1a      	ldrb	r2, [r3, #16]
 8006e1a:	f88d 2000 	strb.w	r2, [sp]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e22:	f005 fade 	bl	800c3e2 <USB_CoreInit>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d005      	beq.n	8006e38 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e0ca      	b.n	8006fce <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f005 fb02 	bl	800c448 <USB_SetCurrentMode>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d005      	beq.n	8006e56 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e0bb      	b.n	8006fce <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e56:	2300      	movs	r3, #0
 8006e58:	73fb      	strb	r3, [r7, #15]
 8006e5a:	e03f      	b.n	8006edc <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006e5c:	7bfa      	ldrb	r2, [r7, #15]
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	4613      	mov	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	440b      	add	r3, r1
 8006e6a:	3315      	adds	r3, #21
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006e70:	7bfa      	ldrb	r2, [r7, #15]
 8006e72:	6879      	ldr	r1, [r7, #4]
 8006e74:	4613      	mov	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	440b      	add	r3, r1
 8006e7e:	3314      	adds	r3, #20
 8006e80:	7bfa      	ldrb	r2, [r7, #15]
 8006e82:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006e84:	7bfa      	ldrb	r2, [r7, #15]
 8006e86:	6879      	ldr	r1, [r7, #4]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	440b      	add	r3, r1
 8006e92:	3317      	adds	r3, #23
 8006e94:	2200      	movs	r2, #0
 8006e96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006e98:	7bfa      	ldrb	r2, [r7, #15]
 8006e9a:	6879      	ldr	r1, [r7, #4]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	440b      	add	r3, r1
 8006ea6:	3324      	adds	r3, #36	@ 0x24
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006eac:	7bfa      	ldrb	r2, [r7, #15]
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	00db      	lsls	r3, r3, #3
 8006eb8:	440b      	add	r3, r1
 8006eba:	3328      	adds	r3, #40	@ 0x28
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	6879      	ldr	r1, [r7, #4]
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	00db      	lsls	r3, r3, #3
 8006ece:	440b      	add	r3, r1
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	73fb      	strb	r3, [r7, #15]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	791b      	ldrb	r3, [r3, #4]
 8006ee0:	7bfa      	ldrb	r2, [r7, #15]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d3ba      	bcc.n	8006e5c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	73fb      	strb	r3, [r7, #15]
 8006eea:	e044      	b.n	8006f76 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006eec:	7bfa      	ldrb	r2, [r7, #15]
 8006eee:	6879      	ldr	r1, [r7, #4]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	440b      	add	r3, r1
 8006efa:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8006efe:	2200      	movs	r2, #0
 8006f00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006f02:	7bfa      	ldrb	r2, [r7, #15]
 8006f04:	6879      	ldr	r1, [r7, #4]
 8006f06:	4613      	mov	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	00db      	lsls	r3, r3, #3
 8006f0e:	440b      	add	r3, r1
 8006f10:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006f14:	7bfa      	ldrb	r2, [r7, #15]
 8006f16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006f18:	7bfa      	ldrb	r2, [r7, #15]
 8006f1a:	6879      	ldr	r1, [r7, #4]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	00db      	lsls	r3, r3, #3
 8006f24:	440b      	add	r3, r1
 8006f26:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006f2e:	7bfa      	ldrb	r2, [r7, #15]
 8006f30:	6879      	ldr	r1, [r7, #4]
 8006f32:	4613      	mov	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	440b      	add	r3, r1
 8006f3c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f40:	2200      	movs	r2, #0
 8006f42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006f44:	7bfa      	ldrb	r2, [r7, #15]
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	440b      	add	r3, r1
 8006f52:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006f56:	2200      	movs	r2, #0
 8006f58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006f5a:	7bfa      	ldrb	r2, [r7, #15]
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	00db      	lsls	r3, r3, #3
 8006f66:	440b      	add	r3, r1
 8006f68:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	3301      	adds	r3, #1
 8006f74:	73fb      	strb	r3, [r7, #15]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	791b      	ldrb	r3, [r3, #4]
 8006f7a:	7bfa      	ldrb	r2, [r7, #15]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d3b5      	bcc.n	8006eec <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6818      	ldr	r0, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	7c1a      	ldrb	r2, [r3, #16]
 8006f88:	f88d 2000 	strb.w	r2, [sp]
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f90:	f005 fa7d 	bl	800c48e <USB_DevInit>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d005      	beq.n	8006fa6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e013      	b.n	8006fce <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	7b1b      	ldrb	r3, [r3, #12]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d102      	bne.n	8006fc2 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f80a 	bl	8006fd6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f005 fa84 	bl	800c4d4 <USB_DevDisconnect>

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b085      	sub	sp, #20
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ff8:	f043 0201 	orr.w	r2, r3, #1
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007004:	f043 0202 	orr.w	r2, r3, #2
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
	...

0800701c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b088      	sub	sp, #32
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d102      	bne.n	8007030 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	f000 bc28 	b.w	8007880 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007030:	4b94      	ldr	r3, [pc, #592]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 8007032:	69db      	ldr	r3, [r3, #28]
 8007034:	f003 0318 	and.w	r3, r3, #24
 8007038:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800703a:	4b92      	ldr	r3, [pc, #584]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 800703c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703e:	f003 0303 	and.w	r3, r3, #3
 8007042:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0310 	and.w	r3, r3, #16
 800704c:	2b00      	cmp	r3, #0
 800704e:	d05b      	beq.n	8007108 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	2b08      	cmp	r3, #8
 8007054:	d005      	beq.n	8007062 <HAL_RCC_OscConfig+0x46>
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	2b18      	cmp	r3, #24
 800705a:	d114      	bne.n	8007086 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	2b02      	cmp	r3, #2
 8007060:	d111      	bne.n	8007086 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d102      	bne.n	8007070 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	f000 bc08 	b.w	8007880 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8007070:	4b84      	ldr	r3, [pc, #528]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	041b      	lsls	r3, r3, #16
 800707e:	4981      	ldr	r1, [pc, #516]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 8007080:	4313      	orrs	r3, r2
 8007082:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8007084:	e040      	b.n	8007108 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d023      	beq.n	80070d6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800708e:	4b7d      	ldr	r3, [pc, #500]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a7c      	ldr	r2, [pc, #496]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 8007094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800709a:	f7fd f80d 	bl	80040b8 <HAL_GetTick>
 800709e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80070a0:	e008      	b.n	80070b4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80070a2:	f7fd f809 	bl	80040b8 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d901      	bls.n	80070b4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e3e5      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80070b4:	4b73      	ldr	r3, [pc, #460]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d0f0      	beq.n	80070a2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80070c0:	4b70      	ldr	r3, [pc, #448]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	041b      	lsls	r3, r3, #16
 80070ce:	496d      	ldr	r1, [pc, #436]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	618b      	str	r3, [r1, #24]
 80070d4:	e018      	b.n	8007108 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80070d6:	4b6b      	ldr	r3, [pc, #428]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a6a      	ldr	r2, [pc, #424]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80070dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e2:	f7fc ffe9 	bl	80040b8 <HAL_GetTick>
 80070e6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80070e8:	e008      	b.n	80070fc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80070ea:	f7fc ffe5 	bl	80040b8 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d901      	bls.n	80070fc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e3c1      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80070fc:	4b61      	ldr	r3, [pc, #388]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1f0      	bne.n	80070ea <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 80a0 	beq.w	8007256 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	2b10      	cmp	r3, #16
 800711a:	d005      	beq.n	8007128 <HAL_RCC_OscConfig+0x10c>
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	2b18      	cmp	r3, #24
 8007120:	d109      	bne.n	8007136 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	2b03      	cmp	r3, #3
 8007126:	d106      	bne.n	8007136 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	f040 8092 	bne.w	8007256 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e3a4      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800713e:	d106      	bne.n	800714e <HAL_RCC_OscConfig+0x132>
 8007140:	4b50      	ldr	r3, [pc, #320]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a4f      	ldr	r2, [pc, #316]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 8007146:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	e058      	b.n	8007200 <HAL_RCC_OscConfig+0x1e4>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d112      	bne.n	800717c <HAL_RCC_OscConfig+0x160>
 8007156:	4b4b      	ldr	r3, [pc, #300]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a4a      	ldr	r2, [pc, #296]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 800715c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	4b48      	ldr	r3, [pc, #288]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a47      	ldr	r2, [pc, #284]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 8007168:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	4b45      	ldr	r3, [pc, #276]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a44      	ldr	r2, [pc, #272]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 8007174:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	e041      	b.n	8007200 <HAL_RCC_OscConfig+0x1e4>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007184:	d112      	bne.n	80071ac <HAL_RCC_OscConfig+0x190>
 8007186:	4b3f      	ldr	r3, [pc, #252]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a3e      	ldr	r2, [pc, #248]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 800718c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007190:	6013      	str	r3, [r2, #0]
 8007192:	4b3c      	ldr	r3, [pc, #240]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a3b      	ldr	r2, [pc, #236]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 8007198:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	4b39      	ldr	r3, [pc, #228]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a38      	ldr	r2, [pc, #224]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80071a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	e029      	b.n	8007200 <HAL_RCC_OscConfig+0x1e4>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80071b4:	d112      	bne.n	80071dc <HAL_RCC_OscConfig+0x1c0>
 80071b6:	4b33      	ldr	r3, [pc, #204]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a32      	ldr	r2, [pc, #200]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80071bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071c0:	6013      	str	r3, [r2, #0]
 80071c2:	4b30      	ldr	r3, [pc, #192]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a2f      	ldr	r2, [pc, #188]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80071c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	4b2d      	ldr	r3, [pc, #180]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a2c      	ldr	r2, [pc, #176]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80071d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071d8:	6013      	str	r3, [r2, #0]
 80071da:	e011      	b.n	8007200 <HAL_RCC_OscConfig+0x1e4>
 80071dc:	4b29      	ldr	r3, [pc, #164]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a28      	ldr	r2, [pc, #160]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80071e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	4b26      	ldr	r3, [pc, #152]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a25      	ldr	r2, [pc, #148]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80071ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071f2:	6013      	str	r3, [r2, #0]
 80071f4:	4b23      	ldr	r3, [pc, #140]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a22      	ldr	r2, [pc, #136]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 80071fa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80071fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d013      	beq.n	8007230 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007208:	f7fc ff56 	bl	80040b8 <HAL_GetTick>
 800720c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007210:	f7fc ff52 	bl	80040b8 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b64      	cmp	r3, #100	@ 0x64
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e32e      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007222:	4b18      	ldr	r3, [pc, #96]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0f0      	beq.n	8007210 <HAL_RCC_OscConfig+0x1f4>
 800722e:	e012      	b.n	8007256 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007230:	f7fc ff42 	bl	80040b8 <HAL_GetTick>
 8007234:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007236:	e008      	b.n	800724a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007238:	f7fc ff3e 	bl	80040b8 <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	2b64      	cmp	r3, #100	@ 0x64
 8007244:	d901      	bls.n	800724a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e31a      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800724a:	4b0e      	ldr	r3, [pc, #56]	@ (8007284 <HAL_RCC_OscConfig+0x268>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1f0      	bne.n	8007238 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 809a 	beq.w	8007398 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d005      	beq.n	8007276 <HAL_RCC_OscConfig+0x25a>
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	2b18      	cmp	r3, #24
 800726e:	d149      	bne.n	8007304 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d146      	bne.n	8007304 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d104      	bne.n	8007288 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e2fe      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
 8007282:	bf00      	nop
 8007284:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d11c      	bne.n	80072c8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800728e:	4b9a      	ldr	r3, [pc, #616]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0218 	and.w	r2, r3, #24
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	429a      	cmp	r2, r3
 800729c:	d014      	beq.n	80072c8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800729e:	4b96      	ldr	r3, [pc, #600]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f023 0218 	bic.w	r2, r3, #24
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	4993      	ldr	r1, [pc, #588]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80072b0:	f000 fdd0 	bl	8007e54 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80072b4:	4b91      	ldr	r3, [pc, #580]	@ (80074fc <HAL_RCC_OscConfig+0x4e0>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fc fe73 	bl	8003fa4 <HAL_InitTick>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e2db      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c8:	f7fc fef6 	bl	80040b8 <HAL_GetTick>
 80072cc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072ce:	e008      	b.n	80072e2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80072d0:	f7fc fef2 	bl	80040b8 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d901      	bls.n	80072e2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e2ce      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072e2:	4b85      	ldr	r3, [pc, #532]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0f0      	beq.n	80072d0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80072ee:	4b82      	ldr	r3, [pc, #520]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	041b      	lsls	r3, r3, #16
 80072fc:	497e      	ldr	r1, [pc, #504]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8007302:	e049      	b.n	8007398 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d02c      	beq.n	8007366 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800730c:	4b7a      	ldr	r3, [pc, #488]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f023 0218 	bic.w	r2, r3, #24
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	4977      	ldr	r1, [pc, #476]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 800731a:	4313      	orrs	r3, r2
 800731c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800731e:	4b76      	ldr	r3, [pc, #472]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a75      	ldr	r2, [pc, #468]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 8007324:	f043 0301 	orr.w	r3, r3, #1
 8007328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800732a:	f7fc fec5 	bl	80040b8 <HAL_GetTick>
 800732e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007330:	e008      	b.n	8007344 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007332:	f7fc fec1 	bl	80040b8 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d901      	bls.n	8007344 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e29d      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007344:	4b6c      	ldr	r3, [pc, #432]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0f0      	beq.n	8007332 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8007350:	4b69      	ldr	r3, [pc, #420]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	041b      	lsls	r3, r3, #16
 800735e:	4966      	ldr	r1, [pc, #408]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 8007360:	4313      	orrs	r3, r2
 8007362:	610b      	str	r3, [r1, #16]
 8007364:	e018      	b.n	8007398 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007366:	4b64      	ldr	r3, [pc, #400]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a63      	ldr	r2, [pc, #396]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 800736c:	f023 0301 	bic.w	r3, r3, #1
 8007370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007372:	f7fc fea1 	bl	80040b8 <HAL_GetTick>
 8007376:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007378:	e008      	b.n	800738c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800737a:	f7fc fe9d 	bl	80040b8 <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d901      	bls.n	800738c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e279      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800738c:	4b5a      	ldr	r3, [pc, #360]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1f0      	bne.n	800737a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0308 	and.w	r3, r3, #8
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d03c      	beq.n	800741e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d01c      	beq.n	80073e6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073ac:	4b52      	ldr	r3, [pc, #328]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 80073ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073b2:	4a51      	ldr	r2, [pc, #324]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 80073b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80073b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073bc:	f7fc fe7c 	bl	80040b8 <HAL_GetTick>
 80073c0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80073c2:	e008      	b.n	80073d6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80073c4:	f7fc fe78 	bl	80040b8 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d901      	bls.n	80073d6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e254      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80073d6:	4b48      	ldr	r3, [pc, #288]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 80073d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0ef      	beq.n	80073c4 <HAL_RCC_OscConfig+0x3a8>
 80073e4:	e01b      	b.n	800741e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073e6:	4b44      	ldr	r3, [pc, #272]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 80073e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073ec:	4a42      	ldr	r2, [pc, #264]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 80073ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f6:	f7fc fe5f 	bl	80040b8 <HAL_GetTick>
 80073fa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80073fc:	e008      	b.n	8007410 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80073fe:	f7fc fe5b 	bl	80040b8 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d901      	bls.n	8007410 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e237      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007410:	4b39      	ldr	r3, [pc, #228]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 8007412:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007416:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1ef      	bne.n	80073fe <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0304 	and.w	r3, r3, #4
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 80d2 	beq.w	80075d0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800742c:	4b34      	ldr	r3, [pc, #208]	@ (8007500 <HAL_RCC_OscConfig+0x4e4>)
 800742e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d118      	bne.n	800746a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8007438:	4b31      	ldr	r3, [pc, #196]	@ (8007500 <HAL_RCC_OscConfig+0x4e4>)
 800743a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743c:	4a30      	ldr	r2, [pc, #192]	@ (8007500 <HAL_RCC_OscConfig+0x4e4>)
 800743e:	f043 0301 	orr.w	r3, r3, #1
 8007442:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007444:	f7fc fe38 	bl	80040b8 <HAL_GetTick>
 8007448:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800744a:	e008      	b.n	800745e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800744c:	f7fc fe34 	bl	80040b8 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	2b02      	cmp	r3, #2
 8007458:	d901      	bls.n	800745e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e210      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800745e:	4b28      	ldr	r3, [pc, #160]	@ (8007500 <HAL_RCC_OscConfig+0x4e4>)
 8007460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007462:	f003 0301 	and.w	r3, r3, #1
 8007466:	2b00      	cmp	r3, #0
 8007468:	d0f0      	beq.n	800744c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d108      	bne.n	8007484 <HAL_RCC_OscConfig+0x468>
 8007472:	4b21      	ldr	r3, [pc, #132]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 8007474:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007478:	4a1f      	ldr	r2, [pc, #124]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 800747a:	f043 0301 	orr.w	r3, r3, #1
 800747e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007482:	e074      	b.n	800756e <HAL_RCC_OscConfig+0x552>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d118      	bne.n	80074be <HAL_RCC_OscConfig+0x4a2>
 800748c:	4b1a      	ldr	r3, [pc, #104]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 800748e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007492:	4a19      	ldr	r2, [pc, #100]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 8007494:	f023 0301 	bic.w	r3, r3, #1
 8007498:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800749c:	4b16      	ldr	r3, [pc, #88]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 800749e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074a2:	4a15      	ldr	r2, [pc, #84]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 80074a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80074ac:	4b12      	ldr	r3, [pc, #72]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 80074ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074b2:	4a11      	ldr	r2, [pc, #68]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 80074b4:	f023 0304 	bic.w	r3, r3, #4
 80074b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80074bc:	e057      	b.n	800756e <HAL_RCC_OscConfig+0x552>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	2b05      	cmp	r3, #5
 80074c4:	d11e      	bne.n	8007504 <HAL_RCC_OscConfig+0x4e8>
 80074c6:	4b0c      	ldr	r3, [pc, #48]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 80074c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074cc:	4a0a      	ldr	r2, [pc, #40]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 80074ce:	f043 0304 	orr.w	r3, r3, #4
 80074d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80074d6:	4b08      	ldr	r3, [pc, #32]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 80074d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074dc:	4a06      	ldr	r2, [pc, #24]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 80074de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80074e6:	4b04      	ldr	r3, [pc, #16]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 80074e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074ec:	4a02      	ldr	r2, [pc, #8]	@ (80074f8 <HAL_RCC_OscConfig+0x4dc>)
 80074ee:	f043 0301 	orr.w	r3, r3, #1
 80074f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80074f6:	e03a      	b.n	800756e <HAL_RCC_OscConfig+0x552>
 80074f8:	44020c00 	.word	0x44020c00
 80074fc:	20000008 	.word	0x20000008
 8007500:	44020800 	.word	0x44020800
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	2b85      	cmp	r3, #133	@ 0x85
 800750a:	d118      	bne.n	800753e <HAL_RCC_OscConfig+0x522>
 800750c:	4ba2      	ldr	r3, [pc, #648]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 800750e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007512:	4aa1      	ldr	r2, [pc, #644]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007514:	f043 0304 	orr.w	r3, r3, #4
 8007518:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800751c:	4b9e      	ldr	r3, [pc, #632]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 800751e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007522:	4a9d      	ldr	r2, [pc, #628]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007528:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800752c:	4b9a      	ldr	r3, [pc, #616]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 800752e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007532:	4a99      	ldr	r2, [pc, #612]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007534:	f043 0301 	orr.w	r3, r3, #1
 8007538:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800753c:	e017      	b.n	800756e <HAL_RCC_OscConfig+0x552>
 800753e:	4b96      	ldr	r3, [pc, #600]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007544:	4a94      	ldr	r2, [pc, #592]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007546:	f023 0301 	bic.w	r3, r3, #1
 800754a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800754e:	4b92      	ldr	r3, [pc, #584]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007554:	4a90      	ldr	r2, [pc, #576]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007556:	f023 0304 	bic.w	r3, r3, #4
 800755a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800755e:	4b8e      	ldr	r3, [pc, #568]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007564:	4a8c      	ldr	r2, [pc, #560]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007566:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800756a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d016      	beq.n	80075a4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007576:	f7fc fd9f 	bl	80040b8 <HAL_GetTick>
 800757a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800757c:	e00a      	b.n	8007594 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800757e:	f7fc fd9b 	bl	80040b8 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800758c:	4293      	cmp	r3, r2
 800758e:	d901      	bls.n	8007594 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e175      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007594:	4b80      	ldr	r3, [pc, #512]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0ed      	beq.n	800757e <HAL_RCC_OscConfig+0x562>
 80075a2:	e015      	b.n	80075d0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075a4:	f7fc fd88 	bl	80040b8 <HAL_GetTick>
 80075a8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80075aa:	e00a      	b.n	80075c2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075ac:	f7fc fd84 	bl	80040b8 <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d901      	bls.n	80075c2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e15e      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80075c2:	4b75      	ldr	r3, [pc, #468]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 80075c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1ed      	bne.n	80075ac <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0320 	and.w	r3, r3, #32
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d036      	beq.n	800764a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d019      	beq.n	8007618 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80075e4:	4b6c      	ldr	r3, [pc, #432]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a6b      	ldr	r2, [pc, #428]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 80075ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80075ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f0:	f7fc fd62 	bl	80040b8 <HAL_GetTick>
 80075f4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80075f6:	e008      	b.n	800760a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80075f8:	f7fc fd5e 	bl	80040b8 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b02      	cmp	r3, #2
 8007604:	d901      	bls.n	800760a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e13a      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800760a:	4b63      	ldr	r3, [pc, #396]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d0f0      	beq.n	80075f8 <HAL_RCC_OscConfig+0x5dc>
 8007616:	e018      	b.n	800764a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007618:	4b5f      	ldr	r3, [pc, #380]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a5e      	ldr	r2, [pc, #376]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 800761e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007622:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007624:	f7fc fd48 	bl	80040b8 <HAL_GetTick>
 8007628:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800762a:	e008      	b.n	800763e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800762c:	f7fc fd44 	bl	80040b8 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b02      	cmp	r3, #2
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e120      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800763e:	4b56      	ldr	r3, [pc, #344]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1f0      	bne.n	800762c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 8115 	beq.w	800787e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	2b18      	cmp	r3, #24
 8007658:	f000 80af 	beq.w	80077ba <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007660:	2b02      	cmp	r3, #2
 8007662:	f040 8086 	bne.w	8007772 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8007666:	4b4c      	ldr	r3, [pc, #304]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a4b      	ldr	r2, [pc, #300]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 800766c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007672:	f7fc fd21 	bl	80040b8 <HAL_GetTick>
 8007676:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007678:	e008      	b.n	800768c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800767a:	f7fc fd1d 	bl	80040b8 <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	2b02      	cmp	r3, #2
 8007686:	d901      	bls.n	800768c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e0f9      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800768c:	4b42      	ldr	r3, [pc, #264]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1f0      	bne.n	800767a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8007698:	4b3f      	ldr	r3, [pc, #252]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 800769a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800769c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80076a0:	f023 0303 	bic.w	r3, r3, #3
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80076ac:	0212      	lsls	r2, r2, #8
 80076ae:	430a      	orrs	r2, r1
 80076b0:	4939      	ldr	r1, [pc, #228]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	628b      	str	r3, [r1, #40]	@ 0x28
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ba:	3b01      	subs	r3, #1
 80076bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c4:	3b01      	subs	r3, #1
 80076c6:	025b      	lsls	r3, r3, #9
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	431a      	orrs	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076d0:	3b01      	subs	r3, #1
 80076d2:	041b      	lsls	r3, r3, #16
 80076d4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80076d8:	431a      	orrs	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076de:	3b01      	subs	r3, #1
 80076e0:	061b      	lsls	r3, r3, #24
 80076e2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80076e6:	492c      	ldr	r1, [pc, #176]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80076ec:	4b2a      	ldr	r3, [pc, #168]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 80076ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f0:	4a29      	ldr	r2, [pc, #164]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 80076f2:	f023 0310 	bic.w	r3, r3, #16
 80076f6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076fc:	4a26      	ldr	r2, [pc, #152]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8007702:	4b25      	ldr	r3, [pc, #148]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007706:	4a24      	ldr	r2, [pc, #144]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007708:	f043 0310 	orr.w	r3, r3, #16
 800770c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800770e:	4b22      	ldr	r3, [pc, #136]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007712:	f023 020c 	bic.w	r2, r3, #12
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800771a:	491f      	ldr	r1, [pc, #124]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 800771c:	4313      	orrs	r3, r2
 800771e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8007720:	4b1d      	ldr	r3, [pc, #116]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007724:	f023 0220 	bic.w	r2, r3, #32
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800772c:	491a      	ldr	r1, [pc, #104]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 800772e:	4313      	orrs	r3, r2
 8007730:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007732:	4b19      	ldr	r3, [pc, #100]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007736:	4a18      	ldr	r2, [pc, #96]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800773c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800773e:	4b16      	ldr	r3, [pc, #88]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a15      	ldr	r2, [pc, #84]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007744:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800774a:	f7fc fcb5 	bl	80040b8 <HAL_GetTick>
 800774e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007750:	e008      	b.n	8007764 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007752:	f7fc fcb1 	bl	80040b8 <HAL_GetTick>
 8007756:	4602      	mov	r2, r0
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	2b02      	cmp	r3, #2
 800775e:	d901      	bls.n	8007764 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e08d      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007764:	4b0c      	ldr	r3, [pc, #48]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d0f0      	beq.n	8007752 <HAL_RCC_OscConfig+0x736>
 8007770:	e085      	b.n	800787e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8007772:	4b09      	ldr	r3, [pc, #36]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a08      	ldr	r2, [pc, #32]	@ (8007798 <HAL_RCC_OscConfig+0x77c>)
 8007778:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800777c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800777e:	f7fc fc9b 	bl	80040b8 <HAL_GetTick>
 8007782:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007784:	e00a      	b.n	800779c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007786:	f7fc fc97 	bl	80040b8 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d903      	bls.n	800779c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e073      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
 8007798:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800779c:	4b3a      	ldr	r3, [pc, #232]	@ (8007888 <HAL_RCC_OscConfig+0x86c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1ee      	bne.n	8007786 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80077a8:	4b37      	ldr	r3, [pc, #220]	@ (8007888 <HAL_RCC_OscConfig+0x86c>)
 80077aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ac:	4a36      	ldr	r2, [pc, #216]	@ (8007888 <HAL_RCC_OscConfig+0x86c>)
 80077ae:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80077b2:	f023 0303 	bic.w	r3, r3, #3
 80077b6:	6293      	str	r3, [r2, #40]	@ 0x28
 80077b8:	e061      	b.n	800787e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80077ba:	4b33      	ldr	r3, [pc, #204]	@ (8007888 <HAL_RCC_OscConfig+0x86c>)
 80077bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077be:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80077c0:	4b31      	ldr	r3, [pc, #196]	@ (8007888 <HAL_RCC_OscConfig+0x86c>)
 80077c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077c4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d031      	beq.n	8007832 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f003 0203 	and.w	r2, r3, #3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077d8:	429a      	cmp	r2, r3
 80077da:	d12a      	bne.n	8007832 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	0a1b      	lsrs	r3, r3, #8
 80077e0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d122      	bne.n	8007832 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077f6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d11a      	bne.n	8007832 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	0a5b      	lsrs	r3, r3, #9
 8007800:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007808:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800780a:	429a      	cmp	r2, r3
 800780c:	d111      	bne.n	8007832 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	0c1b      	lsrs	r3, r3, #16
 8007812:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800781a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800781c:	429a      	cmp	r2, r3
 800781e:	d108      	bne.n	8007832 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	0e1b      	lsrs	r3, r3, #24
 8007824:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800782e:	429a      	cmp	r2, r3
 8007830:	d001      	beq.n	8007836 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e024      	b.n	8007880 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007836:	4b14      	ldr	r3, [pc, #80]	@ (8007888 <HAL_RCC_OscConfig+0x86c>)
 8007838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800783a:	08db      	lsrs	r3, r3, #3
 800783c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007844:	429a      	cmp	r2, r3
 8007846:	d01a      	beq.n	800787e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8007848:	4b0f      	ldr	r3, [pc, #60]	@ (8007888 <HAL_RCC_OscConfig+0x86c>)
 800784a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800784c:	4a0e      	ldr	r2, [pc, #56]	@ (8007888 <HAL_RCC_OscConfig+0x86c>)
 800784e:	f023 0310 	bic.w	r3, r3, #16
 8007852:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007854:	f7fc fc30 	bl	80040b8 <HAL_GetTick>
 8007858:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800785a:	bf00      	nop
 800785c:	f7fc fc2c 	bl	80040b8 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	4293      	cmp	r3, r2
 8007866:	d0f9      	beq.n	800785c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800786c:	4a06      	ldr	r2, [pc, #24]	@ (8007888 <HAL_RCC_OscConfig+0x86c>)
 800786e:	00db      	lsls	r3, r3, #3
 8007870:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8007872:	4b05      	ldr	r3, [pc, #20]	@ (8007888 <HAL_RCC_OscConfig+0x86c>)
 8007874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007876:	4a04      	ldr	r2, [pc, #16]	@ (8007888 <HAL_RCC_OscConfig+0x86c>)
 8007878:	f043 0310 	orr.w	r3, r3, #16
 800787c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3720      	adds	r7, #32
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	44020c00 	.word	0x44020c00

0800788c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e19e      	b.n	8007bde <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80078a0:	4b83      	ldr	r3, [pc, #524]	@ (8007ab0 <HAL_RCC_ClockConfig+0x224>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 030f 	and.w	r3, r3, #15
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d910      	bls.n	80078d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ae:	4b80      	ldr	r3, [pc, #512]	@ (8007ab0 <HAL_RCC_ClockConfig+0x224>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f023 020f 	bic.w	r2, r3, #15
 80078b6:	497e      	ldr	r1, [pc, #504]	@ (8007ab0 <HAL_RCC_ClockConfig+0x224>)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078be:	4b7c      	ldr	r3, [pc, #496]	@ (8007ab0 <HAL_RCC_ClockConfig+0x224>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 030f 	and.w	r3, r3, #15
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d001      	beq.n	80078d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e186      	b.n	8007bde <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0310 	and.w	r3, r3, #16
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d012      	beq.n	8007902 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	695a      	ldr	r2, [r3, #20]
 80078e0:	4b74      	ldr	r3, [pc, #464]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	0a1b      	lsrs	r3, r3, #8
 80078e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d909      	bls.n	8007902 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80078ee:	4b71      	ldr	r3, [pc, #452]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	021b      	lsls	r3, r3, #8
 80078fc:	496d      	ldr	r1, [pc, #436]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0308 	and.w	r3, r3, #8
 800790a:	2b00      	cmp	r3, #0
 800790c:	d012      	beq.n	8007934 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691a      	ldr	r2, [r3, #16]
 8007912:	4b68      	ldr	r3, [pc, #416]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	091b      	lsrs	r3, r3, #4
 8007918:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800791c:	429a      	cmp	r2, r3
 800791e:	d909      	bls.n	8007934 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8007920:	4b64      	ldr	r3, [pc, #400]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 8007922:	6a1b      	ldr	r3, [r3, #32]
 8007924:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	011b      	lsls	r3, r3, #4
 800792e:	4961      	ldr	r1, [pc, #388]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 8007930:	4313      	orrs	r3, r2
 8007932:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0304 	and.w	r3, r3, #4
 800793c:	2b00      	cmp	r3, #0
 800793e:	d010      	beq.n	8007962 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68da      	ldr	r2, [r3, #12]
 8007944:	4b5b      	ldr	r3, [pc, #364]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800794c:	429a      	cmp	r2, r3
 800794e:	d908      	bls.n	8007962 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8007950:	4b58      	ldr	r3, [pc, #352]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	4955      	ldr	r1, [pc, #340]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 800795e:	4313      	orrs	r3, r2
 8007960:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d010      	beq.n	8007990 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	689a      	ldr	r2, [r3, #8]
 8007972:	4b50      	ldr	r3, [pc, #320]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	f003 030f 	and.w	r3, r3, #15
 800797a:	429a      	cmp	r2, r3
 800797c:	d908      	bls.n	8007990 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800797e:	4b4d      	ldr	r3, [pc, #308]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	f023 020f 	bic.w	r2, r3, #15
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	494a      	ldr	r1, [pc, #296]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 800798c:	4313      	orrs	r3, r2
 800798e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 8093 	beq.w	8007ac4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	2b03      	cmp	r3, #3
 80079a4:	d107      	bne.n	80079b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80079a6:	4b43      	ldr	r3, [pc, #268]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d121      	bne.n	80079f6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e113      	b.n	8007bde <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d107      	bne.n	80079ce <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80079be:	4b3d      	ldr	r3, [pc, #244]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d115      	bne.n	80079f6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e107      	b.n	8007bde <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d107      	bne.n	80079e6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80079d6:	4b37      	ldr	r3, [pc, #220]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d109      	bne.n	80079f6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e0fb      	b.n	8007bde <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079e6:	4b33      	ldr	r3, [pc, #204]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d101      	bne.n	80079f6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e0f3      	b.n	8007bde <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80079f6:	4b2f      	ldr	r3, [pc, #188]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	f023 0203 	bic.w	r2, r3, #3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	492c      	ldr	r1, [pc, #176]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 8007a04:	4313      	orrs	r3, r2
 8007a06:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a08:	f7fc fb56 	bl	80040b8 <HAL_GetTick>
 8007a0c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d112      	bne.n	8007a3c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a16:	e00a      	b.n	8007a2e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007a18:	f7fc fb4e 	bl	80040b8 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d901      	bls.n	8007a2e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e0d7      	b.n	8007bde <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a2e:	4b21      	ldr	r3, [pc, #132]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	f003 0318 	and.w	r3, r3, #24
 8007a36:	2b18      	cmp	r3, #24
 8007a38:	d1ee      	bne.n	8007a18 <HAL_RCC_ClockConfig+0x18c>
 8007a3a:	e043      	b.n	8007ac4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d112      	bne.n	8007a6a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a44:	e00a      	b.n	8007a5c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007a46:	f7fc fb37 	bl	80040b8 <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d901      	bls.n	8007a5c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e0c0      	b.n	8007bde <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a5c:	4b15      	ldr	r3, [pc, #84]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 8007a5e:	69db      	ldr	r3, [r3, #28]
 8007a60:	f003 0318 	and.w	r3, r3, #24
 8007a64:	2b10      	cmp	r3, #16
 8007a66:	d1ee      	bne.n	8007a46 <HAL_RCC_ClockConfig+0x1ba>
 8007a68:	e02c      	b.n	8007ac4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d122      	bne.n	8007ab8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8007a72:	e00a      	b.n	8007a8a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007a74:	f7fc fb20 	bl	80040b8 <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d901      	bls.n	8007a8a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e0a9      	b.n	8007bde <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8007a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab4 <HAL_RCC_ClockConfig+0x228>)
 8007a8c:	69db      	ldr	r3, [r3, #28]
 8007a8e:	f003 0318 	and.w	r3, r3, #24
 8007a92:	2b08      	cmp	r3, #8
 8007a94:	d1ee      	bne.n	8007a74 <HAL_RCC_ClockConfig+0x1e8>
 8007a96:	e015      	b.n	8007ac4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007a98:	f7fc fb0e 	bl	80040b8 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d906      	bls.n	8007ab8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e097      	b.n	8007bde <HAL_RCC_ClockConfig+0x352>
 8007aae:	bf00      	nop
 8007ab0:	40022000 	.word	0x40022000
 8007ab4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8007be8 <HAL_RCC_ClockConfig+0x35c>)
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	f003 0318 	and.w	r3, r3, #24
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e9      	bne.n	8007a98 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0302 	and.w	r3, r3, #2
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d010      	beq.n	8007af2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689a      	ldr	r2, [r3, #8]
 8007ad4:	4b44      	ldr	r3, [pc, #272]	@ (8007be8 <HAL_RCC_ClockConfig+0x35c>)
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	f003 030f 	and.w	r3, r3, #15
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d208      	bcs.n	8007af2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8007ae0:	4b41      	ldr	r3, [pc, #260]	@ (8007be8 <HAL_RCC_ClockConfig+0x35c>)
 8007ae2:	6a1b      	ldr	r3, [r3, #32]
 8007ae4:	f023 020f 	bic.w	r2, r3, #15
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	493e      	ldr	r1, [pc, #248]	@ (8007be8 <HAL_RCC_ClockConfig+0x35c>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007af2:	4b3e      	ldr	r3, [pc, #248]	@ (8007bec <HAL_RCC_ClockConfig+0x360>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 030f 	and.w	r3, r3, #15
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d210      	bcs.n	8007b22 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b00:	4b3a      	ldr	r3, [pc, #232]	@ (8007bec <HAL_RCC_ClockConfig+0x360>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f023 020f 	bic.w	r2, r3, #15
 8007b08:	4938      	ldr	r1, [pc, #224]	@ (8007bec <HAL_RCC_ClockConfig+0x360>)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b10:	4b36      	ldr	r3, [pc, #216]	@ (8007bec <HAL_RCC_ClockConfig+0x360>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 030f 	and.w	r3, r3, #15
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d001      	beq.n	8007b22 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e05d      	b.n	8007bde <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0304 	and.w	r3, r3, #4
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d010      	beq.n	8007b50 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	4b2d      	ldr	r3, [pc, #180]	@ (8007be8 <HAL_RCC_ClockConfig+0x35c>)
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d208      	bcs.n	8007b50 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8007b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8007be8 <HAL_RCC_ClockConfig+0x35c>)
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	4927      	ldr	r1, [pc, #156]	@ (8007be8 <HAL_RCC_ClockConfig+0x35c>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0308 	and.w	r3, r3, #8
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d012      	beq.n	8007b82 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	691a      	ldr	r2, [r3, #16]
 8007b60:	4b21      	ldr	r3, [pc, #132]	@ (8007be8 <HAL_RCC_ClockConfig+0x35c>)
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	091b      	lsrs	r3, r3, #4
 8007b66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d209      	bcs.n	8007b82 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8007b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007be8 <HAL_RCC_ClockConfig+0x35c>)
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	491a      	ldr	r1, [pc, #104]	@ (8007be8 <HAL_RCC_ClockConfig+0x35c>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0310 	and.w	r3, r3, #16
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d012      	beq.n	8007bb4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	695a      	ldr	r2, [r3, #20]
 8007b92:	4b15      	ldr	r3, [pc, #84]	@ (8007be8 <HAL_RCC_ClockConfig+0x35c>)
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	0a1b      	lsrs	r3, r3, #8
 8007b98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d209      	bcs.n	8007bb4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8007ba0:	4b11      	ldr	r3, [pc, #68]	@ (8007be8 <HAL_RCC_ClockConfig+0x35c>)
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	021b      	lsls	r3, r3, #8
 8007bae:	490e      	ldr	r1, [pc, #56]	@ (8007be8 <HAL_RCC_ClockConfig+0x35c>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007bb4:	f000 f822 	bl	8007bfc <HAL_RCC_GetSysClockFreq>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	4b0b      	ldr	r3, [pc, #44]	@ (8007be8 <HAL_RCC_ClockConfig+0x35c>)
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	f003 030f 	and.w	r3, r3, #15
 8007bc2:	490b      	ldr	r1, [pc, #44]	@ (8007bf0 <HAL_RCC_ClockConfig+0x364>)
 8007bc4:	5ccb      	ldrb	r3, [r1, r3]
 8007bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bca:	4a0a      	ldr	r2, [pc, #40]	@ (8007bf4 <HAL_RCC_ClockConfig+0x368>)
 8007bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007bce:	4b0a      	ldr	r3, [pc, #40]	@ (8007bf8 <HAL_RCC_ClockConfig+0x36c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fc f9e6 	bl	8003fa4 <HAL_InitTick>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8007bdc:	7afb      	ldrb	r3, [r7, #11]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	44020c00 	.word	0x44020c00
 8007bec:	40022000 	.word	0x40022000
 8007bf0:	0801057c 	.word	0x0801057c
 8007bf4:	20000004 	.word	0x20000004
 8007bf8:	20000008 	.word	0x20000008

08007bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b089      	sub	sp, #36	@ 0x24
 8007c00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8007c02:	4b8c      	ldr	r3, [pc, #560]	@ (8007e34 <HAL_RCC_GetSysClockFreq+0x238>)
 8007c04:	69db      	ldr	r3, [r3, #28]
 8007c06:	f003 0318 	and.w	r3, r3, #24
 8007c0a:	2b08      	cmp	r3, #8
 8007c0c:	d102      	bne.n	8007c14 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007c0e:	4b8a      	ldr	r3, [pc, #552]	@ (8007e38 <HAL_RCC_GetSysClockFreq+0x23c>)
 8007c10:	61fb      	str	r3, [r7, #28]
 8007c12:	e107      	b.n	8007e24 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c14:	4b87      	ldr	r3, [pc, #540]	@ (8007e34 <HAL_RCC_GetSysClockFreq+0x238>)
 8007c16:	69db      	ldr	r3, [r3, #28]
 8007c18:	f003 0318 	and.w	r3, r3, #24
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d112      	bne.n	8007c46 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8007c20:	4b84      	ldr	r3, [pc, #528]	@ (8007e34 <HAL_RCC_GetSysClockFreq+0x238>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0320 	and.w	r3, r3, #32
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d009      	beq.n	8007c40 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c2c:	4b81      	ldr	r3, [pc, #516]	@ (8007e34 <HAL_RCC_GetSysClockFreq+0x238>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	08db      	lsrs	r3, r3, #3
 8007c32:	f003 0303 	and.w	r3, r3, #3
 8007c36:	4a81      	ldr	r2, [pc, #516]	@ (8007e3c <HAL_RCC_GetSysClockFreq+0x240>)
 8007c38:	fa22 f303 	lsr.w	r3, r2, r3
 8007c3c:	61fb      	str	r3, [r7, #28]
 8007c3e:	e0f1      	b.n	8007e24 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8007c40:	4b7e      	ldr	r3, [pc, #504]	@ (8007e3c <HAL_RCC_GetSysClockFreq+0x240>)
 8007c42:	61fb      	str	r3, [r7, #28]
 8007c44:	e0ee      	b.n	8007e24 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c46:	4b7b      	ldr	r3, [pc, #492]	@ (8007e34 <HAL_RCC_GetSysClockFreq+0x238>)
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	f003 0318 	and.w	r3, r3, #24
 8007c4e:	2b10      	cmp	r3, #16
 8007c50:	d102      	bne.n	8007c58 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007c52:	4b7b      	ldr	r3, [pc, #492]	@ (8007e40 <HAL_RCC_GetSysClockFreq+0x244>)
 8007c54:	61fb      	str	r3, [r7, #28]
 8007c56:	e0e5      	b.n	8007e24 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c58:	4b76      	ldr	r3, [pc, #472]	@ (8007e34 <HAL_RCC_GetSysClockFreq+0x238>)
 8007c5a:	69db      	ldr	r3, [r3, #28]
 8007c5c:	f003 0318 	and.w	r3, r3, #24
 8007c60:	2b18      	cmp	r3, #24
 8007c62:	f040 80dd 	bne.w	8007e20 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007c66:	4b73      	ldr	r3, [pc, #460]	@ (8007e34 <HAL_RCC_GetSysClockFreq+0x238>)
 8007c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6a:	f003 0303 	and.w	r3, r3, #3
 8007c6e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007c70:	4b70      	ldr	r3, [pc, #448]	@ (8007e34 <HAL_RCC_GetSysClockFreq+0x238>)
 8007c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c74:	0a1b      	lsrs	r3, r3, #8
 8007c76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c7a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007c7c:	4b6d      	ldr	r3, [pc, #436]	@ (8007e34 <HAL_RCC_GetSysClockFreq+0x238>)
 8007c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c80:	091b      	lsrs	r3, r3, #4
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8007c88:	4b6a      	ldr	r3, [pc, #424]	@ (8007e34 <HAL_RCC_GetSysClockFreq+0x238>)
 8007c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8007c8c:	08db      	lsrs	r3, r3, #3
 8007c8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	fb02 f303 	mul.w	r3, r2, r3
 8007c98:	ee07 3a90 	vmov	s15, r3
 8007c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f000 80b7 	beq.w	8007e1a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d003      	beq.n	8007cba <HAL_RCC_GetSysClockFreq+0xbe>
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d056      	beq.n	8007d66 <HAL_RCC_GetSysClockFreq+0x16a>
 8007cb8:	e077      	b.n	8007daa <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8007cba:	4b5e      	ldr	r3, [pc, #376]	@ (8007e34 <HAL_RCC_GetSysClockFreq+0x238>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0320 	and.w	r3, r3, #32
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d02d      	beq.n	8007d22 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007cc6:	4b5b      	ldr	r3, [pc, #364]	@ (8007e34 <HAL_RCC_GetSysClockFreq+0x238>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	08db      	lsrs	r3, r3, #3
 8007ccc:	f003 0303 	and.w	r3, r3, #3
 8007cd0:	4a5a      	ldr	r2, [pc, #360]	@ (8007e3c <HAL_RCC_GetSysClockFreq+0x240>)
 8007cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	ee07 3a90 	vmov	s15, r3
 8007cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	ee07 3a90 	vmov	s15, r3
 8007ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf0:	4b50      	ldr	r3, [pc, #320]	@ (8007e34 <HAL_RCC_GetSysClockFreq+0x238>)
 8007cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cf8:	ee07 3a90 	vmov	s15, r3
 8007cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d00:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d04:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8007e44 <HAL_RCC_GetSysClockFreq+0x248>
 8007d08:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007d0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d14:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8007d20:	e065      	b.n	8007dee <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	ee07 3a90 	vmov	s15, r3
 8007d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8007e48 <HAL_RCC_GetSysClockFreq+0x24c>
 8007d30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d34:	4b3f      	ldr	r3, [pc, #252]	@ (8007e34 <HAL_RCC_GetSysClockFreq+0x238>)
 8007d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3c:	ee07 3a90 	vmov	s15, r3
 8007d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d44:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d48:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007e44 <HAL_RCC_GetSysClockFreq+0x248>
 8007d4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007d50:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d58:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d60:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8007d64:	e043      	b.n	8007dee <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	ee07 3a90 	vmov	s15, r3
 8007d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d70:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8007e4c <HAL_RCC_GetSysClockFreq+0x250>
 8007d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d78:	4b2e      	ldr	r3, [pc, #184]	@ (8007e34 <HAL_RCC_GetSysClockFreq+0x238>)
 8007d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d80:	ee07 3a90 	vmov	s15, r3
 8007d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d88:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d8c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8007e44 <HAL_RCC_GetSysClockFreq+0x248>
 8007d90:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007d94:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8007da8:	e021      	b.n	8007dee <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	ee07 3a90 	vmov	s15, r3
 8007db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007e50 <HAL_RCC_GetSysClockFreq+0x254>
 8007db8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8007e34 <HAL_RCC_GetSysClockFreq+0x238>)
 8007dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc4:	ee07 3a90 	vmov	s15, r3
 8007dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dcc:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dd0:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8007e44 <HAL_RCC_GetSysClockFreq+0x248>
 8007dd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007dd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ddc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007de0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8007dec:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8007dee:	4b11      	ldr	r3, [pc, #68]	@ (8007e34 <HAL_RCC_GetSysClockFreq+0x238>)
 8007df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007df2:	0a5b      	lsrs	r3, r3, #9
 8007df4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007df8:	3301      	adds	r3, #1
 8007dfa:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	ee07 3a90 	vmov	s15, r3
 8007e02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e06:	edd7 6a06 	vldr	s13, [r7, #24]
 8007e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e12:	ee17 3a90 	vmov	r3, s15
 8007e16:	61fb      	str	r3, [r7, #28]
 8007e18:	e004      	b.n	8007e24 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	61fb      	str	r3, [r7, #28]
 8007e1e:	e001      	b.n	8007e24 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8007e20:	4b06      	ldr	r3, [pc, #24]	@ (8007e3c <HAL_RCC_GetSysClockFreq+0x240>)
 8007e22:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8007e24:	69fb      	ldr	r3, [r7, #28]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3724      	adds	r7, #36	@ 0x24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	44020c00 	.word	0x44020c00
 8007e38:	003d0900 	.word	0x003d0900
 8007e3c:	03d09000 	.word	0x03d09000
 8007e40:	017d7840 	.word	0x017d7840
 8007e44:	46000000 	.word	0x46000000
 8007e48:	4c742400 	.word	0x4c742400
 8007e4c:	4bbebc20 	.word	0x4bbebc20
 8007e50:	4a742400 	.word	0x4a742400

08007e54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007e58:	f7ff fed0 	bl	8007bfc <HAL_RCC_GetSysClockFreq>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	4b08      	ldr	r3, [pc, #32]	@ (8007e80 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007e60:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8007e62:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007e66:	4907      	ldr	r1, [pc, #28]	@ (8007e84 <HAL_RCC_GetHCLKFreq+0x30>)
 8007e68:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8007e6a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e72:	4a05      	ldr	r2, [pc, #20]	@ (8007e88 <HAL_RCC_GetHCLKFreq+0x34>)
 8007e74:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8007e76:	4b04      	ldr	r3, [pc, #16]	@ (8007e88 <HAL_RCC_GetHCLKFreq+0x34>)
 8007e78:	681b      	ldr	r3, [r3, #0]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	44020c00 	.word	0x44020c00
 8007e84:	0801057c 	.word	0x0801057c
 8007e88:	20000004 	.word	0x20000004

08007e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8007e90:	f7ff ffe0 	bl	8007e54 <HAL_RCC_GetHCLKFreq>
 8007e94:	4602      	mov	r2, r0
 8007e96:	4b06      	ldr	r3, [pc, #24]	@ (8007eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	091b      	lsrs	r3, r3, #4
 8007e9c:	f003 0307 	and.w	r3, r3, #7
 8007ea0:	4904      	ldr	r1, [pc, #16]	@ (8007eb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ea2:	5ccb      	ldrb	r3, [r1, r3]
 8007ea4:	f003 031f 	and.w	r3, r3, #31
 8007ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	44020c00 	.word	0x44020c00
 8007eb4:	0801058c 	.word	0x0801058c

08007eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8007ebc:	f7ff ffca 	bl	8007e54 <HAL_RCC_GetHCLKFreq>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	4b06      	ldr	r3, [pc, #24]	@ (8007edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ec4:	6a1b      	ldr	r3, [r3, #32]
 8007ec6:	0a1b      	lsrs	r3, r3, #8
 8007ec8:	f003 0307 	and.w	r3, r3, #7
 8007ecc:	4904      	ldr	r1, [pc, #16]	@ (8007ee0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007ece:	5ccb      	ldrb	r3, [r1, r3]
 8007ed0:	f003 031f 	and.w	r3, r3, #31
 8007ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	44020c00 	.word	0x44020c00
 8007ee0:	0801058c 	.word	0x0801058c

08007ee4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8007ee8:	f7ff ffb4 	bl	8007e54 <HAL_RCC_GetHCLKFreq>
 8007eec:	4602      	mov	r2, r0
 8007eee:	4b06      	ldr	r3, [pc, #24]	@ (8007f08 <HAL_RCC_GetPCLK3Freq+0x24>)
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	0b1b      	lsrs	r3, r3, #12
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	4904      	ldr	r1, [pc, #16]	@ (8007f0c <HAL_RCC_GetPCLK3Freq+0x28>)
 8007efa:	5ccb      	ldrb	r3, [r1, r3]
 8007efc:	f003 031f 	and.w	r3, r3, #31
 8007f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	44020c00 	.word	0x44020c00
 8007f0c:	0801058c 	.word	0x0801058c

08007f10 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f14:	b0aa      	sub	sp, #168	@ 0xa8
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f22:	2300      	movs	r3, #0
 8007f24:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8007f34:	2500      	movs	r5, #0
 8007f36:	ea54 0305 	orrs.w	r3, r4, r5
 8007f3a:	d00b      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8007f3c:	4bb8      	ldr	r3, [pc, #736]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f42:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8007f46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f4c:	4ab4      	ldr	r2, [pc, #720]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007f4e:	430b      	orrs	r3, r1
 8007f50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	f002 0801 	and.w	r8, r2, #1
 8007f60:	f04f 0900 	mov.w	r9, #0
 8007f64:	ea58 0309 	orrs.w	r3, r8, r9
 8007f68:	d038      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8007f6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f70:	2b05      	cmp	r3, #5
 8007f72:	d819      	bhi.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007f74:	a201      	add	r2, pc, #4	@ (adr r2, 8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8007f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7a:	bf00      	nop
 8007f7c:	08007fb1 	.word	0x08007fb1
 8007f80:	08007f95 	.word	0x08007f95
 8007f84:	08007fa9 	.word	0x08007fa9
 8007f88:	08007fb1 	.word	0x08007fb1
 8007f8c:	08007fb1 	.word	0x08007fb1
 8007f90:	08007fb1 	.word	0x08007fb1
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007f98:	3308      	adds	r3, #8
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f001 fff2 	bl	8009f84 <RCCEx_PLL2_Config>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8007fa6:	e004      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007fae:	e000      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8007fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fb2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10c      	bne.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007fba:	4b99      	ldr	r3, [pc, #612]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007fbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007fc0:	f023 0107 	bic.w	r1, r3, #7
 8007fc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fca:	4a95      	ldr	r2, [pc, #596]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007fcc:	430b      	orrs	r3, r1
 8007fce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007fd2:	e003      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fd4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007fd8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007fdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	f002 0a02 	and.w	sl, r2, #2
 8007fe8:	f04f 0b00 	mov.w	fp, #0
 8007fec:	ea5a 030b 	orrs.w	r3, sl, fp
 8007ff0:	d03c      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8007ff2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff8:	2b28      	cmp	r3, #40	@ 0x28
 8007ffa:	d01b      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8007ffc:	2b28      	cmp	r3, #40	@ 0x28
 8007ffe:	d815      	bhi.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8008000:	2b20      	cmp	r3, #32
 8008002:	d019      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8008004:	2b20      	cmp	r3, #32
 8008006:	d811      	bhi.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8008008:	2b18      	cmp	r3, #24
 800800a:	d017      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x12c>
 800800c:	2b18      	cmp	r3, #24
 800800e:	d80d      	bhi.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8008010:	2b00      	cmp	r3, #0
 8008012:	d015      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8008014:	2b08      	cmp	r3, #8
 8008016:	d109      	bne.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008018:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800801c:	3308      	adds	r3, #8
 800801e:	4618      	mov	r0, r3
 8008020:	f001 ffb0 	bl	8009f84 <RCCEx_PLL2_Config>
 8008024:	4603      	mov	r3, r0
 8008026:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 800802a:	e00a      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008032:	e006      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8008034:	bf00      	nop
 8008036:	e004      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8008038:	bf00      	nop
 800803a:	e002      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800803c:	bf00      	nop
 800803e:	e000      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8008040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008042:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10c      	bne.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800804a:	4b75      	ldr	r3, [pc, #468]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800804c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008050:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008054:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805a:	4a71      	ldr	r2, [pc, #452]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800805c:	430b      	orrs	r3, r1
 800805e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008062:	e003      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008064:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008068:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800806c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008074:	f002 0304 	and.w	r3, r2, #4
 8008078:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800807c:	2300      	movs	r3, #0
 800807e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008082:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008086:	460b      	mov	r3, r1
 8008088:	4313      	orrs	r3, r2
 800808a:	d040      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800808c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008092:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008096:	d01e      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8008098:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800809c:	d817      	bhi.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800809e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080a2:	d01a      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80080a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080a8:	d811      	bhi.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80080aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80080ac:	d017      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80080ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80080b0:	d80d      	bhi.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d015      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80080b6:	2b40      	cmp	r3, #64	@ 0x40
 80080b8:	d109      	bne.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80080ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080be:	3308      	adds	r3, #8
 80080c0:	4618      	mov	r0, r3
 80080c2:	f001 ff5f 	bl	8009f84 <RCCEx_PLL2_Config>
 80080c6:	4603      	mov	r3, r0
 80080c8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 80080cc:	e00a      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80080d4:	e006      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80080d6:	bf00      	nop
 80080d8:	e004      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80080da:	bf00      	nop
 80080dc:	e002      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80080de:	bf00      	nop
 80080e0:	e000      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80080e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080e4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10c      	bne.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80080ec:	4b4c      	ldr	r3, [pc, #304]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80080ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80080f2:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80080f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080fc:	4a48      	ldr	r2, [pc, #288]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80080fe:	430b      	orrs	r3, r1
 8008100:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008104:	e003      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008106:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800810a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800810e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008116:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800811a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800811e:	2300      	movs	r3, #0
 8008120:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008124:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008128:	460b      	mov	r3, r1
 800812a:	4313      	orrs	r3, r2
 800812c:	d043      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800812e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008134:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008138:	d021      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800813a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800813e:	d81a      	bhi.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8008140:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008144:	d01d      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8008146:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800814a:	d814      	bhi.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800814c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008150:	d019      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008152:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008156:	d80e      	bhi.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8008158:	2b00      	cmp	r3, #0
 800815a:	d016      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x27a>
 800815c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008160:	d109      	bne.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008162:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008166:	3308      	adds	r3, #8
 8008168:	4618      	mov	r0, r3
 800816a:	f001 ff0b 	bl	8009f84 <RCCEx_PLL2_Config>
 800816e:	4603      	mov	r3, r0
 8008170:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8008174:	e00a      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800817c:	e006      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800817e:	bf00      	nop
 8008180:	e004      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8008182:	bf00      	nop
 8008184:	e002      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8008186:	bf00      	nop
 8008188:	e000      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800818a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800818c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10c      	bne.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008194:	4b22      	ldr	r3, [pc, #136]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8008196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800819a:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800819e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a4:	4a1e      	ldr	r2, [pc, #120]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80081a6:	430b      	orrs	r3, r1
 80081a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80081ac:	e003      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ae:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80081b2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80081b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80081c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081c4:	2300      	movs	r3, #0
 80081c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80081cc:	460b      	mov	r3, r1
 80081ce:	4313      	orrs	r3, r2
 80081d0:	d03e      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80081d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80081dc:	d01b      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x306>
 80081de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80081e2:	d814      	bhi.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80081e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081e8:	d017      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80081ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081ee:	d80e      	bhi.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d017      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80081f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081f8:	d109      	bne.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80081fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081fe:	3308      	adds	r3, #8
 8008200:	4618      	mov	r0, r3
 8008202:	f001 febf 	bl	8009f84 <RCCEx_PLL2_Config>
 8008206:	4603      	mov	r3, r0
 8008208:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800820c:	e00b      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008214:	e007      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8008216:	bf00      	nop
 8008218:	e005      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800821a:	bf00      	nop
 800821c:	e003      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x316>
 800821e:	bf00      	nop
 8008220:	44020c00 	.word	0x44020c00
        break;
 8008224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008226:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10c      	bne.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800822e:	4ba5      	ldr	r3, [pc, #660]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8008230:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008234:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008238:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800823c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800823e:	4aa1      	ldr	r2, [pc, #644]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8008240:	430b      	orrs	r3, r1
 8008242:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008246:	e003      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008248:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800824c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008250:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008258:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800825c:	673b      	str	r3, [r7, #112]	@ 0x70
 800825e:	2300      	movs	r3, #0
 8008260:	677b      	str	r3, [r7, #116]	@ 0x74
 8008262:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008266:	460b      	mov	r3, r1
 8008268:	4313      	orrs	r3, r2
 800826a:	d03b      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800826c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008272:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008276:	d01b      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8008278:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800827c:	d814      	bhi.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800827e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008282:	d017      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8008284:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008288:	d80e      	bhi.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800828a:	2b00      	cmp	r3, #0
 800828c:	d014      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800828e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008292:	d109      	bne.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008294:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008298:	3308      	adds	r3, #8
 800829a:	4618      	mov	r0, r3
 800829c:	f001 fe72 	bl	8009f84 <RCCEx_PLL2_Config>
 80082a0:	4603      	mov	r3, r0
 80082a2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80082a6:	e008      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80082ae:	e004      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80082b0:	bf00      	nop
 80082b2:	e002      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80082b4:	bf00      	nop
 80082b6:	e000      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80082b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ba:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10c      	bne.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80082c2:	4b80      	ldr	r3, [pc, #512]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80082c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80082c8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80082cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80082d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082d2:	4a7c      	ldr	r2, [pc, #496]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80082d4:	430b      	orrs	r3, r1
 80082d6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80082da:	e003      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082dc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80082e0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80082e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80082f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082f2:	2300      	movs	r3, #0
 80082f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80082fa:	460b      	mov	r3, r1
 80082fc:	4313      	orrs	r3, r2
 80082fe:	d033      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8008300:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008306:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800830a:	d015      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800830c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008310:	d80e      	bhi.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008312:	2b00      	cmp	r3, #0
 8008314:	d012      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8008316:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800831a:	d109      	bne.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800831c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008320:	3308      	adds	r3, #8
 8008322:	4618      	mov	r0, r3
 8008324:	f001 fe2e 	bl	8009f84 <RCCEx_PLL2_Config>
 8008328:	4603      	mov	r3, r0
 800832a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800832e:	e006      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008336:	e002      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8008338:	bf00      	nop
 800833a:	e000      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 800833c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800833e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10c      	bne.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8008346:	4b5f      	ldr	r3, [pc, #380]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8008348:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800834c:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8008350:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008356:	4a5b      	ldr	r2, [pc, #364]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8008358:	430b      	orrs	r3, r1
 800835a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800835e:	e003      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008360:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008364:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8008368:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800836c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008370:	2100      	movs	r1, #0
 8008372:	6639      	str	r1, [r7, #96]	@ 0x60
 8008374:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008378:	667b      	str	r3, [r7, #100]	@ 0x64
 800837a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800837e:	460b      	mov	r3, r1
 8008380:	4313      	orrs	r3, r2
 8008382:	d033      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8008384:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800838a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800838e:	d015      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8008390:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008394:	d80e      	bhi.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8008396:	2b00      	cmp	r3, #0
 8008398:	d012      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800839a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800839e:	d109      	bne.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80083a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80083a4:	3308      	adds	r3, #8
 80083a6:	4618      	mov	r0, r3
 80083a8:	f001 fdec 	bl	8009f84 <RCCEx_PLL2_Config>
 80083ac:	4603      	mov	r3, r0
 80083ae:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 80083b2:	e006      	b.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80083ba:	e002      	b.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 80083bc:	bf00      	nop
 80083be:	e000      	b.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 80083c0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80083c2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10c      	bne.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 80083ca:	4b3e      	ldr	r3, [pc, #248]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80083cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80083d0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80083d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80083d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083da:	4a3a      	ldr	r2, [pc, #232]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80083dc:	430b      	orrs	r3, r1
 80083de:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80083e2:	e003      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083e4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80083e8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80083ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80083f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f4:	2100      	movs	r1, #0
 80083f6:	65b9      	str	r1, [r7, #88]	@ 0x58
 80083f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008402:	460b      	mov	r3, r1
 8008404:	4313      	orrs	r3, r2
 8008406:	d00e      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8008408:	4b2e      	ldr	r3, [pc, #184]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800840a:	69db      	ldr	r3, [r3, #28]
 800840c:	4a2d      	ldr	r2, [pc, #180]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800840e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008412:	61d3      	str	r3, [r2, #28]
 8008414:	4b2b      	ldr	r3, [pc, #172]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8008416:	69d9      	ldr	r1, [r3, #28]
 8008418:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800841c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008420:	4a28      	ldr	r2, [pc, #160]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8008422:	430b      	orrs	r3, r1
 8008424:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008426:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008432:	653b      	str	r3, [r7, #80]	@ 0x50
 8008434:	2300      	movs	r3, #0
 8008436:	657b      	str	r3, [r7, #84]	@ 0x54
 8008438:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800843c:	460b      	mov	r3, r1
 800843e:	4313      	orrs	r3, r2
 8008440:	d046      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8008442:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008448:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800844c:	d021      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800844e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008452:	d81a      	bhi.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8008454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008458:	d01d      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800845a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800845e:	d814      	bhi.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8008460:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008464:	d019      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008466:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800846a:	d80e      	bhi.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800846c:	2b00      	cmp	r3, #0
 800846e:	d016      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8008470:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008474:	d109      	bne.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008476:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800847a:	3308      	adds	r3, #8
 800847c:	4618      	mov	r0, r3
 800847e:	f001 fd81 	bl	8009f84 <RCCEx_PLL2_Config>
 8008482:	4603      	mov	r3, r0
 8008484:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8008488:	e00a      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008490:	e006      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8008492:	bf00      	nop
 8008494:	e004      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8008496:	bf00      	nop
 8008498:	e002      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800849a:	bf00      	nop
 800849c:	e000      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800849e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084a0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10f      	bne.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80084a8:	4b06      	ldr	r3, [pc, #24]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80084aa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80084ae:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80084b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80084b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084b8:	4a02      	ldr	r2, [pc, #8]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80084ba:	430b      	orrs	r3, r1
 80084bc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80084c0:	e006      	b.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80084c2:	bf00      	nop
 80084c4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084c8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80084cc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80084d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80084d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80084dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084de:	2300      	movs	r3, #0
 80084e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084e2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80084e6:	460b      	mov	r3, r1
 80084e8:	4313      	orrs	r3, r2
 80084ea:	d043      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80084ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80084f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084f2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80084f6:	d021      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80084f8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80084fc:	d81a      	bhi.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80084fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008502:	d01d      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8008504:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008508:	d814      	bhi.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800850a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800850e:	d019      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8008510:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008514:	d80e      	bhi.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8008516:	2b00      	cmp	r3, #0
 8008518:	d016      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x638>
 800851a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800851e:	d109      	bne.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008520:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008524:	3308      	adds	r3, #8
 8008526:	4618      	mov	r0, r3
 8008528:	f001 fd2c 	bl	8009f84 <RCCEx_PLL2_Config>
 800852c:	4603      	mov	r3, r0
 800852e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8008532:	e00a      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800853a:	e006      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800853c:	bf00      	nop
 800853e:	e004      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8008540:	bf00      	nop
 8008542:	e002      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8008544:	bf00      	nop
 8008546:	e000      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8008548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800854a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10c      	bne.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008552:	4bb6      	ldr	r3, [pc, #728]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8008554:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008558:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800855c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008562:	4ab2      	ldr	r2, [pc, #712]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8008564:	430b      	orrs	r3, r1
 8008566:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800856a:	e003      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800856c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008570:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8008574:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008580:	643b      	str	r3, [r7, #64]	@ 0x40
 8008582:	2300      	movs	r3, #0
 8008584:	647b      	str	r3, [r7, #68]	@ 0x44
 8008586:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800858a:	460b      	mov	r3, r1
 800858c:	4313      	orrs	r3, r2
 800858e:	d030      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8008590:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008594:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008596:	2b05      	cmp	r3, #5
 8008598:	d80f      	bhi.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800859a:	2b03      	cmp	r3, #3
 800859c:	d211      	bcs.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d911      	bls.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d109      	bne.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80085a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80085aa:	3308      	adds	r3, #8
 80085ac:	4618      	mov	r0, r3
 80085ae:	f001 fce9 	bl	8009f84 <RCCEx_PLL2_Config>
 80085b2:	4603      	mov	r3, r0
 80085b4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80085b8:	e006      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80085c0:	e002      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80085c2:	bf00      	nop
 80085c4:	e000      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80085c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085c8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10c      	bne.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80085d0:	4b96      	ldr	r3, [pc, #600]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80085d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80085d6:	f023 0107 	bic.w	r1, r3, #7
 80085da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80085de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085e0:	4a92      	ldr	r2, [pc, #584]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80085e2:	430b      	orrs	r3, r1
 80085e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80085e8:	e003      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ea:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80085ee:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80085f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80085f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fa:	2100      	movs	r1, #0
 80085fc:	63b9      	str	r1, [r7, #56]	@ 0x38
 80085fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008602:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008604:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008608:	460b      	mov	r3, r1
 800860a:	4313      	orrs	r3, r2
 800860c:	d022      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800860e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008612:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008614:	2b00      	cmp	r3, #0
 8008616:	d005      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8008618:	2b08      	cmp	r3, #8
 800861a:	d005      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008622:	e002      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8008624:	bf00      	nop
 8008626:	e000      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8008628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800862a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10c      	bne.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8008632:	4b7e      	ldr	r3, [pc, #504]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8008634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008638:	f023 0108 	bic.w	r1, r3, #8
 800863c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008640:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008642:	4a7a      	ldr	r2, [pc, #488]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8008644:	430b      	orrs	r3, r1
 8008646:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800864a:	e003      	b.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800864c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008650:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008654:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008660:	633b      	str	r3, [r7, #48]	@ 0x30
 8008662:	2300      	movs	r3, #0
 8008664:	637b      	str	r3, [r7, #52]	@ 0x34
 8008666:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800866a:	460b      	mov	r3, r1
 800866c:	4313      	orrs	r3, r2
 800866e:	f000 80b0 	beq.w	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8008672:	4b6f      	ldr	r3, [pc, #444]	@ (8008830 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8008674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008676:	4a6e      	ldr	r2, [pc, #440]	@ (8008830 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8008678:	f043 0301 	orr.w	r3, r3, #1
 800867c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800867e:	f7fb fd1b 	bl	80040b8 <HAL_GetTick>
 8008682:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8008686:	e00b      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008688:	f7fb fd16 	bl	80040b8 <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	2b02      	cmp	r3, #2
 8008696:	d903      	bls.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8008698:	2303      	movs	r3, #3
 800869a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800869e:	e005      	b.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80086a0:	4b63      	ldr	r3, [pc, #396]	@ (8008830 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80086a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d0ed      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 80086ac:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f040 808a 	bne.w	80087ca <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80086b6:	4b5d      	ldr	r3, [pc, #372]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80086b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80086c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d022      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x802>
 80086cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80086d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086d2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d01b      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80086da:	4b54      	ldr	r3, [pc, #336]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80086dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086e8:	4b50      	ldr	r3, [pc, #320]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80086ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086ee:	4a4f      	ldr	r2, [pc, #316]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80086f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086f8:	4b4c      	ldr	r3, [pc, #304]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80086fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086fe:	4a4b      	ldr	r2, [pc, #300]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8008700:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008704:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008708:	4a48      	ldr	r2, [pc, #288]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800870a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800870e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008712:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d019      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800871e:	f7fb fccb 	bl	80040b8 <HAL_GetTick>
 8008722:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008726:	e00d      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008728:	f7fb fcc6 	bl	80040b8 <HAL_GetTick>
 800872c:	4602      	mov	r2, r0
 800872e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008738:	4293      	cmp	r3, r2
 800873a:	d903      	bls.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8008742:	e006      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008744:	4b39      	ldr	r3, [pc, #228]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8008746:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	2b00      	cmp	r3, #0
 8008750:	d0ea      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8008752:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008756:	2b00      	cmp	r3, #0
 8008758:	d132      	bne.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800875a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800875e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008760:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008764:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008768:	d10f      	bne.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x87a>
 800876a:	4b30      	ldr	r3, [pc, #192]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800876c:	69db      	ldr	r3, [r3, #28]
 800876e:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008772:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008776:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008778:	091b      	lsrs	r3, r3, #4
 800877a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800877e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8008782:	4a2a      	ldr	r2, [pc, #168]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8008784:	430b      	orrs	r3, r1
 8008786:	61d3      	str	r3, [r2, #28]
 8008788:	e005      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x886>
 800878a:	4b28      	ldr	r3, [pc, #160]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	4a27      	ldr	r2, [pc, #156]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8008790:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008794:	61d3      	str	r3, [r2, #28]
 8008796:	4b25      	ldr	r3, [pc, #148]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8008798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800879c:	4a23      	ldr	r2, [pc, #140]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800879e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80087a6:	4b21      	ldr	r3, [pc, #132]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80087a8:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80087ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80087b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087b6:	4a1d      	ldr	r2, [pc, #116]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80087b8:	430b      	orrs	r3, r1
 80087ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80087be:	e008      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80087c0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80087c4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 80087c8:	e003      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ca:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80087ce:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80087d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80087de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087e0:	2300      	movs	r3, #0
 80087e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087e4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80087e8:	460b      	mov	r3, r1
 80087ea:	4313      	orrs	r3, r2
 80087ec:	d038      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80087ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80087f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087f4:	2b30      	cmp	r3, #48	@ 0x30
 80087f6:	d014      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x912>
 80087f8:	2b30      	cmp	r3, #48	@ 0x30
 80087fa:	d80e      	bhi.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80087fc:	2b20      	cmp	r3, #32
 80087fe:	d012      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8008800:	2b20      	cmp	r3, #32
 8008802:	d80a      	bhi.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8008804:	2b00      	cmp	r3, #0
 8008806:	d015      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008808:	2b10      	cmp	r3, #16
 800880a:	d106      	bne.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800880c:	4b07      	ldr	r3, [pc, #28]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800880e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008810:	4a06      	ldr	r2, [pc, #24]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8008812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008816:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8008818:	e00d      	b.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008820:	e009      	b.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8008822:	bf00      	nop
 8008824:	e007      	b.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8008826:	bf00      	nop
 8008828:	e005      	b.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800882a:	bf00      	nop
 800882c:	44020c00 	.word	0x44020c00
 8008830:	44020800 	.word	0x44020800
        break;
 8008834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008836:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10c      	bne.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800883e:	4bb5      	ldr	r3, [pc, #724]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008840:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008844:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008848:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800884c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800884e:	49b1      	ldr	r1, [pc, #708]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008850:	4313      	orrs	r3, r2
 8008852:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8008856:	e003      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008858:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800885c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8008860:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008868:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800886c:	623b      	str	r3, [r7, #32]
 800886e:	2300      	movs	r3, #0
 8008870:	627b      	str	r3, [r7, #36]	@ 0x24
 8008872:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008876:	460b      	mov	r3, r1
 8008878:	4313      	orrs	r3, r2
 800887a:	d03c      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800887c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008880:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008882:	2b04      	cmp	r3, #4
 8008884:	d81d      	bhi.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8008886:	a201      	add	r2, pc, #4	@ (adr r2, 800888c <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888c:	080088a1 	.word	0x080088a1
 8008890:	080088af 	.word	0x080088af
 8008894:	080088c3 	.word	0x080088c3
 8008898:	080088cb 	.word	0x080088cb
 800889c:	080088cb 	.word	0x080088cb
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088a0:	4b9c      	ldr	r3, [pc, #624]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80088a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a4:	4a9b      	ldr	r2, [pc, #620]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80088a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088aa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80088ac:	e00e      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80088ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80088b2:	3308      	adds	r3, #8
 80088b4:	4618      	mov	r0, r3
 80088b6:	f001 fb65 	bl	8009f84 <RCCEx_PLL2_Config>
 80088ba:	4603      	mov	r3, r0
 80088bc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80088c0:	e004      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80088c8:	e000      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 80088ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088cc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10c      	bne.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80088d4:	4b8f      	ldr	r3, [pc, #572]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80088d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088da:	f023 0207 	bic.w	r2, r3, #7
 80088de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80088e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088e4:	498b      	ldr	r1, [pc, #556]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80088ec:	e003      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ee:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80088f2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80088f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008902:	61bb      	str	r3, [r7, #24]
 8008904:	2300      	movs	r3, #0
 8008906:	61fb      	str	r3, [r7, #28]
 8008908:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800890c:	460b      	mov	r3, r1
 800890e:	4313      	orrs	r3, r2
 8008910:	d03c      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8008912:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008918:	2b20      	cmp	r3, #32
 800891a:	d01f      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800891c:	2b20      	cmp	r3, #32
 800891e:	d819      	bhi.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8008920:	2b18      	cmp	r3, #24
 8008922:	d01d      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8008924:	2b18      	cmp	r3, #24
 8008926:	d815      	bhi.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 800892c:	2b08      	cmp	r3, #8
 800892e:	d007      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008930:	e010      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008932:	4b78      	ldr	r3, [pc, #480]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008936:	4a77      	ldr	r2, [pc, #476]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800893c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800893e:	e010      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008940:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008944:	3308      	adds	r3, #8
 8008946:	4618      	mov	r0, r3
 8008948:	f001 fb1c 	bl	8009f84 <RCCEx_PLL2_Config>
 800894c:	4603      	mov	r3, r0
 800894e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008952:	e006      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800895a:	e002      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 800895c:	bf00      	nop
 800895e:	e000      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8008960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008962:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10c      	bne.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800896a:	4b6a      	ldr	r3, [pc, #424]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800896c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008970:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8008974:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800897a:	4966      	ldr	r1, [pc, #408]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800897c:	4313      	orrs	r3, r2
 800897e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008982:	e003      	b.n	800898c <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008984:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008988:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800898c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008994:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008998:	613b      	str	r3, [r7, #16]
 800899a:	2300      	movs	r3, #0
 800899c:	617b      	str	r3, [r7, #20]
 800899e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80089a2:	460b      	mov	r3, r1
 80089a4:	4313      	orrs	r3, r2
 80089a6:	d03e      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80089a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80089ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089b2:	d020      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 80089b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089b8:	d819      	bhi.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0xade>
 80089ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80089bc:	d01d      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80089be:	2bc0      	cmp	r3, #192	@ 0xc0
 80089c0:	d815      	bhi.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0xade>
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0xabc>
 80089c6:	2b40      	cmp	r3, #64	@ 0x40
 80089c8:	d007      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0xaca>
 80089ca:	e010      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089cc:	4b51      	ldr	r3, [pc, #324]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80089ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d0:	4a50      	ldr	r2, [pc, #320]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80089d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089d6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80089d8:	e010      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80089da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80089de:	3308      	adds	r3, #8
 80089e0:	4618      	mov	r0, r3
 80089e2:	f001 facf 	bl	8009f84 <RCCEx_PLL2_Config>
 80089e6:	4603      	mov	r3, r0
 80089e8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80089ec:	e006      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80089f4:	e002      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80089f6:	bf00      	nop
 80089f8:	e000      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80089fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089fc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10c      	bne.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008a04:	4b43      	ldr	r3, [pc, #268]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a0a:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8008a0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a14:	493f      	ldr	r1, [pc, #252]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008a1c:	e003      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a1e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008a22:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2e:	2100      	movs	r1, #0
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	f003 0304 	and.w	r3, r3, #4
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	d038      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8008a42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a4c:	d00e      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8008a4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a52:	d815      	bhi.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d017      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8008a58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a5c:	d110      	bne.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a62:	4a2c      	ldr	r2, [pc, #176]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a68:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008a6a:	e00e      	b.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008a6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a70:	3308      	adds	r3, #8
 8008a72:	4618      	mov	r0, r3
 8008a74:	f001 fa86 	bl	8009f84 <RCCEx_PLL2_Config>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008a7e:	e004      	b.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008a86:	e000      	b.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8008a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a8a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10c      	bne.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8008a92:	4b20      	ldr	r3, [pc, #128]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008a94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008a9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aa2:	491c      	ldr	r1, [pc, #112]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8008aaa:	e003      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aac:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008ab0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008ab4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abc:	2100      	movs	r1, #0
 8008abe:	6039      	str	r1, [r7, #0]
 8008ac0:	f003 0310 	and.w	r3, r3, #16
 8008ac4:	607b      	str	r3, [r7, #4]
 8008ac6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008aca:	460b      	mov	r3, r1
 8008acc:	4313      	orrs	r3, r2
 8008ace:	d039      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8008ad0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008ad4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ad6:	2b30      	cmp	r3, #48	@ 0x30
 8008ad8:	d01e      	beq.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008ada:	2b30      	cmp	r3, #48	@ 0x30
 8008adc:	d815      	bhi.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8008ade:	2b10      	cmp	r3, #16
 8008ae0:	d002      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8008ae2:	2b20      	cmp	r3, #32
 8008ae4:	d007      	beq.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8008ae6:	e010      	b.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aec:	4a09      	ldr	r2, [pc, #36]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008aee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008af2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8008af4:	e011      	b.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008af6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008afa:	3308      	adds	r3, #8
 8008afc:	4618      	mov	r0, r3
 8008afe:	f001 fa41 	bl	8009f84 <RCCEx_PLL2_Config>
 8008b02:	4603      	mov	r3, r0
 8008b04:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8008b08:	e007      	b.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008b10:	e003      	b.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8008b12:	bf00      	nop
 8008b14:	44020c00 	.word	0x44020c00
        break;
 8008b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b1a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10c      	bne.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8008b22:	4b0c      	ldr	r3, [pc, #48]	@ (8008b54 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008b24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008b2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008b30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b32:	4908      	ldr	r1, [pc, #32]	@ (8008b54 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008b3a:	e003      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b3c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008b40:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8008b44:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	37a8      	adds	r7, #168	@ 0xa8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b52:	bf00      	nop
 8008b54:	44020c00 	.word	0x44020c00

08008b58 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b08b      	sub	sp, #44	@ 0x2c
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008b60:	4bae      	ldr	r3, [pc, #696]	@ (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b68:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008b6a:	4bac      	ldr	r3, [pc, #688]	@ (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b6e:	f003 0303 	and.w	r3, r3, #3
 8008b72:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008b74:	4ba9      	ldr	r3, [pc, #676]	@ (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b78:	0a1b      	lsrs	r3, r3, #8
 8008b7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b7e:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008b80:	4ba6      	ldr	r3, [pc, #664]	@ (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b84:	091b      	lsrs	r3, r3, #4
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008b8c:	4ba3      	ldr	r3, [pc, #652]	@ (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b90:	08db      	lsrs	r3, r3, #3
 8008b92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	fb02 f303 	mul.w	r3, r2, r3
 8008b9c:	ee07 3a90 	vmov	s15, r3
 8008ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 8126 	beq.w	8008dfc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	2b03      	cmp	r3, #3
 8008bb4:	d053      	beq.n	8008c5e <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	2b03      	cmp	r3, #3
 8008bba:	d86f      	bhi.n	8008c9c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d003      	beq.n	8008bca <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d02b      	beq.n	8008c20 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8008bc8:	e068      	b.n	8008c9c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008bca:	4b94      	ldr	r3, [pc, #592]	@ (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	08db      	lsrs	r3, r3, #3
 8008bd0:	f003 0303 	and.w	r3, r3, #3
 8008bd4:	4a92      	ldr	r2, [pc, #584]	@ (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8008bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8008bda:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	ee07 3a90 	vmov	s15, r3
 8008be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	ee07 3a90 	vmov	s15, r3
 8008bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bf4:	6a3b      	ldr	r3, [r7, #32]
 8008bf6:	ee07 3a90 	vmov	s15, r3
 8008bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bfe:	ed97 6a04 	vldr	s12, [r7, #16]
 8008c02:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8008e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c1a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008c1e:	e068      	b.n	8008cf2 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	ee07 3a90 	vmov	s15, r3
 8008c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c2a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8008e28 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8008c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c32:	6a3b      	ldr	r3, [r7, #32]
 8008c34:	ee07 3a90 	vmov	s15, r3
 8008c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c3c:	ed97 6a04 	vldr	s12, [r7, #16]
 8008c40:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008c44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c58:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008c5c:	e049      	b.n	8008cf2 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	ee07 3a90 	vmov	s15, r3
 8008c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c68:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8008c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	ee07 3a90 	vmov	s15, r3
 8008c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c7a:	ed97 6a04 	vldr	s12, [r7, #16]
 8008c7e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8008e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c96:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008c9a:	e02a      	b.n	8008cf2 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c9c:	4b5f      	ldr	r3, [pc, #380]	@ (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	08db      	lsrs	r3, r3, #3
 8008ca2:	f003 0303 	and.w	r3, r3, #3
 8008ca6:	4a5e      	ldr	r2, [pc, #376]	@ (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8008ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8008cac:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	ee07 3a90 	vmov	s15, r3
 8008cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	ee07 3a90 	vmov	s15, r3
 8008cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	ee07 3a90 	vmov	s15, r3
 8008ccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cd0:	ed97 6a04 	vldr	s12, [r7, #16]
 8008cd4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008cd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ce0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ce4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008cf0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cfe:	d121      	bne.n	8008d44 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008d00:	4b46      	ldr	r3, [pc, #280]	@ (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d017      	beq.n	8008d3c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008d0c:	4b43      	ldr	r3, [pc, #268]	@ (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d10:	0a5b      	lsrs	r3, r3, #9
 8008d12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d16:	ee07 3a90 	vmov	s15, r3
 8008d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8008d1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d22:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008d26:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008d2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d32:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	601a      	str	r2, [r3, #0]
 8008d3a:	e006      	b.n	8008d4a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	e002      	b.n	8008d4a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d4a:	4b34      	ldr	r3, [pc, #208]	@ (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d56:	d121      	bne.n	8008d9c <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008d58:	4b30      	ldr	r3, [pc, #192]	@ (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d017      	beq.n	8008d94 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008d64:	4b2d      	ldr	r3, [pc, #180]	@ (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d68:	0c1b      	lsrs	r3, r3, #16
 8008d6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d6e:	ee07 3a90 	vmov	s15, r3
 8008d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008d76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d7a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008d7e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d8a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	605a      	str	r2, [r3, #4]
 8008d92:	e006      	b.n	8008da2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	605a      	str	r2, [r3, #4]
 8008d9a:	e002      	b.n	8008da2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008da2:	4b1e      	ldr	r3, [pc, #120]	@ (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008daa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008dae:	d121      	bne.n	8008df4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008db0:	4b1a      	ldr	r3, [pc, #104]	@ (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d017      	beq.n	8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008dbc:	4b17      	ldr	r3, [pc, #92]	@ (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dc0:	0e1b      	lsrs	r3, r3, #24
 8008dc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dc6:	ee07 3a90 	vmov	s15, r3
 8008dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8008dce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dd2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008dd6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008de2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008dea:	e010      	b.n	8008e0e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	609a      	str	r2, [r3, #8]
}
 8008df2:	e00c      	b.n	8008e0e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	609a      	str	r2, [r3, #8]
}
 8008dfa:	e008      	b.n	8008e0e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	609a      	str	r2, [r3, #8]
}
 8008e0e:	bf00      	nop
 8008e10:	372c      	adds	r7, #44	@ 0x2c
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	44020c00 	.word	0x44020c00
 8008e20:	03d09000 	.word	0x03d09000
 8008e24:	46000000 	.word	0x46000000
 8008e28:	4a742400 	.word	0x4a742400
 8008e2c:	4bbebc20 	.word	0x4bbebc20

08008e30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b08b      	sub	sp, #44	@ 0x2c
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008e38:	4bae      	ldr	r3, [pc, #696]	@ (80090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e40:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008e42:	4bac      	ldr	r3, [pc, #688]	@ (80090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e46:	f003 0303 	and.w	r3, r3, #3
 8008e4a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8008e4c:	4ba9      	ldr	r3, [pc, #676]	@ (80090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e50:	0a1b      	lsrs	r3, r3, #8
 8008e52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e56:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8008e58:	4ba6      	ldr	r3, [pc, #664]	@ (80090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5c:	091b      	lsrs	r3, r3, #4
 8008e5e:	f003 0301 	and.w	r3, r3, #1
 8008e62:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008e64:	4ba3      	ldr	r3, [pc, #652]	@ (80090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e68:	08db      	lsrs	r3, r3, #3
 8008e6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	fb02 f303 	mul.w	r3, r2, r3
 8008e74:	ee07 3a90 	vmov	s15, r3
 8008e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f000 8126 	beq.w	80090d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	d053      	beq.n	8008f36 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	2b03      	cmp	r3, #3
 8008e92:	d86f      	bhi.n	8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d003      	beq.n	8008ea2 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d02b      	beq.n	8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008ea0:	e068      	b.n	8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ea2:	4b94      	ldr	r3, [pc, #592]	@ (80090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	08db      	lsrs	r3, r3, #3
 8008ea8:	f003 0303 	and.w	r3, r3, #3
 8008eac:	4a92      	ldr	r2, [pc, #584]	@ (80090f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8008eae:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	ee07 3a90 	vmov	s15, r3
 8008eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	ee07 3a90 	vmov	s15, r3
 8008ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed6:	ed97 6a04 	vldr	s12, [r7, #16]
 8008eda:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80090fc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008ef6:	e068      	b.n	8008fca <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	ee07 3a90 	vmov	s15, r3
 8008efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f02:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8009100 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8008f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f0a:	6a3b      	ldr	r3, [r7, #32]
 8008f0c:	ee07 3a90 	vmov	s15, r3
 8008f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f14:	ed97 6a04 	vldr	s12, [r7, #16]
 8008f18:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80090fc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008f1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f30:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008f34:	e049      	b.n	8008fca <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	ee07 3a90 	vmov	s15, r3
 8008f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f40:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009104 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8008f44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f48:	6a3b      	ldr	r3, [r7, #32]
 8008f4a:	ee07 3a90 	vmov	s15, r3
 8008f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f52:	ed97 6a04 	vldr	s12, [r7, #16]
 8008f56:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80090fc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f6e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008f72:	e02a      	b.n	8008fca <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f74:	4b5f      	ldr	r3, [pc, #380]	@ (80090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	08db      	lsrs	r3, r3, #3
 8008f7a:	f003 0303 	and.w	r3, r3, #3
 8008f7e:	4a5e      	ldr	r2, [pc, #376]	@ (80090f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8008f80:	fa22 f303 	lsr.w	r3, r2, r3
 8008f84:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	ee07 3a90 	vmov	s15, r3
 8008f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	ee07 3a90 	vmov	s15, r3
 8008f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f9e:	6a3b      	ldr	r3, [r7, #32]
 8008fa0:	ee07 3a90 	vmov	s15, r3
 8008fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fa8:	ed97 6a04 	vldr	s12, [r7, #16]
 8008fac:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80090fc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fc4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008fc8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fca:	4b4a      	ldr	r3, [pc, #296]	@ (80090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fd6:	d121      	bne.n	800901c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008fd8:	4b46      	ldr	r3, [pc, #280]	@ (80090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d017      	beq.n	8009014 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008fe4:	4b43      	ldr	r3, [pc, #268]	@ (80090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fe8:	0a5b      	lsrs	r3, r3, #9
 8008fea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fee:	ee07 3a90 	vmov	s15, r3
 8008ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8008ff6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ffa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008ffe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800900a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	601a      	str	r2, [r3, #0]
 8009012:	e006      	b.n	8009022 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	e002      	b.n	8009022 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009022:	4b34      	ldr	r3, [pc, #208]	@ (80090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800902a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800902e:	d121      	bne.n	8009074 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009030:	4b30      	ldr	r3, [pc, #192]	@ (80090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009038:	2b00      	cmp	r3, #0
 800903a:	d017      	beq.n	800906c <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800903c:	4b2d      	ldr	r3, [pc, #180]	@ (80090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800903e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009040:	0c1b      	lsrs	r3, r3, #16
 8009042:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009046:	ee07 3a90 	vmov	s15, r3
 800904a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800904e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009052:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8009056:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800905a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800905e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009062:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	605a      	str	r2, [r3, #4]
 800906a:	e006      	b.n	800907a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	605a      	str	r2, [r3, #4]
 8009072:	e002      	b.n	800907a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800907a:	4b1e      	ldr	r3, [pc, #120]	@ (80090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009082:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009086:	d121      	bne.n	80090cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8009088:	4b1a      	ldr	r3, [pc, #104]	@ (80090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800908a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d017      	beq.n	80090c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009094:	4b17      	ldr	r3, [pc, #92]	@ (80090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009098:	0e1b      	lsrs	r3, r3, #24
 800909a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800909e:	ee07 3a90 	vmov	s15, r3
 80090a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80090a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090aa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80090ae:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80090b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090ba:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80090c2:	e010      	b.n	80090e6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	609a      	str	r2, [r3, #8]
}
 80090ca:	e00c      	b.n	80090e6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	609a      	str	r2, [r3, #8]
}
 80090d2:	e008      	b.n	80090e6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	609a      	str	r2, [r3, #8]
}
 80090e6:	bf00      	nop
 80090e8:	372c      	adds	r7, #44	@ 0x2c
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	44020c00 	.word	0x44020c00
 80090f8:	03d09000 	.word	0x03d09000
 80090fc:	46000000 	.word	0x46000000
 8009100:	4a742400 	.word	0x4a742400
 8009104:	4bbebc20 	.word	0x4bbebc20

08009108 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b08c      	sub	sp, #48	@ 0x30
 800910c:	af00      	add	r7, sp, #0
 800910e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8009112:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009116:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800911a:	430b      	orrs	r3, r1
 800911c:	d14b      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800911e:	4bc4      	ldr	r3, [pc, #784]	@ (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8009120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009124:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009128:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800912a:	4bc1      	ldr	r3, [pc, #772]	@ (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800912c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009130:	f003 0302 	and.w	r3, r3, #2
 8009134:	2b02      	cmp	r3, #2
 8009136:	d108      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800913e:	d104      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009140:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009144:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009146:	f000 bf14 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800914a:	4bb9      	ldr	r3, [pc, #740]	@ (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800914c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009150:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009154:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009158:	d108      	bne.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800915a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009160:	d104      	bne.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8009162:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009166:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009168:	f000 bf03 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800916c:	4bb0      	ldr	r3, [pc, #704]	@ (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009174:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009178:	d119      	bne.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800917a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009180:	d115      	bne.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009182:	4bab      	ldr	r3, [pc, #684]	@ (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800918a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800918e:	d30a      	bcc.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8009190:	4ba7      	ldr	r3, [pc, #668]	@ (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8009192:	69db      	ldr	r3, [r3, #28]
 8009194:	0a1b      	lsrs	r3, r3, #8
 8009196:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800919a:	4aa6      	ldr	r2, [pc, #664]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 800919c:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80091a2:	f000 bee6 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 80091a6:	2300      	movs	r3, #0
 80091a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80091aa:	f000 bee2 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80091ae:	2300      	movs	r3, #0
 80091b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091b2:	f000 bede 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80091b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ba:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 80091be:	ea52 0301 	orrs.w	r3, r2, r1
 80091c2:	f000 838e 	beq.w	80098e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 80091c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ca:	2a01      	cmp	r2, #1
 80091cc:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 80091d0:	f080 86cc 	bcs.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80091d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091d8:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 80091dc:	ea52 0301 	orrs.w	r3, r2, r1
 80091e0:	f000 82aa 	beq.w	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80091e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091e8:	2a01      	cmp	r2, #1
 80091ea:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 80091ee:	f080 86bd 	bcs.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80091f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091f6:	f1a3 0110 	sub.w	r1, r3, #16
 80091fa:	ea52 0301 	orrs.w	r3, r2, r1
 80091fe:	f000 8681 	beq.w	8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8009202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009206:	2a01      	cmp	r2, #1
 8009208:	f173 0310 	sbcs.w	r3, r3, #16
 800920c:	f080 86ae 	bcs.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009214:	1f19      	subs	r1, r3, #4
 8009216:	ea52 0301 	orrs.w	r3, r2, r1
 800921a:	f000 84b1 	beq.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800921e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009222:	2a01      	cmp	r2, #1
 8009224:	f173 0304 	sbcs.w	r3, r3, #4
 8009228:	f080 86a0 	bcs.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800922c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009230:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8009234:	430b      	orrs	r3, r1
 8009236:	f000 85aa 	beq.w	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 800923a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800923e:	497e      	ldr	r1, [pc, #504]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8009240:	428a      	cmp	r2, r1
 8009242:	f173 0300 	sbcs.w	r3, r3, #0
 8009246:	f080 8691 	bcs.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800924a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800924e:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8009252:	430b      	orrs	r3, r1
 8009254:	f000 8532 	beq.w	8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8009258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800925c:	4977      	ldr	r1, [pc, #476]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 800925e:	428a      	cmp	r2, r1
 8009260:	f173 0300 	sbcs.w	r3, r3, #0
 8009264:	f080 8682 	bcs.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800926c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8009270:	430b      	orrs	r3, r1
 8009272:	f000 84bc 	beq.w	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8009276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800927a:	4971      	ldr	r1, [pc, #452]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 800927c:	428a      	cmp	r2, r1
 800927e:	f173 0300 	sbcs.w	r3, r3, #0
 8009282:	f080 8673 	bcs.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800928a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800928e:	430b      	orrs	r3, r1
 8009290:	f000 85f2 	beq.w	8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8009294:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009298:	496a      	ldr	r1, [pc, #424]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 800929a:	428a      	cmp	r2, r1
 800929c:	f173 0300 	sbcs.w	r3, r3, #0
 80092a0:	f080 8664 	bcs.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80092a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092a8:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80092ac:	430b      	orrs	r3, r1
 80092ae:	f000 81e5 	beq.w	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80092b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092b6:	4964      	ldr	r1, [pc, #400]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 80092b8:	428a      	cmp	r2, r1
 80092ba:	f173 0300 	sbcs.w	r3, r3, #0
 80092be:	f080 8655 	bcs.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80092c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092c6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80092ca:	430b      	orrs	r3, r1
 80092cc:	f000 83cc 	beq.w	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80092d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092d4:	495d      	ldr	r1, [pc, #372]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 80092d6:	428a      	cmp	r2, r1
 80092d8:	f173 0300 	sbcs.w	r3, r3, #0
 80092dc:	f080 8646 	bcs.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80092e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092e4:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80092e8:	430b      	orrs	r3, r1
 80092ea:	f000 8331 	beq.w	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 80092ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092f2:	4957      	ldr	r1, [pc, #348]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 80092f4:	428a      	cmp	r2, r1
 80092f6:	f173 0300 	sbcs.w	r3, r3, #0
 80092fa:	f080 8637 	bcs.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80092fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009302:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009306:	430b      	orrs	r3, r1
 8009308:	f000 82bb 	beq.w	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 800930c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009310:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8009314:	f173 0300 	sbcs.w	r3, r3, #0
 8009318:	f080 8628 	bcs.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800931c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009320:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009324:	430b      	orrs	r3, r1
 8009326:	f000 826d 	beq.w	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 800932a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800932e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8009332:	428a      	cmp	r2, r1
 8009334:	f173 0300 	sbcs.w	r3, r3, #0
 8009338:	f080 8618 	bcs.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800933c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009340:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009344:	430b      	orrs	r3, r1
 8009346:	f000 821e 	beq.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 800934a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800934e:	f242 0101 	movw	r1, #8193	@ 0x2001
 8009352:	428a      	cmp	r2, r1
 8009354:	f173 0300 	sbcs.w	r3, r3, #0
 8009358:	f080 8608 	bcs.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800935c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009360:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009364:	430b      	orrs	r3, r1
 8009366:	f000 8137 	beq.w	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800936a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800936e:	f241 0101 	movw	r1, #4097	@ 0x1001
 8009372:	428a      	cmp	r2, r1
 8009374:	f173 0300 	sbcs.w	r3, r3, #0
 8009378:	f080 85f8 	bcs.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800937c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009380:	1f11      	subs	r1, r2, #4
 8009382:	430b      	orrs	r3, r1
 8009384:	f000 80d2 	beq.w	800952c <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8009388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800938c:	2a05      	cmp	r2, #5
 800938e:	f173 0300 	sbcs.w	r3, r3, #0
 8009392:	f080 85eb 	bcs.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800939a:	1e51      	subs	r1, r2, #1
 800939c:	430b      	orrs	r3, r1
 800939e:	d006      	beq.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80093a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093a4:	1e91      	subs	r1, r2, #2
 80093a6:	430b      	orrs	r3, r1
 80093a8:	d06c      	beq.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80093aa:	f000 bddf 	b.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80093ae:	4b20      	ldr	r3, [pc, #128]	@ (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80093b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80093b4:	f003 0307 	and.w	r3, r3, #7
 80093b8:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80093ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d104      	bne.n	80093ca <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80093c0:	f7fe fd7a 	bl	8007eb8 <HAL_RCC_GetPCLK2Freq>
 80093c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80093c6:	f000 bdd4 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80093ca:	4b19      	ldr	r3, [pc, #100]	@ (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093d6:	d10a      	bne.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 80093d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d107      	bne.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093de:	f107 030c 	add.w	r3, r7, #12
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff fd24 	bl	8008e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093ec:	e048      	b.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80093ee:	4b10      	ldr	r3, [pc, #64]	@ (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d10c      	bne.n	8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80093fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fc:	2b03      	cmp	r3, #3
 80093fe:	d109      	bne.n	8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009400:	4b0b      	ldr	r3, [pc, #44]	@ (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	08db      	lsrs	r3, r3, #3
 8009406:	f003 0303 	and.w	r3, r3, #3
 800940a:	4a12      	ldr	r2, [pc, #72]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800940c:	fa22 f303 	lsr.w	r3, r2, r3
 8009410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009412:	e035      	b.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8009414:	4b06      	ldr	r3, [pc, #24]	@ (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800941c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009420:	d11c      	bne.n	800945c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8009422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009424:	2b04      	cmp	r3, #4
 8009426:	d119      	bne.n	800945c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8009428:	4b0b      	ldr	r3, [pc, #44]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800942a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800942c:	e028      	b.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800942e:	bf00      	nop
 8009430:	44020c00 	.word	0x44020c00
 8009434:	017d7840 	.word	0x017d7840
 8009438:	20000001 	.word	0x20000001
 800943c:	10000001 	.word	0x10000001
 8009440:	08000001 	.word	0x08000001
 8009444:	04000001 	.word	0x04000001
 8009448:	00200001 	.word	0x00200001
 800944c:	00040001 	.word	0x00040001
 8009450:	00020001 	.word	0x00020001
 8009454:	03d09000 	.word	0x03d09000
 8009458:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800945c:	4b9f      	ldr	r3, [pc, #636]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800945e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009462:	f003 0302 	and.w	r3, r3, #2
 8009466:	2b02      	cmp	r3, #2
 8009468:	d106      	bne.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800946a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946c:	2b05      	cmp	r3, #5
 800946e:	d103      	bne.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8009470:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009474:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009476:	e003      	b.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8009478:	2300      	movs	r3, #0
 800947a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800947c:	f000 bd79 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009480:	f000 bd77 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009484:	4b95      	ldr	r3, [pc, #596]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8009486:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800948a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800948e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009492:	2b00      	cmp	r3, #0
 8009494:	d104      	bne.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009496:	f7fe fcf9 	bl	8007e8c <HAL_RCC_GetPCLK1Freq>
 800949a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800949c:	f000 bd69 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80094a0:	4b8e      	ldr	r3, [pc, #568]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094ac:	d10a      	bne.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80094ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b0:	2b08      	cmp	r3, #8
 80094b2:	d107      	bne.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094b4:	f107 030c 	add.w	r3, r7, #12
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7ff fcb9 	bl	8008e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094c2:	e031      	b.n	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80094c4:	4b85      	ldr	r3, [pc, #532]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0302 	and.w	r3, r3, #2
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d10c      	bne.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80094d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d2:	2b18      	cmp	r3, #24
 80094d4:	d109      	bne.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80094d6:	4b81      	ldr	r3, [pc, #516]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	08db      	lsrs	r3, r3, #3
 80094dc:	f003 0303 	and.w	r3, r3, #3
 80094e0:	4a7f      	ldr	r2, [pc, #508]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80094e2:	fa22 f303 	lsr.w	r3, r2, r3
 80094e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094e8:	e01e      	b.n	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80094ea:	4b7c      	ldr	r3, [pc, #496]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094f6:	d105      	bne.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80094f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094fa:	2b20      	cmp	r3, #32
 80094fc:	d102      	bne.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 80094fe:	4b79      	ldr	r3, [pc, #484]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8009500:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009502:	e011      	b.n	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009504:	4b75      	ldr	r3, [pc, #468]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8009506:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800950a:	f003 0302 	and.w	r3, r3, #2
 800950e:	2b02      	cmp	r3, #2
 8009510:	d106      	bne.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8009512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009514:	2b28      	cmp	r3, #40	@ 0x28
 8009516:	d103      	bne.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8009518:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800951c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800951e:	e003      	b.n	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8009520:	2300      	movs	r3, #0
 8009522:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009524:	f000 bd25 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009528:	f000 bd23 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800952c:	4b6b      	ldr	r3, [pc, #428]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800952e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009532:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009536:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800953a:	2b00      	cmp	r3, #0
 800953c:	d104      	bne.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800953e:	f7fe fca5 	bl	8007e8c <HAL_RCC_GetPCLK1Freq>
 8009542:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8009544:	f000 bd15 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8009548:	4b64      	ldr	r3, [pc, #400]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009550:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009554:	d10a      	bne.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8009556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009558:	2b40      	cmp	r3, #64	@ 0x40
 800955a:	d107      	bne.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800955c:	f107 030c 	add.w	r3, r7, #12
 8009560:	4618      	mov	r0, r3
 8009562:	f7ff fc65 	bl	8008e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800956a:	e033      	b.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800956c:	4b5b      	ldr	r3, [pc, #364]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 0302 	and.w	r3, r3, #2
 8009574:	2b02      	cmp	r3, #2
 8009576:	d10c      	bne.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800957a:	2bc0      	cmp	r3, #192	@ 0xc0
 800957c:	d109      	bne.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800957e:	4b57      	ldr	r3, [pc, #348]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	08db      	lsrs	r3, r3, #3
 8009584:	f003 0303 	and.w	r3, r3, #3
 8009588:	4a55      	ldr	r2, [pc, #340]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800958a:	fa22 f303 	lsr.w	r3, r2, r3
 800958e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009590:	e020      	b.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8009592:	4b52      	ldr	r3, [pc, #328]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800959a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800959e:	d106      	bne.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 80095a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095a6:	d102      	bne.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 80095a8:	4b4e      	ldr	r3, [pc, #312]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80095aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095ac:	e012      	b.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80095ae:	4b4b      	ldr	r3, [pc, #300]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80095b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095b4:	f003 0302 	and.w	r3, r3, #2
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d107      	bne.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80095bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095be:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80095c2:	d103      	bne.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 80095c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095ca:	e003      	b.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 80095cc:	2300      	movs	r3, #0
 80095ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80095d0:	f000 bccf 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80095d4:	f000 bccd 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80095d8:	4b40      	ldr	r3, [pc, #256]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80095da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095de:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80095e2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80095e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d104      	bne.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80095ea:	f7fe fc7b 	bl	8007ee4 <HAL_RCC_GetPCLK3Freq>
 80095ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80095f0:	f000 bcbf 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80095f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095fa:	d108      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095fc:	f107 030c 	add.w	r3, r7, #12
 8009600:	4618      	mov	r0, r3
 8009602:	f7ff fc15 	bl	8008e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800960a:	f000 bcb2 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800960e:	4b33      	ldr	r3, [pc, #204]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0302 	and.w	r3, r3, #2
 8009616:	2b02      	cmp	r3, #2
 8009618:	d10d      	bne.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 800961a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009620:	d109      	bne.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009622:	4b2e      	ldr	r3, [pc, #184]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	08db      	lsrs	r3, r3, #3
 8009628:	f003 0303 	and.w	r3, r3, #3
 800962c:	4a2c      	ldr	r2, [pc, #176]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800962e:	fa22 f303 	lsr.w	r3, r2, r3
 8009632:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009634:	e020      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8009636:	4b29      	ldr	r3, [pc, #164]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800963e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009642:	d106      	bne.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8009644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009646:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800964a:	d102      	bne.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 800964c:	4b25      	ldr	r3, [pc, #148]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800964e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009650:	e012      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009652:	4b22      	ldr	r3, [pc, #136]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8009654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009658:	f003 0302 	and.w	r3, r3, #2
 800965c:	2b02      	cmp	r3, #2
 800965e:	d107      	bne.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8009660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009662:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009666:	d103      	bne.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8009668:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800966c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800966e:	e003      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8009670:	2300      	movs	r3, #0
 8009672:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009674:	f000 bc7d 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009678:	f000 bc7b 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800967c:	4b17      	ldr	r3, [pc, #92]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800967e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009682:	f003 0307 	and.w	r3, r3, #7
 8009686:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800968a:	2b00      	cmp	r3, #0
 800968c:	d104      	bne.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800968e:	f7fe fbe1 	bl	8007e54 <HAL_RCC_GetHCLKFreq>
 8009692:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8009694:	f000 bc6d 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8009698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969a:	2b01      	cmp	r3, #1
 800969c:	d104      	bne.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 800969e:	f7fe faad 	bl	8007bfc <HAL_RCC_GetSysClockFreq>
 80096a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 80096a4:	f000 bc65 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80096a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d108      	bne.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096ae:	f107 030c 	add.w	r3, r7, #12
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7ff fbbc 	bl	8008e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80096bc:	f000 bc59 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80096c0:	4b06      	ldr	r3, [pc, #24]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096cc:	d10e      	bne.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80096ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d0:	2b03      	cmp	r3, #3
 80096d2:	d10b      	bne.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 80096d4:	4b04      	ldr	r3, [pc, #16]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80096d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096d8:	e02c      	b.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 80096da:	bf00      	nop
 80096dc:	44020c00 	.word	0x44020c00
 80096e0:	03d09000 	.word	0x03d09000
 80096e4:	003d0900 	.word	0x003d0900
 80096e8:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80096ec:	4b95      	ldr	r3, [pc, #596]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0302 	and.w	r3, r3, #2
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d10c      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 80096f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096fa:	2b04      	cmp	r3, #4
 80096fc:	d109      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096fe:	4b91      	ldr	r3, [pc, #580]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	08db      	lsrs	r3, r3, #3
 8009704:	f003 0303 	and.w	r3, r3, #3
 8009708:	4a8f      	ldr	r2, [pc, #572]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800970a:	fa22 f303 	lsr.w	r3, r2, r3
 800970e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009710:	e010      	b.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8009712:	4b8c      	ldr	r3, [pc, #560]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800971a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800971e:	d105      	bne.n	800972c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8009720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009722:	2b05      	cmp	r3, #5
 8009724:	d102      	bne.n	800972c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8009726:	4b89      	ldr	r3, [pc, #548]	@ (800994c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009728:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800972a:	e003      	b.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 800972c:	2300      	movs	r3, #0
 800972e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009730:	f000 bc1f 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009734:	f000 bc1d 	b.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8009738:	4b82      	ldr	r3, [pc, #520]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800973a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800973e:	f003 0308 	and.w	r3, r3, #8
 8009742:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8009744:	4b7f      	ldr	r3, [pc, #508]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009746:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800974a:	f003 0302 	and.w	r3, r3, #2
 800974e:	2b02      	cmp	r3, #2
 8009750:	d106      	bne.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8009752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009754:	2b00      	cmp	r3, #0
 8009756:	d103      	bne.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8009758:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800975c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800975e:	e011      	b.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8009760:	4b78      	ldr	r3, [pc, #480]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009762:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009766:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800976a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800976e:	d106      	bne.n	800977e <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8009770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009772:	2b08      	cmp	r3, #8
 8009774:	d103      	bne.n	800977e <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8009776:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800977a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800977c:	e002      	b.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800977e:	2300      	movs	r3, #0
 8009780:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8009782:	e3f6      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009784:	e3f5      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009786:	4b6f      	ldr	r3, [pc, #444]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009788:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800978c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009790:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009794:	2b00      	cmp	r3, #0
 8009796:	d103      	bne.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009798:	f7fe fb78 	bl	8007e8c <HAL_RCC_GetPCLK1Freq>
 800979c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800979e:	e3e8      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 80097a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097a6:	d107      	bne.n	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097a8:	f107 030c 	add.w	r3, r7, #12
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7ff fb3f 	bl	8008e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80097b6:	e3dc      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80097b8:	4b62      	ldr	r3, [pc, #392]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f003 0302 	and.w	r3, r3, #2
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d10d      	bne.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80097c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097ca:	d109      	bne.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80097cc:	4b5d      	ldr	r3, [pc, #372]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	08db      	lsrs	r3, r3, #3
 80097d2:	f003 0303 	and.w	r3, r3, #3
 80097d6:	4a5c      	ldr	r2, [pc, #368]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80097d8:	fa22 f303 	lsr.w	r3, r2, r3
 80097dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097de:	e010      	b.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80097e0:	4b58      	ldr	r3, [pc, #352]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097ec:	d106      	bne.n	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80097ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80097f4:	d102      	bne.n	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 80097f6:	4b55      	ldr	r3, [pc, #340]	@ (800994c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80097f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097fa:	e002      	b.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 80097fc:	2300      	movs	r3, #0
 80097fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009800:	e3b7      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009802:	e3b6      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009804:	4b4f      	ldr	r3, [pc, #316]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009806:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800980a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800980e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009812:	2b00      	cmp	r3, #0
 8009814:	d103      	bne.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009816:	f7fe fb39 	bl	8007e8c <HAL_RCC_GetPCLK1Freq>
 800981a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800981c:	e3a9      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 800981e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009820:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009824:	d107      	bne.n	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009826:	f107 030c 	add.w	r3, r7, #12
 800982a:	4618      	mov	r0, r3
 800982c:	f7ff fb00 	bl	8008e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009834:	e39d      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009836:	4b43      	ldr	r3, [pc, #268]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 0302 	and.w	r3, r3, #2
 800983e:	2b02      	cmp	r3, #2
 8009840:	d10d      	bne.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8009842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009844:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009848:	d109      	bne.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800984a:	4b3e      	ldr	r3, [pc, #248]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	08db      	lsrs	r3, r3, #3
 8009850:	f003 0303 	and.w	r3, r3, #3
 8009854:	4a3c      	ldr	r2, [pc, #240]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009856:	fa22 f303 	lsr.w	r3, r2, r3
 800985a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800985c:	e010      	b.n	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800985e:	4b39      	ldr	r3, [pc, #228]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009866:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800986a:	d106      	bne.n	800987a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800986c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009872:	d102      	bne.n	800987a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8009874:	4b35      	ldr	r3, [pc, #212]	@ (800994c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009876:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009878:	e002      	b.n	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 800987a:	2300      	movs	r3, #0
 800987c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800987e:	e378      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009880:	e377      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8009882:	4b30      	ldr	r3, [pc, #192]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009884:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009888:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800988c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800988e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009890:	2b00      	cmp	r3, #0
 8009892:	d103      	bne.n	800989c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009894:	f7fe fafa 	bl	8007e8c <HAL_RCC_GetPCLK1Freq>
 8009898:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800989a:	e36a      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 800989c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800989e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80098a2:	d107      	bne.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098a4:	f107 030c 	add.w	r3, r7, #12
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7ff fac1 	bl	8008e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80098b2:	e35e      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80098b4:	4b23      	ldr	r3, [pc, #140]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 0302 	and.w	r3, r3, #2
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d10d      	bne.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 80098c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098c6:	d109      	bne.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80098c8:	4b1e      	ldr	r3, [pc, #120]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	08db      	lsrs	r3, r3, #3
 80098ce:	f003 0303 	and.w	r3, r3, #3
 80098d2:	4a1d      	ldr	r2, [pc, #116]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80098d4:	fa22 f303 	lsr.w	r3, r2, r3
 80098d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80098da:	e34a      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80098dc:	2300      	movs	r3, #0
 80098de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80098e0:	e347      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 80098e2:	4b18      	ldr	r3, [pc, #96]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80098e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80098e8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80098ec:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 80098ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d103      	bne.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80098f4:	f7fe faf6 	bl	8007ee4 <HAL_RCC_GetPCLK3Freq>
 80098f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80098fa:	e33a      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 80098fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009902:	d107      	bne.n	8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009904:	f107 030c 	add.w	r3, r7, #12
 8009908:	4618      	mov	r0, r3
 800990a:	f7ff fa91 	bl	8008e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009912:	e32e      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8009914:	4b0b      	ldr	r3, [pc, #44]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f003 0302 	and.w	r3, r3, #2
 800991c:	2b02      	cmp	r3, #2
 800991e:	d10d      	bne.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8009920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009922:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009926:	d109      	bne.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009928:	4b06      	ldr	r3, [pc, #24]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	08db      	lsrs	r3, r3, #3
 800992e:	f003 0303 	and.w	r3, r3, #3
 8009932:	4a05      	ldr	r2, [pc, #20]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009934:	fa22 f303 	lsr.w	r3, r2, r3
 8009938:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800993a:	e31a      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009940:	e317      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009942:	bf00      	nop
 8009944:	44020c00 	.word	0x44020c00
 8009948:	03d09000 	.word	0x03d09000
 800994c:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009950:	4b9b      	ldr	r3, [pc, #620]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009952:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009956:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800995a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800995c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009962:	d044      	beq.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009966:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800996a:	d879      	bhi.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800996c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800996e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009972:	d02d      	beq.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8009974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800997a:	d871      	bhi.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800997c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800997e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009982:	d017      	beq.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8009984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009986:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800998a:	d869      	bhi.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800998c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998e:	2b00      	cmp	r3, #0
 8009990:	d004      	beq.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8009992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009998:	d004      	beq.n	80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 800999a:	e061      	b.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800999c:	f7fe faa2 	bl	8007ee4 <HAL_RCC_GetPCLK3Freq>
 80099a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 80099a2:	e060      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099a4:	f107 030c 	add.w	r3, r7, #12
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7ff fa41 	bl	8008e30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80099b2:	e058      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80099b4:	4b82      	ldr	r3, [pc, #520]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80099b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099ba:	f003 0302 	and.w	r3, r3, #2
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d103      	bne.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 80099c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80099c8:	e04d      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 80099ca:	2300      	movs	r3, #0
 80099cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80099ce:	e04a      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80099d0:	4b7b      	ldr	r3, [pc, #492]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80099d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099de:	d103      	bne.n	80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 80099e0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80099e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80099e6:	e03e      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80099ec:	e03b      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099ee:	4b74      	ldr	r3, [pc, #464]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80099f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80099f4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80099f8:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099fa:	4b71      	ldr	r3, [pc, #452]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 0302 	and.w	r3, r3, #2
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d10c      	bne.n	8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8009a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d109      	bne.n	8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a0c:	4b6c      	ldr	r3, [pc, #432]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	08db      	lsrs	r3, r3, #3
 8009a12:	f003 0303 	and.w	r3, r3, #3
 8009a16:	4a6b      	ldr	r2, [pc, #428]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8009a18:	fa22 f303 	lsr.w	r3, r2, r3
 8009a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a1e:	e01e      	b.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a20:	4b67      	ldr	r3, [pc, #412]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a2c:	d106      	bne.n	8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8009a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a34:	d102      	bne.n	8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009a36:	4b64      	ldr	r3, [pc, #400]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8009a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a3a:	e010      	b.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a3c:	4b60      	ldr	r3, [pc, #384]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a48:	d106      	bne.n	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a50:	d102      	bne.n	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009a52:	4b5e      	ldr	r3, [pc, #376]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8009a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a56:	e002      	b.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8009a5c:	e003      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8009a5e:	e002      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8009a60:	2300      	movs	r3, #0
 8009a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009a64:	bf00      	nop
          }
        }
        break;
 8009a66:	e284      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009a68:	4b55      	ldr	r3, [pc, #340]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009a6a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009a6e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009a72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a76:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009a7a:	d044      	beq.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8009a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a7e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009a82:	d879      	bhi.n	8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8009a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a8a:	d02d      	beq.n	8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8009a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a92:	d871      	bhi.n	8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8009a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009a9a:	d017      	beq.n	8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8009a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009aa2:	d869      	bhi.n	8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8009aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d004      	beq.n	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8009aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ab0:	d004      	beq.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8009ab2:	e061      	b.n	8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8009ab4:	f7fe f9ea 	bl	8007e8c <HAL_RCC_GetPCLK1Freq>
 8009ab8:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8009aba:	e060      	b.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009abc:	f107 030c 	add.w	r3, r7, #12
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7ff f9b5 	bl	8008e30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009aca:	e058      	b.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009acc:	4b3c      	ldr	r3, [pc, #240]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ad2:	f003 0302 	and.w	r3, r3, #2
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d103      	bne.n	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8009ada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8009ae0:	e04d      	b.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009ae6:	e04a      	b.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009ae8:	4b35      	ldr	r3, [pc, #212]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009aee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009af2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009af6:	d103      	bne.n	8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8009af8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8009afe:	e03e      	b.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8009b00:	2300      	movs	r3, #0
 8009b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009b04:	e03b      	b.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b06:	4b2e      	ldr	r3, [pc, #184]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b0c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009b10:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b12:	4b2b      	ldr	r3, [pc, #172]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f003 0302 	and.w	r3, r3, #2
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d10c      	bne.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d109      	bne.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b24:	4b26      	ldr	r3, [pc, #152]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	08db      	lsrs	r3, r3, #3
 8009b2a:	f003 0303 	and.w	r3, r3, #3
 8009b2e:	4a25      	ldr	r2, [pc, #148]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8009b30:	fa22 f303 	lsr.w	r3, r2, r3
 8009b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b36:	e01e      	b.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b38:	4b21      	ldr	r3, [pc, #132]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b44:	d106      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8009b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b4c:	d102      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8009b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b52:	e010      	b.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b54:	4b1a      	ldr	r3, [pc, #104]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b60:	d106      	bne.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8009b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b68:	d102      	bne.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009b6a:	4b18      	ldr	r3, [pc, #96]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8009b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b6e:	e002      	b.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009b70:	2300      	movs	r3, #0
 8009b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8009b74:	e003      	b.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8009b76:	e002      	b.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009b7c:	bf00      	nop
          }
        }
        break;
 8009b7e:	e1f8      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009b80:	4b0f      	ldr	r3, [pc, #60]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009b82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b8a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b98:	d105      	bne.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8009b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d102      	bne.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8009ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8009ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8009ba4:	e1e5      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bac:	d110      	bne.n	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bae:	f107 0318 	add.w	r3, r7, #24
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fe ffd0 	bl	8008b58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009bbc:	e1d9      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009bbe:	bf00      	nop
 8009bc0:	44020c00 	.word	0x44020c00
 8009bc4:	03d09000 	.word	0x03d09000
 8009bc8:	003d0900 	.word	0x003d0900
 8009bcc:	017d7840 	.word	0x017d7840
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bd6:	d107      	bne.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bd8:	f107 030c 	add.w	r3, r7, #12
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7ff f927 	bl	8008e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009be6:	e1c4      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009bec:	e1c1      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009bee:	4b9d      	ldr	r3, [pc, #628]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009bf4:	f003 0307 	and.w	r3, r3, #7
 8009bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bfc:	2b04      	cmp	r3, #4
 8009bfe:	d859      	bhi.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8009c00:	a201      	add	r2, pc, #4	@ (adr r2, 8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c06:	bf00      	nop
 8009c08:	08009c1d 	.word	0x08009c1d
 8009c0c:	08009c2d 	.word	0x08009c2d
 8009c10:	08009cb5 	.word	0x08009cb5
 8009c14:	08009c3d 	.word	0x08009c3d
 8009c18:	08009c43 	.word	0x08009c43
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c1c:	f107 0318 	add.w	r3, r7, #24
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fe ff99 	bl	8008b58 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009c2a:	e046      	b.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c2c:	f107 030c 	add.w	r3, r7, #12
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7ff f8fd 	bl	8008e30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009c3a:	e03e      	b.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009c3c:	4b8a      	ldr	r3, [pc, #552]	@ (8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009c40:	e03b      	b.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c42:	4b88      	ldr	r3, [pc, #544]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c48:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009c4c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c4e:	4b85      	ldr	r3, [pc, #532]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f003 0302 	and.w	r3, r3, #2
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d10c      	bne.n	8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d109      	bne.n	8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c60:	4b80      	ldr	r3, [pc, #512]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	08db      	lsrs	r3, r3, #3
 8009c66:	f003 0303 	and.w	r3, r3, #3
 8009c6a:	4a80      	ldr	r2, [pc, #512]	@ (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c72:	e01e      	b.n	8009cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c74:	4b7b      	ldr	r3, [pc, #492]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c80:	d106      	bne.n	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8009c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c88:	d102      	bne.n	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009c8a:	4b79      	ldr	r3, [pc, #484]	@ (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8009c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c8e:	e010      	b.n	8009cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c90:	4b74      	ldr	r3, [pc, #464]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c9c:	d106      	bne.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ca4:	d102      	bne.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009ca6:	4b73      	ldr	r3, [pc, #460]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8009ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009caa:	e002      	b.n	8009cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009cac:	2300      	movs	r3, #0
 8009cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8009cb0:	e003      	b.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8009cb2:	e002      	b.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009cb8:	bf00      	nop
          }
        }
        break;
 8009cba:	e15a      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009cbc:	4b69      	ldr	r3, [pc, #420]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009cc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cca:	2b20      	cmp	r3, #32
 8009ccc:	d022      	beq.n	8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8009cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd0:	2b20      	cmp	r3, #32
 8009cd2:	d858      	bhi.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8009cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd6:	2b18      	cmp	r3, #24
 8009cd8:	d019      	beq.n	8009d0e <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8009cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cdc:	2b18      	cmp	r3, #24
 8009cde:	d852      	bhi.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8009ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d003      	beq.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8009ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce8:	2b08      	cmp	r3, #8
 8009cea:	d008      	beq.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8009cec:	e04b      	b.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cee:	f107 0318 	add.w	r3, r7, #24
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fe ff30 	bl	8008b58 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009cfc:	e046      	b.n	8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cfe:	f107 030c 	add.w	r3, r7, #12
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7ff f894 	bl	8008e30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009d0c:	e03e      	b.n	8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009d0e:	4b56      	ldr	r3, [pc, #344]	@ (8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009d12:	e03b      	b.n	8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d14:	4b53      	ldr	r3, [pc, #332]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d1a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009d1e:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d20:	4b50      	ldr	r3, [pc, #320]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 0302 	and.w	r3, r3, #2
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d10c      	bne.n	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d109      	bne.n	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d32:	4b4c      	ldr	r3, [pc, #304]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	08db      	lsrs	r3, r3, #3
 8009d38:	f003 0303 	and.w	r3, r3, #3
 8009d3c:	4a4b      	ldr	r2, [pc, #300]	@ (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d44:	e01e      	b.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d46:	4b47      	ldr	r3, [pc, #284]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d52:	d106      	bne.n	8009d62 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8009d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d5a:	d102      	bne.n	8009d62 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009d5c:	4b44      	ldr	r3, [pc, #272]	@ (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8009d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d60:	e010      	b.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d62:	4b40      	ldr	r3, [pc, #256]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d6e:	d106      	bne.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8009d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d76:	d102      	bne.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009d78:	4b3e      	ldr	r3, [pc, #248]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8009d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d7c:	e002      	b.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8009d82:	e003      	b.n	8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8009d84:	e002      	b.n	8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8009d86:	2300      	movs	r3, #0
 8009d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009d8a:	bf00      	nop
          }
        }
        break;
 8009d8c:	e0f1      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009d8e:	4b35      	ldr	r3, [pc, #212]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d94:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009d98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009da0:	d023      	beq.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8009da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009da8:	d858      	bhi.n	8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8009daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dac:	2bc0      	cmp	r3, #192	@ 0xc0
 8009dae:	d019      	beq.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8009db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009db4:	d852      	bhi.n	8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8009db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d003      	beq.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8009dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dbe:	2b40      	cmp	r3, #64	@ 0x40
 8009dc0:	d008      	beq.n	8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8009dc2:	e04b      	b.n	8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009dc4:	f107 0318 	add.w	r3, r7, #24
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7fe fec5 	bl	8008b58 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009dd2:	e046      	b.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dd4:	f107 030c 	add.w	r3, r7, #12
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff f829 	bl	8008e30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009de2:	e03e      	b.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009de4:	4b20      	ldr	r3, [pc, #128]	@ (8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009de8:	e03b      	b.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009dea:	4b1e      	ldr	r3, [pc, #120]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009dec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009df0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009df4:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009df6:	4b1b      	ldr	r3, [pc, #108]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 0302 	and.w	r3, r3, #2
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d10c      	bne.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8009e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d109      	bne.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e08:	4b16      	ldr	r3, [pc, #88]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	08db      	lsrs	r3, r3, #3
 8009e0e:	f003 0303 	and.w	r3, r3, #3
 8009e12:	4a16      	ldr	r2, [pc, #88]	@ (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009e14:	fa22 f303 	lsr.w	r3, r2, r3
 8009e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e1a:	e01e      	b.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e1c:	4b11      	ldr	r3, [pc, #68]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e28:	d106      	bne.n	8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e30:	d102      	bne.n	8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009e32:	4b0f      	ldr	r3, [pc, #60]	@ (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8009e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e36:	e010      	b.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e38:	4b0a      	ldr	r3, [pc, #40]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e44:	d106      	bne.n	8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8009e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e4c:	d102      	bne.n	8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009e4e:	4b09      	ldr	r3, [pc, #36]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8009e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e52:	e002      	b.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009e54:	2300      	movs	r3, #0
 8009e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8009e58:	e003      	b.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8009e5a:	e002      	b.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009e60:	bf00      	nop
          }
        }
        break;
 8009e62:	e086      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009e64:	44020c00 	.word	0x44020c00
 8009e68:	00bb8000 	.word	0x00bb8000
 8009e6c:	03d09000 	.word	0x03d09000
 8009e70:	003d0900 	.word	0x003d0900
 8009e74:	017d7840 	.word	0x017d7840
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009e78:	4b40      	ldr	r3, [pc, #256]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8009e7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e7e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009e82:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009e84:	4b3d      	ldr	r3, [pc, #244]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e90:	d105      	bne.n	8009e9e <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8009e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d102      	bne.n	8009e9e <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8009e98:	4b39      	ldr	r3, [pc, #228]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8009e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e9c:	e031      	b.n	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009e9e:	4b37      	ldr	r3, [pc, #220]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ea6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009eaa:	d10a      	bne.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8009eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eae:	2b10      	cmp	r3, #16
 8009eb0:	d107      	bne.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009eb2:	f107 0318 	add.w	r3, r7, #24
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe fe4e 	bl	8008b58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ec0:	e01f      	b.n	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8009ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8009ec4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ec8:	f003 0302 	and.w	r3, r3, #2
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d106      	bne.n	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8009ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed2:	2b20      	cmp	r3, #32
 8009ed4:	d103      	bne.n	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8009ed6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009edc:	e011      	b.n	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009ede:	4b27      	ldr	r3, [pc, #156]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8009ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ee4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ee8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009eec:	d106      	bne.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8009eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef0:	2b30      	cmp	r3, #48	@ 0x30
 8009ef2:	d103      	bne.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8009ef4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009efa:	e002      	b.n	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009efc:	2300      	movs	r3, #0
 8009efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8009f00:	e037      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009f02:	e036      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009f04:	4b1d      	ldr	r3, [pc, #116]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8009f06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009f0a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009f0e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f12:	2b10      	cmp	r3, #16
 8009f14:	d107      	bne.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f16:	f107 0318 	add.w	r3, r7, #24
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7fe fe1c 	bl	8008b58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8009f24:	e025      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 8009f26:	4b15      	ldr	r3, [pc, #84]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f32:	d10a      	bne.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8009f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f36:	2b20      	cmp	r3, #32
 8009f38:	d107      	bne.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f3a:	f107 030c 	add.w	r3, r7, #12
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fe ff76 	bl	8008e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f48:	e00f      	b.n	8009f6a <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f56:	d105      	bne.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8009f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f5a:	2b30      	cmp	r3, #48	@ 0x30
 8009f5c:	d102      	bne.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8009f5e:	4b08      	ldr	r3, [pc, #32]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8009f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f62:	e002      	b.n	8009f6a <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009f64:	2300      	movs	r3, #0
 8009f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8009f68:	e003      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009f6a:	e002      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009f70:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8009f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3730      	adds	r7, #48	@ 0x30
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	44020c00 	.word	0x44020c00
 8009f80:	02dc6c00 	.word	0x02dc6c00

08009f84 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009f8c:	4b48      	ldr	r3, [pc, #288]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a47      	ldr	r2, [pc, #284]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 8009f92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009f96:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009f98:	f7fa f88e 	bl	80040b8 <HAL_GetTick>
 8009f9c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f9e:	e008      	b.n	8009fb2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009fa0:	f7fa f88a 	bl	80040b8 <HAL_GetTick>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d901      	bls.n	8009fb2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009fae:	2303      	movs	r3, #3
 8009fb0:	e07a      	b.n	800a0a8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009fb2:	4b3f      	ldr	r3, [pc, #252]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1f0      	bne.n	8009fa0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009fbe:	4b3c      	ldr	r3, [pc, #240]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 8009fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009fc6:	f023 0303 	bic.w	r3, r3, #3
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	6811      	ldr	r1, [r2, #0]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	6852      	ldr	r2, [r2, #4]
 8009fd2:	0212      	lsls	r2, r2, #8
 8009fd4:	430a      	orrs	r2, r1
 8009fd6:	4936      	ldr	r1, [pc, #216]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	3b01      	subs	r3, #1
 8009fec:	025b      	lsls	r3, r3, #9
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	431a      	orrs	r2, r3
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	041b      	lsls	r3, r3, #16
 8009ffa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009ffe:	431a      	orrs	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	695b      	ldr	r3, [r3, #20]
 800a004:	3b01      	subs	r3, #1
 800a006:	061b      	lsls	r3, r3, #24
 800a008:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a00c:	4928      	ldr	r1, [pc, #160]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 800a00e:	4313      	orrs	r3, r2
 800a010:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a012:	4b27      	ldr	r3, [pc, #156]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 800a014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a016:	f023 020c 	bic.w	r2, r3, #12
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	4924      	ldr	r1, [pc, #144]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 800a020:	4313      	orrs	r3, r2
 800a022:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800a024:	4b22      	ldr	r3, [pc, #136]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 800a026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a028:	f023 0220 	bic.w	r2, r3, #32
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	69db      	ldr	r3, [r3, #28]
 800a030:	491f      	ldr	r1, [pc, #124]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 800a032:	4313      	orrs	r3, r2
 800a034:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a036:	4b1e      	ldr	r3, [pc, #120]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 800a038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a03e:	491c      	ldr	r1, [pc, #112]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 800a040:	4313      	orrs	r3, r2
 800a042:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800a044:	4b1a      	ldr	r3, [pc, #104]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 800a046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a048:	4a19      	ldr	r2, [pc, #100]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 800a04a:	f023 0310 	bic.w	r3, r3, #16
 800a04e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800a050:	4b17      	ldr	r3, [pc, #92]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 800a052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a054:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a058:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	6a12      	ldr	r2, [r2, #32]
 800a060:	00d2      	lsls	r2, r2, #3
 800a062:	4913      	ldr	r1, [pc, #76]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 800a064:	4313      	orrs	r3, r2
 800a066:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800a068:	4b11      	ldr	r3, [pc, #68]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 800a06a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a06c:	4a10      	ldr	r2, [pc, #64]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 800a06e:	f043 0310 	orr.w	r3, r3, #16
 800a072:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800a074:	4b0e      	ldr	r3, [pc, #56]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a0d      	ldr	r2, [pc, #52]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 800a07a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a07e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a080:	f7fa f81a 	bl	80040b8 <HAL_GetTick>
 800a084:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a086:	e008      	b.n	800a09a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a088:	f7fa f816 	bl	80040b8 <HAL_GetTick>
 800a08c:	4602      	mov	r2, r0
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	2b02      	cmp	r3, #2
 800a094:	d901      	bls.n	800a09a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e006      	b.n	800a0a8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a09a:	4b05      	ldr	r3, [pc, #20]	@ (800a0b0 <RCCEx_PLL2_Config+0x12c>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d0f0      	beq.n	800a088 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800a0a6:	2300      	movs	r3, #0

}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	44020c00 	.word	0x44020c00

0800a0b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d101      	bne.n	800a0c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e0e9      	b.n	800a29a <HAL_SPI_Init+0x1e6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a74      	ldr	r2, [pc, #464]	@ (800a2a4 <HAL_SPI_Init+0x1f0>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d105      	bne.n	800a0e2 <HAL_SPI_Init+0x2e>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	2b0f      	cmp	r3, #15
 800a0dc:	d901      	bls.n	800a0e2 <HAL_SPI_Init+0x2e>
  {
    return HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e0db      	b.n	800a29a <HAL_SPI_Init+0x1e6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 fbb6 	bl	800a854 <SPI_GetPacketSize>
 800a0e8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a6d      	ldr	r2, [pc, #436]	@ (800a2a4 <HAL_SPI_Init+0x1f0>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d102      	bne.n	800a0fa <HAL_SPI_Init+0x46>
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2b08      	cmp	r3, #8
 800a0f8:	d811      	bhi.n	800a11e <HAL_SPI_Init+0x6a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a0fe:	4a6a      	ldr	r2, [pc, #424]	@ (800a2a8 <HAL_SPI_Init+0x1f4>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d009      	beq.n	800a118 <HAL_SPI_Init+0x64>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a68      	ldr	r2, [pc, #416]	@ (800a2ac <HAL_SPI_Init+0x1f8>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d004      	beq.n	800a118 <HAL_SPI_Init+0x64>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a67      	ldr	r2, [pc, #412]	@ (800a2b0 <HAL_SPI_Init+0x1fc>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d104      	bne.n	800a122 <HAL_SPI_Init+0x6e>
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2b10      	cmp	r3, #16
 800a11c:	d901      	bls.n	800a122 <HAL_SPI_Init+0x6e>
  {
    return HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e0bb      	b.n	800a29a <HAL_SPI_Init+0x1e6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d106      	bne.n	800a13c <HAL_SPI_Init+0x88>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7f9 fb86 	bl	8003848 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2202      	movs	r2, #2
 800a140:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f022 0201 	bic.w	r2, r2, #1
 800a152:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a15e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a168:	d119      	bne.n	800a19e <HAL_SPI_Init+0xea>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a172:	d103      	bne.n	800a17c <HAL_SPI_Init+0xc8>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d008      	beq.n	800a18e <HAL_SPI_Init+0xda>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a180:	2b00      	cmp	r3, #0
 800a182:	d10c      	bne.n	800a19e <HAL_SPI_Init+0xea>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a188:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a18c:	d107      	bne.n	800a19e <HAL_SPI_Init+0xea>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a19c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00f      	beq.n	800a1ca <HAL_SPI_Init+0x116>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	2b06      	cmp	r3, #6
 800a1b0:	d90b      	bls.n	800a1ca <HAL_SPI_Init+0x116>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	430a      	orrs	r2, r1
 800a1c6:	601a      	str	r2, [r3, #0]
 800a1c8:	e007      	b.n	800a1da <HAL_SPI_Init+0x126>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a1d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	69da      	ldr	r2, [r3, #28]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e2:	431a      	orrs	r2, r3
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	431a      	orrs	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1ec:	ea42 0103 	orr.w	r1, r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	68da      	ldr	r2, [r3, #12]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	430a      	orrs	r2, r1
 800a1fa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a204:	431a      	orrs	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a20a:	431a      	orrs	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	431a      	orrs	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	431a      	orrs	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	695b      	ldr	r3, [r3, #20]
 800a21c:	431a      	orrs	r2, r3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	431a      	orrs	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	431a      	orrs	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a22e:	431a      	orrs	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	431a      	orrs	r2, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a23a:	431a      	orrs	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a240:	431a      	orrs	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a246:	ea42 0103 	orr.w	r1, r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	430a      	orrs	r2, r1
 800a254:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 0201 	bic.w	r2, r2, #1
 800a264:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00a      	beq.n	800a288 <HAL_SPI_Init+0x1d4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	430a      	orrs	r2, r1
 800a286:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	deaddead 	.word	0xdeaddead
 800a2a8:	40013000 	.word	0x40013000
 800a2ac:	40003800 	.word	0x40003800
 800a2b0:	40003c00 	.word	0x40003c00

0800a2b4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b088      	sub	sp, #32
 800a2b8:	af02      	add	r7, sp, #8
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	603b      	str	r3, [r7, #0]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3320      	adds	r3, #32
 800a2ca:	617b      	str	r3, [r7, #20]
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a2cc:	f7f9 fef4 	bl	80040b8 <HAL_GetTick>
 800a2d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d001      	beq.n	800a2e2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a2de:	2302      	movs	r3, #2
 800a2e0:	e1e5      	b.n	800a6ae <HAL_SPI_Transmit+0x3fa>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d002      	beq.n	800a2ee <HAL_SPI_Transmit+0x3a>
 800a2e8:	88fb      	ldrh	r3, [r7, #6]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d101      	bne.n	800a2f2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e1dd      	b.n	800a6ae <HAL_SPI_Transmit+0x3fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d101      	bne.n	800a300 <HAL_SPI_Transmit+0x4c>
 800a2fc:	2302      	movs	r3, #2
 800a2fe:	e1d6      	b.n	800a6ae <HAL_SPI_Transmit+0x3fa>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2203      	movs	r2, #3
 800a30c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	68ba      	ldr	r2, [r7, #8]
 800a31c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	88fa      	ldrh	r2, [r7, #6]
 800a322:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	88fa      	ldrh	r2, [r7, #6]
 800a32a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2200      	movs	r2, #0
 800a332:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a358:	d108      	bne.n	800a36c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a368:	601a      	str	r2, [r3, #0]
 800a36a:	e009      	b.n	800a380 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a37e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	0c1b      	lsrs	r3, r3, #16
 800a388:	041b      	lsls	r3, r3, #16
 800a38a:	88f9      	ldrh	r1, [r7, #6]
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	6812      	ldr	r2, [r2, #0]
 800a390:	430b      	orrs	r3, r1
 800a392:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f042 0201 	orr.w	r2, r2, #1
 800a3a2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a3ac:	d107      	bne.n	800a3be <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a3bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	2b0f      	cmp	r3, #15
 800a3c4:	d956      	bls.n	800a474 <HAL_SPI_Transmit+0x1c0>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a8d      	ldr	r2, [pc, #564]	@ (800a600 <HAL_SPI_Transmit+0x34c>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d04a      	beq.n	800a466 <HAL_SPI_Transmit+0x1b2>
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a8b      	ldr	r2, [pc, #556]	@ (800a604 <HAL_SPI_Transmit+0x350>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d045      	beq.n	800a466 <HAL_SPI_Transmit+0x1b2>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a8a      	ldr	r2, [pc, #552]	@ (800a608 <HAL_SPI_Transmit+0x354>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d147      	bne.n	800a474 <HAL_SPI_Transmit+0x1c0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a3e4:	e03f      	b.n	800a466 <HAL_SPI_Transmit+0x1b2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	695b      	ldr	r3, [r3, #20]
 800a3ec:	f003 0302 	and.w	r3, r3, #2
 800a3f0:	2b02      	cmp	r3, #2
 800a3f2:	d114      	bne.n	800a41e <HAL_SPI_Transmit+0x16a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	6812      	ldr	r2, [r2, #0]
 800a3fe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a404:	1d1a      	adds	r2, r3, #4
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a410:	b29b      	uxth	r3, r3
 800a412:	3b01      	subs	r3, #1
 800a414:	b29a      	uxth	r2, r3
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a41c:	e023      	b.n	800a466 <HAL_SPI_Transmit+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a41e:	f7f9 fe4b 	bl	80040b8 <HAL_GetTick>
 800a422:	4602      	mov	r2, r0
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	683a      	ldr	r2, [r7, #0]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d803      	bhi.n	800a436 <HAL_SPI_Transmit+0x182>
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a434:	d102      	bne.n	800a43c <HAL_SPI_Transmit+0x188>
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d114      	bne.n	800a466 <HAL_SPI_Transmit+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f000 f93b 	bl	800a6b8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a448:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2201      	movs	r2, #1
 800a456:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a462:	2303      	movs	r3, #3
 800a464:	e123      	b.n	800a6ae <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1b9      	bne.n	800a3e6 <HAL_SPI_Transmit+0x132>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a472:	e0f6      	b.n	800a662 <HAL_SPI_Transmit+0x3ae>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	2b07      	cmp	r3, #7
 800a47a:	f240 80eb 	bls.w	800a654 <HAL_SPI_Transmit+0x3a0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a47e:	e05d      	b.n	800a53c <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	695b      	ldr	r3, [r3, #20]
 800a486:	f003 0302 	and.w	r3, r3, #2
 800a48a:	2b02      	cmp	r3, #2
 800a48c:	d132      	bne.n	800a4f4 <HAL_SPI_Transmit+0x240>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a494:	b29b      	uxth	r3, r3
 800a496:	2b01      	cmp	r3, #1
 800a498:	d918      	bls.n	800a4cc <HAL_SPI_Transmit+0x218>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d014      	beq.n	800a4cc <HAL_SPI_Transmit+0x218>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	6812      	ldr	r2, [r2, #0]
 800a4ac:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4b2:	1d1a      	adds	r2, r3, #4
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	3b02      	subs	r3, #2
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a4ca:	e037      	b.n	800a53c <HAL_SPI_Transmit+0x288>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4d0:	881a      	ldrh	r2, [r3, #0]
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4da:	1c9a      	adds	r2, r3, #2
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a4f2:	e023      	b.n	800a53c <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4f4:	f7f9 fde0 	bl	80040b8 <HAL_GetTick>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	683a      	ldr	r2, [r7, #0]
 800a500:	429a      	cmp	r2, r3
 800a502:	d803      	bhi.n	800a50c <HAL_SPI_Transmit+0x258>
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50a:	d102      	bne.n	800a512 <HAL_SPI_Transmit+0x25e>
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d114      	bne.n	800a53c <HAL_SPI_Transmit+0x288>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f000 f8d0 	bl	800a6b8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a51e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a538:	2303      	movs	r3, #3
 800a53a:	e0b8      	b.n	800a6ae <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a542:	b29b      	uxth	r3, r3
 800a544:	2b00      	cmp	r3, #0
 800a546:	d19b      	bne.n	800a480 <HAL_SPI_Transmit+0x1cc>
 800a548:	e08b      	b.n	800a662 <HAL_SPI_Transmit+0x3ae>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	695b      	ldr	r3, [r3, #20]
 800a550:	f003 0302 	and.w	r3, r3, #2
 800a554:	2b02      	cmp	r3, #2
 800a556:	d159      	bne.n	800a60c <HAL_SPI_Transmit+0x358>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a55e:	b29b      	uxth	r3, r3
 800a560:	2b03      	cmp	r3, #3
 800a562:	d918      	bls.n	800a596 <HAL_SPI_Transmit+0x2e2>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a568:	2b40      	cmp	r3, #64	@ 0x40
 800a56a:	d914      	bls.n	800a596 <HAL_SPI_Transmit+0x2e2>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	6812      	ldr	r2, [r2, #0]
 800a576:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a57c:	1d1a      	adds	r2, r3, #4
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a588:	b29b      	uxth	r3, r3
 800a58a:	3b04      	subs	r3, #4
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a594:	e05e      	b.n	800a654 <HAL_SPI_Transmit+0x3a0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d917      	bls.n	800a5d2 <HAL_SPI_Transmit+0x31e>
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d013      	beq.n	800a5d2 <HAL_SPI_Transmit+0x31e>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5ae:	881a      	ldrh	r2, [r3, #0]
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5b8:	1c9a      	adds	r2, r3, #2
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	3b02      	subs	r3, #2
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a5d0:	e040      	b.n	800a654 <HAL_SPI_Transmit+0x3a0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	3320      	adds	r3, #32
 800a5dc:	7812      	ldrb	r2, [r2, #0]
 800a5de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5e4:	1c5a      	adds	r2, r3, #1
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a5fc:	e02a      	b.n	800a654 <HAL_SPI_Transmit+0x3a0>
 800a5fe:	bf00      	nop
 800a600:	40013000 	.word	0x40013000
 800a604:	40003800 	.word	0x40003800
 800a608:	40003c00 	.word	0x40003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a60c:	f7f9 fd54 	bl	80040b8 <HAL_GetTick>
 800a610:	4602      	mov	r2, r0
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	1ad3      	subs	r3, r2, r3
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d803      	bhi.n	800a624 <HAL_SPI_Transmit+0x370>
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a622:	d102      	bne.n	800a62a <HAL_SPI_Transmit+0x376>
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d114      	bne.n	800a654 <HAL_SPI_Transmit+0x3a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	f000 f844 	bl	800a6b8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a636:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a650:	2303      	movs	r3, #3
 800a652:	e02c      	b.n	800a6ae <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f47f af74 	bne.w	800a54a <HAL_SPI_Transmit+0x296>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	9300      	str	r3, [sp, #0]
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	2200      	movs	r2, #0
 800a66a:	2108      	movs	r1, #8
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f000 f8c3 	bl	800a7f8 <SPI_WaitOnFlagUntilTimeout>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d007      	beq.n	800a688 <HAL_SPI_Transmit+0x3d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a67e:	f043 0220 	orr.w	r2, r3, #32
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f000 f815 	bl	800a6b8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2201      	movs	r2, #1
 800a692:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d001      	beq.n	800a6ac <HAL_SPI_Transmit+0x3f8>
  {
    return HAL_ERROR;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e000      	b.n	800a6ae <HAL_SPI_Transmit+0x3fa>
  }
  else
  {
    return HAL_OK;
 800a6ac:	2300      	movs	r3, #0
  }
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3718      	adds	r7, #24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop

0800a6b8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	695b      	ldr	r3, [r3, #20]
 800a6c6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	699a      	ldr	r2, [r3, #24]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f042 0208 	orr.w	r2, r2, #8
 800a6d6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	699a      	ldr	r2, [r3, #24]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f042 0210 	orr.w	r2, r2, #16
 800a6e6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f022 0201 	bic.w	r2, r2, #1
 800a6f6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	691b      	ldr	r3, [r3, #16]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	6812      	ldr	r2, [r2, #0]
 800a702:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800a706:	f023 0303 	bic.w	r3, r3, #3
 800a70a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	689a      	ldr	r2, [r3, #8]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a71a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a722:	b2db      	uxtb	r3, r3
 800a724:	2b04      	cmp	r3, #4
 800a726:	d014      	beq.n	800a752 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f003 0320 	and.w	r3, r3, #32
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00f      	beq.n	800a752 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a738:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	699a      	ldr	r2, [r3, #24]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f042 0220 	orr.w	r2, r2, #32
 800a750:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	2b03      	cmp	r3, #3
 800a75c:	d014      	beq.n	800a788 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a764:	2b00      	cmp	r3, #0
 800a766:	d00f      	beq.n	800a788 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a76e:	f043 0204 	orr.w	r2, r3, #4
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	699a      	ldr	r2, [r3, #24]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a786:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00f      	beq.n	800a7b2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a798:	f043 0201 	orr.w	r2, r3, #1
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	699a      	ldr	r2, [r3, #24]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7b0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00f      	beq.n	800a7dc <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7c2:	f043 0208 	orr.w	r2, r3, #8
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	699a      	ldr	r2, [r3, #24]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a7da:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800a7ec:	bf00      	nop
 800a7ee:	3714      	adds	r7, #20
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	603b      	str	r3, [r7, #0]
 800a804:	4613      	mov	r3, r2
 800a806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a808:	e010      	b.n	800a82c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a80a:	f7f9 fc55 	bl	80040b8 <HAL_GetTick>
 800a80e:	4602      	mov	r2, r0
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	683a      	ldr	r2, [r7, #0]
 800a816:	429a      	cmp	r2, r3
 800a818:	d803      	bhi.n	800a822 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a820:	d102      	bne.n	800a828 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d101      	bne.n	800a82c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	e00f      	b.n	800a84c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	695a      	ldr	r2, [r3, #20]
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	4013      	ands	r3, r2
 800a836:	68ba      	ldr	r2, [r7, #8]
 800a838:	429a      	cmp	r2, r3
 800a83a:	bf0c      	ite	eq
 800a83c:	2301      	moveq	r3, #1
 800a83e:	2300      	movne	r3, #0
 800a840:	b2db      	uxtb	r3, r3
 800a842:	461a      	mov	r2, r3
 800a844:	79fb      	ldrb	r3, [r7, #7]
 800a846:	429a      	cmp	r2, r3
 800a848:	d0df      	beq.n	800a80a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a860:	095b      	lsrs	r3, r3, #5
 800a862:	3301      	adds	r3, #1
 800a864:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	3301      	adds	r3, #1
 800a86c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	3307      	adds	r3, #7
 800a872:	08db      	lsrs	r3, r3, #3
 800a874:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	fb02 f303 	mul.w	r3, r2, r3
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3714      	adds	r7, #20
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr

0800a88a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b082      	sub	sp, #8
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d101      	bne.n	800a89c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	e049      	b.n	800a930 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d106      	bne.n	800a8b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f7f9 f847 	bl	8003944 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2202      	movs	r2, #2
 800a8ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	f000 fc89 	bl	800b1e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2201      	movs	r2, #1
 800a912:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2201      	movs	r2, #1
 800a922:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3708      	adds	r7, #8
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a946:	b2db      	uxtb	r3, r3
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d001      	beq.n	800a950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	e03b      	b.n	800a9c8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2202      	movs	r2, #2
 800a954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	68da      	ldr	r2, [r3, #12]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f042 0201 	orr.w	r2, r2, #1
 800a966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a19      	ldr	r2, [pc, #100]	@ (800a9d4 <HAL_TIM_Base_Start_IT+0x9c>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d009      	beq.n	800a986 <HAL_TIM_Base_Start_IT+0x4e>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a97a:	d004      	beq.n	800a986 <HAL_TIM_Base_Start_IT+0x4e>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a15      	ldr	r2, [pc, #84]	@ (800a9d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d115      	bne.n	800a9b2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	689a      	ldr	r2, [r3, #8]
 800a98c:	4b13      	ldr	r3, [pc, #76]	@ (800a9dc <HAL_TIM_Base_Start_IT+0xa4>)
 800a98e:	4013      	ands	r3, r2
 800a990:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2b06      	cmp	r3, #6
 800a996:	d015      	beq.n	800a9c4 <HAL_TIM_Base_Start_IT+0x8c>
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a99e:	d011      	beq.n	800a9c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f042 0201 	orr.w	r2, r2, #1
 800a9ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9b0:	e008      	b.n	800a9c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f042 0201 	orr.w	r2, r2, #1
 800a9c0:	601a      	str	r2, [r3, #0]
 800a9c2:	e000      	b.n	800a9c6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr
 800a9d4:	40012c00 	.word	0x40012c00
 800a9d8:	40000400 	.word	0x40000400
 800a9dc:	00010007 	.word	0x00010007

0800a9e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e049      	b.n	800aa86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d106      	bne.n	800aa0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f7f8 ffe4 	bl	80039d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2202      	movs	r2, #2
 800aa10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4610      	mov	r0, r2
 800aa20:	f000 fbde 	bl	800b1e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b084      	sub	sp, #16
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	f003 0302 	and.w	r3, r3, #2
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d020      	beq.n	800aaf2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f003 0302 	and.w	r3, r3, #2
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d01b      	beq.n	800aaf2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f06f 0202 	mvn.w	r2, #2
 800aac2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	f003 0303 	and.w	r3, r3, #3
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d003      	beq.n	800aae0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 fb63 	bl	800b1a4 <HAL_TIM_IC_CaptureCallback>
 800aade:	e005      	b.n	800aaec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fb55 	bl	800b190 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 fb66 	bl	800b1b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	f003 0304 	and.w	r3, r3, #4
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d020      	beq.n	800ab3e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f003 0304 	and.w	r3, r3, #4
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d01b      	beq.n	800ab3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f06f 0204 	mvn.w	r2, #4
 800ab0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2202      	movs	r2, #2
 800ab14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	699b      	ldr	r3, [r3, #24]
 800ab1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d003      	beq.n	800ab2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fb3d 	bl	800b1a4 <HAL_TIM_IC_CaptureCallback>
 800ab2a:	e005      	b.n	800ab38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fb2f 	bl	800b190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 fb40 	bl	800b1b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	f003 0308 	and.w	r3, r3, #8
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d020      	beq.n	800ab8a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f003 0308 	and.w	r3, r3, #8
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d01b      	beq.n	800ab8a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f06f 0208 	mvn.w	r2, #8
 800ab5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2204      	movs	r2, #4
 800ab60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	69db      	ldr	r3, [r3, #28]
 800ab68:	f003 0303 	and.w	r3, r3, #3
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d003      	beq.n	800ab78 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 fb17 	bl	800b1a4 <HAL_TIM_IC_CaptureCallback>
 800ab76:	e005      	b.n	800ab84 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 fb09 	bl	800b190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 fb1a 	bl	800b1b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	f003 0310 	and.w	r3, r3, #16
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d020      	beq.n	800abd6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f003 0310 	and.w	r3, r3, #16
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d01b      	beq.n	800abd6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f06f 0210 	mvn.w	r2, #16
 800aba6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2208      	movs	r2, #8
 800abac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	69db      	ldr	r3, [r3, #28]
 800abb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d003      	beq.n	800abc4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 faf1 	bl	800b1a4 <HAL_TIM_IC_CaptureCallback>
 800abc2:	e005      	b.n	800abd0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 fae3 	bl	800b190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 faf4 	bl	800b1b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	f003 0301 	and.w	r3, r3, #1
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d00c      	beq.n	800abfa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f003 0301 	and.w	r3, r3, #1
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d007      	beq.n	800abfa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f06f 0201 	mvn.w	r2, #1
 800abf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f7f7 f8a7 	bl	8001d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d104      	bne.n	800ac0e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00c      	beq.n	800ac28 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d007      	beq.n	800ac28 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ac20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 fe9a 	bl	800b95c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00c      	beq.n	800ac4c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d007      	beq.n	800ac4c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ac44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fe92 	bl	800b970 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00c      	beq.n	800ac70 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d007      	beq.n	800ac70 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ac68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 faae 	bl	800b1cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	f003 0320 	and.w	r3, r3, #32
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00c      	beq.n	800ac94 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f003 0320 	and.w	r3, r3, #32
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d007      	beq.n	800ac94 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f06f 0220 	mvn.w	r2, #32
 800ac8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fe5a 	bl	800b948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00c      	beq.n	800acb8 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d007      	beq.n	800acb8 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800acb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fe66 	bl	800b984 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d00c      	beq.n	800acdc <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d007      	beq.n	800acdc <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800acd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fe5e 	bl	800b998 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00c      	beq.n	800ad00 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d007      	beq.n	800ad00 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800acf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 fe56 	bl	800b9ac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00c      	beq.n	800ad24 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d007      	beq.n	800ad24 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800ad1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fe4e 	bl	800b9c0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad24:	bf00      	nop
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d101      	bne.n	800ad4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ad46:	2302      	movs	r3, #2
 800ad48:	e0ff      	b.n	800af4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b14      	cmp	r3, #20
 800ad56:	f200 80f0 	bhi.w	800af3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ad5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ad5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad60:	0800adb5 	.word	0x0800adb5
 800ad64:	0800af3b 	.word	0x0800af3b
 800ad68:	0800af3b 	.word	0x0800af3b
 800ad6c:	0800af3b 	.word	0x0800af3b
 800ad70:	0800adf5 	.word	0x0800adf5
 800ad74:	0800af3b 	.word	0x0800af3b
 800ad78:	0800af3b 	.word	0x0800af3b
 800ad7c:	0800af3b 	.word	0x0800af3b
 800ad80:	0800ae37 	.word	0x0800ae37
 800ad84:	0800af3b 	.word	0x0800af3b
 800ad88:	0800af3b 	.word	0x0800af3b
 800ad8c:	0800af3b 	.word	0x0800af3b
 800ad90:	0800ae77 	.word	0x0800ae77
 800ad94:	0800af3b 	.word	0x0800af3b
 800ad98:	0800af3b 	.word	0x0800af3b
 800ad9c:	0800af3b 	.word	0x0800af3b
 800ada0:	0800aeb9 	.word	0x0800aeb9
 800ada4:	0800af3b 	.word	0x0800af3b
 800ada8:	0800af3b 	.word	0x0800af3b
 800adac:	0800af3b 	.word	0x0800af3b
 800adb0:	0800aef9 	.word	0x0800aef9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	68b9      	ldr	r1, [r7, #8]
 800adba:	4618      	mov	r0, r3
 800adbc:	f000 fa76 	bl	800b2ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	699a      	ldr	r2, [r3, #24]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f042 0208 	orr.w	r2, r2, #8
 800adce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	699a      	ldr	r2, [r3, #24]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f022 0204 	bic.w	r2, r2, #4
 800adde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	6999      	ldr	r1, [r3, #24]
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	691a      	ldr	r2, [r3, #16]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	430a      	orrs	r2, r1
 800adf0:	619a      	str	r2, [r3, #24]
      break;
 800adf2:	e0a5      	b.n	800af40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	68b9      	ldr	r1, [r7, #8]
 800adfa:	4618      	mov	r0, r3
 800adfc:	f000 fabe 	bl	800b37c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	699a      	ldr	r2, [r3, #24]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	699a      	ldr	r2, [r3, #24]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	6999      	ldr	r1, [r3, #24]
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	691b      	ldr	r3, [r3, #16]
 800ae2a:	021a      	lsls	r2, r3, #8
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	430a      	orrs	r2, r1
 800ae32:	619a      	str	r2, [r3, #24]
      break;
 800ae34:	e084      	b.n	800af40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	68b9      	ldr	r1, [r7, #8]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f000 fb0b 	bl	800b458 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	69da      	ldr	r2, [r3, #28]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f042 0208 	orr.w	r2, r2, #8
 800ae50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	69da      	ldr	r2, [r3, #28]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f022 0204 	bic.w	r2, r2, #4
 800ae60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	69d9      	ldr	r1, [r3, #28]
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	691a      	ldr	r2, [r3, #16]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	430a      	orrs	r2, r1
 800ae72:	61da      	str	r2, [r3, #28]
      break;
 800ae74:	e064      	b.n	800af40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68b9      	ldr	r1, [r7, #8]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f000 fb57 	bl	800b530 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	69da      	ldr	r2, [r3, #28]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	69da      	ldr	r2, [r3, #28]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	69d9      	ldr	r1, [r3, #28]
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	021a      	lsls	r2, r3, #8
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	430a      	orrs	r2, r1
 800aeb4:	61da      	str	r2, [r3, #28]
      break;
 800aeb6:	e043      	b.n	800af40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68b9      	ldr	r1, [r7, #8]
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 fba4 	bl	800b60c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f042 0208 	orr.w	r2, r2, #8
 800aed2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f022 0204 	bic.w	r2, r2, #4
 800aee2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	691a      	ldr	r2, [r3, #16]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	430a      	orrs	r2, r1
 800aef4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800aef6:	e023      	b.n	800af40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	68b9      	ldr	r1, [r7, #8]
 800aefe:	4618      	mov	r0, r3
 800af00:	f000 fbd0 	bl	800b6a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af22:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	021a      	lsls	r2, r3, #8
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	430a      	orrs	r2, r1
 800af36:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800af38:	e002      	b.n	800af40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800af3a:	2301      	movs	r3, #1
 800af3c:	75fb      	strb	r3, [r7, #23]
      break;
 800af3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800af48:	7dfb      	ldrb	r3, [r7, #23]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3718      	adds	r7, #24
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop

0800af54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af5e:	2300      	movs	r3, #0
 800af60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d101      	bne.n	800af70 <HAL_TIM_ConfigClockSource+0x1c>
 800af6c:	2302      	movs	r3, #2
 800af6e:	e0fe      	b.n	800b16e <HAL_TIM_ConfigClockSource+0x21a>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2202      	movs	r2, #2
 800af7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800af8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800af92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800af9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800afac:	f000 80c9 	beq.w	800b142 <HAL_TIM_ConfigClockSource+0x1ee>
 800afb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800afb4:	f200 80ce 	bhi.w	800b154 <HAL_TIM_ConfigClockSource+0x200>
 800afb8:	4a6f      	ldr	r2, [pc, #444]	@ (800b178 <HAL_TIM_ConfigClockSource+0x224>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	f000 80c1 	beq.w	800b142 <HAL_TIM_ConfigClockSource+0x1ee>
 800afc0:	4a6d      	ldr	r2, [pc, #436]	@ (800b178 <HAL_TIM_ConfigClockSource+0x224>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	f200 80c6 	bhi.w	800b154 <HAL_TIM_ConfigClockSource+0x200>
 800afc8:	4a6c      	ldr	r2, [pc, #432]	@ (800b17c <HAL_TIM_ConfigClockSource+0x228>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	f000 80b9 	beq.w	800b142 <HAL_TIM_ConfigClockSource+0x1ee>
 800afd0:	4a6a      	ldr	r2, [pc, #424]	@ (800b17c <HAL_TIM_ConfigClockSource+0x228>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	f200 80be 	bhi.w	800b154 <HAL_TIM_ConfigClockSource+0x200>
 800afd8:	4a69      	ldr	r2, [pc, #420]	@ (800b180 <HAL_TIM_ConfigClockSource+0x22c>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	f000 80b1 	beq.w	800b142 <HAL_TIM_ConfigClockSource+0x1ee>
 800afe0:	4a67      	ldr	r2, [pc, #412]	@ (800b180 <HAL_TIM_ConfigClockSource+0x22c>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	f200 80b6 	bhi.w	800b154 <HAL_TIM_ConfigClockSource+0x200>
 800afe8:	4a66      	ldr	r2, [pc, #408]	@ (800b184 <HAL_TIM_ConfigClockSource+0x230>)
 800afea:	4293      	cmp	r3, r2
 800afec:	f000 80a9 	beq.w	800b142 <HAL_TIM_ConfigClockSource+0x1ee>
 800aff0:	4a64      	ldr	r2, [pc, #400]	@ (800b184 <HAL_TIM_ConfigClockSource+0x230>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	f200 80ae 	bhi.w	800b154 <HAL_TIM_ConfigClockSource+0x200>
 800aff8:	4a63      	ldr	r2, [pc, #396]	@ (800b188 <HAL_TIM_ConfigClockSource+0x234>)
 800affa:	4293      	cmp	r3, r2
 800affc:	f000 80a1 	beq.w	800b142 <HAL_TIM_ConfigClockSource+0x1ee>
 800b000:	4a61      	ldr	r2, [pc, #388]	@ (800b188 <HAL_TIM_ConfigClockSource+0x234>)
 800b002:	4293      	cmp	r3, r2
 800b004:	f200 80a6 	bhi.w	800b154 <HAL_TIM_ConfigClockSource+0x200>
 800b008:	4a60      	ldr	r2, [pc, #384]	@ (800b18c <HAL_TIM_ConfigClockSource+0x238>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	f000 8099 	beq.w	800b142 <HAL_TIM_ConfigClockSource+0x1ee>
 800b010:	4a5e      	ldr	r2, [pc, #376]	@ (800b18c <HAL_TIM_ConfigClockSource+0x238>)
 800b012:	4293      	cmp	r3, r2
 800b014:	f200 809e 	bhi.w	800b154 <HAL_TIM_ConfigClockSource+0x200>
 800b018:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b01c:	f000 8091 	beq.w	800b142 <HAL_TIM_ConfigClockSource+0x1ee>
 800b020:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b024:	f200 8096 	bhi.w	800b154 <HAL_TIM_ConfigClockSource+0x200>
 800b028:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b02c:	f000 8089 	beq.w	800b142 <HAL_TIM_ConfigClockSource+0x1ee>
 800b030:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b034:	f200 808e 	bhi.w	800b154 <HAL_TIM_ConfigClockSource+0x200>
 800b038:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b03c:	d03e      	beq.n	800b0bc <HAL_TIM_ConfigClockSource+0x168>
 800b03e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b042:	f200 8087 	bhi.w	800b154 <HAL_TIM_ConfigClockSource+0x200>
 800b046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b04a:	f000 8086 	beq.w	800b15a <HAL_TIM_ConfigClockSource+0x206>
 800b04e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b052:	d87f      	bhi.n	800b154 <HAL_TIM_ConfigClockSource+0x200>
 800b054:	2b70      	cmp	r3, #112	@ 0x70
 800b056:	d01a      	beq.n	800b08e <HAL_TIM_ConfigClockSource+0x13a>
 800b058:	2b70      	cmp	r3, #112	@ 0x70
 800b05a:	d87b      	bhi.n	800b154 <HAL_TIM_ConfigClockSource+0x200>
 800b05c:	2b60      	cmp	r3, #96	@ 0x60
 800b05e:	d050      	beq.n	800b102 <HAL_TIM_ConfigClockSource+0x1ae>
 800b060:	2b60      	cmp	r3, #96	@ 0x60
 800b062:	d877      	bhi.n	800b154 <HAL_TIM_ConfigClockSource+0x200>
 800b064:	2b50      	cmp	r3, #80	@ 0x50
 800b066:	d03c      	beq.n	800b0e2 <HAL_TIM_ConfigClockSource+0x18e>
 800b068:	2b50      	cmp	r3, #80	@ 0x50
 800b06a:	d873      	bhi.n	800b154 <HAL_TIM_ConfigClockSource+0x200>
 800b06c:	2b40      	cmp	r3, #64	@ 0x40
 800b06e:	d058      	beq.n	800b122 <HAL_TIM_ConfigClockSource+0x1ce>
 800b070:	2b40      	cmp	r3, #64	@ 0x40
 800b072:	d86f      	bhi.n	800b154 <HAL_TIM_ConfigClockSource+0x200>
 800b074:	2b30      	cmp	r3, #48	@ 0x30
 800b076:	d064      	beq.n	800b142 <HAL_TIM_ConfigClockSource+0x1ee>
 800b078:	2b30      	cmp	r3, #48	@ 0x30
 800b07a:	d86b      	bhi.n	800b154 <HAL_TIM_ConfigClockSource+0x200>
 800b07c:	2b20      	cmp	r3, #32
 800b07e:	d060      	beq.n	800b142 <HAL_TIM_ConfigClockSource+0x1ee>
 800b080:	2b20      	cmp	r3, #32
 800b082:	d867      	bhi.n	800b154 <HAL_TIM_ConfigClockSource+0x200>
 800b084:	2b00      	cmp	r3, #0
 800b086:	d05c      	beq.n	800b142 <HAL_TIM_ConfigClockSource+0x1ee>
 800b088:	2b10      	cmp	r3, #16
 800b08a:	d05a      	beq.n	800b142 <HAL_TIM_ConfigClockSource+0x1ee>
 800b08c:	e062      	b.n	800b154 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b09e:	f000 fbcb 	bl	800b838 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b0b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	68ba      	ldr	r2, [r7, #8]
 800b0b8:	609a      	str	r2, [r3, #8]
      break;
 800b0ba:	e04f      	b.n	800b15c <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b0cc:	f000 fbb4 	bl	800b838 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	689a      	ldr	r2, [r3, #8]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b0de:	609a      	str	r2, [r3, #8]
      break;
 800b0e0:	e03c      	b.n	800b15c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	f000 fb26 	bl	800b740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2150      	movs	r1, #80	@ 0x50
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 fb7f 	bl	800b7fe <TIM_ITRx_SetConfig>
      break;
 800b100:	e02c      	b.n	800b15c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b10e:	461a      	mov	r2, r3
 800b110:	f000 fb45 	bl	800b79e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2160      	movs	r1, #96	@ 0x60
 800b11a:	4618      	mov	r0, r3
 800b11c:	f000 fb6f 	bl	800b7fe <TIM_ITRx_SetConfig>
      break;
 800b120:	e01c      	b.n	800b15c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b12e:	461a      	mov	r2, r3
 800b130:	f000 fb06 	bl	800b740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2140      	movs	r1, #64	@ 0x40
 800b13a:	4618      	mov	r0, r3
 800b13c:	f000 fb5f 	bl	800b7fe <TIM_ITRx_SetConfig>
      break;
 800b140:	e00c      	b.n	800b15c <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4619      	mov	r1, r3
 800b14c:	4610      	mov	r0, r2
 800b14e:	f000 fb56 	bl	800b7fe <TIM_ITRx_SetConfig>
      break;
 800b152:	e003      	b.n	800b15c <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800b154:	2301      	movs	r3, #1
 800b156:	73fb      	strb	r3, [r7, #15]
      break;
 800b158:	e000      	b.n	800b15c <HAL_TIM_ConfigClockSource+0x208>
      break;
 800b15a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	00100070 	.word	0x00100070
 800b17c:	00100060 	.word	0x00100060
 800b180:	00100050 	.word	0x00100050
 800b184:	00100040 	.word	0x00100040
 800b188:	00100030 	.word	0x00100030
 800b18c:	00100020 	.word	0x00100020

0800b190 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b198:	bf00      	nop
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b1c0:	bf00      	nop
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b1d4:	bf00      	nop
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	4a2c      	ldr	r2, [pc, #176]	@ (800b2a4 <TIM_Base_SetConfig+0xc4>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d007      	beq.n	800b208 <TIM_Base_SetConfig+0x28>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1fe:	d003      	beq.n	800b208 <TIM_Base_SetConfig+0x28>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	4a29      	ldr	r2, [pc, #164]	@ (800b2a8 <TIM_Base_SetConfig+0xc8>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d108      	bne.n	800b21a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b20e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	4313      	orrs	r3, r2
 800b218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a21      	ldr	r2, [pc, #132]	@ (800b2a4 <TIM_Base_SetConfig+0xc4>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d007      	beq.n	800b232 <TIM_Base_SetConfig+0x52>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b228:	d003      	beq.n	800b232 <TIM_Base_SetConfig+0x52>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a1e      	ldr	r2, [pc, #120]	@ (800b2a8 <TIM_Base_SetConfig+0xc8>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d108      	bne.n	800b244 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	68fa      	ldr	r2, [r7, #12]
 800b240:	4313      	orrs	r3, r2
 800b242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	695b      	ldr	r3, [r3, #20]
 800b24e:	4313      	orrs	r3, r2
 800b250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	689a      	ldr	r2, [r3, #8]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a0e      	ldr	r2, [pc, #56]	@ (800b2a4 <TIM_Base_SetConfig+0xc4>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d103      	bne.n	800b278 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	691a      	ldr	r2, [r3, #16]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	691b      	ldr	r3, [r3, #16]
 800b282:	f003 0301 	and.w	r3, r3, #1
 800b286:	2b01      	cmp	r3, #1
 800b288:	d105      	bne.n	800b296 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	691b      	ldr	r3, [r3, #16]
 800b28e:	f023 0201 	bic.w	r2, r3, #1
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	611a      	str	r2, [r3, #16]
  }
}
 800b296:	bf00      	nop
 800b298:	3714      	adds	r7, #20
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	40012c00 	.word	0x40012c00
 800b2a8:	40000400 	.word	0x40000400

0800b2ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b087      	sub	sp, #28
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a1b      	ldr	r3, [r3, #32]
 800b2ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a1b      	ldr	r3, [r3, #32]
 800b2c0:	f023 0201 	bic.w	r2, r3, #1
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	699b      	ldr	r3, [r3, #24]
 800b2d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b2da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f023 0303 	bic.w	r3, r3, #3
 800b2e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	f023 0302 	bic.w	r3, r3, #2
 800b2f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	697a      	ldr	r2, [r7, #20]
 800b300:	4313      	orrs	r3, r2
 800b302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	4a1c      	ldr	r2, [pc, #112]	@ (800b378 <TIM_OC1_SetConfig+0xcc>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d10c      	bne.n	800b326 <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	f023 0308 	bic.w	r3, r3, #8
 800b312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	f023 0304 	bic.w	r3, r3, #4
 800b324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a13      	ldr	r2, [pc, #76]	@ (800b378 <TIM_OC1_SetConfig+0xcc>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d111      	bne.n	800b352 <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b33c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	695b      	ldr	r3, [r3, #20]
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	4313      	orrs	r3, r2
 800b346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	693a      	ldr	r2, [r7, #16]
 800b34e:	4313      	orrs	r3, r2
 800b350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	693a      	ldr	r2, [r7, #16]
 800b356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	685a      	ldr	r2, [r3, #4]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	697a      	ldr	r2, [r7, #20]
 800b36a:	621a      	str	r2, [r3, #32]
}
 800b36c:	bf00      	nop
 800b36e:	371c      	adds	r7, #28
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr
 800b378:	40012c00 	.word	0x40012c00

0800b37c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b087      	sub	sp, #28
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6a1b      	ldr	r3, [r3, #32]
 800b38a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6a1b      	ldr	r3, [r3, #32]
 800b390:	f023 0210 	bic.w	r2, r3, #16
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	699b      	ldr	r3, [r3, #24]
 800b3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b3aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	021b      	lsls	r3, r3, #8
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	f023 0320 	bic.w	r3, r3, #32
 800b3ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	011b      	lsls	r3, r3, #4
 800b3d2:	697a      	ldr	r2, [r7, #20]
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	4a1e      	ldr	r2, [pc, #120]	@ (800b454 <TIM_OC2_SetConfig+0xd8>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d10d      	bne.n	800b3fc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b3e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	011b      	lsls	r3, r3, #4
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4a15      	ldr	r2, [pc, #84]	@ (800b454 <TIM_OC2_SetConfig+0xd8>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d113      	bne.n	800b42c <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b40a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	695b      	ldr	r3, [r3, #20]
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	693a      	ldr	r2, [r7, #16]
 800b41c:	4313      	orrs	r3, r2
 800b41e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	699b      	ldr	r3, [r3, #24]
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	4313      	orrs	r3, r2
 800b42a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	693a      	ldr	r2, [r7, #16]
 800b430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	685a      	ldr	r2, [r3, #4]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	697a      	ldr	r2, [r7, #20]
 800b444:	621a      	str	r2, [r3, #32]
}
 800b446:	bf00      	nop
 800b448:	371c      	adds	r7, #28
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	40012c00 	.word	0x40012c00

0800b458 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b458:	b480      	push	{r7}
 800b45a:	b087      	sub	sp, #28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a1b      	ldr	r3, [r3, #32]
 800b466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6a1b      	ldr	r3, [r3, #32]
 800b46c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	69db      	ldr	r3, [r3, #28]
 800b47e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b48a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f023 0303 	bic.w	r3, r3, #3
 800b492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	4313      	orrs	r3, r2
 800b49c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b4a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	021b      	lsls	r3, r3, #8
 800b4ac:	697a      	ldr	r2, [r7, #20]
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a1d      	ldr	r2, [pc, #116]	@ (800b52c <TIM_OC3_SetConfig+0xd4>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d10d      	bne.n	800b4d6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b4c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	021b      	lsls	r3, r3, #8
 800b4c8:	697a      	ldr	r2, [r7, #20]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b4d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4a14      	ldr	r2, [pc, #80]	@ (800b52c <TIM_OC3_SetConfig+0xd4>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d113      	bne.n	800b506 <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b4e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b4ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	695b      	ldr	r3, [r3, #20]
 800b4f2:	011b      	lsls	r3, r3, #4
 800b4f4:	693a      	ldr	r2, [r7, #16]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	699b      	ldr	r3, [r3, #24]
 800b4fe:	011b      	lsls	r3, r3, #4
 800b500:	693a      	ldr	r2, [r7, #16]
 800b502:	4313      	orrs	r3, r2
 800b504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	685a      	ldr	r2, [r3, #4]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	697a      	ldr	r2, [r7, #20]
 800b51e:	621a      	str	r2, [r3, #32]
}
 800b520:	bf00      	nop
 800b522:	371c      	adds	r7, #28
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr
 800b52c:	40012c00 	.word	0x40012c00

0800b530 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b530:	b480      	push	{r7}
 800b532:	b087      	sub	sp, #28
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a1b      	ldr	r3, [r3, #32]
 800b53e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a1b      	ldr	r3, [r3, #32]
 800b544:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	69db      	ldr	r3, [r3, #28]
 800b556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b55e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b56a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	021b      	lsls	r3, r3, #8
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	4313      	orrs	r3, r2
 800b576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b57e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	031b      	lsls	r3, r3, #12
 800b586:	697a      	ldr	r2, [r7, #20]
 800b588:	4313      	orrs	r3, r2
 800b58a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a1e      	ldr	r2, [pc, #120]	@ (800b608 <TIM_OC4_SetConfig+0xd8>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d10d      	bne.n	800b5b0 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b59a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	031b      	lsls	r3, r3, #12
 800b5a2:	697a      	ldr	r2, [r7, #20]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b5ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4a15      	ldr	r2, [pc, #84]	@ (800b608 <TIM_OC4_SetConfig+0xd8>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d113      	bne.n	800b5e0 <TIM_OC4_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b5be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b5c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	695b      	ldr	r3, [r3, #20]
 800b5cc:	019b      	lsls	r3, r3, #6
 800b5ce:	693a      	ldr	r2, [r7, #16]
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	699b      	ldr	r3, [r3, #24]
 800b5d8:	019b      	lsls	r3, r3, #6
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	693a      	ldr	r2, [r7, #16]
 800b5e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	685a      	ldr	r2, [r3, #4]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	697a      	ldr	r2, [r7, #20]
 800b5f8:	621a      	str	r2, [r3, #32]
}
 800b5fa:	bf00      	nop
 800b5fc:	371c      	adds	r7, #28
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	40012c00 	.word	0x40012c00

0800b60c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b087      	sub	sp, #28
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6a1b      	ldr	r3, [r3, #32]
 800b61a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6a1b      	ldr	r3, [r3, #32]
 800b620:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b63a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b63e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	4313      	orrs	r3, r2
 800b648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b650:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	041b      	lsls	r3, r3, #16
 800b658:	693a      	ldr	r2, [r7, #16]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a0f      	ldr	r2, [pc, #60]	@ (800b6a0 <TIM_OC5_SetConfig+0x94>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d109      	bne.n	800b67a <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b66c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	695b      	ldr	r3, [r3, #20]
 800b672:	021b      	lsls	r3, r3, #8
 800b674:	697a      	ldr	r2, [r7, #20]
 800b676:	4313      	orrs	r3, r2
 800b678:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	697a      	ldr	r2, [r7, #20]
 800b67e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	685a      	ldr	r2, [r3, #4]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	693a      	ldr	r2, [r7, #16]
 800b692:	621a      	str	r2, [r3, #32]
}
 800b694:	bf00      	nop
 800b696:	371c      	adds	r7, #28
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr
 800b6a0:	40012c00 	.word	0x40012c00

0800b6a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b087      	sub	sp, #28
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a1b      	ldr	r3, [r3, #32]
 800b6b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6a1b      	ldr	r3, [r3, #32]
 800b6b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b6d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	021b      	lsls	r3, r3, #8
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b6ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	051b      	lsls	r3, r3, #20
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4a10      	ldr	r2, [pc, #64]	@ (800b73c <TIM_OC6_SetConfig+0x98>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d109      	bne.n	800b714 <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b706:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	695b      	ldr	r3, [r3, #20]
 800b70c:	029b      	lsls	r3, r3, #10
 800b70e:	697a      	ldr	r2, [r7, #20]
 800b710:	4313      	orrs	r3, r2
 800b712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	697a      	ldr	r2, [r7, #20]
 800b718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	685a      	ldr	r2, [r3, #4]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	693a      	ldr	r2, [r7, #16]
 800b72c:	621a      	str	r2, [r3, #32]
}
 800b72e:	bf00      	nop
 800b730:	371c      	adds	r7, #28
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	40012c00 	.word	0x40012c00

0800b740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b740:	b480      	push	{r7}
 800b742:	b087      	sub	sp, #28
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6a1b      	ldr	r3, [r3, #32]
 800b750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	f023 0201 	bic.w	r2, r3, #1
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	699b      	ldr	r3, [r3, #24]
 800b762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b76a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	011b      	lsls	r3, r3, #4
 800b770:	693a      	ldr	r2, [r7, #16]
 800b772:	4313      	orrs	r3, r2
 800b774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	f023 030a 	bic.w	r3, r3, #10
 800b77c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b77e:	697a      	ldr	r2, [r7, #20]
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	4313      	orrs	r3, r2
 800b784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	693a      	ldr	r2, [r7, #16]
 800b78a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	697a      	ldr	r2, [r7, #20]
 800b790:	621a      	str	r2, [r3, #32]
}
 800b792:	bf00      	nop
 800b794:	371c      	adds	r7, #28
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b087      	sub	sp, #28
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	60f8      	str	r0, [r7, #12]
 800b7a6:	60b9      	str	r1, [r7, #8]
 800b7a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	6a1b      	ldr	r3, [r3, #32]
 800b7ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6a1b      	ldr	r3, [r3, #32]
 800b7b4:	f023 0210 	bic.w	r2, r3, #16
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	699b      	ldr	r3, [r3, #24]
 800b7c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b7c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	031b      	lsls	r3, r3, #12
 800b7ce:	693a      	ldr	r2, [r7, #16]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b7da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	011b      	lsls	r3, r3, #4
 800b7e0:	697a      	ldr	r2, [r7, #20]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	693a      	ldr	r2, [r7, #16]
 800b7ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	697a      	ldr	r2, [r7, #20]
 800b7f0:	621a      	str	r2, [r3, #32]
}
 800b7f2:	bf00      	nop
 800b7f4:	371c      	adds	r7, #28
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr

0800b7fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b7fe:	b480      	push	{r7}
 800b800:	b085      	sub	sp, #20
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
 800b806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b818:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b81a:	683a      	ldr	r2, [r7, #0]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	4313      	orrs	r3, r2
 800b820:	f043 0307 	orr.w	r3, r3, #7
 800b824:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	609a      	str	r2, [r3, #8]
}
 800b82c:	bf00      	nop
 800b82e:	3714      	adds	r7, #20
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b838:	b480      	push	{r7}
 800b83a:	b087      	sub	sp, #28
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
 800b844:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b852:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	021a      	lsls	r2, r3, #8
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	431a      	orrs	r2, r3
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	4313      	orrs	r3, r2
 800b860:	697a      	ldr	r2, [r7, #20]
 800b862:	4313      	orrs	r3, r2
 800b864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	697a      	ldr	r2, [r7, #20]
 800b86a:	609a      	str	r2, [r3, #8]
}
 800b86c:	bf00      	nop
 800b86e:	371c      	adds	r7, #28
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d101      	bne.n	800b890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b88c:	2302      	movs	r3, #2
 800b88e:	e051      	b.n	800b934 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2202      	movs	r2, #2
 800b89c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a22      	ldr	r2, [pc, #136]	@ (800b940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d108      	bne.n	800b8cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b8c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b8d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a14      	ldr	r2, [pc, #80]	@ (800b940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d009      	beq.n	800b908 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8fc:	d004      	beq.n	800b908 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a10      	ldr	r2, [pc, #64]	@ (800b944 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d10c      	bne.n	800b922 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b90e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	68ba      	ldr	r2, [r7, #8]
 800b916:	4313      	orrs	r3, r2
 800b918:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	68ba      	ldr	r2, [r7, #8]
 800b920:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2201      	movs	r2, #1
 800b926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3714      	adds	r7, #20
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr
 800b940:	40012c00 	.word	0x40012c00
 800b944:	40000400 	.word	0x40000400

0800b948 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b964:	bf00      	nop
 800b966:	370c      	adds	r7, #12
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr

0800b970 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b978:	bf00      	nop
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b98c:	bf00      	nop
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b9b4:	bf00      	nop
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b9c8:	bf00      	nop
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d101      	bne.n	800b9e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e042      	b.n	800ba6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d106      	bne.n	800b9fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f7f8 f843 	bl	8003a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2224      	movs	r2, #36	@ 0x24
 800ba02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f022 0201 	bic.w	r2, r2, #1
 800ba14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d002      	beq.n	800ba24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 f9a6 	bl	800bd70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 f825 	bl	800ba74 <UART_SetConfig>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d101      	bne.n	800ba34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ba30:	2301      	movs	r3, #1
 800ba32:	e01b      	b.n	800ba6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	685a      	ldr	r2, [r3, #4]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ba42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	689a      	ldr	r2, [r3, #8]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ba52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f042 0201 	orr.w	r2, r2, #1
 800ba62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 fa25 	bl	800beb4 <UART_CheckIdleState>
 800ba6a:	4603      	mov	r3, r0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3708      	adds	r7, #8
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba78:	b094      	sub	sp, #80	@ 0x50
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba86:	689a      	ldr	r2, [r3, #8]
 800ba88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba8a:	691b      	ldr	r3, [r3, #16]
 800ba8c:	431a      	orrs	r2, r3
 800ba8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba90:	695b      	ldr	r3, [r3, #20]
 800ba92:	431a      	orrs	r2, r3
 800ba94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba96:	69db      	ldr	r3, [r3, #28]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	498a      	ldr	r1, [pc, #552]	@ (800bccc <UART_SetConfig+0x258>)
 800baa4:	4019      	ands	r1, r3
 800baa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baac:	430b      	orrs	r3, r1
 800baae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800baba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800babc:	68d9      	ldr	r1, [r3, #12]
 800babe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	ea40 0301 	orr.w	r3, r0, r1
 800bac6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baca:	699b      	ldr	r3, [r3, #24]
 800bacc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	4b7f      	ldr	r3, [pc, #508]	@ (800bcd0 <UART_SetConfig+0x25c>)
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d004      	beq.n	800bae2 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bada:	6a1a      	ldr	r2, [r3, #32]
 800badc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bade:	4313      	orrs	r3, r2
 800bae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800baec:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800baf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baf6:	430b      	orrs	r3, r1
 800baf8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb00:	f023 000f 	bic.w	r0, r3, #15
 800bb04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb06:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bb08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	ea40 0301 	orr.w	r3, r0, r1
 800bb10:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bb12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	4b6f      	ldr	r3, [pc, #444]	@ (800bcd4 <UART_SetConfig+0x260>)
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d102      	bne.n	800bb22 <UART_SetConfig+0xae>
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb20:	e01a      	b.n	800bb58 <UART_SetConfig+0xe4>
 800bb22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	4b6c      	ldr	r3, [pc, #432]	@ (800bcd8 <UART_SetConfig+0x264>)
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d102      	bne.n	800bb32 <UART_SetConfig+0xbe>
 800bb2c:	2302      	movs	r3, #2
 800bb2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb30:	e012      	b.n	800bb58 <UART_SetConfig+0xe4>
 800bb32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	4b69      	ldr	r3, [pc, #420]	@ (800bcdc <UART_SetConfig+0x268>)
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d102      	bne.n	800bb42 <UART_SetConfig+0xce>
 800bb3c:	2304      	movs	r3, #4
 800bb3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb40:	e00a      	b.n	800bb58 <UART_SetConfig+0xe4>
 800bb42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	4b62      	ldr	r3, [pc, #392]	@ (800bcd0 <UART_SetConfig+0x25c>)
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d103      	bne.n	800bb54 <UART_SetConfig+0xe0>
 800bb4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bb50:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb52:	e001      	b.n	800bb58 <UART_SetConfig+0xe4>
 800bb54:	2300      	movs	r3, #0
 800bb56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	4b5c      	ldr	r3, [pc, #368]	@ (800bcd0 <UART_SetConfig+0x25c>)
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d171      	bne.n	800bc46 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bb62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb64:	2200      	movs	r2, #0
 800bb66:	623b      	str	r3, [r7, #32]
 800bb68:	627a      	str	r2, [r7, #36]	@ 0x24
 800bb6a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bb6e:	f7fd facb 	bl	8009108 <HAL_RCCEx_GetPeriphCLKFreq>
 800bb72:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800bb74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	f000 80e2 	beq.w	800bd40 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb80:	4a57      	ldr	r2, [pc, #348]	@ (800bce0 <UART_SetConfig+0x26c>)
 800bb82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb86:	461a      	mov	r2, r3
 800bb88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb8a:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb8e:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb92:	685a      	ldr	r2, [r3, #4]
 800bb94:	4613      	mov	r3, r2
 800bb96:	005b      	lsls	r3, r3, #1
 800bb98:	4413      	add	r3, r2
 800bb9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d305      	bcc.n	800bbac <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bba6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d903      	bls.n	800bbb4 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 800bbac:	2301      	movs	r3, #1
 800bbae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bbb2:	e0c5      	b.n	800bd40 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	61bb      	str	r3, [r7, #24]
 800bbba:	61fa      	str	r2, [r7, #28]
 800bbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbc0:	4a47      	ldr	r2, [pc, #284]	@ (800bce0 <UART_SetConfig+0x26c>)
 800bbc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	2200      	movs	r2, #0
 800bbca:	613b      	str	r3, [r7, #16]
 800bbcc:	617a      	str	r2, [r7, #20]
 800bbce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bbd2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bbd6:	f7f5 f86b 	bl	8000cb0 <__aeabi_uldivmod>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	460b      	mov	r3, r1
 800bbde:	4610      	mov	r0, r2
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	f04f 0200 	mov.w	r2, #0
 800bbe6:	f04f 0300 	mov.w	r3, #0
 800bbea:	020b      	lsls	r3, r1, #8
 800bbec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bbf0:	0202      	lsls	r2, r0, #8
 800bbf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbf4:	6849      	ldr	r1, [r1, #4]
 800bbf6:	0849      	lsrs	r1, r1, #1
 800bbf8:	2000      	movs	r0, #0
 800bbfa:	460c      	mov	r4, r1
 800bbfc:	4605      	mov	r5, r0
 800bbfe:	eb12 0804 	adds.w	r8, r2, r4
 800bc02:	eb43 0905 	adc.w	r9, r3, r5
 800bc06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	60bb      	str	r3, [r7, #8]
 800bc0e:	60fa      	str	r2, [r7, #12]
 800bc10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc14:	4640      	mov	r0, r8
 800bc16:	4649      	mov	r1, r9
 800bc18:	f7f5 f84a 	bl	8000cb0 <__aeabi_uldivmod>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	460b      	mov	r3, r1
 800bc20:	4613      	mov	r3, r2
 800bc22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc2a:	d308      	bcc.n	800bc3e <UART_SetConfig+0x1ca>
 800bc2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc32:	d204      	bcs.n	800bc3e <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 800bc34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bc3a:	60da      	str	r2, [r3, #12]
 800bc3c:	e080      	b.n	800bd40 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bc44:	e07c      	b.n	800bd40 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc48:	69db      	ldr	r3, [r3, #28]
 800bc4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc4e:	d149      	bne.n	800bce4 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bc50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc52:	2200      	movs	r2, #0
 800bc54:	603b      	str	r3, [r7, #0]
 800bc56:	607a      	str	r2, [r7, #4]
 800bc58:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bc5c:	f7fd fa54 	bl	8009108 <HAL_RCCEx_GetPeriphCLKFreq>
 800bc60:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d06b      	beq.n	800bd40 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc6c:	4a1c      	ldr	r2, [pc, #112]	@ (800bce0 <UART_SetConfig+0x26c>)
 800bc6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc72:	461a      	mov	r2, r3
 800bc74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc76:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc7a:	005a      	lsls	r2, r3, #1
 800bc7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	085b      	lsrs	r3, r3, #1
 800bc82:	441a      	add	r2, r3
 800bc84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc90:	2b0f      	cmp	r3, #15
 800bc92:	d916      	bls.n	800bcc2 <UART_SetConfig+0x24e>
 800bc94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc9a:	d212      	bcs.n	800bcc2 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bc9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	f023 030f 	bic.w	r3, r3, #15
 800bca4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bca8:	085b      	lsrs	r3, r3, #1
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	f003 0307 	and.w	r3, r3, #7
 800bcb0:	b29a      	uxth	r2, r3
 800bcb2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800bcb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800bcbe:	60da      	str	r2, [r3, #12]
 800bcc0:	e03e      	b.n	800bd40 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bcc8:	e03a      	b.n	800bd40 <UART_SetConfig+0x2cc>
 800bcca:	bf00      	nop
 800bccc:	cfff69f3 	.word	0xcfff69f3
 800bcd0:	44002400 	.word	0x44002400
 800bcd4:	40013800 	.word	0x40013800
 800bcd8:	40004400 	.word	0x40004400
 800bcdc:	40004800 	.word	0x40004800
 800bce0:	08010594 	.word	0x08010594
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bce4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bce6:	2200      	movs	r2, #0
 800bce8:	469a      	mov	sl, r3
 800bcea:	4693      	mov	fp, r2
 800bcec:	4650      	mov	r0, sl
 800bcee:	4659      	mov	r1, fp
 800bcf0:	f7fd fa0a 	bl	8009108 <HAL_RCCEx_GetPeriphCLKFreq>
 800bcf4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800bcf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d021      	beq.n	800bd40 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd00:	4a1a      	ldr	r2, [pc, #104]	@ (800bd6c <UART_SetConfig+0x2f8>)
 800bd02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd06:	461a      	mov	r2, r3
 800bd08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd0a:	fbb3 f2f2 	udiv	r2, r3, r2
 800bd0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	085b      	lsrs	r3, r3, #1
 800bd14:	441a      	add	r2, r3
 800bd16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd22:	2b0f      	cmp	r3, #15
 800bd24:	d909      	bls.n	800bd3a <UART_SetConfig+0x2c6>
 800bd26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd2c:	d205      	bcs.n	800bd3a <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd30:	b29a      	uxth	r2, r3
 800bd32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	60da      	str	r2, [r3, #12]
 800bd38:	e002      	b.n	800bd40 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bd40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd42:	2201      	movs	r2, #1
 800bd44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd52:	2200      	movs	r2, #0
 800bd54:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bd56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd58:	2200      	movs	r2, #0
 800bd5a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bd5c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3750      	adds	r7, #80	@ 0x50
 800bd64:	46bd      	mov	sp, r7
 800bd66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd6a:	bf00      	nop
 800bd6c:	08010594 	.word	0x08010594

0800bd70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd7c:	f003 0308 	and.w	r3, r3, #8
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d00a      	beq.n	800bd9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	430a      	orrs	r2, r1
 800bd98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd9e:	f003 0301 	and.w	r3, r3, #1
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00a      	beq.n	800bdbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	430a      	orrs	r2, r1
 800bdba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc0:	f003 0302 	and.w	r3, r3, #2
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00a      	beq.n	800bdde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	430a      	orrs	r2, r1
 800bddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bde2:	f003 0304 	and.w	r3, r3, #4
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d00a      	beq.n	800be00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	430a      	orrs	r2, r1
 800bdfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be04:	f003 0310 	and.w	r3, r3, #16
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d00a      	beq.n	800be22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	430a      	orrs	r2, r1
 800be20:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be26:	f003 0320 	and.w	r3, r3, #32
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d00a      	beq.n	800be44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	430a      	orrs	r2, r1
 800be42:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d01a      	beq.n	800be86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	430a      	orrs	r2, r1
 800be64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be6e:	d10a      	bne.n	800be86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	430a      	orrs	r2, r1
 800be84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00a      	beq.n	800bea8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	430a      	orrs	r2, r1
 800bea6:	605a      	str	r2, [r3, #4]
  }
}
 800bea8:	bf00      	nop
 800beaa:	370c      	adds	r7, #12
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b098      	sub	sp, #96	@ 0x60
 800beb8:	af02      	add	r7, sp, #8
 800beba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bec4:	f7f8 f8f8 	bl	80040b8 <HAL_GetTick>
 800bec8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f003 0308 	and.w	r3, r3, #8
 800bed4:	2b08      	cmp	r3, #8
 800bed6:	d12f      	bne.n	800bf38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bed8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bee0:	2200      	movs	r2, #0
 800bee2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 f88e 	bl	800c008 <UART_WaitOnFlagUntilTimeout>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d022      	beq.n	800bf38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800befa:	e853 3f00 	ldrex	r3, [r3]
 800befe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bf00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf06:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf10:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bf16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf18:	e841 2300 	strex	r3, r2, [r1]
 800bf1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bf1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d1e6      	bne.n	800bef2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2220      	movs	r2, #32
 800bf28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf34:	2303      	movs	r3, #3
 800bf36:	e063      	b.n	800c000 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f003 0304 	and.w	r3, r3, #4
 800bf42:	2b04      	cmp	r3, #4
 800bf44:	d149      	bne.n	800bfda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf4a:	9300      	str	r3, [sp, #0]
 800bf4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f000 f857 	bl	800c008 <UART_WaitOnFlagUntilTimeout>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d03c      	beq.n	800bfda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf68:	e853 3f00 	ldrex	r3, [r3]
 800bf6c:	623b      	str	r3, [r7, #32]
   return(result);
 800bf6e:	6a3b      	ldr	r3, [r7, #32]
 800bf70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf7e:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf86:	e841 2300 	strex	r3, r2, [r1]
 800bf8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bf8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d1e6      	bne.n	800bf60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	3308      	adds	r3, #8
 800bf98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	e853 3f00 	ldrex	r3, [r3]
 800bfa0:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f023 0301 	bic.w	r3, r3, #1
 800bfa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	3308      	adds	r3, #8
 800bfb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bfb2:	61fa      	str	r2, [r7, #28]
 800bfb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb6:	69b9      	ldr	r1, [r7, #24]
 800bfb8:	69fa      	ldr	r2, [r7, #28]
 800bfba:	e841 2300 	strex	r3, r2, [r1]
 800bfbe:	617b      	str	r3, [r7, #20]
   return(result);
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d1e5      	bne.n	800bf92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2220      	movs	r2, #32
 800bfca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfd6:	2303      	movs	r3, #3
 800bfd8:	e012      	b.n	800c000 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2220      	movs	r2, #32
 800bfde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2220      	movs	r2, #32
 800bfe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bffe:	2300      	movs	r3, #0
}
 800c000:	4618      	mov	r0, r3
 800c002:	3758      	adds	r7, #88	@ 0x58
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	603b      	str	r3, [r7, #0]
 800c014:	4613      	mov	r3, r2
 800c016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c018:	e04f      	b.n	800c0ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c020:	d04b      	beq.n	800c0ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c022:	f7f8 f849 	bl	80040b8 <HAL_GetTick>
 800c026:	4602      	mov	r2, r0
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	1ad3      	subs	r3, r2, r3
 800c02c:	69ba      	ldr	r2, [r7, #24]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d302      	bcc.n	800c038 <UART_WaitOnFlagUntilTimeout+0x30>
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d101      	bne.n	800c03c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c038:	2303      	movs	r3, #3
 800c03a:	e04e      	b.n	800c0da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f003 0304 	and.w	r3, r3, #4
 800c046:	2b00      	cmp	r3, #0
 800c048:	d037      	beq.n	800c0ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	2b80      	cmp	r3, #128	@ 0x80
 800c04e:	d034      	beq.n	800c0ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	2b40      	cmp	r3, #64	@ 0x40
 800c054:	d031      	beq.n	800c0ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	69db      	ldr	r3, [r3, #28]
 800c05c:	f003 0308 	and.w	r3, r3, #8
 800c060:	2b08      	cmp	r3, #8
 800c062:	d110      	bne.n	800c086 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2208      	movs	r2, #8
 800c06a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	f000 f838 	bl	800c0e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2208      	movs	r2, #8
 800c076:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2200      	movs	r2, #0
 800c07e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c082:	2301      	movs	r3, #1
 800c084:	e029      	b.n	800c0da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	69db      	ldr	r3, [r3, #28]
 800c08c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c090:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c094:	d111      	bne.n	800c0ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c09e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c0a0:	68f8      	ldr	r0, [r7, #12]
 800c0a2:	f000 f81e 	bl	800c0e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2220      	movs	r2, #32
 800c0aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c0b6:	2303      	movs	r3, #3
 800c0b8:	e00f      	b.n	800c0da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	69da      	ldr	r2, [r3, #28]
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	68ba      	ldr	r2, [r7, #8]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	bf0c      	ite	eq
 800c0ca:	2301      	moveq	r3, #1
 800c0cc:	2300      	movne	r3, #0
 800c0ce:	b2db      	uxtb	r3, r3
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	79fb      	ldrb	r3, [r7, #7]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d0a0      	beq.n	800c01a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c0d8:	2300      	movs	r3, #0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c0e2:	b480      	push	{r7}
 800c0e4:	b095      	sub	sp, #84	@ 0x54
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0f2:	e853 3f00 	ldrex	r3, [r3]
 800c0f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	461a      	mov	r2, r3
 800c106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c108:	643b      	str	r3, [r7, #64]	@ 0x40
 800c10a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c10c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c10e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c110:	e841 2300 	strex	r3, r2, [r1]
 800c114:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d1e6      	bne.n	800c0ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	3308      	adds	r3, #8
 800c122:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c124:	6a3b      	ldr	r3, [r7, #32]
 800c126:	e853 3f00 	ldrex	r3, [r3]
 800c12a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c132:	f023 0301 	bic.w	r3, r3, #1
 800c136:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	3308      	adds	r3, #8
 800c13e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c140:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c142:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c144:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c148:	e841 2300 	strex	r3, r2, [r1]
 800c14c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c150:	2b00      	cmp	r3, #0
 800c152:	d1e3      	bne.n	800c11c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c158:	2b01      	cmp	r3, #1
 800c15a:	d118      	bne.n	800c18e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	e853 3f00 	ldrex	r3, [r3]
 800c168:	60bb      	str	r3, [r7, #8]
   return(result);
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	f023 0310 	bic.w	r3, r3, #16
 800c170:	647b      	str	r3, [r7, #68]	@ 0x44
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	461a      	mov	r2, r3
 800c178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c17a:	61bb      	str	r3, [r7, #24]
 800c17c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c17e:	6979      	ldr	r1, [r7, #20]
 800c180:	69ba      	ldr	r2, [r7, #24]
 800c182:	e841 2300 	strex	r3, r2, [r1]
 800c186:	613b      	str	r3, [r7, #16]
   return(result);
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d1e6      	bne.n	800c15c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2220      	movs	r2, #32
 800c192:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c1a2:	bf00      	nop
 800c1a4:	3754      	adds	r7, #84	@ 0x54
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr

0800c1ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c1ae:	b480      	push	{r7}
 800c1b0:	b085      	sub	sp, #20
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d101      	bne.n	800c1c4 <HAL_UARTEx_DisableFifoMode+0x16>
 800c1c0:	2302      	movs	r3, #2
 800c1c2:	e027      	b.n	800c214 <HAL_UARTEx_DisableFifoMode+0x66>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2224      	movs	r2, #36	@ 0x24
 800c1d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f022 0201 	bic.w	r2, r2, #1
 800c1ea:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c1f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2220      	movs	r2, #32
 800c206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	3714      	adds	r7, #20
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c230:	2b01      	cmp	r3, #1
 800c232:	d101      	bne.n	800c238 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c234:	2302      	movs	r3, #2
 800c236:	e02d      	b.n	800c294 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2201      	movs	r2, #1
 800c23c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2224      	movs	r2, #36	@ 0x24
 800c244:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f022 0201 	bic.w	r2, r2, #1
 800c25e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	683a      	ldr	r2, [r7, #0]
 800c270:	430a      	orrs	r2, r1
 800c272:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 f84f 	bl	800c318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	68fa      	ldr	r2, [r7, #12]
 800c280:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2220      	movs	r2, #32
 800c286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2200      	movs	r2, #0
 800c28e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	3710      	adds	r7, #16
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d101      	bne.n	800c2b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c2b0:	2302      	movs	r3, #2
 800c2b2:	e02d      	b.n	800c310 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2224      	movs	r2, #36	@ 0x24
 800c2c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f022 0201 	bic.w	r2, r2, #1
 800c2da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	689b      	ldr	r3, [r3, #8]
 800c2e2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	683a      	ldr	r2, [r7, #0]
 800c2ec:	430a      	orrs	r2, r1
 800c2ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 f811 	bl	800c318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2220      	movs	r2, #32
 800c302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2200      	movs	r2, #0
 800c30a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3710      	adds	r7, #16
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c318:	b480      	push	{r7}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c324:	2b00      	cmp	r3, #0
 800c326:	d108      	bne.n	800c33a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2201      	movs	r2, #1
 800c32c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2201      	movs	r2, #1
 800c334:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c338:	e031      	b.n	800c39e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c33a:	2308      	movs	r3, #8
 800c33c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c33e:	2308      	movs	r3, #8
 800c340:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	689b      	ldr	r3, [r3, #8]
 800c348:	0e5b      	lsrs	r3, r3, #25
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	f003 0307 	and.w	r3, r3, #7
 800c350:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	0f5b      	lsrs	r3, r3, #29
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	f003 0307 	and.w	r3, r3, #7
 800c360:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c362:	7bbb      	ldrb	r3, [r7, #14]
 800c364:	7b3a      	ldrb	r2, [r7, #12]
 800c366:	4911      	ldr	r1, [pc, #68]	@ (800c3ac <UARTEx_SetNbDataToProcess+0x94>)
 800c368:	5c8a      	ldrb	r2, [r1, r2]
 800c36a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c36e:	7b3a      	ldrb	r2, [r7, #12]
 800c370:	490f      	ldr	r1, [pc, #60]	@ (800c3b0 <UARTEx_SetNbDataToProcess+0x98>)
 800c372:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c374:	fb93 f3f2 	sdiv	r3, r3, r2
 800c378:	b29a      	uxth	r2, r3
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c380:	7bfb      	ldrb	r3, [r7, #15]
 800c382:	7b7a      	ldrb	r2, [r7, #13]
 800c384:	4909      	ldr	r1, [pc, #36]	@ (800c3ac <UARTEx_SetNbDataToProcess+0x94>)
 800c386:	5c8a      	ldrb	r2, [r1, r2]
 800c388:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c38c:	7b7a      	ldrb	r2, [r7, #13]
 800c38e:	4908      	ldr	r1, [pc, #32]	@ (800c3b0 <UARTEx_SetNbDataToProcess+0x98>)
 800c390:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c392:	fb93 f3f2 	sdiv	r3, r3, r2
 800c396:	b29a      	uxth	r2, r3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c39e:	bf00      	nop
 800c3a0:	3714      	adds	r7, #20
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr
 800c3aa:	bf00      	nop
 800c3ac:	080105ac 	.word	0x080105ac
 800c3b0:	080105b4 	.word	0x080105b4

0800c3b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3cc:	f043 0201 	orr.w	r2, r3, #1
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	370c      	adds	r7, #12
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr

0800c3e2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	f107 001c 	add.w	r0, r7, #28
 800c3f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d101      	bne.n	800c3fe <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e008      	b.n	800c410 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f7ff ffd8 	bl	800c3b4 <USB_CoreReset>
 800c404:	4603      	mov	r3, r0
 800c406:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800c40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c410:	4618      	mov	r0, r3
 800c412:	3710      	adds	r7, #16
 800c414:	46bd      	mov	sp, r7
 800c416:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c41a:	b004      	add	sp, #16
 800c41c:	4770      	bx	lr

0800c41e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800c41e:	b480      	push	{r7}
 800c420:	b085      	sub	sp, #20
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c426:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c42a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	43db      	mvns	r3, r3
 800c434:	401a      	ands	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c43a:	2300      	movs	r3, #0
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3714      	adds	r7, #20
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	460b      	mov	r3, r1
 800c452:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800c454:	78fb      	ldrb	r3, [r7, #3]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d106      	bne.n	800c468 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c45e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	641a      	str	r2, [r3, #64]	@ 0x40
 800c466:	e00b      	b.n	800c480 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800c468:	78fb      	ldrb	r3, [r7, #3]
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d106      	bne.n	800c47c <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c472:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	641a      	str	r2, [r3, #64]	@ 0x40
 800c47a:	e001      	b.n	800c480 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800c47c:	2301      	movs	r3, #1
 800c47e:	e000      	b.n	800c482 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	370c      	adds	r7, #12
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr

0800c48e <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800c48e:	b084      	sub	sp, #16
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	f107 001c 	add.w	r0, r7, #28
 800c49c:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4aa:	f023 0201 	bic.w	r2, r3, #1
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800c4b2:	2100      	movs	r1, #0
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f7ff ffc7 	bl	800c448 <USB_SetCurrentMode>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800c4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3710      	adds	r7, #16
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4d0:	b004      	add	sp, #16
 800c4d2:	4770      	bx	lr

0800c4d4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4e0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c4e8:	2300      	movs	r3, #0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr

0800c4f6 <__cvt>:
 800c4f6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4fa:	ec57 6b10 	vmov	r6, r7, d0
 800c4fe:	2f00      	cmp	r7, #0
 800c500:	460c      	mov	r4, r1
 800c502:	4619      	mov	r1, r3
 800c504:	463b      	mov	r3, r7
 800c506:	bfb4      	ite	lt
 800c508:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c50c:	2300      	movge	r3, #0
 800c50e:	4691      	mov	r9, r2
 800c510:	bfbf      	itttt	lt
 800c512:	4632      	movlt	r2, r6
 800c514:	461f      	movlt	r7, r3
 800c516:	232d      	movlt	r3, #45	@ 0x2d
 800c518:	4616      	movlt	r6, r2
 800c51a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c51e:	700b      	strb	r3, [r1, #0]
 800c520:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c522:	f023 0820 	bic.w	r8, r3, #32
 800c526:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c52a:	d005      	beq.n	800c538 <__cvt+0x42>
 800c52c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c530:	d100      	bne.n	800c534 <__cvt+0x3e>
 800c532:	3401      	adds	r4, #1
 800c534:	2102      	movs	r1, #2
 800c536:	e000      	b.n	800c53a <__cvt+0x44>
 800c538:	2103      	movs	r1, #3
 800c53a:	ab03      	add	r3, sp, #12
 800c53c:	4622      	mov	r2, r4
 800c53e:	9301      	str	r3, [sp, #4]
 800c540:	ab02      	add	r3, sp, #8
 800c542:	ec47 6b10 	vmov	d0, r6, r7
 800c546:	9300      	str	r3, [sp, #0]
 800c548:	4653      	mov	r3, sl
 800c54a:	f000 fe7d 	bl	800d248 <_dtoa_r>
 800c54e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c552:	4605      	mov	r5, r0
 800c554:	d119      	bne.n	800c58a <__cvt+0x94>
 800c556:	f019 0f01 	tst.w	r9, #1
 800c55a:	d00e      	beq.n	800c57a <__cvt+0x84>
 800c55c:	eb00 0904 	add.w	r9, r0, r4
 800c560:	2200      	movs	r2, #0
 800c562:	2300      	movs	r3, #0
 800c564:	4630      	mov	r0, r6
 800c566:	4639      	mov	r1, r7
 800c568:	f7f4 fac2 	bl	8000af0 <__aeabi_dcmpeq>
 800c56c:	b108      	cbz	r0, 800c572 <__cvt+0x7c>
 800c56e:	f8cd 900c 	str.w	r9, [sp, #12]
 800c572:	2230      	movs	r2, #48	@ 0x30
 800c574:	9b03      	ldr	r3, [sp, #12]
 800c576:	454b      	cmp	r3, r9
 800c578:	d31e      	bcc.n	800c5b8 <__cvt+0xc2>
 800c57a:	9b03      	ldr	r3, [sp, #12]
 800c57c:	4628      	mov	r0, r5
 800c57e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c580:	1b5b      	subs	r3, r3, r5
 800c582:	6013      	str	r3, [r2, #0]
 800c584:	b004      	add	sp, #16
 800c586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c58a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c58e:	eb00 0904 	add.w	r9, r0, r4
 800c592:	d1e5      	bne.n	800c560 <__cvt+0x6a>
 800c594:	7803      	ldrb	r3, [r0, #0]
 800c596:	2b30      	cmp	r3, #48	@ 0x30
 800c598:	d10a      	bne.n	800c5b0 <__cvt+0xba>
 800c59a:	2200      	movs	r2, #0
 800c59c:	2300      	movs	r3, #0
 800c59e:	4630      	mov	r0, r6
 800c5a0:	4639      	mov	r1, r7
 800c5a2:	f7f4 faa5 	bl	8000af0 <__aeabi_dcmpeq>
 800c5a6:	b918      	cbnz	r0, 800c5b0 <__cvt+0xba>
 800c5a8:	f1c4 0401 	rsb	r4, r4, #1
 800c5ac:	f8ca 4000 	str.w	r4, [sl]
 800c5b0:	f8da 3000 	ldr.w	r3, [sl]
 800c5b4:	4499      	add	r9, r3
 800c5b6:	e7d3      	b.n	800c560 <__cvt+0x6a>
 800c5b8:	1c59      	adds	r1, r3, #1
 800c5ba:	9103      	str	r1, [sp, #12]
 800c5bc:	701a      	strb	r2, [r3, #0]
 800c5be:	e7d9      	b.n	800c574 <__cvt+0x7e>

0800c5c0 <__exponent>:
 800c5c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5c2:	2900      	cmp	r1, #0
 800c5c4:	7002      	strb	r2, [r0, #0]
 800c5c6:	bfba      	itte	lt
 800c5c8:	4249      	neglt	r1, r1
 800c5ca:	232d      	movlt	r3, #45	@ 0x2d
 800c5cc:	232b      	movge	r3, #43	@ 0x2b
 800c5ce:	2909      	cmp	r1, #9
 800c5d0:	7043      	strb	r3, [r0, #1]
 800c5d2:	dd28      	ble.n	800c626 <__exponent+0x66>
 800c5d4:	f10d 0307 	add.w	r3, sp, #7
 800c5d8:	270a      	movs	r7, #10
 800c5da:	461d      	mov	r5, r3
 800c5dc:	461a      	mov	r2, r3
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	fbb1 f6f7 	udiv	r6, r1, r7
 800c5e4:	fb07 1416 	mls	r4, r7, r6, r1
 800c5e8:	3430      	adds	r4, #48	@ 0x30
 800c5ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c5ee:	460c      	mov	r4, r1
 800c5f0:	4631      	mov	r1, r6
 800c5f2:	2c63      	cmp	r4, #99	@ 0x63
 800c5f4:	dcf2      	bgt.n	800c5dc <__exponent+0x1c>
 800c5f6:	3130      	adds	r1, #48	@ 0x30
 800c5f8:	1e94      	subs	r4, r2, #2
 800c5fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c5fe:	1c41      	adds	r1, r0, #1
 800c600:	4623      	mov	r3, r4
 800c602:	42ab      	cmp	r3, r5
 800c604:	d30a      	bcc.n	800c61c <__exponent+0x5c>
 800c606:	f10d 0309 	add.w	r3, sp, #9
 800c60a:	1a9b      	subs	r3, r3, r2
 800c60c:	42ac      	cmp	r4, r5
 800c60e:	bf88      	it	hi
 800c610:	2300      	movhi	r3, #0
 800c612:	3302      	adds	r3, #2
 800c614:	4403      	add	r3, r0
 800c616:	1a18      	subs	r0, r3, r0
 800c618:	b003      	add	sp, #12
 800c61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c61c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c620:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c624:	e7ed      	b.n	800c602 <__exponent+0x42>
 800c626:	2330      	movs	r3, #48	@ 0x30
 800c628:	3130      	adds	r1, #48	@ 0x30
 800c62a:	7083      	strb	r3, [r0, #2]
 800c62c:	1d03      	adds	r3, r0, #4
 800c62e:	70c1      	strb	r1, [r0, #3]
 800c630:	e7f1      	b.n	800c616 <__exponent+0x56>
	...

0800c634 <_printf_float>:
 800c634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c638:	b08d      	sub	sp, #52	@ 0x34
 800c63a:	460c      	mov	r4, r1
 800c63c:	4616      	mov	r6, r2
 800c63e:	461f      	mov	r7, r3
 800c640:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c644:	4605      	mov	r5, r0
 800c646:	f000 fcdf 	bl	800d008 <_localeconv_r>
 800c64a:	6803      	ldr	r3, [r0, #0]
 800c64c:	4618      	mov	r0, r3
 800c64e:	9304      	str	r3, [sp, #16]
 800c650:	f7f3 fe22 	bl	8000298 <strlen>
 800c654:	2300      	movs	r3, #0
 800c656:	9005      	str	r0, [sp, #20]
 800c658:	930a      	str	r3, [sp, #40]	@ 0x28
 800c65a:	f8d8 3000 	ldr.w	r3, [r8]
 800c65e:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c662:	3307      	adds	r3, #7
 800c664:	f8d4 b000 	ldr.w	fp, [r4]
 800c668:	f023 0307 	bic.w	r3, r3, #7
 800c66c:	f103 0208 	add.w	r2, r3, #8
 800c670:	f8c8 2000 	str.w	r2, [r8]
 800c674:	f04f 32ff 	mov.w	r2, #4294967295
 800c678:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c67c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c680:	f8cd 8018 	str.w	r8, [sp, #24]
 800c684:	9307      	str	r3, [sp, #28]
 800c686:	4b9d      	ldr	r3, [pc, #628]	@ (800c8fc <_printf_float+0x2c8>)
 800c688:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c68c:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c690:	f7f4 fa60 	bl	8000b54 <__aeabi_dcmpun>
 800c694:	bb70      	cbnz	r0, 800c6f4 <_printf_float+0xc0>
 800c696:	f04f 32ff 	mov.w	r2, #4294967295
 800c69a:	4b98      	ldr	r3, [pc, #608]	@ (800c8fc <_printf_float+0x2c8>)
 800c69c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6a0:	f7f4 fa3a 	bl	8000b18 <__aeabi_dcmple>
 800c6a4:	bb30      	cbnz	r0, 800c6f4 <_printf_float+0xc0>
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	4640      	mov	r0, r8
 800c6ac:	4649      	mov	r1, r9
 800c6ae:	f7f4 fa29 	bl	8000b04 <__aeabi_dcmplt>
 800c6b2:	b110      	cbz	r0, 800c6ba <_printf_float+0x86>
 800c6b4:	232d      	movs	r3, #45	@ 0x2d
 800c6b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6ba:	4a91      	ldr	r2, [pc, #580]	@ (800c900 <_printf_float+0x2cc>)
 800c6bc:	4b91      	ldr	r3, [pc, #580]	@ (800c904 <_printf_float+0x2d0>)
 800c6be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c6c2:	bf94      	ite	ls
 800c6c4:	4690      	movls	r8, r2
 800c6c6:	4698      	movhi	r8, r3
 800c6c8:	2303      	movs	r3, #3
 800c6ca:	f04f 0900 	mov.w	r9, #0
 800c6ce:	6123      	str	r3, [r4, #16]
 800c6d0:	f02b 0304 	bic.w	r3, fp, #4
 800c6d4:	6023      	str	r3, [r4, #0]
 800c6d6:	4633      	mov	r3, r6
 800c6d8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c6da:	4621      	mov	r1, r4
 800c6dc:	4628      	mov	r0, r5
 800c6de:	9700      	str	r7, [sp, #0]
 800c6e0:	f000 f9d2 	bl	800ca88 <_printf_common>
 800c6e4:	3001      	adds	r0, #1
 800c6e6:	f040 808d 	bne.w	800c804 <_printf_float+0x1d0>
 800c6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ee:	b00d      	add	sp, #52	@ 0x34
 800c6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f4:	4642      	mov	r2, r8
 800c6f6:	464b      	mov	r3, r9
 800c6f8:	4640      	mov	r0, r8
 800c6fa:	4649      	mov	r1, r9
 800c6fc:	f7f4 fa2a 	bl	8000b54 <__aeabi_dcmpun>
 800c700:	b140      	cbz	r0, 800c714 <_printf_float+0xe0>
 800c702:	464b      	mov	r3, r9
 800c704:	4a80      	ldr	r2, [pc, #512]	@ (800c908 <_printf_float+0x2d4>)
 800c706:	2b00      	cmp	r3, #0
 800c708:	bfbc      	itt	lt
 800c70a:	232d      	movlt	r3, #45	@ 0x2d
 800c70c:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c710:	4b7e      	ldr	r3, [pc, #504]	@ (800c90c <_printf_float+0x2d8>)
 800c712:	e7d4      	b.n	800c6be <_printf_float+0x8a>
 800c714:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c718:	6863      	ldr	r3, [r4, #4]
 800c71a:	9206      	str	r2, [sp, #24]
 800c71c:	1c5a      	adds	r2, r3, #1
 800c71e:	d13b      	bne.n	800c798 <_printf_float+0x164>
 800c720:	2306      	movs	r3, #6
 800c722:	6063      	str	r3, [r4, #4]
 800c724:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c728:	2300      	movs	r3, #0
 800c72a:	4628      	mov	r0, r5
 800c72c:	6022      	str	r2, [r4, #0]
 800c72e:	9303      	str	r3, [sp, #12]
 800c730:	ab0a      	add	r3, sp, #40	@ 0x28
 800c732:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c736:	ab09      	add	r3, sp, #36	@ 0x24
 800c738:	ec49 8b10 	vmov	d0, r8, r9
 800c73c:	9300      	str	r3, [sp, #0]
 800c73e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c742:	6861      	ldr	r1, [r4, #4]
 800c744:	f7ff fed7 	bl	800c4f6 <__cvt>
 800c748:	9b06      	ldr	r3, [sp, #24]
 800c74a:	4680      	mov	r8, r0
 800c74c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c74e:	2b47      	cmp	r3, #71	@ 0x47
 800c750:	d129      	bne.n	800c7a6 <_printf_float+0x172>
 800c752:	1cc8      	adds	r0, r1, #3
 800c754:	db02      	blt.n	800c75c <_printf_float+0x128>
 800c756:	6863      	ldr	r3, [r4, #4]
 800c758:	4299      	cmp	r1, r3
 800c75a:	dd41      	ble.n	800c7e0 <_printf_float+0x1ac>
 800c75c:	f1aa 0a02 	sub.w	sl, sl, #2
 800c760:	fa5f fa8a 	uxtb.w	sl, sl
 800c764:	3901      	subs	r1, #1
 800c766:	4652      	mov	r2, sl
 800c768:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c76c:	9109      	str	r1, [sp, #36]	@ 0x24
 800c76e:	f7ff ff27 	bl	800c5c0 <__exponent>
 800c772:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c774:	4681      	mov	r9, r0
 800c776:	1813      	adds	r3, r2, r0
 800c778:	2a01      	cmp	r2, #1
 800c77a:	6123      	str	r3, [r4, #16]
 800c77c:	dc02      	bgt.n	800c784 <_printf_float+0x150>
 800c77e:	6822      	ldr	r2, [r4, #0]
 800c780:	07d2      	lsls	r2, r2, #31
 800c782:	d501      	bpl.n	800c788 <_printf_float+0x154>
 800c784:	3301      	adds	r3, #1
 800c786:	6123      	str	r3, [r4, #16]
 800c788:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d0a2      	beq.n	800c6d6 <_printf_float+0xa2>
 800c790:	232d      	movs	r3, #45	@ 0x2d
 800c792:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c796:	e79e      	b.n	800c6d6 <_printf_float+0xa2>
 800c798:	9a06      	ldr	r2, [sp, #24]
 800c79a:	2a47      	cmp	r2, #71	@ 0x47
 800c79c:	d1c2      	bne.n	800c724 <_printf_float+0xf0>
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d1c0      	bne.n	800c724 <_printf_float+0xf0>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e7bd      	b.n	800c722 <_printf_float+0xee>
 800c7a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c7aa:	d9db      	bls.n	800c764 <_printf_float+0x130>
 800c7ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c7b0:	d118      	bne.n	800c7e4 <_printf_float+0x1b0>
 800c7b2:	2900      	cmp	r1, #0
 800c7b4:	6863      	ldr	r3, [r4, #4]
 800c7b6:	dd0b      	ble.n	800c7d0 <_printf_float+0x19c>
 800c7b8:	6121      	str	r1, [r4, #16]
 800c7ba:	b913      	cbnz	r3, 800c7c2 <_printf_float+0x18e>
 800c7bc:	6822      	ldr	r2, [r4, #0]
 800c7be:	07d0      	lsls	r0, r2, #31
 800c7c0:	d502      	bpl.n	800c7c8 <_printf_float+0x194>
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	440b      	add	r3, r1
 800c7c6:	6123      	str	r3, [r4, #16]
 800c7c8:	f04f 0900 	mov.w	r9, #0
 800c7cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c7ce:	e7db      	b.n	800c788 <_printf_float+0x154>
 800c7d0:	b913      	cbnz	r3, 800c7d8 <_printf_float+0x1a4>
 800c7d2:	6822      	ldr	r2, [r4, #0]
 800c7d4:	07d2      	lsls	r2, r2, #31
 800c7d6:	d501      	bpl.n	800c7dc <_printf_float+0x1a8>
 800c7d8:	3302      	adds	r3, #2
 800c7da:	e7f4      	b.n	800c7c6 <_printf_float+0x192>
 800c7dc:	2301      	movs	r3, #1
 800c7de:	e7f2      	b.n	800c7c6 <_printf_float+0x192>
 800c7e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c7e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7e6:	4299      	cmp	r1, r3
 800c7e8:	db05      	blt.n	800c7f6 <_printf_float+0x1c2>
 800c7ea:	6823      	ldr	r3, [r4, #0]
 800c7ec:	6121      	str	r1, [r4, #16]
 800c7ee:	07d8      	lsls	r0, r3, #31
 800c7f0:	d5ea      	bpl.n	800c7c8 <_printf_float+0x194>
 800c7f2:	1c4b      	adds	r3, r1, #1
 800c7f4:	e7e7      	b.n	800c7c6 <_printf_float+0x192>
 800c7f6:	2900      	cmp	r1, #0
 800c7f8:	bfd4      	ite	le
 800c7fa:	f1c1 0202 	rsble	r2, r1, #2
 800c7fe:	2201      	movgt	r2, #1
 800c800:	4413      	add	r3, r2
 800c802:	e7e0      	b.n	800c7c6 <_printf_float+0x192>
 800c804:	6823      	ldr	r3, [r4, #0]
 800c806:	055a      	lsls	r2, r3, #21
 800c808:	d407      	bmi.n	800c81a <_printf_float+0x1e6>
 800c80a:	6923      	ldr	r3, [r4, #16]
 800c80c:	4642      	mov	r2, r8
 800c80e:	4631      	mov	r1, r6
 800c810:	4628      	mov	r0, r5
 800c812:	47b8      	blx	r7
 800c814:	3001      	adds	r0, #1
 800c816:	d12b      	bne.n	800c870 <_printf_float+0x23c>
 800c818:	e767      	b.n	800c6ea <_printf_float+0xb6>
 800c81a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c81e:	f240 80dd 	bls.w	800c9dc <_printf_float+0x3a8>
 800c822:	2200      	movs	r2, #0
 800c824:	2300      	movs	r3, #0
 800c826:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c82a:	f7f4 f961 	bl	8000af0 <__aeabi_dcmpeq>
 800c82e:	2800      	cmp	r0, #0
 800c830:	d033      	beq.n	800c89a <_printf_float+0x266>
 800c832:	2301      	movs	r3, #1
 800c834:	4a36      	ldr	r2, [pc, #216]	@ (800c910 <_printf_float+0x2dc>)
 800c836:	4631      	mov	r1, r6
 800c838:	4628      	mov	r0, r5
 800c83a:	47b8      	blx	r7
 800c83c:	3001      	adds	r0, #1
 800c83e:	f43f af54 	beq.w	800c6ea <_printf_float+0xb6>
 800c842:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c846:	4543      	cmp	r3, r8
 800c848:	db02      	blt.n	800c850 <_printf_float+0x21c>
 800c84a:	6823      	ldr	r3, [r4, #0]
 800c84c:	07d8      	lsls	r0, r3, #31
 800c84e:	d50f      	bpl.n	800c870 <_printf_float+0x23c>
 800c850:	4631      	mov	r1, r6
 800c852:	4628      	mov	r0, r5
 800c854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c858:	47b8      	blx	r7
 800c85a:	3001      	adds	r0, #1
 800c85c:	f43f af45 	beq.w	800c6ea <_printf_float+0xb6>
 800c860:	f04f 0900 	mov.w	r9, #0
 800c864:	f108 38ff 	add.w	r8, r8, #4294967295
 800c868:	f104 0a1a 	add.w	sl, r4, #26
 800c86c:	45c8      	cmp	r8, r9
 800c86e:	dc09      	bgt.n	800c884 <_printf_float+0x250>
 800c870:	6823      	ldr	r3, [r4, #0]
 800c872:	079b      	lsls	r3, r3, #30
 800c874:	f100 8103 	bmi.w	800ca7e <_printf_float+0x44a>
 800c878:	68e0      	ldr	r0, [r4, #12]
 800c87a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c87c:	4298      	cmp	r0, r3
 800c87e:	bfb8      	it	lt
 800c880:	4618      	movlt	r0, r3
 800c882:	e734      	b.n	800c6ee <_printf_float+0xba>
 800c884:	2301      	movs	r3, #1
 800c886:	4652      	mov	r2, sl
 800c888:	4631      	mov	r1, r6
 800c88a:	4628      	mov	r0, r5
 800c88c:	47b8      	blx	r7
 800c88e:	3001      	adds	r0, #1
 800c890:	f43f af2b 	beq.w	800c6ea <_printf_float+0xb6>
 800c894:	f109 0901 	add.w	r9, r9, #1
 800c898:	e7e8      	b.n	800c86c <_printf_float+0x238>
 800c89a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	dc39      	bgt.n	800c914 <_printf_float+0x2e0>
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	4a1b      	ldr	r2, [pc, #108]	@ (800c910 <_printf_float+0x2dc>)
 800c8a4:	4631      	mov	r1, r6
 800c8a6:	4628      	mov	r0, r5
 800c8a8:	47b8      	blx	r7
 800c8aa:	3001      	adds	r0, #1
 800c8ac:	f43f af1d 	beq.w	800c6ea <_printf_float+0xb6>
 800c8b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c8b4:	ea59 0303 	orrs.w	r3, r9, r3
 800c8b8:	d102      	bne.n	800c8c0 <_printf_float+0x28c>
 800c8ba:	6823      	ldr	r3, [r4, #0]
 800c8bc:	07d9      	lsls	r1, r3, #31
 800c8be:	d5d7      	bpl.n	800c870 <_printf_float+0x23c>
 800c8c0:	4631      	mov	r1, r6
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8c8:	47b8      	blx	r7
 800c8ca:	3001      	adds	r0, #1
 800c8cc:	f43f af0d 	beq.w	800c6ea <_printf_float+0xb6>
 800c8d0:	f04f 0a00 	mov.w	sl, #0
 800c8d4:	f104 0b1a 	add.w	fp, r4, #26
 800c8d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8da:	425b      	negs	r3, r3
 800c8dc:	4553      	cmp	r3, sl
 800c8de:	dc01      	bgt.n	800c8e4 <_printf_float+0x2b0>
 800c8e0:	464b      	mov	r3, r9
 800c8e2:	e793      	b.n	800c80c <_printf_float+0x1d8>
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	465a      	mov	r2, fp
 800c8e8:	4631      	mov	r1, r6
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	47b8      	blx	r7
 800c8ee:	3001      	adds	r0, #1
 800c8f0:	f43f aefb 	beq.w	800c6ea <_printf_float+0xb6>
 800c8f4:	f10a 0a01 	add.w	sl, sl, #1
 800c8f8:	e7ee      	b.n	800c8d8 <_printf_float+0x2a4>
 800c8fa:	bf00      	nop
 800c8fc:	7fefffff 	.word	0x7fefffff
 800c900:	080105bc 	.word	0x080105bc
 800c904:	080105c0 	.word	0x080105c0
 800c908:	080105c4 	.word	0x080105c4
 800c90c:	080105c8 	.word	0x080105c8
 800c910:	080105cc 	.word	0x080105cc
 800c914:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c916:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c91a:	4553      	cmp	r3, sl
 800c91c:	bfa8      	it	ge
 800c91e:	4653      	movge	r3, sl
 800c920:	2b00      	cmp	r3, #0
 800c922:	4699      	mov	r9, r3
 800c924:	dc36      	bgt.n	800c994 <_printf_float+0x360>
 800c926:	f04f 0b00 	mov.w	fp, #0
 800c92a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c92e:	f104 021a 	add.w	r2, r4, #26
 800c932:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c934:	9306      	str	r3, [sp, #24]
 800c936:	eba3 0309 	sub.w	r3, r3, r9
 800c93a:	455b      	cmp	r3, fp
 800c93c:	dc31      	bgt.n	800c9a2 <_printf_float+0x36e>
 800c93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c940:	459a      	cmp	sl, r3
 800c942:	dc3a      	bgt.n	800c9ba <_printf_float+0x386>
 800c944:	6823      	ldr	r3, [r4, #0]
 800c946:	07da      	lsls	r2, r3, #31
 800c948:	d437      	bmi.n	800c9ba <_printf_float+0x386>
 800c94a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c94c:	ebaa 0903 	sub.w	r9, sl, r3
 800c950:	9b06      	ldr	r3, [sp, #24]
 800c952:	ebaa 0303 	sub.w	r3, sl, r3
 800c956:	4599      	cmp	r9, r3
 800c958:	bfa8      	it	ge
 800c95a:	4699      	movge	r9, r3
 800c95c:	f1b9 0f00 	cmp.w	r9, #0
 800c960:	dc33      	bgt.n	800c9ca <_printf_float+0x396>
 800c962:	f04f 0800 	mov.w	r8, #0
 800c966:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c96a:	f104 0b1a 	add.w	fp, r4, #26
 800c96e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c970:	ebaa 0303 	sub.w	r3, sl, r3
 800c974:	eba3 0309 	sub.w	r3, r3, r9
 800c978:	4543      	cmp	r3, r8
 800c97a:	f77f af79 	ble.w	800c870 <_printf_float+0x23c>
 800c97e:	2301      	movs	r3, #1
 800c980:	465a      	mov	r2, fp
 800c982:	4631      	mov	r1, r6
 800c984:	4628      	mov	r0, r5
 800c986:	47b8      	blx	r7
 800c988:	3001      	adds	r0, #1
 800c98a:	f43f aeae 	beq.w	800c6ea <_printf_float+0xb6>
 800c98e:	f108 0801 	add.w	r8, r8, #1
 800c992:	e7ec      	b.n	800c96e <_printf_float+0x33a>
 800c994:	4642      	mov	r2, r8
 800c996:	4631      	mov	r1, r6
 800c998:	4628      	mov	r0, r5
 800c99a:	47b8      	blx	r7
 800c99c:	3001      	adds	r0, #1
 800c99e:	d1c2      	bne.n	800c926 <_printf_float+0x2f2>
 800c9a0:	e6a3      	b.n	800c6ea <_printf_float+0xb6>
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	4631      	mov	r1, r6
 800c9a6:	4628      	mov	r0, r5
 800c9a8:	9206      	str	r2, [sp, #24]
 800c9aa:	47b8      	blx	r7
 800c9ac:	3001      	adds	r0, #1
 800c9ae:	f43f ae9c 	beq.w	800c6ea <_printf_float+0xb6>
 800c9b2:	f10b 0b01 	add.w	fp, fp, #1
 800c9b6:	9a06      	ldr	r2, [sp, #24]
 800c9b8:	e7bb      	b.n	800c932 <_printf_float+0x2fe>
 800c9ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9be:	4631      	mov	r1, r6
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	47b8      	blx	r7
 800c9c4:	3001      	adds	r0, #1
 800c9c6:	d1c0      	bne.n	800c94a <_printf_float+0x316>
 800c9c8:	e68f      	b.n	800c6ea <_printf_float+0xb6>
 800c9ca:	9a06      	ldr	r2, [sp, #24]
 800c9cc:	464b      	mov	r3, r9
 800c9ce:	4631      	mov	r1, r6
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	4442      	add	r2, r8
 800c9d4:	47b8      	blx	r7
 800c9d6:	3001      	adds	r0, #1
 800c9d8:	d1c3      	bne.n	800c962 <_printf_float+0x32e>
 800c9da:	e686      	b.n	800c6ea <_printf_float+0xb6>
 800c9dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c9e0:	f1ba 0f01 	cmp.w	sl, #1
 800c9e4:	dc01      	bgt.n	800c9ea <_printf_float+0x3b6>
 800c9e6:	07db      	lsls	r3, r3, #31
 800c9e8:	d536      	bpl.n	800ca58 <_printf_float+0x424>
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	4642      	mov	r2, r8
 800c9ee:	4631      	mov	r1, r6
 800c9f0:	4628      	mov	r0, r5
 800c9f2:	47b8      	blx	r7
 800c9f4:	3001      	adds	r0, #1
 800c9f6:	f43f ae78 	beq.w	800c6ea <_printf_float+0xb6>
 800c9fa:	4631      	mov	r1, r6
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca02:	47b8      	blx	r7
 800ca04:	3001      	adds	r0, #1
 800ca06:	f43f ae70 	beq.w	800c6ea <_printf_float+0xb6>
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ca16:	f7f4 f86b 	bl	8000af0 <__aeabi_dcmpeq>
 800ca1a:	b9c0      	cbnz	r0, 800ca4e <_printf_float+0x41a>
 800ca1c:	4653      	mov	r3, sl
 800ca1e:	f108 0201 	add.w	r2, r8, #1
 800ca22:	4631      	mov	r1, r6
 800ca24:	4628      	mov	r0, r5
 800ca26:	47b8      	blx	r7
 800ca28:	3001      	adds	r0, #1
 800ca2a:	d10c      	bne.n	800ca46 <_printf_float+0x412>
 800ca2c:	e65d      	b.n	800c6ea <_printf_float+0xb6>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	465a      	mov	r2, fp
 800ca32:	4631      	mov	r1, r6
 800ca34:	4628      	mov	r0, r5
 800ca36:	47b8      	blx	r7
 800ca38:	3001      	adds	r0, #1
 800ca3a:	f43f ae56 	beq.w	800c6ea <_printf_float+0xb6>
 800ca3e:	f108 0801 	add.w	r8, r8, #1
 800ca42:	45d0      	cmp	r8, sl
 800ca44:	dbf3      	blt.n	800ca2e <_printf_float+0x3fa>
 800ca46:	464b      	mov	r3, r9
 800ca48:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ca4c:	e6df      	b.n	800c80e <_printf_float+0x1da>
 800ca4e:	f04f 0800 	mov.w	r8, #0
 800ca52:	f104 0b1a 	add.w	fp, r4, #26
 800ca56:	e7f4      	b.n	800ca42 <_printf_float+0x40e>
 800ca58:	2301      	movs	r3, #1
 800ca5a:	4642      	mov	r2, r8
 800ca5c:	e7e1      	b.n	800ca22 <_printf_float+0x3ee>
 800ca5e:	2301      	movs	r3, #1
 800ca60:	464a      	mov	r2, r9
 800ca62:	4631      	mov	r1, r6
 800ca64:	4628      	mov	r0, r5
 800ca66:	47b8      	blx	r7
 800ca68:	3001      	adds	r0, #1
 800ca6a:	f43f ae3e 	beq.w	800c6ea <_printf_float+0xb6>
 800ca6e:	f108 0801 	add.w	r8, r8, #1
 800ca72:	68e3      	ldr	r3, [r4, #12]
 800ca74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ca76:	1a5b      	subs	r3, r3, r1
 800ca78:	4543      	cmp	r3, r8
 800ca7a:	dcf0      	bgt.n	800ca5e <_printf_float+0x42a>
 800ca7c:	e6fc      	b.n	800c878 <_printf_float+0x244>
 800ca7e:	f04f 0800 	mov.w	r8, #0
 800ca82:	f104 0919 	add.w	r9, r4, #25
 800ca86:	e7f4      	b.n	800ca72 <_printf_float+0x43e>

0800ca88 <_printf_common>:
 800ca88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca8c:	4616      	mov	r6, r2
 800ca8e:	4698      	mov	r8, r3
 800ca90:	688a      	ldr	r2, [r1, #8]
 800ca92:	4607      	mov	r7, r0
 800ca94:	690b      	ldr	r3, [r1, #16]
 800ca96:	460c      	mov	r4, r1
 800ca98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	bfb8      	it	lt
 800caa0:	4613      	movlt	r3, r2
 800caa2:	6033      	str	r3, [r6, #0]
 800caa4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800caa8:	b10a      	cbz	r2, 800caae <_printf_common+0x26>
 800caaa:	3301      	adds	r3, #1
 800caac:	6033      	str	r3, [r6, #0]
 800caae:	6823      	ldr	r3, [r4, #0]
 800cab0:	0699      	lsls	r1, r3, #26
 800cab2:	bf42      	ittt	mi
 800cab4:	6833      	ldrmi	r3, [r6, #0]
 800cab6:	3302      	addmi	r3, #2
 800cab8:	6033      	strmi	r3, [r6, #0]
 800caba:	6825      	ldr	r5, [r4, #0]
 800cabc:	f015 0506 	ands.w	r5, r5, #6
 800cac0:	d106      	bne.n	800cad0 <_printf_common+0x48>
 800cac2:	f104 0a19 	add.w	sl, r4, #25
 800cac6:	68e3      	ldr	r3, [r4, #12]
 800cac8:	6832      	ldr	r2, [r6, #0]
 800caca:	1a9b      	subs	r3, r3, r2
 800cacc:	42ab      	cmp	r3, r5
 800cace:	dc2b      	bgt.n	800cb28 <_printf_common+0xa0>
 800cad0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cad4:	6822      	ldr	r2, [r4, #0]
 800cad6:	3b00      	subs	r3, #0
 800cad8:	bf18      	it	ne
 800cada:	2301      	movne	r3, #1
 800cadc:	0692      	lsls	r2, r2, #26
 800cade:	d430      	bmi.n	800cb42 <_printf_common+0xba>
 800cae0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cae4:	4641      	mov	r1, r8
 800cae6:	4638      	mov	r0, r7
 800cae8:	47c8      	blx	r9
 800caea:	3001      	adds	r0, #1
 800caec:	d023      	beq.n	800cb36 <_printf_common+0xae>
 800caee:	6823      	ldr	r3, [r4, #0]
 800caf0:	341a      	adds	r4, #26
 800caf2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800caf6:	f003 0306 	and.w	r3, r3, #6
 800cafa:	2b04      	cmp	r3, #4
 800cafc:	bf0a      	itet	eq
 800cafe:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800cb02:	2500      	movne	r5, #0
 800cb04:	6833      	ldreq	r3, [r6, #0]
 800cb06:	f04f 0600 	mov.w	r6, #0
 800cb0a:	bf08      	it	eq
 800cb0c:	1aed      	subeq	r5, r5, r3
 800cb0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cb12:	bf08      	it	eq
 800cb14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	bfc4      	itt	gt
 800cb1c:	1a9b      	subgt	r3, r3, r2
 800cb1e:	18ed      	addgt	r5, r5, r3
 800cb20:	42b5      	cmp	r5, r6
 800cb22:	d11a      	bne.n	800cb5a <_printf_common+0xd2>
 800cb24:	2000      	movs	r0, #0
 800cb26:	e008      	b.n	800cb3a <_printf_common+0xb2>
 800cb28:	2301      	movs	r3, #1
 800cb2a:	4652      	mov	r2, sl
 800cb2c:	4641      	mov	r1, r8
 800cb2e:	4638      	mov	r0, r7
 800cb30:	47c8      	blx	r9
 800cb32:	3001      	adds	r0, #1
 800cb34:	d103      	bne.n	800cb3e <_printf_common+0xb6>
 800cb36:	f04f 30ff 	mov.w	r0, #4294967295
 800cb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb3e:	3501      	adds	r5, #1
 800cb40:	e7c1      	b.n	800cac6 <_printf_common+0x3e>
 800cb42:	18e1      	adds	r1, r4, r3
 800cb44:	1c5a      	adds	r2, r3, #1
 800cb46:	2030      	movs	r0, #48	@ 0x30
 800cb48:	3302      	adds	r3, #2
 800cb4a:	4422      	add	r2, r4
 800cb4c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cb50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cb54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cb58:	e7c2      	b.n	800cae0 <_printf_common+0x58>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	4622      	mov	r2, r4
 800cb5e:	4641      	mov	r1, r8
 800cb60:	4638      	mov	r0, r7
 800cb62:	47c8      	blx	r9
 800cb64:	3001      	adds	r0, #1
 800cb66:	d0e6      	beq.n	800cb36 <_printf_common+0xae>
 800cb68:	3601      	adds	r6, #1
 800cb6a:	e7d9      	b.n	800cb20 <_printf_common+0x98>

0800cb6c <_printf_i>:
 800cb6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb70:	7e0f      	ldrb	r7, [r1, #24]
 800cb72:	4691      	mov	r9, r2
 800cb74:	4680      	mov	r8, r0
 800cb76:	460c      	mov	r4, r1
 800cb78:	2f78      	cmp	r7, #120	@ 0x78
 800cb7a:	469a      	mov	sl, r3
 800cb7c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cb7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cb82:	d807      	bhi.n	800cb94 <_printf_i+0x28>
 800cb84:	2f62      	cmp	r7, #98	@ 0x62
 800cb86:	d80a      	bhi.n	800cb9e <_printf_i+0x32>
 800cb88:	2f00      	cmp	r7, #0
 800cb8a:	f000 80d2 	beq.w	800cd32 <_printf_i+0x1c6>
 800cb8e:	2f58      	cmp	r7, #88	@ 0x58
 800cb90:	f000 80b9 	beq.w	800cd06 <_printf_i+0x19a>
 800cb94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cb9c:	e03a      	b.n	800cc14 <_printf_i+0xa8>
 800cb9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cba2:	2b15      	cmp	r3, #21
 800cba4:	d8f6      	bhi.n	800cb94 <_printf_i+0x28>
 800cba6:	a101      	add	r1, pc, #4	@ (adr r1, 800cbac <_printf_i+0x40>)
 800cba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cbac:	0800cc05 	.word	0x0800cc05
 800cbb0:	0800cc19 	.word	0x0800cc19
 800cbb4:	0800cb95 	.word	0x0800cb95
 800cbb8:	0800cb95 	.word	0x0800cb95
 800cbbc:	0800cb95 	.word	0x0800cb95
 800cbc0:	0800cb95 	.word	0x0800cb95
 800cbc4:	0800cc19 	.word	0x0800cc19
 800cbc8:	0800cb95 	.word	0x0800cb95
 800cbcc:	0800cb95 	.word	0x0800cb95
 800cbd0:	0800cb95 	.word	0x0800cb95
 800cbd4:	0800cb95 	.word	0x0800cb95
 800cbd8:	0800cd19 	.word	0x0800cd19
 800cbdc:	0800cc43 	.word	0x0800cc43
 800cbe0:	0800ccd3 	.word	0x0800ccd3
 800cbe4:	0800cb95 	.word	0x0800cb95
 800cbe8:	0800cb95 	.word	0x0800cb95
 800cbec:	0800cd3b 	.word	0x0800cd3b
 800cbf0:	0800cb95 	.word	0x0800cb95
 800cbf4:	0800cc43 	.word	0x0800cc43
 800cbf8:	0800cb95 	.word	0x0800cb95
 800cbfc:	0800cb95 	.word	0x0800cb95
 800cc00:	0800ccdb 	.word	0x0800ccdb
 800cc04:	6833      	ldr	r3, [r6, #0]
 800cc06:	1d1a      	adds	r2, r3, #4
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	6032      	str	r2, [r6, #0]
 800cc0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cc14:	2301      	movs	r3, #1
 800cc16:	e09d      	b.n	800cd54 <_printf_i+0x1e8>
 800cc18:	6833      	ldr	r3, [r6, #0]
 800cc1a:	6820      	ldr	r0, [r4, #0]
 800cc1c:	1d19      	adds	r1, r3, #4
 800cc1e:	6031      	str	r1, [r6, #0]
 800cc20:	0606      	lsls	r6, r0, #24
 800cc22:	d501      	bpl.n	800cc28 <_printf_i+0xbc>
 800cc24:	681d      	ldr	r5, [r3, #0]
 800cc26:	e003      	b.n	800cc30 <_printf_i+0xc4>
 800cc28:	0645      	lsls	r5, r0, #25
 800cc2a:	d5fb      	bpl.n	800cc24 <_printf_i+0xb8>
 800cc2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cc30:	2d00      	cmp	r5, #0
 800cc32:	da03      	bge.n	800cc3c <_printf_i+0xd0>
 800cc34:	232d      	movs	r3, #45	@ 0x2d
 800cc36:	426d      	negs	r5, r5
 800cc38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc3c:	4859      	ldr	r0, [pc, #356]	@ (800cda4 <_printf_i+0x238>)
 800cc3e:	230a      	movs	r3, #10
 800cc40:	e011      	b.n	800cc66 <_printf_i+0xfa>
 800cc42:	6821      	ldr	r1, [r4, #0]
 800cc44:	6833      	ldr	r3, [r6, #0]
 800cc46:	0608      	lsls	r0, r1, #24
 800cc48:	f853 5b04 	ldr.w	r5, [r3], #4
 800cc4c:	d402      	bmi.n	800cc54 <_printf_i+0xe8>
 800cc4e:	0649      	lsls	r1, r1, #25
 800cc50:	bf48      	it	mi
 800cc52:	b2ad      	uxthmi	r5, r5
 800cc54:	2f6f      	cmp	r7, #111	@ 0x6f
 800cc56:	6033      	str	r3, [r6, #0]
 800cc58:	4852      	ldr	r0, [pc, #328]	@ (800cda4 <_printf_i+0x238>)
 800cc5a:	bf14      	ite	ne
 800cc5c:	230a      	movne	r3, #10
 800cc5e:	2308      	moveq	r3, #8
 800cc60:	2100      	movs	r1, #0
 800cc62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cc66:	6866      	ldr	r6, [r4, #4]
 800cc68:	2e00      	cmp	r6, #0
 800cc6a:	60a6      	str	r6, [r4, #8]
 800cc6c:	bfa2      	ittt	ge
 800cc6e:	6821      	ldrge	r1, [r4, #0]
 800cc70:	f021 0104 	bicge.w	r1, r1, #4
 800cc74:	6021      	strge	r1, [r4, #0]
 800cc76:	b90d      	cbnz	r5, 800cc7c <_printf_i+0x110>
 800cc78:	2e00      	cmp	r6, #0
 800cc7a:	d04b      	beq.n	800cd14 <_printf_i+0x1a8>
 800cc7c:	4616      	mov	r6, r2
 800cc7e:	fbb5 f1f3 	udiv	r1, r5, r3
 800cc82:	fb03 5711 	mls	r7, r3, r1, r5
 800cc86:	5dc7      	ldrb	r7, [r0, r7]
 800cc88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cc8c:	462f      	mov	r7, r5
 800cc8e:	460d      	mov	r5, r1
 800cc90:	42bb      	cmp	r3, r7
 800cc92:	d9f4      	bls.n	800cc7e <_printf_i+0x112>
 800cc94:	2b08      	cmp	r3, #8
 800cc96:	d10b      	bne.n	800ccb0 <_printf_i+0x144>
 800cc98:	6823      	ldr	r3, [r4, #0]
 800cc9a:	07df      	lsls	r7, r3, #31
 800cc9c:	d508      	bpl.n	800ccb0 <_printf_i+0x144>
 800cc9e:	6923      	ldr	r3, [r4, #16]
 800cca0:	6861      	ldr	r1, [r4, #4]
 800cca2:	4299      	cmp	r1, r3
 800cca4:	bfde      	ittt	le
 800cca6:	2330      	movle	r3, #48	@ 0x30
 800cca8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ccac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ccb0:	1b92      	subs	r2, r2, r6
 800ccb2:	6122      	str	r2, [r4, #16]
 800ccb4:	464b      	mov	r3, r9
 800ccb6:	aa03      	add	r2, sp, #12
 800ccb8:	4621      	mov	r1, r4
 800ccba:	4640      	mov	r0, r8
 800ccbc:	f8cd a000 	str.w	sl, [sp]
 800ccc0:	f7ff fee2 	bl	800ca88 <_printf_common>
 800ccc4:	3001      	adds	r0, #1
 800ccc6:	d14a      	bne.n	800cd5e <_printf_i+0x1f2>
 800ccc8:	f04f 30ff 	mov.w	r0, #4294967295
 800cccc:	b004      	add	sp, #16
 800ccce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccd2:	6823      	ldr	r3, [r4, #0]
 800ccd4:	f043 0320 	orr.w	r3, r3, #32
 800ccd8:	6023      	str	r3, [r4, #0]
 800ccda:	2778      	movs	r7, #120	@ 0x78
 800ccdc:	4832      	ldr	r0, [pc, #200]	@ (800cda8 <_printf_i+0x23c>)
 800ccde:	6823      	ldr	r3, [r4, #0]
 800cce0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cce4:	061f      	lsls	r7, r3, #24
 800cce6:	6831      	ldr	r1, [r6, #0]
 800cce8:	f851 5b04 	ldr.w	r5, [r1], #4
 800ccec:	d402      	bmi.n	800ccf4 <_printf_i+0x188>
 800ccee:	065f      	lsls	r7, r3, #25
 800ccf0:	bf48      	it	mi
 800ccf2:	b2ad      	uxthmi	r5, r5
 800ccf4:	6031      	str	r1, [r6, #0]
 800ccf6:	07d9      	lsls	r1, r3, #31
 800ccf8:	bf44      	itt	mi
 800ccfa:	f043 0320 	orrmi.w	r3, r3, #32
 800ccfe:	6023      	strmi	r3, [r4, #0]
 800cd00:	b11d      	cbz	r5, 800cd0a <_printf_i+0x19e>
 800cd02:	2310      	movs	r3, #16
 800cd04:	e7ac      	b.n	800cc60 <_printf_i+0xf4>
 800cd06:	4827      	ldr	r0, [pc, #156]	@ (800cda4 <_printf_i+0x238>)
 800cd08:	e7e9      	b.n	800ccde <_printf_i+0x172>
 800cd0a:	6823      	ldr	r3, [r4, #0]
 800cd0c:	f023 0320 	bic.w	r3, r3, #32
 800cd10:	6023      	str	r3, [r4, #0]
 800cd12:	e7f6      	b.n	800cd02 <_printf_i+0x196>
 800cd14:	4616      	mov	r6, r2
 800cd16:	e7bd      	b.n	800cc94 <_printf_i+0x128>
 800cd18:	6833      	ldr	r3, [r6, #0]
 800cd1a:	6825      	ldr	r5, [r4, #0]
 800cd1c:	1d18      	adds	r0, r3, #4
 800cd1e:	6961      	ldr	r1, [r4, #20]
 800cd20:	6030      	str	r0, [r6, #0]
 800cd22:	062e      	lsls	r6, r5, #24
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	d501      	bpl.n	800cd2c <_printf_i+0x1c0>
 800cd28:	6019      	str	r1, [r3, #0]
 800cd2a:	e002      	b.n	800cd32 <_printf_i+0x1c6>
 800cd2c:	0668      	lsls	r0, r5, #25
 800cd2e:	d5fb      	bpl.n	800cd28 <_printf_i+0x1bc>
 800cd30:	8019      	strh	r1, [r3, #0]
 800cd32:	2300      	movs	r3, #0
 800cd34:	4616      	mov	r6, r2
 800cd36:	6123      	str	r3, [r4, #16]
 800cd38:	e7bc      	b.n	800ccb4 <_printf_i+0x148>
 800cd3a:	6833      	ldr	r3, [r6, #0]
 800cd3c:	2100      	movs	r1, #0
 800cd3e:	1d1a      	adds	r2, r3, #4
 800cd40:	6032      	str	r2, [r6, #0]
 800cd42:	681e      	ldr	r6, [r3, #0]
 800cd44:	6862      	ldr	r2, [r4, #4]
 800cd46:	4630      	mov	r0, r6
 800cd48:	f000 f9d5 	bl	800d0f6 <memchr>
 800cd4c:	b108      	cbz	r0, 800cd52 <_printf_i+0x1e6>
 800cd4e:	1b80      	subs	r0, r0, r6
 800cd50:	6060      	str	r0, [r4, #4]
 800cd52:	6863      	ldr	r3, [r4, #4]
 800cd54:	6123      	str	r3, [r4, #16]
 800cd56:	2300      	movs	r3, #0
 800cd58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd5c:	e7aa      	b.n	800ccb4 <_printf_i+0x148>
 800cd5e:	6923      	ldr	r3, [r4, #16]
 800cd60:	4632      	mov	r2, r6
 800cd62:	4649      	mov	r1, r9
 800cd64:	4640      	mov	r0, r8
 800cd66:	47d0      	blx	sl
 800cd68:	3001      	adds	r0, #1
 800cd6a:	d0ad      	beq.n	800ccc8 <_printf_i+0x15c>
 800cd6c:	6823      	ldr	r3, [r4, #0]
 800cd6e:	079b      	lsls	r3, r3, #30
 800cd70:	d413      	bmi.n	800cd9a <_printf_i+0x22e>
 800cd72:	68e0      	ldr	r0, [r4, #12]
 800cd74:	9b03      	ldr	r3, [sp, #12]
 800cd76:	4298      	cmp	r0, r3
 800cd78:	bfb8      	it	lt
 800cd7a:	4618      	movlt	r0, r3
 800cd7c:	e7a6      	b.n	800cccc <_printf_i+0x160>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	4632      	mov	r2, r6
 800cd82:	4649      	mov	r1, r9
 800cd84:	4640      	mov	r0, r8
 800cd86:	47d0      	blx	sl
 800cd88:	3001      	adds	r0, #1
 800cd8a:	d09d      	beq.n	800ccc8 <_printf_i+0x15c>
 800cd8c:	3501      	adds	r5, #1
 800cd8e:	68e3      	ldr	r3, [r4, #12]
 800cd90:	9903      	ldr	r1, [sp, #12]
 800cd92:	1a5b      	subs	r3, r3, r1
 800cd94:	42ab      	cmp	r3, r5
 800cd96:	dcf2      	bgt.n	800cd7e <_printf_i+0x212>
 800cd98:	e7eb      	b.n	800cd72 <_printf_i+0x206>
 800cd9a:	2500      	movs	r5, #0
 800cd9c:	f104 0619 	add.w	r6, r4, #25
 800cda0:	e7f5      	b.n	800cd8e <_printf_i+0x222>
 800cda2:	bf00      	nop
 800cda4:	080105ce 	.word	0x080105ce
 800cda8:	080105df 	.word	0x080105df

0800cdac <std>:
 800cdac:	2300      	movs	r3, #0
 800cdae:	b510      	push	{r4, lr}
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	6083      	str	r3, [r0, #8]
 800cdb4:	8181      	strh	r1, [r0, #12]
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	6643      	str	r3, [r0, #100]	@ 0x64
 800cdba:	81c2      	strh	r2, [r0, #14]
 800cdbc:	2208      	movs	r2, #8
 800cdbe:	6183      	str	r3, [r0, #24]
 800cdc0:	e9c0 3300 	strd	r3, r3, [r0]
 800cdc4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdc8:	305c      	adds	r0, #92	@ 0x5c
 800cdca:	f000 f914 	bl	800cff6 <memset>
 800cdce:	4b0d      	ldr	r3, [pc, #52]	@ (800ce04 <std+0x58>)
 800cdd0:	6224      	str	r4, [r4, #32]
 800cdd2:	6263      	str	r3, [r4, #36]	@ 0x24
 800cdd4:	4b0c      	ldr	r3, [pc, #48]	@ (800ce08 <std+0x5c>)
 800cdd6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cdd8:	4b0c      	ldr	r3, [pc, #48]	@ (800ce0c <std+0x60>)
 800cdda:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cddc:	4b0c      	ldr	r3, [pc, #48]	@ (800ce10 <std+0x64>)
 800cdde:	6323      	str	r3, [r4, #48]	@ 0x30
 800cde0:	4b0c      	ldr	r3, [pc, #48]	@ (800ce14 <std+0x68>)
 800cde2:	429c      	cmp	r4, r3
 800cde4:	d006      	beq.n	800cdf4 <std+0x48>
 800cde6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cdea:	4294      	cmp	r4, r2
 800cdec:	d002      	beq.n	800cdf4 <std+0x48>
 800cdee:	33d0      	adds	r3, #208	@ 0xd0
 800cdf0:	429c      	cmp	r4, r3
 800cdf2:	d105      	bne.n	800ce00 <std+0x54>
 800cdf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cdf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdfc:	f000 b978 	b.w	800d0f0 <__retarget_lock_init_recursive>
 800ce00:	bd10      	pop	{r4, pc}
 800ce02:	bf00      	nop
 800ce04:	0800cf71 	.word	0x0800cf71
 800ce08:	0800cf93 	.word	0x0800cf93
 800ce0c:	0800cfcb 	.word	0x0800cfcb
 800ce10:	0800cfef 	.word	0x0800cfef
 800ce14:	20003db4 	.word	0x20003db4

0800ce18 <stdio_exit_handler>:
 800ce18:	4a02      	ldr	r2, [pc, #8]	@ (800ce24 <stdio_exit_handler+0xc>)
 800ce1a:	4903      	ldr	r1, [pc, #12]	@ (800ce28 <stdio_exit_handler+0x10>)
 800ce1c:	4803      	ldr	r0, [pc, #12]	@ (800ce2c <stdio_exit_handler+0x14>)
 800ce1e:	f000 b869 	b.w	800cef4 <_fwalk_sglue>
 800ce22:	bf00      	nop
 800ce24:	20000010 	.word	0x20000010
 800ce28:	0800ea99 	.word	0x0800ea99
 800ce2c:	20000020 	.word	0x20000020

0800ce30 <cleanup_stdio>:
 800ce30:	6841      	ldr	r1, [r0, #4]
 800ce32:	4b0c      	ldr	r3, [pc, #48]	@ (800ce64 <cleanup_stdio+0x34>)
 800ce34:	4299      	cmp	r1, r3
 800ce36:	b510      	push	{r4, lr}
 800ce38:	4604      	mov	r4, r0
 800ce3a:	d001      	beq.n	800ce40 <cleanup_stdio+0x10>
 800ce3c:	f001 fe2c 	bl	800ea98 <_fflush_r>
 800ce40:	68a1      	ldr	r1, [r4, #8]
 800ce42:	4b09      	ldr	r3, [pc, #36]	@ (800ce68 <cleanup_stdio+0x38>)
 800ce44:	4299      	cmp	r1, r3
 800ce46:	d002      	beq.n	800ce4e <cleanup_stdio+0x1e>
 800ce48:	4620      	mov	r0, r4
 800ce4a:	f001 fe25 	bl	800ea98 <_fflush_r>
 800ce4e:	68e1      	ldr	r1, [r4, #12]
 800ce50:	4b06      	ldr	r3, [pc, #24]	@ (800ce6c <cleanup_stdio+0x3c>)
 800ce52:	4299      	cmp	r1, r3
 800ce54:	d004      	beq.n	800ce60 <cleanup_stdio+0x30>
 800ce56:	4620      	mov	r0, r4
 800ce58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce5c:	f001 be1c 	b.w	800ea98 <_fflush_r>
 800ce60:	bd10      	pop	{r4, pc}
 800ce62:	bf00      	nop
 800ce64:	20003db4 	.word	0x20003db4
 800ce68:	20003e1c 	.word	0x20003e1c
 800ce6c:	20003e84 	.word	0x20003e84

0800ce70 <global_stdio_init.part.0>:
 800ce70:	b510      	push	{r4, lr}
 800ce72:	4b0b      	ldr	r3, [pc, #44]	@ (800cea0 <global_stdio_init.part.0+0x30>)
 800ce74:	2104      	movs	r1, #4
 800ce76:	4c0b      	ldr	r4, [pc, #44]	@ (800cea4 <global_stdio_init.part.0+0x34>)
 800ce78:	4a0b      	ldr	r2, [pc, #44]	@ (800cea8 <global_stdio_init.part.0+0x38>)
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	601a      	str	r2, [r3, #0]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f7ff ff94 	bl	800cdac <std>
 800ce84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ce88:	2201      	movs	r2, #1
 800ce8a:	2109      	movs	r1, #9
 800ce8c:	f7ff ff8e 	bl	800cdac <std>
 800ce90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ce94:	2202      	movs	r2, #2
 800ce96:	2112      	movs	r1, #18
 800ce98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce9c:	f7ff bf86 	b.w	800cdac <std>
 800cea0:	20003eec 	.word	0x20003eec
 800cea4:	20003db4 	.word	0x20003db4
 800cea8:	0800ce19 	.word	0x0800ce19

0800ceac <__sfp_lock_acquire>:
 800ceac:	4801      	ldr	r0, [pc, #4]	@ (800ceb4 <__sfp_lock_acquire+0x8>)
 800ceae:	f000 b920 	b.w	800d0f2 <__retarget_lock_acquire_recursive>
 800ceb2:	bf00      	nop
 800ceb4:	20003ef5 	.word	0x20003ef5

0800ceb8 <__sfp_lock_release>:
 800ceb8:	4801      	ldr	r0, [pc, #4]	@ (800cec0 <__sfp_lock_release+0x8>)
 800ceba:	f000 b91b 	b.w	800d0f4 <__retarget_lock_release_recursive>
 800cebe:	bf00      	nop
 800cec0:	20003ef5 	.word	0x20003ef5

0800cec4 <__sinit>:
 800cec4:	b510      	push	{r4, lr}
 800cec6:	4604      	mov	r4, r0
 800cec8:	f7ff fff0 	bl	800ceac <__sfp_lock_acquire>
 800cecc:	6a23      	ldr	r3, [r4, #32]
 800cece:	b11b      	cbz	r3, 800ced8 <__sinit+0x14>
 800ced0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ced4:	f7ff bff0 	b.w	800ceb8 <__sfp_lock_release>
 800ced8:	4b04      	ldr	r3, [pc, #16]	@ (800ceec <__sinit+0x28>)
 800ceda:	6223      	str	r3, [r4, #32]
 800cedc:	4b04      	ldr	r3, [pc, #16]	@ (800cef0 <__sinit+0x2c>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d1f5      	bne.n	800ced0 <__sinit+0xc>
 800cee4:	f7ff ffc4 	bl	800ce70 <global_stdio_init.part.0>
 800cee8:	e7f2      	b.n	800ced0 <__sinit+0xc>
 800ceea:	bf00      	nop
 800ceec:	0800ce31 	.word	0x0800ce31
 800cef0:	20003eec 	.word	0x20003eec

0800cef4 <_fwalk_sglue>:
 800cef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cef8:	4607      	mov	r7, r0
 800cefa:	4688      	mov	r8, r1
 800cefc:	4614      	mov	r4, r2
 800cefe:	2600      	movs	r6, #0
 800cf00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf04:	f1b9 0901 	subs.w	r9, r9, #1
 800cf08:	d505      	bpl.n	800cf16 <_fwalk_sglue+0x22>
 800cf0a:	6824      	ldr	r4, [r4, #0]
 800cf0c:	2c00      	cmp	r4, #0
 800cf0e:	d1f7      	bne.n	800cf00 <_fwalk_sglue+0xc>
 800cf10:	4630      	mov	r0, r6
 800cf12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf16:	89ab      	ldrh	r3, [r5, #12]
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d907      	bls.n	800cf2c <_fwalk_sglue+0x38>
 800cf1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf20:	3301      	adds	r3, #1
 800cf22:	d003      	beq.n	800cf2c <_fwalk_sglue+0x38>
 800cf24:	4629      	mov	r1, r5
 800cf26:	4638      	mov	r0, r7
 800cf28:	47c0      	blx	r8
 800cf2a:	4306      	orrs	r6, r0
 800cf2c:	3568      	adds	r5, #104	@ 0x68
 800cf2e:	e7e9      	b.n	800cf04 <_fwalk_sglue+0x10>

0800cf30 <siprintf>:
 800cf30:	b40e      	push	{r1, r2, r3}
 800cf32:	b500      	push	{lr}
 800cf34:	b09c      	sub	sp, #112	@ 0x70
 800cf36:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cf3a:	ab1d      	add	r3, sp, #116	@ 0x74
 800cf3c:	9002      	str	r0, [sp, #8]
 800cf3e:	9006      	str	r0, [sp, #24]
 800cf40:	9107      	str	r1, [sp, #28]
 800cf42:	9104      	str	r1, [sp, #16]
 800cf44:	4808      	ldr	r0, [pc, #32]	@ (800cf68 <siprintf+0x38>)
 800cf46:	4909      	ldr	r1, [pc, #36]	@ (800cf6c <siprintf+0x3c>)
 800cf48:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf4c:	9105      	str	r1, [sp, #20]
 800cf4e:	a902      	add	r1, sp, #8
 800cf50:	6800      	ldr	r0, [r0, #0]
 800cf52:	9301      	str	r3, [sp, #4]
 800cf54:	f001 fc20 	bl	800e798 <_svfiprintf_r>
 800cf58:	9b02      	ldr	r3, [sp, #8]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	701a      	strb	r2, [r3, #0]
 800cf5e:	b01c      	add	sp, #112	@ 0x70
 800cf60:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf64:	b003      	add	sp, #12
 800cf66:	4770      	bx	lr
 800cf68:	2000001c 	.word	0x2000001c
 800cf6c:	ffff0208 	.word	0xffff0208

0800cf70 <__sread>:
 800cf70:	b510      	push	{r4, lr}
 800cf72:	460c      	mov	r4, r1
 800cf74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf78:	f000 f86c 	bl	800d054 <_read_r>
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	bfab      	itete	ge
 800cf80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cf82:	89a3      	ldrhlt	r3, [r4, #12]
 800cf84:	181b      	addge	r3, r3, r0
 800cf86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cf8a:	bfac      	ite	ge
 800cf8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cf8e:	81a3      	strhlt	r3, [r4, #12]
 800cf90:	bd10      	pop	{r4, pc}

0800cf92 <__swrite>:
 800cf92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf96:	461f      	mov	r7, r3
 800cf98:	898b      	ldrh	r3, [r1, #12]
 800cf9a:	4605      	mov	r5, r0
 800cf9c:	460c      	mov	r4, r1
 800cf9e:	05db      	lsls	r3, r3, #23
 800cfa0:	4616      	mov	r6, r2
 800cfa2:	d505      	bpl.n	800cfb0 <__swrite+0x1e>
 800cfa4:	2302      	movs	r3, #2
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfac:	f000 f840 	bl	800d030 <_lseek_r>
 800cfb0:	89a3      	ldrh	r3, [r4, #12]
 800cfb2:	4632      	mov	r2, r6
 800cfb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfb8:	4628      	mov	r0, r5
 800cfba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cfbe:	81a3      	strh	r3, [r4, #12]
 800cfc0:	463b      	mov	r3, r7
 800cfc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfc6:	f000 b857 	b.w	800d078 <_write_r>

0800cfca <__sseek>:
 800cfca:	b510      	push	{r4, lr}
 800cfcc:	460c      	mov	r4, r1
 800cfce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfd2:	f000 f82d 	bl	800d030 <_lseek_r>
 800cfd6:	1c43      	adds	r3, r0, #1
 800cfd8:	89a3      	ldrh	r3, [r4, #12]
 800cfda:	bf15      	itete	ne
 800cfdc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cfde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cfe2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cfe6:	81a3      	strheq	r3, [r4, #12]
 800cfe8:	bf18      	it	ne
 800cfea:	81a3      	strhne	r3, [r4, #12]
 800cfec:	bd10      	pop	{r4, pc}

0800cfee <__sclose>:
 800cfee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cff2:	f000 b80d 	b.w	800d010 <_close_r>

0800cff6 <memset>:
 800cff6:	4402      	add	r2, r0
 800cff8:	4603      	mov	r3, r0
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d100      	bne.n	800d000 <memset+0xa>
 800cffe:	4770      	bx	lr
 800d000:	f803 1b01 	strb.w	r1, [r3], #1
 800d004:	e7f9      	b.n	800cffa <memset+0x4>
	...

0800d008 <_localeconv_r>:
 800d008:	4800      	ldr	r0, [pc, #0]	@ (800d00c <_localeconv_r+0x4>)
 800d00a:	4770      	bx	lr
 800d00c:	2000015c 	.word	0x2000015c

0800d010 <_close_r>:
 800d010:	b538      	push	{r3, r4, r5, lr}
 800d012:	2300      	movs	r3, #0
 800d014:	4d05      	ldr	r5, [pc, #20]	@ (800d02c <_close_r+0x1c>)
 800d016:	4604      	mov	r4, r0
 800d018:	4608      	mov	r0, r1
 800d01a:	602b      	str	r3, [r5, #0]
 800d01c:	f7f6 fe94 	bl	8003d48 <_close>
 800d020:	1c43      	adds	r3, r0, #1
 800d022:	d102      	bne.n	800d02a <_close_r+0x1a>
 800d024:	682b      	ldr	r3, [r5, #0]
 800d026:	b103      	cbz	r3, 800d02a <_close_r+0x1a>
 800d028:	6023      	str	r3, [r4, #0]
 800d02a:	bd38      	pop	{r3, r4, r5, pc}
 800d02c:	20003ef0 	.word	0x20003ef0

0800d030 <_lseek_r>:
 800d030:	b538      	push	{r3, r4, r5, lr}
 800d032:	4604      	mov	r4, r0
 800d034:	4d06      	ldr	r5, [pc, #24]	@ (800d050 <_lseek_r+0x20>)
 800d036:	4608      	mov	r0, r1
 800d038:	4611      	mov	r1, r2
 800d03a:	2200      	movs	r2, #0
 800d03c:	602a      	str	r2, [r5, #0]
 800d03e:	461a      	mov	r2, r3
 800d040:	f7f6 fea9 	bl	8003d96 <_lseek>
 800d044:	1c43      	adds	r3, r0, #1
 800d046:	d102      	bne.n	800d04e <_lseek_r+0x1e>
 800d048:	682b      	ldr	r3, [r5, #0]
 800d04a:	b103      	cbz	r3, 800d04e <_lseek_r+0x1e>
 800d04c:	6023      	str	r3, [r4, #0]
 800d04e:	bd38      	pop	{r3, r4, r5, pc}
 800d050:	20003ef0 	.word	0x20003ef0

0800d054 <_read_r>:
 800d054:	b538      	push	{r3, r4, r5, lr}
 800d056:	4604      	mov	r4, r0
 800d058:	4d06      	ldr	r5, [pc, #24]	@ (800d074 <_read_r+0x20>)
 800d05a:	4608      	mov	r0, r1
 800d05c:	4611      	mov	r1, r2
 800d05e:	2200      	movs	r2, #0
 800d060:	602a      	str	r2, [r5, #0]
 800d062:	461a      	mov	r2, r3
 800d064:	f7f6 fe37 	bl	8003cd6 <_read>
 800d068:	1c43      	adds	r3, r0, #1
 800d06a:	d102      	bne.n	800d072 <_read_r+0x1e>
 800d06c:	682b      	ldr	r3, [r5, #0]
 800d06e:	b103      	cbz	r3, 800d072 <_read_r+0x1e>
 800d070:	6023      	str	r3, [r4, #0]
 800d072:	bd38      	pop	{r3, r4, r5, pc}
 800d074:	20003ef0 	.word	0x20003ef0

0800d078 <_write_r>:
 800d078:	b538      	push	{r3, r4, r5, lr}
 800d07a:	4604      	mov	r4, r0
 800d07c:	4d06      	ldr	r5, [pc, #24]	@ (800d098 <_write_r+0x20>)
 800d07e:	4608      	mov	r0, r1
 800d080:	4611      	mov	r1, r2
 800d082:	2200      	movs	r2, #0
 800d084:	602a      	str	r2, [r5, #0]
 800d086:	461a      	mov	r2, r3
 800d088:	f7f6 fe42 	bl	8003d10 <_write>
 800d08c:	1c43      	adds	r3, r0, #1
 800d08e:	d102      	bne.n	800d096 <_write_r+0x1e>
 800d090:	682b      	ldr	r3, [r5, #0]
 800d092:	b103      	cbz	r3, 800d096 <_write_r+0x1e>
 800d094:	6023      	str	r3, [r4, #0]
 800d096:	bd38      	pop	{r3, r4, r5, pc}
 800d098:	20003ef0 	.word	0x20003ef0

0800d09c <__errno>:
 800d09c:	4b01      	ldr	r3, [pc, #4]	@ (800d0a4 <__errno+0x8>)
 800d09e:	6818      	ldr	r0, [r3, #0]
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	2000001c 	.word	0x2000001c

0800d0a8 <__libc_init_array>:
 800d0a8:	b570      	push	{r4, r5, r6, lr}
 800d0aa:	4d0d      	ldr	r5, [pc, #52]	@ (800d0e0 <__libc_init_array+0x38>)
 800d0ac:	2600      	movs	r6, #0
 800d0ae:	4c0d      	ldr	r4, [pc, #52]	@ (800d0e4 <__libc_init_array+0x3c>)
 800d0b0:	1b64      	subs	r4, r4, r5
 800d0b2:	10a4      	asrs	r4, r4, #2
 800d0b4:	42a6      	cmp	r6, r4
 800d0b6:	d109      	bne.n	800d0cc <__libc_init_array+0x24>
 800d0b8:	4d0b      	ldr	r5, [pc, #44]	@ (800d0e8 <__libc_init_array+0x40>)
 800d0ba:	2600      	movs	r6, #0
 800d0bc:	4c0b      	ldr	r4, [pc, #44]	@ (800d0ec <__libc_init_array+0x44>)
 800d0be:	f002 f97b 	bl	800f3b8 <_init>
 800d0c2:	1b64      	subs	r4, r4, r5
 800d0c4:	10a4      	asrs	r4, r4, #2
 800d0c6:	42a6      	cmp	r6, r4
 800d0c8:	d105      	bne.n	800d0d6 <__libc_init_array+0x2e>
 800d0ca:	bd70      	pop	{r4, r5, r6, pc}
 800d0cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0d0:	3601      	adds	r6, #1
 800d0d2:	4798      	blx	r3
 800d0d4:	e7ee      	b.n	800d0b4 <__libc_init_array+0xc>
 800d0d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0da:	3601      	adds	r6, #1
 800d0dc:	4798      	blx	r3
 800d0de:	e7f2      	b.n	800d0c6 <__libc_init_array+0x1e>
 800d0e0:	08010938 	.word	0x08010938
 800d0e4:	08010938 	.word	0x08010938
 800d0e8:	08010938 	.word	0x08010938
 800d0ec:	0801093c 	.word	0x0801093c

0800d0f0 <__retarget_lock_init_recursive>:
 800d0f0:	4770      	bx	lr

0800d0f2 <__retarget_lock_acquire_recursive>:
 800d0f2:	4770      	bx	lr

0800d0f4 <__retarget_lock_release_recursive>:
 800d0f4:	4770      	bx	lr

0800d0f6 <memchr>:
 800d0f6:	b2c9      	uxtb	r1, r1
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	4402      	add	r2, r0
 800d0fc:	b510      	push	{r4, lr}
 800d0fe:	4293      	cmp	r3, r2
 800d100:	4618      	mov	r0, r3
 800d102:	d101      	bne.n	800d108 <memchr+0x12>
 800d104:	2000      	movs	r0, #0
 800d106:	e003      	b.n	800d110 <memchr+0x1a>
 800d108:	7804      	ldrb	r4, [r0, #0]
 800d10a:	3301      	adds	r3, #1
 800d10c:	428c      	cmp	r4, r1
 800d10e:	d1f6      	bne.n	800d0fe <memchr+0x8>
 800d110:	bd10      	pop	{r4, pc}

0800d112 <memcpy>:
 800d112:	440a      	add	r2, r1
 800d114:	1e43      	subs	r3, r0, #1
 800d116:	4291      	cmp	r1, r2
 800d118:	d100      	bne.n	800d11c <memcpy+0xa>
 800d11a:	4770      	bx	lr
 800d11c:	b510      	push	{r4, lr}
 800d11e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d122:	4291      	cmp	r1, r2
 800d124:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d128:	d1f9      	bne.n	800d11e <memcpy+0xc>
 800d12a:	bd10      	pop	{r4, pc}

0800d12c <quorem>:
 800d12c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d130:	6903      	ldr	r3, [r0, #16]
 800d132:	4607      	mov	r7, r0
 800d134:	690c      	ldr	r4, [r1, #16]
 800d136:	42a3      	cmp	r3, r4
 800d138:	f2c0 8083 	blt.w	800d242 <quorem+0x116>
 800d13c:	3c01      	subs	r4, #1
 800d13e:	f100 0514 	add.w	r5, r0, #20
 800d142:	f101 0814 	add.w	r8, r1, #20
 800d146:	00a3      	lsls	r3, r4, #2
 800d148:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d14c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d150:	9300      	str	r3, [sp, #0]
 800d152:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d156:	9301      	str	r3, [sp, #4]
 800d158:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d15c:	3301      	adds	r3, #1
 800d15e:	429a      	cmp	r2, r3
 800d160:	fbb2 f6f3 	udiv	r6, r2, r3
 800d164:	d331      	bcc.n	800d1ca <quorem+0x9e>
 800d166:	f04f 0a00 	mov.w	sl, #0
 800d16a:	46c4      	mov	ip, r8
 800d16c:	46ae      	mov	lr, r5
 800d16e:	46d3      	mov	fp, sl
 800d170:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d174:	b298      	uxth	r0, r3
 800d176:	45e1      	cmp	r9, ip
 800d178:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d17c:	fb06 a000 	mla	r0, r6, r0, sl
 800d180:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800d184:	b280      	uxth	r0, r0
 800d186:	fb06 2303 	mla	r3, r6, r3, r2
 800d18a:	f8de 2000 	ldr.w	r2, [lr]
 800d18e:	b292      	uxth	r2, r2
 800d190:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d194:	eba2 0200 	sub.w	r2, r2, r0
 800d198:	b29b      	uxth	r3, r3
 800d19a:	f8de 0000 	ldr.w	r0, [lr]
 800d19e:	445a      	add	r2, fp
 800d1a0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d1a4:	b292      	uxth	r2, r2
 800d1a6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d1aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d1ae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d1b2:	f84e 2b04 	str.w	r2, [lr], #4
 800d1b6:	d2db      	bcs.n	800d170 <quorem+0x44>
 800d1b8:	9b00      	ldr	r3, [sp, #0]
 800d1ba:	58eb      	ldr	r3, [r5, r3]
 800d1bc:	b92b      	cbnz	r3, 800d1ca <quorem+0x9e>
 800d1be:	9b01      	ldr	r3, [sp, #4]
 800d1c0:	3b04      	subs	r3, #4
 800d1c2:	429d      	cmp	r5, r3
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	d330      	bcc.n	800d22a <quorem+0xfe>
 800d1c8:	613c      	str	r4, [r7, #16]
 800d1ca:	4638      	mov	r0, r7
 800d1cc:	f001 f97c 	bl	800e4c8 <__mcmp>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	db26      	blt.n	800d222 <quorem+0xf6>
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	2000      	movs	r0, #0
 800d1d8:	f858 2b04 	ldr.w	r2, [r8], #4
 800d1dc:	f8d1 c000 	ldr.w	ip, [r1]
 800d1e0:	fa1f fe82 	uxth.w	lr, r2
 800d1e4:	45c1      	cmp	r9, r8
 800d1e6:	fa1f f38c 	uxth.w	r3, ip
 800d1ea:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d1ee:	eba3 030e 	sub.w	r3, r3, lr
 800d1f2:	4403      	add	r3, r0
 800d1f4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d1fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d202:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d206:	f841 3b04 	str.w	r3, [r1], #4
 800d20a:	d2e5      	bcs.n	800d1d8 <quorem+0xac>
 800d20c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d210:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d214:	b922      	cbnz	r2, 800d220 <quorem+0xf4>
 800d216:	3b04      	subs	r3, #4
 800d218:	429d      	cmp	r5, r3
 800d21a:	461a      	mov	r2, r3
 800d21c:	d30b      	bcc.n	800d236 <quorem+0x10a>
 800d21e:	613c      	str	r4, [r7, #16]
 800d220:	3601      	adds	r6, #1
 800d222:	4630      	mov	r0, r6
 800d224:	b003      	add	sp, #12
 800d226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d22a:	6812      	ldr	r2, [r2, #0]
 800d22c:	3b04      	subs	r3, #4
 800d22e:	2a00      	cmp	r2, #0
 800d230:	d1ca      	bne.n	800d1c8 <quorem+0x9c>
 800d232:	3c01      	subs	r4, #1
 800d234:	e7c5      	b.n	800d1c2 <quorem+0x96>
 800d236:	6812      	ldr	r2, [r2, #0]
 800d238:	3b04      	subs	r3, #4
 800d23a:	2a00      	cmp	r2, #0
 800d23c:	d1ef      	bne.n	800d21e <quorem+0xf2>
 800d23e:	3c01      	subs	r4, #1
 800d240:	e7ea      	b.n	800d218 <quorem+0xec>
 800d242:	2000      	movs	r0, #0
 800d244:	e7ee      	b.n	800d224 <quorem+0xf8>
	...

0800d248 <_dtoa_r>:
 800d248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d24c:	69c7      	ldr	r7, [r0, #28]
 800d24e:	b099      	sub	sp, #100	@ 0x64
 800d250:	4683      	mov	fp, r0
 800d252:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d254:	9109      	str	r1, [sp, #36]	@ 0x24
 800d256:	920e      	str	r2, [sp, #56]	@ 0x38
 800d258:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d25a:	ec55 4b10 	vmov	r4, r5, d0
 800d25e:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d262:	b97f      	cbnz	r7, 800d284 <_dtoa_r+0x3c>
 800d264:	2010      	movs	r0, #16
 800d266:	f000 fdfd 	bl	800de64 <malloc>
 800d26a:	4602      	mov	r2, r0
 800d26c:	f8cb 001c 	str.w	r0, [fp, #28]
 800d270:	b920      	cbnz	r0, 800d27c <_dtoa_r+0x34>
 800d272:	4ba7      	ldr	r3, [pc, #668]	@ (800d510 <_dtoa_r+0x2c8>)
 800d274:	21ef      	movs	r1, #239	@ 0xef
 800d276:	48a7      	ldr	r0, [pc, #668]	@ (800d514 <_dtoa_r+0x2cc>)
 800d278:	f001 fc60 	bl	800eb3c <__assert_func>
 800d27c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d280:	6007      	str	r7, [r0, #0]
 800d282:	60c7      	str	r7, [r0, #12]
 800d284:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d288:	6819      	ldr	r1, [r3, #0]
 800d28a:	b159      	cbz	r1, 800d2a4 <_dtoa_r+0x5c>
 800d28c:	685a      	ldr	r2, [r3, #4]
 800d28e:	2301      	movs	r3, #1
 800d290:	4658      	mov	r0, fp
 800d292:	4093      	lsls	r3, r2
 800d294:	604a      	str	r2, [r1, #4]
 800d296:	608b      	str	r3, [r1, #8]
 800d298:	f000 feda 	bl	800e050 <_Bfree>
 800d29c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	601a      	str	r2, [r3, #0]
 800d2a4:	1e2b      	subs	r3, r5, #0
 800d2a6:	bfb7      	itett	lt
 800d2a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d2ac:	2300      	movge	r3, #0
 800d2ae:	2201      	movlt	r2, #1
 800d2b0:	9303      	strlt	r3, [sp, #12]
 800d2b2:	bfa8      	it	ge
 800d2b4:	6033      	strge	r3, [r6, #0]
 800d2b6:	9f03      	ldr	r7, [sp, #12]
 800d2b8:	4b97      	ldr	r3, [pc, #604]	@ (800d518 <_dtoa_r+0x2d0>)
 800d2ba:	bfb8      	it	lt
 800d2bc:	6032      	strlt	r2, [r6, #0]
 800d2be:	43bb      	bics	r3, r7
 800d2c0:	d112      	bne.n	800d2e8 <_dtoa_r+0xa0>
 800d2c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d2c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d2c8:	6013      	str	r3, [r2, #0]
 800d2ca:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d2ce:	4323      	orrs	r3, r4
 800d2d0:	f000 854c 	beq.w	800dd6c <_dtoa_r+0xb24>
 800d2d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d2d6:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d52c <_dtoa_r+0x2e4>
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f000 854e 	beq.w	800dd7c <_dtoa_r+0xb34>
 800d2e0:	f10a 0303 	add.w	r3, sl, #3
 800d2e4:	f000 bd48 	b.w	800dd78 <_dtoa_r+0xb30>
 800d2e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	ec51 0b17 	vmov	r0, r1, d7
 800d2f4:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d2f8:	f7f3 fbfa 	bl	8000af0 <__aeabi_dcmpeq>
 800d2fc:	4680      	mov	r8, r0
 800d2fe:	b158      	cbz	r0, 800d318 <_dtoa_r+0xd0>
 800d300:	2301      	movs	r3, #1
 800d302:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d304:	6013      	str	r3, [r2, #0]
 800d306:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d308:	b113      	cbz	r3, 800d310 <_dtoa_r+0xc8>
 800d30a:	4b84      	ldr	r3, [pc, #528]	@ (800d51c <_dtoa_r+0x2d4>)
 800d30c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d30e:	6013      	str	r3, [r2, #0]
 800d310:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800d530 <_dtoa_r+0x2e8>
 800d314:	f000 bd32 	b.w	800dd7c <_dtoa_r+0xb34>
 800d318:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d31c:	aa16      	add	r2, sp, #88	@ 0x58
 800d31e:	a917      	add	r1, sp, #92	@ 0x5c
 800d320:	4658      	mov	r0, fp
 800d322:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d326:	f001 f983 	bl	800e630 <__d2b>
 800d32a:	4681      	mov	r9, r0
 800d32c:	2e00      	cmp	r6, #0
 800d32e:	d075      	beq.n	800d41c <_dtoa_r+0x1d4>
 800d330:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d332:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d336:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d33a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d33e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d342:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d346:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d34a:	4619      	mov	r1, r3
 800d34c:	2200      	movs	r2, #0
 800d34e:	4b74      	ldr	r3, [pc, #464]	@ (800d520 <_dtoa_r+0x2d8>)
 800d350:	f7f2 ffae 	bl	80002b0 <__aeabi_dsub>
 800d354:	a368      	add	r3, pc, #416	@ (adr r3, 800d4f8 <_dtoa_r+0x2b0>)
 800d356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35a:	f7f3 f961 	bl	8000620 <__aeabi_dmul>
 800d35e:	a368      	add	r3, pc, #416	@ (adr r3, 800d500 <_dtoa_r+0x2b8>)
 800d360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d364:	f7f2 ffa6 	bl	80002b4 <__adddf3>
 800d368:	4604      	mov	r4, r0
 800d36a:	460d      	mov	r5, r1
 800d36c:	4630      	mov	r0, r6
 800d36e:	f7f3 f8ed 	bl	800054c <__aeabi_i2d>
 800d372:	a365      	add	r3, pc, #404	@ (adr r3, 800d508 <_dtoa_r+0x2c0>)
 800d374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d378:	f7f3 f952 	bl	8000620 <__aeabi_dmul>
 800d37c:	4602      	mov	r2, r0
 800d37e:	460b      	mov	r3, r1
 800d380:	4620      	mov	r0, r4
 800d382:	4629      	mov	r1, r5
 800d384:	f7f2 ff96 	bl	80002b4 <__adddf3>
 800d388:	4604      	mov	r4, r0
 800d38a:	460d      	mov	r5, r1
 800d38c:	f7f3 fbf8 	bl	8000b80 <__aeabi_d2iz>
 800d390:	2200      	movs	r2, #0
 800d392:	4607      	mov	r7, r0
 800d394:	2300      	movs	r3, #0
 800d396:	4620      	mov	r0, r4
 800d398:	4629      	mov	r1, r5
 800d39a:	f7f3 fbb3 	bl	8000b04 <__aeabi_dcmplt>
 800d39e:	b140      	cbz	r0, 800d3b2 <_dtoa_r+0x16a>
 800d3a0:	4638      	mov	r0, r7
 800d3a2:	f7f3 f8d3 	bl	800054c <__aeabi_i2d>
 800d3a6:	4622      	mov	r2, r4
 800d3a8:	462b      	mov	r3, r5
 800d3aa:	f7f3 fba1 	bl	8000af0 <__aeabi_dcmpeq>
 800d3ae:	b900      	cbnz	r0, 800d3b2 <_dtoa_r+0x16a>
 800d3b0:	3f01      	subs	r7, #1
 800d3b2:	2f16      	cmp	r7, #22
 800d3b4:	d851      	bhi.n	800d45a <_dtoa_r+0x212>
 800d3b6:	4b5b      	ldr	r3, [pc, #364]	@ (800d524 <_dtoa_r+0x2dc>)
 800d3b8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d3bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c4:	f7f3 fb9e 	bl	8000b04 <__aeabi_dcmplt>
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	d048      	beq.n	800d45e <_dtoa_r+0x216>
 800d3cc:	3f01      	subs	r7, #1
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	9312      	str	r3, [sp, #72]	@ 0x48
 800d3d2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d3d4:	1b9b      	subs	r3, r3, r6
 800d3d6:	1e5a      	subs	r2, r3, #1
 800d3d8:	bf46      	itte	mi
 800d3da:	f1c3 0801 	rsbmi	r8, r3, #1
 800d3de:	2300      	movmi	r3, #0
 800d3e0:	f04f 0800 	movpl.w	r8, #0
 800d3e4:	9208      	str	r2, [sp, #32]
 800d3e6:	bf48      	it	mi
 800d3e8:	9308      	strmi	r3, [sp, #32]
 800d3ea:	2f00      	cmp	r7, #0
 800d3ec:	db39      	blt.n	800d462 <_dtoa_r+0x21a>
 800d3ee:	9b08      	ldr	r3, [sp, #32]
 800d3f0:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d3f2:	443b      	add	r3, r7
 800d3f4:	9308      	str	r3, [sp, #32]
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3fc:	2b09      	cmp	r3, #9
 800d3fe:	d864      	bhi.n	800d4ca <_dtoa_r+0x282>
 800d400:	2b05      	cmp	r3, #5
 800d402:	bfc5      	ittet	gt
 800d404:	3b04      	subgt	r3, #4
 800d406:	2400      	movgt	r4, #0
 800d408:	2401      	movle	r4, #1
 800d40a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d40c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d40e:	3b02      	subs	r3, #2
 800d410:	2b03      	cmp	r3, #3
 800d412:	d865      	bhi.n	800d4e0 <_dtoa_r+0x298>
 800d414:	e8df f003 	tbb	[pc, r3]
 800d418:	5737392c 	.word	0x5737392c
 800d41c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d420:	441e      	add	r6, r3
 800d422:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d426:	2b20      	cmp	r3, #32
 800d428:	bfc9      	itett	gt
 800d42a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d42e:	f1c3 0320 	rsble	r3, r3, #32
 800d432:	409f      	lslgt	r7, r3
 800d434:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d438:	bfd8      	it	le
 800d43a:	fa04 f003 	lslle.w	r0, r4, r3
 800d43e:	f106 36ff 	add.w	r6, r6, #4294967295
 800d442:	bfc4      	itt	gt
 800d444:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d448:	ea47 0003 	orrgt.w	r0, r7, r3
 800d44c:	f7f3 f86e 	bl	800052c <__aeabi_ui2d>
 800d450:	2201      	movs	r2, #1
 800d452:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d456:	9214      	str	r2, [sp, #80]	@ 0x50
 800d458:	e777      	b.n	800d34a <_dtoa_r+0x102>
 800d45a:	2301      	movs	r3, #1
 800d45c:	e7b8      	b.n	800d3d0 <_dtoa_r+0x188>
 800d45e:	9012      	str	r0, [sp, #72]	@ 0x48
 800d460:	e7b7      	b.n	800d3d2 <_dtoa_r+0x18a>
 800d462:	427b      	negs	r3, r7
 800d464:	eba8 0807 	sub.w	r8, r8, r7
 800d468:	930a      	str	r3, [sp, #40]	@ 0x28
 800d46a:	2300      	movs	r3, #0
 800d46c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d46e:	e7c4      	b.n	800d3fa <_dtoa_r+0x1b2>
 800d470:	2300      	movs	r3, #0
 800d472:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d476:	2b00      	cmp	r3, #0
 800d478:	dc35      	bgt.n	800d4e6 <_dtoa_r+0x29e>
 800d47a:	2301      	movs	r3, #1
 800d47c:	461a      	mov	r2, r3
 800d47e:	9300      	str	r3, [sp, #0]
 800d480:	9307      	str	r3, [sp, #28]
 800d482:	920e      	str	r2, [sp, #56]	@ 0x38
 800d484:	e00b      	b.n	800d49e <_dtoa_r+0x256>
 800d486:	2301      	movs	r3, #1
 800d488:	e7f3      	b.n	800d472 <_dtoa_r+0x22a>
 800d48a:	2300      	movs	r3, #0
 800d48c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d48e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d490:	18fb      	adds	r3, r7, r3
 800d492:	9300      	str	r3, [sp, #0]
 800d494:	3301      	adds	r3, #1
 800d496:	2b01      	cmp	r3, #1
 800d498:	9307      	str	r3, [sp, #28]
 800d49a:	bfb8      	it	lt
 800d49c:	2301      	movlt	r3, #1
 800d49e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d4a2:	2100      	movs	r1, #0
 800d4a4:	2204      	movs	r2, #4
 800d4a6:	f102 0514 	add.w	r5, r2, #20
 800d4aa:	429d      	cmp	r5, r3
 800d4ac:	d91f      	bls.n	800d4ee <_dtoa_r+0x2a6>
 800d4ae:	6041      	str	r1, [r0, #4]
 800d4b0:	4658      	mov	r0, fp
 800d4b2:	f000 fd8d 	bl	800dfd0 <_Balloc>
 800d4b6:	4682      	mov	sl, r0
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	d13b      	bne.n	800d534 <_dtoa_r+0x2ec>
 800d4bc:	4b1a      	ldr	r3, [pc, #104]	@ (800d528 <_dtoa_r+0x2e0>)
 800d4be:	4602      	mov	r2, r0
 800d4c0:	f240 11af 	movw	r1, #431	@ 0x1af
 800d4c4:	e6d7      	b.n	800d276 <_dtoa_r+0x2e>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e7e0      	b.n	800d48c <_dtoa_r+0x244>
 800d4ca:	2401      	movs	r4, #1
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d4d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	9300      	str	r3, [sp, #0]
 800d4da:	9307      	str	r3, [sp, #28]
 800d4dc:	2312      	movs	r3, #18
 800d4de:	e7d0      	b.n	800d482 <_dtoa_r+0x23a>
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4e4:	e7f5      	b.n	800d4d2 <_dtoa_r+0x28a>
 800d4e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4e8:	9300      	str	r3, [sp, #0]
 800d4ea:	9307      	str	r3, [sp, #28]
 800d4ec:	e7d7      	b.n	800d49e <_dtoa_r+0x256>
 800d4ee:	3101      	adds	r1, #1
 800d4f0:	0052      	lsls	r2, r2, #1
 800d4f2:	e7d8      	b.n	800d4a6 <_dtoa_r+0x25e>
 800d4f4:	f3af 8000 	nop.w
 800d4f8:	636f4361 	.word	0x636f4361
 800d4fc:	3fd287a7 	.word	0x3fd287a7
 800d500:	8b60c8b3 	.word	0x8b60c8b3
 800d504:	3fc68a28 	.word	0x3fc68a28
 800d508:	509f79fb 	.word	0x509f79fb
 800d50c:	3fd34413 	.word	0x3fd34413
 800d510:	080105fd 	.word	0x080105fd
 800d514:	08010614 	.word	0x08010614
 800d518:	7ff00000 	.word	0x7ff00000
 800d51c:	080105cd 	.word	0x080105cd
 800d520:	3ff80000 	.word	0x3ff80000
 800d524:	08010710 	.word	0x08010710
 800d528:	0801066c 	.word	0x0801066c
 800d52c:	080105f9 	.word	0x080105f9
 800d530:	080105cc 	.word	0x080105cc
 800d534:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d538:	6018      	str	r0, [r3, #0]
 800d53a:	9b07      	ldr	r3, [sp, #28]
 800d53c:	2b0e      	cmp	r3, #14
 800d53e:	f200 80a4 	bhi.w	800d68a <_dtoa_r+0x442>
 800d542:	2c00      	cmp	r4, #0
 800d544:	f000 80a1 	beq.w	800d68a <_dtoa_r+0x442>
 800d548:	2f00      	cmp	r7, #0
 800d54a:	dd33      	ble.n	800d5b4 <_dtoa_r+0x36c>
 800d54c:	f007 020f 	and.w	r2, r7, #15
 800d550:	4bac      	ldr	r3, [pc, #688]	@ (800d804 <_dtoa_r+0x5bc>)
 800d552:	05f8      	lsls	r0, r7, #23
 800d554:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d55c:	ed93 7b00 	vldr	d7, [r3]
 800d560:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d564:	d516      	bpl.n	800d594 <_dtoa_r+0x34c>
 800d566:	4ba8      	ldr	r3, [pc, #672]	@ (800d808 <_dtoa_r+0x5c0>)
 800d568:	f004 040f 	and.w	r4, r4, #15
 800d56c:	2603      	movs	r6, #3
 800d56e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d572:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d576:	f7f3 f97d 	bl	8000874 <__aeabi_ddiv>
 800d57a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d57e:	4da2      	ldr	r5, [pc, #648]	@ (800d808 <_dtoa_r+0x5c0>)
 800d580:	b954      	cbnz	r4, 800d598 <_dtoa_r+0x350>
 800d582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d58a:	f7f3 f973 	bl	8000874 <__aeabi_ddiv>
 800d58e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d592:	e028      	b.n	800d5e6 <_dtoa_r+0x39e>
 800d594:	2602      	movs	r6, #2
 800d596:	e7f2      	b.n	800d57e <_dtoa_r+0x336>
 800d598:	07e1      	lsls	r1, r4, #31
 800d59a:	d508      	bpl.n	800d5ae <_dtoa_r+0x366>
 800d59c:	3601      	adds	r6, #1
 800d59e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d5a6:	f7f3 f83b 	bl	8000620 <__aeabi_dmul>
 800d5aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5ae:	1064      	asrs	r4, r4, #1
 800d5b0:	3508      	adds	r5, #8
 800d5b2:	e7e5      	b.n	800d580 <_dtoa_r+0x338>
 800d5b4:	f000 80d2 	beq.w	800d75c <_dtoa_r+0x514>
 800d5b8:	427c      	negs	r4, r7
 800d5ba:	4b92      	ldr	r3, [pc, #584]	@ (800d804 <_dtoa_r+0x5bc>)
 800d5bc:	4d92      	ldr	r5, [pc, #584]	@ (800d808 <_dtoa_r+0x5c0>)
 800d5be:	2602      	movs	r6, #2
 800d5c0:	f004 020f 	and.w	r2, r4, #15
 800d5c4:	1124      	asrs	r4, r4, #4
 800d5c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d2:	f7f3 f825 	bl	8000620 <__aeabi_dmul>
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5dc:	2c00      	cmp	r4, #0
 800d5de:	f040 80b2 	bne.w	800d746 <_dtoa_r+0x4fe>
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d1d3      	bne.n	800d58e <_dtoa_r+0x346>
 800d5e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d5e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	f000 80b7 	beq.w	800d760 <_dtoa_r+0x518>
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	4b85      	ldr	r3, [pc, #532]	@ (800d80c <_dtoa_r+0x5c4>)
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	f7f3 fa83 	bl	8000b04 <__aeabi_dcmplt>
 800d5fe:	2800      	cmp	r0, #0
 800d600:	f000 80ae 	beq.w	800d760 <_dtoa_r+0x518>
 800d604:	9b07      	ldr	r3, [sp, #28]
 800d606:	2b00      	cmp	r3, #0
 800d608:	f000 80aa 	beq.w	800d760 <_dtoa_r+0x518>
 800d60c:	9b00      	ldr	r3, [sp, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	dd37      	ble.n	800d682 <_dtoa_r+0x43a>
 800d612:	1e7b      	subs	r3, r7, #1
 800d614:	4620      	mov	r0, r4
 800d616:	2200      	movs	r2, #0
 800d618:	4629      	mov	r1, r5
 800d61a:	9304      	str	r3, [sp, #16]
 800d61c:	3601      	adds	r6, #1
 800d61e:	4b7c      	ldr	r3, [pc, #496]	@ (800d810 <_dtoa_r+0x5c8>)
 800d620:	f7f2 fffe 	bl	8000620 <__aeabi_dmul>
 800d624:	9c00      	ldr	r4, [sp, #0]
 800d626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d62a:	4630      	mov	r0, r6
 800d62c:	f7f2 ff8e 	bl	800054c <__aeabi_i2d>
 800d630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d634:	f7f2 fff4 	bl	8000620 <__aeabi_dmul>
 800d638:	2200      	movs	r2, #0
 800d63a:	4b76      	ldr	r3, [pc, #472]	@ (800d814 <_dtoa_r+0x5cc>)
 800d63c:	f7f2 fe3a 	bl	80002b4 <__adddf3>
 800d640:	4605      	mov	r5, r0
 800d642:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d646:	2c00      	cmp	r4, #0
 800d648:	f040 808d 	bne.w	800d766 <_dtoa_r+0x51e>
 800d64c:	2200      	movs	r2, #0
 800d64e:	4b72      	ldr	r3, [pc, #456]	@ (800d818 <_dtoa_r+0x5d0>)
 800d650:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d654:	f7f2 fe2c 	bl	80002b0 <__aeabi_dsub>
 800d658:	4602      	mov	r2, r0
 800d65a:	460b      	mov	r3, r1
 800d65c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d660:	462a      	mov	r2, r5
 800d662:	4633      	mov	r3, r6
 800d664:	f7f3 fa6c 	bl	8000b40 <__aeabi_dcmpgt>
 800d668:	2800      	cmp	r0, #0
 800d66a:	f040 828b 	bne.w	800db84 <_dtoa_r+0x93c>
 800d66e:	462a      	mov	r2, r5
 800d670:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d674:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d678:	f7f3 fa44 	bl	8000b04 <__aeabi_dcmplt>
 800d67c:	2800      	cmp	r0, #0
 800d67e:	f040 8128 	bne.w	800d8d2 <_dtoa_r+0x68a>
 800d682:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d686:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d68a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	f2c0 815a 	blt.w	800d946 <_dtoa_r+0x6fe>
 800d692:	2f0e      	cmp	r7, #14
 800d694:	f300 8157 	bgt.w	800d946 <_dtoa_r+0x6fe>
 800d698:	4b5a      	ldr	r3, [pc, #360]	@ (800d804 <_dtoa_r+0x5bc>)
 800d69a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d69e:	ed93 7b00 	vldr	d7, [r3]
 800d6a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	ed8d 7b00 	vstr	d7, [sp]
 800d6aa:	da03      	bge.n	800d6b4 <_dtoa_r+0x46c>
 800d6ac:	9b07      	ldr	r3, [sp, #28]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	f340 8101 	ble.w	800d8b6 <_dtoa_r+0x66e>
 800d6b4:	4656      	mov	r6, sl
 800d6b6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d6ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6be:	4620      	mov	r0, r4
 800d6c0:	4629      	mov	r1, r5
 800d6c2:	f7f3 f8d7 	bl	8000874 <__aeabi_ddiv>
 800d6c6:	f7f3 fa5b 	bl	8000b80 <__aeabi_d2iz>
 800d6ca:	4680      	mov	r8, r0
 800d6cc:	f7f2 ff3e 	bl	800054c <__aeabi_i2d>
 800d6d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6d4:	f7f2 ffa4 	bl	8000620 <__aeabi_dmul>
 800d6d8:	4602      	mov	r2, r0
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d6e0:	460b      	mov	r3, r1
 800d6e2:	4629      	mov	r1, r5
 800d6e4:	f7f2 fde4 	bl	80002b0 <__aeabi_dsub>
 800d6e8:	9d07      	ldr	r5, [sp, #28]
 800d6ea:	f806 4b01 	strb.w	r4, [r6], #1
 800d6ee:	eba6 040a 	sub.w	r4, r6, sl
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	42a5      	cmp	r5, r4
 800d6f8:	f040 8117 	bne.w	800d92a <_dtoa_r+0x6e2>
 800d6fc:	f7f2 fdda 	bl	80002b4 <__adddf3>
 800d700:	4604      	mov	r4, r0
 800d702:	460d      	mov	r5, r1
 800d704:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d708:	f7f3 fa1a 	bl	8000b40 <__aeabi_dcmpgt>
 800d70c:	2800      	cmp	r0, #0
 800d70e:	f040 80f9 	bne.w	800d904 <_dtoa_r+0x6bc>
 800d712:	4620      	mov	r0, r4
 800d714:	4629      	mov	r1, r5
 800d716:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d71a:	f7f3 f9e9 	bl	8000af0 <__aeabi_dcmpeq>
 800d71e:	b118      	cbz	r0, 800d728 <_dtoa_r+0x4e0>
 800d720:	f018 0f01 	tst.w	r8, #1
 800d724:	f040 80ee 	bne.w	800d904 <_dtoa_r+0x6bc>
 800d728:	4649      	mov	r1, r9
 800d72a:	4658      	mov	r0, fp
 800d72c:	f000 fc90 	bl	800e050 <_Bfree>
 800d730:	2300      	movs	r3, #0
 800d732:	3701      	adds	r7, #1
 800d734:	7033      	strb	r3, [r6, #0]
 800d736:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d738:	601f      	str	r7, [r3, #0]
 800d73a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	f000 831d 	beq.w	800dd7c <_dtoa_r+0xb34>
 800d742:	601e      	str	r6, [r3, #0]
 800d744:	e31a      	b.n	800dd7c <_dtoa_r+0xb34>
 800d746:	07e2      	lsls	r2, r4, #31
 800d748:	d505      	bpl.n	800d756 <_dtoa_r+0x50e>
 800d74a:	3601      	adds	r6, #1
 800d74c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d750:	f7f2 ff66 	bl	8000620 <__aeabi_dmul>
 800d754:	2301      	movs	r3, #1
 800d756:	1064      	asrs	r4, r4, #1
 800d758:	3508      	adds	r5, #8
 800d75a:	e73f      	b.n	800d5dc <_dtoa_r+0x394>
 800d75c:	2602      	movs	r6, #2
 800d75e:	e742      	b.n	800d5e6 <_dtoa_r+0x39e>
 800d760:	9c07      	ldr	r4, [sp, #28]
 800d762:	9704      	str	r7, [sp, #16]
 800d764:	e761      	b.n	800d62a <_dtoa_r+0x3e2>
 800d766:	4b27      	ldr	r3, [pc, #156]	@ (800d804 <_dtoa_r+0x5bc>)
 800d768:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d76a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d76e:	4454      	add	r4, sl
 800d770:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d774:	2900      	cmp	r1, #0
 800d776:	d053      	beq.n	800d820 <_dtoa_r+0x5d8>
 800d778:	2000      	movs	r0, #0
 800d77a:	4928      	ldr	r1, [pc, #160]	@ (800d81c <_dtoa_r+0x5d4>)
 800d77c:	f7f3 f87a 	bl	8000874 <__aeabi_ddiv>
 800d780:	4633      	mov	r3, r6
 800d782:	4656      	mov	r6, sl
 800d784:	462a      	mov	r2, r5
 800d786:	f7f2 fd93 	bl	80002b0 <__aeabi_dsub>
 800d78a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d78e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d792:	f7f3 f9f5 	bl	8000b80 <__aeabi_d2iz>
 800d796:	4605      	mov	r5, r0
 800d798:	f7f2 fed8 	bl	800054c <__aeabi_i2d>
 800d79c:	4602      	mov	r2, r0
 800d79e:	460b      	mov	r3, r1
 800d7a0:	3530      	adds	r5, #48	@ 0x30
 800d7a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7a6:	f7f2 fd83 	bl	80002b0 <__aeabi_dsub>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	f806 5b01 	strb.w	r5, [r6], #1
 800d7b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d7b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7ba:	f7f3 f9a3 	bl	8000b04 <__aeabi_dcmplt>
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	d171      	bne.n	800d8a6 <_dtoa_r+0x65e>
 800d7c2:	2000      	movs	r0, #0
 800d7c4:	4911      	ldr	r1, [pc, #68]	@ (800d80c <_dtoa_r+0x5c4>)
 800d7c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7ca:	f7f2 fd71 	bl	80002b0 <__aeabi_dsub>
 800d7ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7d2:	f7f3 f997 	bl	8000b04 <__aeabi_dcmplt>
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	f040 8095 	bne.w	800d906 <_dtoa_r+0x6be>
 800d7dc:	42a6      	cmp	r6, r4
 800d7de:	f43f af50 	beq.w	800d682 <_dtoa_r+0x43a>
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	4b0a      	ldr	r3, [pc, #40]	@ (800d810 <_dtoa_r+0x5c8>)
 800d7e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d7ea:	f7f2 ff19 	bl	8000620 <__aeabi_dmul>
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	4b07      	ldr	r3, [pc, #28]	@ (800d810 <_dtoa_r+0x5c8>)
 800d7f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d7f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7fa:	f7f2 ff11 	bl	8000620 <__aeabi_dmul>
 800d7fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d802:	e7c4      	b.n	800d78e <_dtoa_r+0x546>
 800d804:	08010710 	.word	0x08010710
 800d808:	080106e8 	.word	0x080106e8
 800d80c:	3ff00000 	.word	0x3ff00000
 800d810:	40240000 	.word	0x40240000
 800d814:	401c0000 	.word	0x401c0000
 800d818:	40140000 	.word	0x40140000
 800d81c:	3fe00000 	.word	0x3fe00000
 800d820:	4631      	mov	r1, r6
 800d822:	4656      	mov	r6, sl
 800d824:	4628      	mov	r0, r5
 800d826:	f7f2 fefb 	bl	8000620 <__aeabi_dmul>
 800d82a:	9415      	str	r4, [sp, #84]	@ 0x54
 800d82c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d834:	f7f3 f9a4 	bl	8000b80 <__aeabi_d2iz>
 800d838:	4605      	mov	r5, r0
 800d83a:	f7f2 fe87 	bl	800054c <__aeabi_i2d>
 800d83e:	4602      	mov	r2, r0
 800d840:	3530      	adds	r5, #48	@ 0x30
 800d842:	460b      	mov	r3, r1
 800d844:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d848:	f7f2 fd32 	bl	80002b0 <__aeabi_dsub>
 800d84c:	f806 5b01 	strb.w	r5, [r6], #1
 800d850:	4602      	mov	r2, r0
 800d852:	460b      	mov	r3, r1
 800d854:	42a6      	cmp	r6, r4
 800d856:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d85a:	f04f 0200 	mov.w	r2, #0
 800d85e:	d124      	bne.n	800d8aa <_dtoa_r+0x662>
 800d860:	4bac      	ldr	r3, [pc, #688]	@ (800db14 <_dtoa_r+0x8cc>)
 800d862:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d866:	f7f2 fd25 	bl	80002b4 <__adddf3>
 800d86a:	4602      	mov	r2, r0
 800d86c:	460b      	mov	r3, r1
 800d86e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d872:	f7f3 f965 	bl	8000b40 <__aeabi_dcmpgt>
 800d876:	2800      	cmp	r0, #0
 800d878:	d145      	bne.n	800d906 <_dtoa_r+0x6be>
 800d87a:	2000      	movs	r0, #0
 800d87c:	49a5      	ldr	r1, [pc, #660]	@ (800db14 <_dtoa_r+0x8cc>)
 800d87e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d882:	f7f2 fd15 	bl	80002b0 <__aeabi_dsub>
 800d886:	4602      	mov	r2, r0
 800d888:	460b      	mov	r3, r1
 800d88a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d88e:	f7f3 f939 	bl	8000b04 <__aeabi_dcmplt>
 800d892:	2800      	cmp	r0, #0
 800d894:	f43f aef5 	beq.w	800d682 <_dtoa_r+0x43a>
 800d898:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d89a:	1e73      	subs	r3, r6, #1
 800d89c:	9315      	str	r3, [sp, #84]	@ 0x54
 800d89e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d8a2:	2b30      	cmp	r3, #48	@ 0x30
 800d8a4:	d0f8      	beq.n	800d898 <_dtoa_r+0x650>
 800d8a6:	9f04      	ldr	r7, [sp, #16]
 800d8a8:	e73e      	b.n	800d728 <_dtoa_r+0x4e0>
 800d8aa:	4b9b      	ldr	r3, [pc, #620]	@ (800db18 <_dtoa_r+0x8d0>)
 800d8ac:	f7f2 feb8 	bl	8000620 <__aeabi_dmul>
 800d8b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8b4:	e7bc      	b.n	800d830 <_dtoa_r+0x5e8>
 800d8b6:	d10c      	bne.n	800d8d2 <_dtoa_r+0x68a>
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	4b98      	ldr	r3, [pc, #608]	@ (800db1c <_dtoa_r+0x8d4>)
 800d8bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8c0:	f7f2 feae 	bl	8000620 <__aeabi_dmul>
 800d8c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8c8:	f7f3 f930 	bl	8000b2c <__aeabi_dcmpge>
 800d8cc:	2800      	cmp	r0, #0
 800d8ce:	f000 8157 	beq.w	800db80 <_dtoa_r+0x938>
 800d8d2:	2400      	movs	r4, #0
 800d8d4:	4625      	mov	r5, r4
 800d8d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8d8:	4656      	mov	r6, sl
 800d8da:	43db      	mvns	r3, r3
 800d8dc:	9304      	str	r3, [sp, #16]
 800d8de:	2700      	movs	r7, #0
 800d8e0:	4621      	mov	r1, r4
 800d8e2:	4658      	mov	r0, fp
 800d8e4:	f000 fbb4 	bl	800e050 <_Bfree>
 800d8e8:	2d00      	cmp	r5, #0
 800d8ea:	d0dc      	beq.n	800d8a6 <_dtoa_r+0x65e>
 800d8ec:	b12f      	cbz	r7, 800d8fa <_dtoa_r+0x6b2>
 800d8ee:	42af      	cmp	r7, r5
 800d8f0:	d003      	beq.n	800d8fa <_dtoa_r+0x6b2>
 800d8f2:	4639      	mov	r1, r7
 800d8f4:	4658      	mov	r0, fp
 800d8f6:	f000 fbab 	bl	800e050 <_Bfree>
 800d8fa:	4629      	mov	r1, r5
 800d8fc:	4658      	mov	r0, fp
 800d8fe:	f000 fba7 	bl	800e050 <_Bfree>
 800d902:	e7d0      	b.n	800d8a6 <_dtoa_r+0x65e>
 800d904:	9704      	str	r7, [sp, #16]
 800d906:	4633      	mov	r3, r6
 800d908:	461e      	mov	r6, r3
 800d90a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d90e:	2a39      	cmp	r2, #57	@ 0x39
 800d910:	d107      	bne.n	800d922 <_dtoa_r+0x6da>
 800d912:	459a      	cmp	sl, r3
 800d914:	d1f8      	bne.n	800d908 <_dtoa_r+0x6c0>
 800d916:	9a04      	ldr	r2, [sp, #16]
 800d918:	3201      	adds	r2, #1
 800d91a:	9204      	str	r2, [sp, #16]
 800d91c:	2230      	movs	r2, #48	@ 0x30
 800d91e:	f88a 2000 	strb.w	r2, [sl]
 800d922:	781a      	ldrb	r2, [r3, #0]
 800d924:	3201      	adds	r2, #1
 800d926:	701a      	strb	r2, [r3, #0]
 800d928:	e7bd      	b.n	800d8a6 <_dtoa_r+0x65e>
 800d92a:	2200      	movs	r2, #0
 800d92c:	4b7a      	ldr	r3, [pc, #488]	@ (800db18 <_dtoa_r+0x8d0>)
 800d92e:	f7f2 fe77 	bl	8000620 <__aeabi_dmul>
 800d932:	2200      	movs	r2, #0
 800d934:	2300      	movs	r3, #0
 800d936:	4604      	mov	r4, r0
 800d938:	460d      	mov	r5, r1
 800d93a:	f7f3 f8d9 	bl	8000af0 <__aeabi_dcmpeq>
 800d93e:	2800      	cmp	r0, #0
 800d940:	f43f aebb 	beq.w	800d6ba <_dtoa_r+0x472>
 800d944:	e6f0      	b.n	800d728 <_dtoa_r+0x4e0>
 800d946:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d948:	2a00      	cmp	r2, #0
 800d94a:	f000 80db 	beq.w	800db04 <_dtoa_r+0x8bc>
 800d94e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d950:	2a01      	cmp	r2, #1
 800d952:	f300 80bf 	bgt.w	800dad4 <_dtoa_r+0x88c>
 800d956:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d958:	2a00      	cmp	r2, #0
 800d95a:	f000 80b7 	beq.w	800dacc <_dtoa_r+0x884>
 800d95e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d962:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d964:	4646      	mov	r6, r8
 800d966:	9a08      	ldr	r2, [sp, #32]
 800d968:	2101      	movs	r1, #1
 800d96a:	4658      	mov	r0, fp
 800d96c:	4498      	add	r8, r3
 800d96e:	441a      	add	r2, r3
 800d970:	9208      	str	r2, [sp, #32]
 800d972:	f000 fc23 	bl	800e1bc <__i2b>
 800d976:	4605      	mov	r5, r0
 800d978:	b15e      	cbz	r6, 800d992 <_dtoa_r+0x74a>
 800d97a:	9b08      	ldr	r3, [sp, #32]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	dd08      	ble.n	800d992 <_dtoa_r+0x74a>
 800d980:	42b3      	cmp	r3, r6
 800d982:	9a08      	ldr	r2, [sp, #32]
 800d984:	bfa8      	it	ge
 800d986:	4633      	movge	r3, r6
 800d988:	eba8 0803 	sub.w	r8, r8, r3
 800d98c:	1af6      	subs	r6, r6, r3
 800d98e:	1ad3      	subs	r3, r2, r3
 800d990:	9308      	str	r3, [sp, #32]
 800d992:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d994:	b1f3      	cbz	r3, 800d9d4 <_dtoa_r+0x78c>
 800d996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d998:	2b00      	cmp	r3, #0
 800d99a:	f000 80b7 	beq.w	800db0c <_dtoa_r+0x8c4>
 800d99e:	b18c      	cbz	r4, 800d9c4 <_dtoa_r+0x77c>
 800d9a0:	4629      	mov	r1, r5
 800d9a2:	4622      	mov	r2, r4
 800d9a4:	4658      	mov	r0, fp
 800d9a6:	f000 fcc9 	bl	800e33c <__pow5mult>
 800d9aa:	464a      	mov	r2, r9
 800d9ac:	4601      	mov	r1, r0
 800d9ae:	4605      	mov	r5, r0
 800d9b0:	4658      	mov	r0, fp
 800d9b2:	f000 fc19 	bl	800e1e8 <__multiply>
 800d9b6:	4649      	mov	r1, r9
 800d9b8:	9004      	str	r0, [sp, #16]
 800d9ba:	4658      	mov	r0, fp
 800d9bc:	f000 fb48 	bl	800e050 <_Bfree>
 800d9c0:	9b04      	ldr	r3, [sp, #16]
 800d9c2:	4699      	mov	r9, r3
 800d9c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9c6:	1b1a      	subs	r2, r3, r4
 800d9c8:	d004      	beq.n	800d9d4 <_dtoa_r+0x78c>
 800d9ca:	4649      	mov	r1, r9
 800d9cc:	4658      	mov	r0, fp
 800d9ce:	f000 fcb5 	bl	800e33c <__pow5mult>
 800d9d2:	4681      	mov	r9, r0
 800d9d4:	2101      	movs	r1, #1
 800d9d6:	4658      	mov	r0, fp
 800d9d8:	f000 fbf0 	bl	800e1bc <__i2b>
 800d9dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9de:	4604      	mov	r4, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	f000 81cf 	beq.w	800dd84 <_dtoa_r+0xb3c>
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	4601      	mov	r1, r0
 800d9ea:	4658      	mov	r0, fp
 800d9ec:	f000 fca6 	bl	800e33c <__pow5mult>
 800d9f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	f300 8095 	bgt.w	800db24 <_dtoa_r+0x8dc>
 800d9fa:	9b02      	ldr	r3, [sp, #8]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	f040 8087 	bne.w	800db10 <_dtoa_r+0x8c8>
 800da02:	9b03      	ldr	r3, [sp, #12]
 800da04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da08:	2b00      	cmp	r3, #0
 800da0a:	f040 8089 	bne.w	800db20 <_dtoa_r+0x8d8>
 800da0e:	9b03      	ldr	r3, [sp, #12]
 800da10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800da14:	0d1b      	lsrs	r3, r3, #20
 800da16:	051b      	lsls	r3, r3, #20
 800da18:	b12b      	cbz	r3, 800da26 <_dtoa_r+0x7de>
 800da1a:	9b08      	ldr	r3, [sp, #32]
 800da1c:	f108 0801 	add.w	r8, r8, #1
 800da20:	3301      	adds	r3, #1
 800da22:	9308      	str	r3, [sp, #32]
 800da24:	2301      	movs	r3, #1
 800da26:	930a      	str	r3, [sp, #40]	@ 0x28
 800da28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f000 81b0 	beq.w	800dd90 <_dtoa_r+0xb48>
 800da30:	6923      	ldr	r3, [r4, #16]
 800da32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800da36:	6918      	ldr	r0, [r3, #16]
 800da38:	f000 fb74 	bl	800e124 <__hi0bits>
 800da3c:	f1c0 0020 	rsb	r0, r0, #32
 800da40:	9b08      	ldr	r3, [sp, #32]
 800da42:	4418      	add	r0, r3
 800da44:	f010 001f 	ands.w	r0, r0, #31
 800da48:	d077      	beq.n	800db3a <_dtoa_r+0x8f2>
 800da4a:	f1c0 0320 	rsb	r3, r0, #32
 800da4e:	2b04      	cmp	r3, #4
 800da50:	dd6b      	ble.n	800db2a <_dtoa_r+0x8e2>
 800da52:	f1c0 001c 	rsb	r0, r0, #28
 800da56:	9b08      	ldr	r3, [sp, #32]
 800da58:	4480      	add	r8, r0
 800da5a:	4403      	add	r3, r0
 800da5c:	4406      	add	r6, r0
 800da5e:	9308      	str	r3, [sp, #32]
 800da60:	f1b8 0f00 	cmp.w	r8, #0
 800da64:	dd05      	ble.n	800da72 <_dtoa_r+0x82a>
 800da66:	4649      	mov	r1, r9
 800da68:	4642      	mov	r2, r8
 800da6a:	4658      	mov	r0, fp
 800da6c:	f000 fcc0 	bl	800e3f0 <__lshift>
 800da70:	4681      	mov	r9, r0
 800da72:	9b08      	ldr	r3, [sp, #32]
 800da74:	2b00      	cmp	r3, #0
 800da76:	dd05      	ble.n	800da84 <_dtoa_r+0x83c>
 800da78:	4621      	mov	r1, r4
 800da7a:	461a      	mov	r2, r3
 800da7c:	4658      	mov	r0, fp
 800da7e:	f000 fcb7 	bl	800e3f0 <__lshift>
 800da82:	4604      	mov	r4, r0
 800da84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800da86:	2b00      	cmp	r3, #0
 800da88:	d059      	beq.n	800db3e <_dtoa_r+0x8f6>
 800da8a:	4621      	mov	r1, r4
 800da8c:	4648      	mov	r0, r9
 800da8e:	f000 fd1b 	bl	800e4c8 <__mcmp>
 800da92:	2800      	cmp	r0, #0
 800da94:	da53      	bge.n	800db3e <_dtoa_r+0x8f6>
 800da96:	1e7b      	subs	r3, r7, #1
 800da98:	4649      	mov	r1, r9
 800da9a:	220a      	movs	r2, #10
 800da9c:	4658      	mov	r0, fp
 800da9e:	9304      	str	r3, [sp, #16]
 800daa0:	2300      	movs	r3, #0
 800daa2:	f000 faf7 	bl	800e094 <__multadd>
 800daa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800daa8:	4681      	mov	r9, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	f000 8172 	beq.w	800dd94 <_dtoa_r+0xb4c>
 800dab0:	2300      	movs	r3, #0
 800dab2:	4629      	mov	r1, r5
 800dab4:	220a      	movs	r2, #10
 800dab6:	4658      	mov	r0, fp
 800dab8:	f000 faec 	bl	800e094 <__multadd>
 800dabc:	9b00      	ldr	r3, [sp, #0]
 800dabe:	4605      	mov	r5, r0
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	dc67      	bgt.n	800db94 <_dtoa_r+0x94c>
 800dac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dac6:	2b02      	cmp	r3, #2
 800dac8:	dc41      	bgt.n	800db4e <_dtoa_r+0x906>
 800daca:	e063      	b.n	800db94 <_dtoa_r+0x94c>
 800dacc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dace:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dad2:	e746      	b.n	800d962 <_dtoa_r+0x71a>
 800dad4:	9b07      	ldr	r3, [sp, #28]
 800dad6:	1e5c      	subs	r4, r3, #1
 800dad8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dada:	42a3      	cmp	r3, r4
 800dadc:	bfb7      	itett	lt
 800dade:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dae0:	1b1c      	subge	r4, r3, r4
 800dae2:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dae4:	1ae3      	sublt	r3, r4, r3
 800dae6:	bfbe      	ittt	lt
 800dae8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800daea:	2400      	movlt	r4, #0
 800daec:	18d2      	addlt	r2, r2, r3
 800daee:	9b07      	ldr	r3, [sp, #28]
 800daf0:	bfb8      	it	lt
 800daf2:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	bfb5      	itete	lt
 800daf8:	eba8 0603 	sublt.w	r6, r8, r3
 800dafc:	4646      	movge	r6, r8
 800dafe:	2300      	movlt	r3, #0
 800db00:	9b07      	ldrge	r3, [sp, #28]
 800db02:	e730      	b.n	800d966 <_dtoa_r+0x71e>
 800db04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800db06:	4646      	mov	r6, r8
 800db08:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800db0a:	e735      	b.n	800d978 <_dtoa_r+0x730>
 800db0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800db0e:	e75c      	b.n	800d9ca <_dtoa_r+0x782>
 800db10:	2300      	movs	r3, #0
 800db12:	e788      	b.n	800da26 <_dtoa_r+0x7de>
 800db14:	3fe00000 	.word	0x3fe00000
 800db18:	40240000 	.word	0x40240000
 800db1c:	40140000 	.word	0x40140000
 800db20:	9b02      	ldr	r3, [sp, #8]
 800db22:	e780      	b.n	800da26 <_dtoa_r+0x7de>
 800db24:	2300      	movs	r3, #0
 800db26:	930a      	str	r3, [sp, #40]	@ 0x28
 800db28:	e782      	b.n	800da30 <_dtoa_r+0x7e8>
 800db2a:	d099      	beq.n	800da60 <_dtoa_r+0x818>
 800db2c:	331c      	adds	r3, #28
 800db2e:	9a08      	ldr	r2, [sp, #32]
 800db30:	441a      	add	r2, r3
 800db32:	4498      	add	r8, r3
 800db34:	441e      	add	r6, r3
 800db36:	9208      	str	r2, [sp, #32]
 800db38:	e792      	b.n	800da60 <_dtoa_r+0x818>
 800db3a:	4603      	mov	r3, r0
 800db3c:	e7f6      	b.n	800db2c <_dtoa_r+0x8e4>
 800db3e:	9b07      	ldr	r3, [sp, #28]
 800db40:	9704      	str	r7, [sp, #16]
 800db42:	2b00      	cmp	r3, #0
 800db44:	dc20      	bgt.n	800db88 <_dtoa_r+0x940>
 800db46:	9300      	str	r3, [sp, #0]
 800db48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db4a:	2b02      	cmp	r3, #2
 800db4c:	dd1e      	ble.n	800db8c <_dtoa_r+0x944>
 800db4e:	9b00      	ldr	r3, [sp, #0]
 800db50:	2b00      	cmp	r3, #0
 800db52:	f47f aec0 	bne.w	800d8d6 <_dtoa_r+0x68e>
 800db56:	4621      	mov	r1, r4
 800db58:	2205      	movs	r2, #5
 800db5a:	4658      	mov	r0, fp
 800db5c:	f000 fa9a 	bl	800e094 <__multadd>
 800db60:	4601      	mov	r1, r0
 800db62:	4604      	mov	r4, r0
 800db64:	4648      	mov	r0, r9
 800db66:	f000 fcaf 	bl	800e4c8 <__mcmp>
 800db6a:	2800      	cmp	r0, #0
 800db6c:	f77f aeb3 	ble.w	800d8d6 <_dtoa_r+0x68e>
 800db70:	2331      	movs	r3, #49	@ 0x31
 800db72:	4656      	mov	r6, sl
 800db74:	f806 3b01 	strb.w	r3, [r6], #1
 800db78:	9b04      	ldr	r3, [sp, #16]
 800db7a:	3301      	adds	r3, #1
 800db7c:	9304      	str	r3, [sp, #16]
 800db7e:	e6ae      	b.n	800d8de <_dtoa_r+0x696>
 800db80:	9c07      	ldr	r4, [sp, #28]
 800db82:	9704      	str	r7, [sp, #16]
 800db84:	4625      	mov	r5, r4
 800db86:	e7f3      	b.n	800db70 <_dtoa_r+0x928>
 800db88:	9b07      	ldr	r3, [sp, #28]
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f000 8104 	beq.w	800dd9c <_dtoa_r+0xb54>
 800db94:	2e00      	cmp	r6, #0
 800db96:	dd05      	ble.n	800dba4 <_dtoa_r+0x95c>
 800db98:	4629      	mov	r1, r5
 800db9a:	4632      	mov	r2, r6
 800db9c:	4658      	mov	r0, fp
 800db9e:	f000 fc27 	bl	800e3f0 <__lshift>
 800dba2:	4605      	mov	r5, r0
 800dba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d05a      	beq.n	800dc60 <_dtoa_r+0xa18>
 800dbaa:	6869      	ldr	r1, [r5, #4]
 800dbac:	4658      	mov	r0, fp
 800dbae:	f000 fa0f 	bl	800dfd0 <_Balloc>
 800dbb2:	4606      	mov	r6, r0
 800dbb4:	b928      	cbnz	r0, 800dbc2 <_dtoa_r+0x97a>
 800dbb6:	4b84      	ldr	r3, [pc, #528]	@ (800ddc8 <_dtoa_r+0xb80>)
 800dbb8:	4602      	mov	r2, r0
 800dbba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dbbe:	f7ff bb5a 	b.w	800d276 <_dtoa_r+0x2e>
 800dbc2:	692a      	ldr	r2, [r5, #16]
 800dbc4:	f105 010c 	add.w	r1, r5, #12
 800dbc8:	300c      	adds	r0, #12
 800dbca:	3202      	adds	r2, #2
 800dbcc:	0092      	lsls	r2, r2, #2
 800dbce:	f7ff faa0 	bl	800d112 <memcpy>
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	4631      	mov	r1, r6
 800dbd6:	4658      	mov	r0, fp
 800dbd8:	f000 fc0a 	bl	800e3f0 <__lshift>
 800dbdc:	f10a 0301 	add.w	r3, sl, #1
 800dbe0:	462f      	mov	r7, r5
 800dbe2:	4605      	mov	r5, r0
 800dbe4:	9307      	str	r3, [sp, #28]
 800dbe6:	9b00      	ldr	r3, [sp, #0]
 800dbe8:	4453      	add	r3, sl
 800dbea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbec:	9b02      	ldr	r3, [sp, #8]
 800dbee:	f003 0301 	and.w	r3, r3, #1
 800dbf2:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbf4:	9b07      	ldr	r3, [sp, #28]
 800dbf6:	4621      	mov	r1, r4
 800dbf8:	4648      	mov	r0, r9
 800dbfa:	3b01      	subs	r3, #1
 800dbfc:	9300      	str	r3, [sp, #0]
 800dbfe:	f7ff fa95 	bl	800d12c <quorem>
 800dc02:	4639      	mov	r1, r7
 800dc04:	9002      	str	r0, [sp, #8]
 800dc06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dc0a:	4648      	mov	r0, r9
 800dc0c:	f000 fc5c 	bl	800e4c8 <__mcmp>
 800dc10:	462a      	mov	r2, r5
 800dc12:	9008      	str	r0, [sp, #32]
 800dc14:	4621      	mov	r1, r4
 800dc16:	4658      	mov	r0, fp
 800dc18:	f000 fc72 	bl	800e500 <__mdiff>
 800dc1c:	68c2      	ldr	r2, [r0, #12]
 800dc1e:	4606      	mov	r6, r0
 800dc20:	bb02      	cbnz	r2, 800dc64 <_dtoa_r+0xa1c>
 800dc22:	4601      	mov	r1, r0
 800dc24:	4648      	mov	r0, r9
 800dc26:	f000 fc4f 	bl	800e4c8 <__mcmp>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	4631      	mov	r1, r6
 800dc2e:	4658      	mov	r0, fp
 800dc30:	920e      	str	r2, [sp, #56]	@ 0x38
 800dc32:	f000 fa0d 	bl	800e050 <_Bfree>
 800dc36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc3a:	9e07      	ldr	r6, [sp, #28]
 800dc3c:	ea43 0102 	orr.w	r1, r3, r2
 800dc40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc42:	4319      	orrs	r1, r3
 800dc44:	d110      	bne.n	800dc68 <_dtoa_r+0xa20>
 800dc46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dc4a:	d029      	beq.n	800dca0 <_dtoa_r+0xa58>
 800dc4c:	9b08      	ldr	r3, [sp, #32]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	dd02      	ble.n	800dc58 <_dtoa_r+0xa10>
 800dc52:	9b02      	ldr	r3, [sp, #8]
 800dc54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dc58:	9b00      	ldr	r3, [sp, #0]
 800dc5a:	f883 8000 	strb.w	r8, [r3]
 800dc5e:	e63f      	b.n	800d8e0 <_dtoa_r+0x698>
 800dc60:	4628      	mov	r0, r5
 800dc62:	e7bb      	b.n	800dbdc <_dtoa_r+0x994>
 800dc64:	2201      	movs	r2, #1
 800dc66:	e7e1      	b.n	800dc2c <_dtoa_r+0x9e4>
 800dc68:	9b08      	ldr	r3, [sp, #32]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	db04      	blt.n	800dc78 <_dtoa_r+0xa30>
 800dc6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dc70:	430b      	orrs	r3, r1
 800dc72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dc74:	430b      	orrs	r3, r1
 800dc76:	d120      	bne.n	800dcba <_dtoa_r+0xa72>
 800dc78:	2a00      	cmp	r2, #0
 800dc7a:	dded      	ble.n	800dc58 <_dtoa_r+0xa10>
 800dc7c:	4649      	mov	r1, r9
 800dc7e:	2201      	movs	r2, #1
 800dc80:	4658      	mov	r0, fp
 800dc82:	f000 fbb5 	bl	800e3f0 <__lshift>
 800dc86:	4621      	mov	r1, r4
 800dc88:	4681      	mov	r9, r0
 800dc8a:	f000 fc1d 	bl	800e4c8 <__mcmp>
 800dc8e:	2800      	cmp	r0, #0
 800dc90:	dc03      	bgt.n	800dc9a <_dtoa_r+0xa52>
 800dc92:	d1e1      	bne.n	800dc58 <_dtoa_r+0xa10>
 800dc94:	f018 0f01 	tst.w	r8, #1
 800dc98:	d0de      	beq.n	800dc58 <_dtoa_r+0xa10>
 800dc9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dc9e:	d1d8      	bne.n	800dc52 <_dtoa_r+0xa0a>
 800dca0:	2339      	movs	r3, #57	@ 0x39
 800dca2:	9a00      	ldr	r2, [sp, #0]
 800dca4:	7013      	strb	r3, [r2, #0]
 800dca6:	4633      	mov	r3, r6
 800dca8:	461e      	mov	r6, r3
 800dcaa:	3b01      	subs	r3, #1
 800dcac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dcb0:	2a39      	cmp	r2, #57	@ 0x39
 800dcb2:	d052      	beq.n	800dd5a <_dtoa_r+0xb12>
 800dcb4:	3201      	adds	r2, #1
 800dcb6:	701a      	strb	r2, [r3, #0]
 800dcb8:	e612      	b.n	800d8e0 <_dtoa_r+0x698>
 800dcba:	2a00      	cmp	r2, #0
 800dcbc:	dd07      	ble.n	800dcce <_dtoa_r+0xa86>
 800dcbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dcc2:	d0ed      	beq.n	800dca0 <_dtoa_r+0xa58>
 800dcc4:	f108 0301 	add.w	r3, r8, #1
 800dcc8:	9a00      	ldr	r2, [sp, #0]
 800dcca:	7013      	strb	r3, [r2, #0]
 800dccc:	e608      	b.n	800d8e0 <_dtoa_r+0x698>
 800dcce:	9b07      	ldr	r3, [sp, #28]
 800dcd0:	9a07      	ldr	r2, [sp, #28]
 800dcd2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dcd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d028      	beq.n	800dd2e <_dtoa_r+0xae6>
 800dcdc:	4649      	mov	r1, r9
 800dcde:	2300      	movs	r3, #0
 800dce0:	220a      	movs	r2, #10
 800dce2:	4658      	mov	r0, fp
 800dce4:	f000 f9d6 	bl	800e094 <__multadd>
 800dce8:	42af      	cmp	r7, r5
 800dcea:	4681      	mov	r9, r0
 800dcec:	f04f 0300 	mov.w	r3, #0
 800dcf0:	f04f 020a 	mov.w	r2, #10
 800dcf4:	4639      	mov	r1, r7
 800dcf6:	4658      	mov	r0, fp
 800dcf8:	d107      	bne.n	800dd0a <_dtoa_r+0xac2>
 800dcfa:	f000 f9cb 	bl	800e094 <__multadd>
 800dcfe:	4607      	mov	r7, r0
 800dd00:	4605      	mov	r5, r0
 800dd02:	9b07      	ldr	r3, [sp, #28]
 800dd04:	3301      	adds	r3, #1
 800dd06:	9307      	str	r3, [sp, #28]
 800dd08:	e774      	b.n	800dbf4 <_dtoa_r+0x9ac>
 800dd0a:	f000 f9c3 	bl	800e094 <__multadd>
 800dd0e:	4629      	mov	r1, r5
 800dd10:	4607      	mov	r7, r0
 800dd12:	2300      	movs	r3, #0
 800dd14:	220a      	movs	r2, #10
 800dd16:	4658      	mov	r0, fp
 800dd18:	f000 f9bc 	bl	800e094 <__multadd>
 800dd1c:	4605      	mov	r5, r0
 800dd1e:	e7f0      	b.n	800dd02 <_dtoa_r+0xaba>
 800dd20:	9b00      	ldr	r3, [sp, #0]
 800dd22:	2700      	movs	r7, #0
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	bfcc      	ite	gt
 800dd28:	461e      	movgt	r6, r3
 800dd2a:	2601      	movle	r6, #1
 800dd2c:	4456      	add	r6, sl
 800dd2e:	4649      	mov	r1, r9
 800dd30:	2201      	movs	r2, #1
 800dd32:	4658      	mov	r0, fp
 800dd34:	f000 fb5c 	bl	800e3f0 <__lshift>
 800dd38:	4621      	mov	r1, r4
 800dd3a:	4681      	mov	r9, r0
 800dd3c:	f000 fbc4 	bl	800e4c8 <__mcmp>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	dcb0      	bgt.n	800dca6 <_dtoa_r+0xa5e>
 800dd44:	d102      	bne.n	800dd4c <_dtoa_r+0xb04>
 800dd46:	f018 0f01 	tst.w	r8, #1
 800dd4a:	d1ac      	bne.n	800dca6 <_dtoa_r+0xa5e>
 800dd4c:	4633      	mov	r3, r6
 800dd4e:	461e      	mov	r6, r3
 800dd50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd54:	2a30      	cmp	r2, #48	@ 0x30
 800dd56:	d0fa      	beq.n	800dd4e <_dtoa_r+0xb06>
 800dd58:	e5c2      	b.n	800d8e0 <_dtoa_r+0x698>
 800dd5a:	459a      	cmp	sl, r3
 800dd5c:	d1a4      	bne.n	800dca8 <_dtoa_r+0xa60>
 800dd5e:	9b04      	ldr	r3, [sp, #16]
 800dd60:	3301      	adds	r3, #1
 800dd62:	9304      	str	r3, [sp, #16]
 800dd64:	2331      	movs	r3, #49	@ 0x31
 800dd66:	f88a 3000 	strb.w	r3, [sl]
 800dd6a:	e5b9      	b.n	800d8e0 <_dtoa_r+0x698>
 800dd6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dd6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ddcc <_dtoa_r+0xb84>
 800dd72:	b11b      	cbz	r3, 800dd7c <_dtoa_r+0xb34>
 800dd74:	f10a 0308 	add.w	r3, sl, #8
 800dd78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dd7a:	6013      	str	r3, [r2, #0]
 800dd7c:	4650      	mov	r0, sl
 800dd7e:	b019      	add	sp, #100	@ 0x64
 800dd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd86:	2b01      	cmp	r3, #1
 800dd88:	f77f ae37 	ble.w	800d9fa <_dtoa_r+0x7b2>
 800dd8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd90:	2001      	movs	r0, #1
 800dd92:	e655      	b.n	800da40 <_dtoa_r+0x7f8>
 800dd94:	9b00      	ldr	r3, [sp, #0]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	f77f aed6 	ble.w	800db48 <_dtoa_r+0x900>
 800dd9c:	4656      	mov	r6, sl
 800dd9e:	4621      	mov	r1, r4
 800dda0:	4648      	mov	r0, r9
 800dda2:	f7ff f9c3 	bl	800d12c <quorem>
 800dda6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ddaa:	9b00      	ldr	r3, [sp, #0]
 800ddac:	f806 8b01 	strb.w	r8, [r6], #1
 800ddb0:	eba6 020a 	sub.w	r2, r6, sl
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	ddb3      	ble.n	800dd20 <_dtoa_r+0xad8>
 800ddb8:	4649      	mov	r1, r9
 800ddba:	2300      	movs	r3, #0
 800ddbc:	220a      	movs	r2, #10
 800ddbe:	4658      	mov	r0, fp
 800ddc0:	f000 f968 	bl	800e094 <__multadd>
 800ddc4:	4681      	mov	r9, r0
 800ddc6:	e7ea      	b.n	800dd9e <_dtoa_r+0xb56>
 800ddc8:	0801066c 	.word	0x0801066c
 800ddcc:	080105f0 	.word	0x080105f0

0800ddd0 <_free_r>:
 800ddd0:	b538      	push	{r3, r4, r5, lr}
 800ddd2:	4605      	mov	r5, r0
 800ddd4:	2900      	cmp	r1, #0
 800ddd6:	d041      	beq.n	800de5c <_free_r+0x8c>
 800ddd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dddc:	1f0c      	subs	r4, r1, #4
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	bfb8      	it	lt
 800dde2:	18e4      	addlt	r4, r4, r3
 800dde4:	f000 f8e8 	bl	800dfb8 <__malloc_lock>
 800dde8:	4a1d      	ldr	r2, [pc, #116]	@ (800de60 <_free_r+0x90>)
 800ddea:	6813      	ldr	r3, [r2, #0]
 800ddec:	b933      	cbnz	r3, 800ddfc <_free_r+0x2c>
 800ddee:	6063      	str	r3, [r4, #4]
 800ddf0:	6014      	str	r4, [r2, #0]
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddf8:	f000 b8e4 	b.w	800dfc4 <__malloc_unlock>
 800ddfc:	42a3      	cmp	r3, r4
 800ddfe:	d908      	bls.n	800de12 <_free_r+0x42>
 800de00:	6820      	ldr	r0, [r4, #0]
 800de02:	1821      	adds	r1, r4, r0
 800de04:	428b      	cmp	r3, r1
 800de06:	bf01      	itttt	eq
 800de08:	6819      	ldreq	r1, [r3, #0]
 800de0a:	685b      	ldreq	r3, [r3, #4]
 800de0c:	1809      	addeq	r1, r1, r0
 800de0e:	6021      	streq	r1, [r4, #0]
 800de10:	e7ed      	b.n	800ddee <_free_r+0x1e>
 800de12:	461a      	mov	r2, r3
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	b10b      	cbz	r3, 800de1c <_free_r+0x4c>
 800de18:	42a3      	cmp	r3, r4
 800de1a:	d9fa      	bls.n	800de12 <_free_r+0x42>
 800de1c:	6811      	ldr	r1, [r2, #0]
 800de1e:	1850      	adds	r0, r2, r1
 800de20:	42a0      	cmp	r0, r4
 800de22:	d10b      	bne.n	800de3c <_free_r+0x6c>
 800de24:	6820      	ldr	r0, [r4, #0]
 800de26:	4401      	add	r1, r0
 800de28:	1850      	adds	r0, r2, r1
 800de2a:	6011      	str	r1, [r2, #0]
 800de2c:	4283      	cmp	r3, r0
 800de2e:	d1e0      	bne.n	800ddf2 <_free_r+0x22>
 800de30:	6818      	ldr	r0, [r3, #0]
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	4408      	add	r0, r1
 800de36:	6053      	str	r3, [r2, #4]
 800de38:	6010      	str	r0, [r2, #0]
 800de3a:	e7da      	b.n	800ddf2 <_free_r+0x22>
 800de3c:	d902      	bls.n	800de44 <_free_r+0x74>
 800de3e:	230c      	movs	r3, #12
 800de40:	602b      	str	r3, [r5, #0]
 800de42:	e7d6      	b.n	800ddf2 <_free_r+0x22>
 800de44:	6820      	ldr	r0, [r4, #0]
 800de46:	1821      	adds	r1, r4, r0
 800de48:	428b      	cmp	r3, r1
 800de4a:	bf02      	ittt	eq
 800de4c:	6819      	ldreq	r1, [r3, #0]
 800de4e:	685b      	ldreq	r3, [r3, #4]
 800de50:	1809      	addeq	r1, r1, r0
 800de52:	6063      	str	r3, [r4, #4]
 800de54:	bf08      	it	eq
 800de56:	6021      	streq	r1, [r4, #0]
 800de58:	6054      	str	r4, [r2, #4]
 800de5a:	e7ca      	b.n	800ddf2 <_free_r+0x22>
 800de5c:	bd38      	pop	{r3, r4, r5, pc}
 800de5e:	bf00      	nop
 800de60:	20003efc 	.word	0x20003efc

0800de64 <malloc>:
 800de64:	4b02      	ldr	r3, [pc, #8]	@ (800de70 <malloc+0xc>)
 800de66:	4601      	mov	r1, r0
 800de68:	6818      	ldr	r0, [r3, #0]
 800de6a:	f000 b825 	b.w	800deb8 <_malloc_r>
 800de6e:	bf00      	nop
 800de70:	2000001c 	.word	0x2000001c

0800de74 <sbrk_aligned>:
 800de74:	b570      	push	{r4, r5, r6, lr}
 800de76:	4e0f      	ldr	r6, [pc, #60]	@ (800deb4 <sbrk_aligned+0x40>)
 800de78:	460c      	mov	r4, r1
 800de7a:	4605      	mov	r5, r0
 800de7c:	6831      	ldr	r1, [r6, #0]
 800de7e:	b911      	cbnz	r1, 800de86 <sbrk_aligned+0x12>
 800de80:	f000 fe4c 	bl	800eb1c <_sbrk_r>
 800de84:	6030      	str	r0, [r6, #0]
 800de86:	4621      	mov	r1, r4
 800de88:	4628      	mov	r0, r5
 800de8a:	f000 fe47 	bl	800eb1c <_sbrk_r>
 800de8e:	1c43      	adds	r3, r0, #1
 800de90:	d103      	bne.n	800de9a <sbrk_aligned+0x26>
 800de92:	f04f 34ff 	mov.w	r4, #4294967295
 800de96:	4620      	mov	r0, r4
 800de98:	bd70      	pop	{r4, r5, r6, pc}
 800de9a:	1cc4      	adds	r4, r0, #3
 800de9c:	f024 0403 	bic.w	r4, r4, #3
 800dea0:	42a0      	cmp	r0, r4
 800dea2:	d0f8      	beq.n	800de96 <sbrk_aligned+0x22>
 800dea4:	1a21      	subs	r1, r4, r0
 800dea6:	4628      	mov	r0, r5
 800dea8:	f000 fe38 	bl	800eb1c <_sbrk_r>
 800deac:	3001      	adds	r0, #1
 800deae:	d1f2      	bne.n	800de96 <sbrk_aligned+0x22>
 800deb0:	e7ef      	b.n	800de92 <sbrk_aligned+0x1e>
 800deb2:	bf00      	nop
 800deb4:	20003ef8 	.word	0x20003ef8

0800deb8 <_malloc_r>:
 800deb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800debc:	1ccd      	adds	r5, r1, #3
 800debe:	4606      	mov	r6, r0
 800dec0:	f025 0503 	bic.w	r5, r5, #3
 800dec4:	3508      	adds	r5, #8
 800dec6:	2d0c      	cmp	r5, #12
 800dec8:	bf38      	it	cc
 800deca:	250c      	movcc	r5, #12
 800decc:	2d00      	cmp	r5, #0
 800dece:	db01      	blt.n	800ded4 <_malloc_r+0x1c>
 800ded0:	42a9      	cmp	r1, r5
 800ded2:	d904      	bls.n	800dede <_malloc_r+0x26>
 800ded4:	230c      	movs	r3, #12
 800ded6:	6033      	str	r3, [r6, #0]
 800ded8:	2000      	movs	r0, #0
 800deda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dede:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dfb4 <_malloc_r+0xfc>
 800dee2:	f000 f869 	bl	800dfb8 <__malloc_lock>
 800dee6:	f8d8 3000 	ldr.w	r3, [r8]
 800deea:	461c      	mov	r4, r3
 800deec:	bb44      	cbnz	r4, 800df40 <_malloc_r+0x88>
 800deee:	4629      	mov	r1, r5
 800def0:	4630      	mov	r0, r6
 800def2:	f7ff ffbf 	bl	800de74 <sbrk_aligned>
 800def6:	1c43      	adds	r3, r0, #1
 800def8:	4604      	mov	r4, r0
 800defa:	d158      	bne.n	800dfae <_malloc_r+0xf6>
 800defc:	f8d8 4000 	ldr.w	r4, [r8]
 800df00:	4627      	mov	r7, r4
 800df02:	2f00      	cmp	r7, #0
 800df04:	d143      	bne.n	800df8e <_malloc_r+0xd6>
 800df06:	2c00      	cmp	r4, #0
 800df08:	d04b      	beq.n	800dfa2 <_malloc_r+0xea>
 800df0a:	6823      	ldr	r3, [r4, #0]
 800df0c:	4639      	mov	r1, r7
 800df0e:	4630      	mov	r0, r6
 800df10:	eb04 0903 	add.w	r9, r4, r3
 800df14:	f000 fe02 	bl	800eb1c <_sbrk_r>
 800df18:	4581      	cmp	r9, r0
 800df1a:	d142      	bne.n	800dfa2 <_malloc_r+0xea>
 800df1c:	6821      	ldr	r1, [r4, #0]
 800df1e:	4630      	mov	r0, r6
 800df20:	1a6d      	subs	r5, r5, r1
 800df22:	4629      	mov	r1, r5
 800df24:	f7ff ffa6 	bl	800de74 <sbrk_aligned>
 800df28:	3001      	adds	r0, #1
 800df2a:	d03a      	beq.n	800dfa2 <_malloc_r+0xea>
 800df2c:	6823      	ldr	r3, [r4, #0]
 800df2e:	442b      	add	r3, r5
 800df30:	6023      	str	r3, [r4, #0]
 800df32:	f8d8 3000 	ldr.w	r3, [r8]
 800df36:	685a      	ldr	r2, [r3, #4]
 800df38:	bb62      	cbnz	r2, 800df94 <_malloc_r+0xdc>
 800df3a:	f8c8 7000 	str.w	r7, [r8]
 800df3e:	e00f      	b.n	800df60 <_malloc_r+0xa8>
 800df40:	6822      	ldr	r2, [r4, #0]
 800df42:	1b52      	subs	r2, r2, r5
 800df44:	d420      	bmi.n	800df88 <_malloc_r+0xd0>
 800df46:	2a0b      	cmp	r2, #11
 800df48:	d917      	bls.n	800df7a <_malloc_r+0xc2>
 800df4a:	1961      	adds	r1, r4, r5
 800df4c:	42a3      	cmp	r3, r4
 800df4e:	6025      	str	r5, [r4, #0]
 800df50:	bf18      	it	ne
 800df52:	6059      	strne	r1, [r3, #4]
 800df54:	6863      	ldr	r3, [r4, #4]
 800df56:	bf08      	it	eq
 800df58:	f8c8 1000 	streq.w	r1, [r8]
 800df5c:	5162      	str	r2, [r4, r5]
 800df5e:	604b      	str	r3, [r1, #4]
 800df60:	4630      	mov	r0, r6
 800df62:	f000 f82f 	bl	800dfc4 <__malloc_unlock>
 800df66:	f104 000b 	add.w	r0, r4, #11
 800df6a:	1d23      	adds	r3, r4, #4
 800df6c:	f020 0007 	bic.w	r0, r0, #7
 800df70:	1ac2      	subs	r2, r0, r3
 800df72:	bf1c      	itt	ne
 800df74:	1a1b      	subne	r3, r3, r0
 800df76:	50a3      	strne	r3, [r4, r2]
 800df78:	e7af      	b.n	800deda <_malloc_r+0x22>
 800df7a:	6862      	ldr	r2, [r4, #4]
 800df7c:	42a3      	cmp	r3, r4
 800df7e:	bf0c      	ite	eq
 800df80:	f8c8 2000 	streq.w	r2, [r8]
 800df84:	605a      	strne	r2, [r3, #4]
 800df86:	e7eb      	b.n	800df60 <_malloc_r+0xa8>
 800df88:	4623      	mov	r3, r4
 800df8a:	6864      	ldr	r4, [r4, #4]
 800df8c:	e7ae      	b.n	800deec <_malloc_r+0x34>
 800df8e:	463c      	mov	r4, r7
 800df90:	687f      	ldr	r7, [r7, #4]
 800df92:	e7b6      	b.n	800df02 <_malloc_r+0x4a>
 800df94:	461a      	mov	r2, r3
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	42a3      	cmp	r3, r4
 800df9a:	d1fb      	bne.n	800df94 <_malloc_r+0xdc>
 800df9c:	2300      	movs	r3, #0
 800df9e:	6053      	str	r3, [r2, #4]
 800dfa0:	e7de      	b.n	800df60 <_malloc_r+0xa8>
 800dfa2:	230c      	movs	r3, #12
 800dfa4:	4630      	mov	r0, r6
 800dfa6:	6033      	str	r3, [r6, #0]
 800dfa8:	f000 f80c 	bl	800dfc4 <__malloc_unlock>
 800dfac:	e794      	b.n	800ded8 <_malloc_r+0x20>
 800dfae:	6005      	str	r5, [r0, #0]
 800dfb0:	e7d6      	b.n	800df60 <_malloc_r+0xa8>
 800dfb2:	bf00      	nop
 800dfb4:	20003efc 	.word	0x20003efc

0800dfb8 <__malloc_lock>:
 800dfb8:	4801      	ldr	r0, [pc, #4]	@ (800dfc0 <__malloc_lock+0x8>)
 800dfba:	f7ff b89a 	b.w	800d0f2 <__retarget_lock_acquire_recursive>
 800dfbe:	bf00      	nop
 800dfc0:	20003ef4 	.word	0x20003ef4

0800dfc4 <__malloc_unlock>:
 800dfc4:	4801      	ldr	r0, [pc, #4]	@ (800dfcc <__malloc_unlock+0x8>)
 800dfc6:	f7ff b895 	b.w	800d0f4 <__retarget_lock_release_recursive>
 800dfca:	bf00      	nop
 800dfcc:	20003ef4 	.word	0x20003ef4

0800dfd0 <_Balloc>:
 800dfd0:	b570      	push	{r4, r5, r6, lr}
 800dfd2:	69c6      	ldr	r6, [r0, #28]
 800dfd4:	4604      	mov	r4, r0
 800dfd6:	460d      	mov	r5, r1
 800dfd8:	b976      	cbnz	r6, 800dff8 <_Balloc+0x28>
 800dfda:	2010      	movs	r0, #16
 800dfdc:	f7ff ff42 	bl	800de64 <malloc>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	61e0      	str	r0, [r4, #28]
 800dfe4:	b920      	cbnz	r0, 800dff0 <_Balloc+0x20>
 800dfe6:	4b18      	ldr	r3, [pc, #96]	@ (800e048 <_Balloc+0x78>)
 800dfe8:	216b      	movs	r1, #107	@ 0x6b
 800dfea:	4818      	ldr	r0, [pc, #96]	@ (800e04c <_Balloc+0x7c>)
 800dfec:	f000 fda6 	bl	800eb3c <__assert_func>
 800dff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dff4:	6006      	str	r6, [r0, #0]
 800dff6:	60c6      	str	r6, [r0, #12]
 800dff8:	69e6      	ldr	r6, [r4, #28]
 800dffa:	68f3      	ldr	r3, [r6, #12]
 800dffc:	b183      	cbz	r3, 800e020 <_Balloc+0x50>
 800dffe:	69e3      	ldr	r3, [r4, #28]
 800e000:	68db      	ldr	r3, [r3, #12]
 800e002:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e006:	b9b8      	cbnz	r0, 800e038 <_Balloc+0x68>
 800e008:	2101      	movs	r1, #1
 800e00a:	4620      	mov	r0, r4
 800e00c:	fa01 f605 	lsl.w	r6, r1, r5
 800e010:	1d72      	adds	r2, r6, #5
 800e012:	0092      	lsls	r2, r2, #2
 800e014:	f000 fdb0 	bl	800eb78 <_calloc_r>
 800e018:	b160      	cbz	r0, 800e034 <_Balloc+0x64>
 800e01a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e01e:	e00e      	b.n	800e03e <_Balloc+0x6e>
 800e020:	2221      	movs	r2, #33	@ 0x21
 800e022:	2104      	movs	r1, #4
 800e024:	4620      	mov	r0, r4
 800e026:	f000 fda7 	bl	800eb78 <_calloc_r>
 800e02a:	69e3      	ldr	r3, [r4, #28]
 800e02c:	60f0      	str	r0, [r6, #12]
 800e02e:	68db      	ldr	r3, [r3, #12]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d1e4      	bne.n	800dffe <_Balloc+0x2e>
 800e034:	2000      	movs	r0, #0
 800e036:	bd70      	pop	{r4, r5, r6, pc}
 800e038:	6802      	ldr	r2, [r0, #0]
 800e03a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e03e:	2300      	movs	r3, #0
 800e040:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e044:	e7f7      	b.n	800e036 <_Balloc+0x66>
 800e046:	bf00      	nop
 800e048:	080105fd 	.word	0x080105fd
 800e04c:	0801067d 	.word	0x0801067d

0800e050 <_Bfree>:
 800e050:	b570      	push	{r4, r5, r6, lr}
 800e052:	69c6      	ldr	r6, [r0, #28]
 800e054:	4605      	mov	r5, r0
 800e056:	460c      	mov	r4, r1
 800e058:	b976      	cbnz	r6, 800e078 <_Bfree+0x28>
 800e05a:	2010      	movs	r0, #16
 800e05c:	f7ff ff02 	bl	800de64 <malloc>
 800e060:	4602      	mov	r2, r0
 800e062:	61e8      	str	r0, [r5, #28]
 800e064:	b920      	cbnz	r0, 800e070 <_Bfree+0x20>
 800e066:	4b09      	ldr	r3, [pc, #36]	@ (800e08c <_Bfree+0x3c>)
 800e068:	218f      	movs	r1, #143	@ 0x8f
 800e06a:	4809      	ldr	r0, [pc, #36]	@ (800e090 <_Bfree+0x40>)
 800e06c:	f000 fd66 	bl	800eb3c <__assert_func>
 800e070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e074:	6006      	str	r6, [r0, #0]
 800e076:	60c6      	str	r6, [r0, #12]
 800e078:	b13c      	cbz	r4, 800e08a <_Bfree+0x3a>
 800e07a:	69eb      	ldr	r3, [r5, #28]
 800e07c:	6862      	ldr	r2, [r4, #4]
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e084:	6021      	str	r1, [r4, #0]
 800e086:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e08a:	bd70      	pop	{r4, r5, r6, pc}
 800e08c:	080105fd 	.word	0x080105fd
 800e090:	0801067d 	.word	0x0801067d

0800e094 <__multadd>:
 800e094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e098:	f101 0c14 	add.w	ip, r1, #20
 800e09c:	4607      	mov	r7, r0
 800e09e:	460c      	mov	r4, r1
 800e0a0:	461e      	mov	r6, r3
 800e0a2:	690d      	ldr	r5, [r1, #16]
 800e0a4:	2000      	movs	r0, #0
 800e0a6:	f8dc 3000 	ldr.w	r3, [ip]
 800e0aa:	3001      	adds	r0, #1
 800e0ac:	b299      	uxth	r1, r3
 800e0ae:	4285      	cmp	r5, r0
 800e0b0:	fb02 6101 	mla	r1, r2, r1, r6
 800e0b4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e0b8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800e0bc:	b289      	uxth	r1, r1
 800e0be:	fb02 3306 	mla	r3, r2, r6, r3
 800e0c2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e0c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e0ca:	f84c 1b04 	str.w	r1, [ip], #4
 800e0ce:	dcea      	bgt.n	800e0a6 <__multadd+0x12>
 800e0d0:	b30e      	cbz	r6, 800e116 <__multadd+0x82>
 800e0d2:	68a3      	ldr	r3, [r4, #8]
 800e0d4:	42ab      	cmp	r3, r5
 800e0d6:	dc19      	bgt.n	800e10c <__multadd+0x78>
 800e0d8:	6861      	ldr	r1, [r4, #4]
 800e0da:	4638      	mov	r0, r7
 800e0dc:	3101      	adds	r1, #1
 800e0de:	f7ff ff77 	bl	800dfd0 <_Balloc>
 800e0e2:	4680      	mov	r8, r0
 800e0e4:	b928      	cbnz	r0, 800e0f2 <__multadd+0x5e>
 800e0e6:	4602      	mov	r2, r0
 800e0e8:	4b0c      	ldr	r3, [pc, #48]	@ (800e11c <__multadd+0x88>)
 800e0ea:	21ba      	movs	r1, #186	@ 0xba
 800e0ec:	480c      	ldr	r0, [pc, #48]	@ (800e120 <__multadd+0x8c>)
 800e0ee:	f000 fd25 	bl	800eb3c <__assert_func>
 800e0f2:	6922      	ldr	r2, [r4, #16]
 800e0f4:	f104 010c 	add.w	r1, r4, #12
 800e0f8:	300c      	adds	r0, #12
 800e0fa:	3202      	adds	r2, #2
 800e0fc:	0092      	lsls	r2, r2, #2
 800e0fe:	f7ff f808 	bl	800d112 <memcpy>
 800e102:	4621      	mov	r1, r4
 800e104:	4644      	mov	r4, r8
 800e106:	4638      	mov	r0, r7
 800e108:	f7ff ffa2 	bl	800e050 <_Bfree>
 800e10c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e110:	3501      	adds	r5, #1
 800e112:	615e      	str	r6, [r3, #20]
 800e114:	6125      	str	r5, [r4, #16]
 800e116:	4620      	mov	r0, r4
 800e118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e11c:	0801066c 	.word	0x0801066c
 800e120:	0801067d 	.word	0x0801067d

0800e124 <__hi0bits>:
 800e124:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e128:	4603      	mov	r3, r0
 800e12a:	bf36      	itet	cc
 800e12c:	0403      	lslcc	r3, r0, #16
 800e12e:	2000      	movcs	r0, #0
 800e130:	2010      	movcc	r0, #16
 800e132:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e136:	bf3c      	itt	cc
 800e138:	021b      	lslcc	r3, r3, #8
 800e13a:	3008      	addcc	r0, #8
 800e13c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e140:	bf3c      	itt	cc
 800e142:	011b      	lslcc	r3, r3, #4
 800e144:	3004      	addcc	r0, #4
 800e146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e14a:	bf3c      	itt	cc
 800e14c:	009b      	lslcc	r3, r3, #2
 800e14e:	3002      	addcc	r0, #2
 800e150:	2b00      	cmp	r3, #0
 800e152:	db05      	blt.n	800e160 <__hi0bits+0x3c>
 800e154:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e158:	f100 0001 	add.w	r0, r0, #1
 800e15c:	bf08      	it	eq
 800e15e:	2020      	moveq	r0, #32
 800e160:	4770      	bx	lr

0800e162 <__lo0bits>:
 800e162:	6803      	ldr	r3, [r0, #0]
 800e164:	4602      	mov	r2, r0
 800e166:	f013 0007 	ands.w	r0, r3, #7
 800e16a:	d00b      	beq.n	800e184 <__lo0bits+0x22>
 800e16c:	07d9      	lsls	r1, r3, #31
 800e16e:	d421      	bmi.n	800e1b4 <__lo0bits+0x52>
 800e170:	0798      	lsls	r0, r3, #30
 800e172:	bf47      	ittee	mi
 800e174:	085b      	lsrmi	r3, r3, #1
 800e176:	2001      	movmi	r0, #1
 800e178:	089b      	lsrpl	r3, r3, #2
 800e17a:	2002      	movpl	r0, #2
 800e17c:	bf4c      	ite	mi
 800e17e:	6013      	strmi	r3, [r2, #0]
 800e180:	6013      	strpl	r3, [r2, #0]
 800e182:	4770      	bx	lr
 800e184:	b299      	uxth	r1, r3
 800e186:	b909      	cbnz	r1, 800e18c <__lo0bits+0x2a>
 800e188:	0c1b      	lsrs	r3, r3, #16
 800e18a:	2010      	movs	r0, #16
 800e18c:	b2d9      	uxtb	r1, r3
 800e18e:	b909      	cbnz	r1, 800e194 <__lo0bits+0x32>
 800e190:	3008      	adds	r0, #8
 800e192:	0a1b      	lsrs	r3, r3, #8
 800e194:	0719      	lsls	r1, r3, #28
 800e196:	bf04      	itt	eq
 800e198:	091b      	lsreq	r3, r3, #4
 800e19a:	3004      	addeq	r0, #4
 800e19c:	0799      	lsls	r1, r3, #30
 800e19e:	bf04      	itt	eq
 800e1a0:	089b      	lsreq	r3, r3, #2
 800e1a2:	3002      	addeq	r0, #2
 800e1a4:	07d9      	lsls	r1, r3, #31
 800e1a6:	d403      	bmi.n	800e1b0 <__lo0bits+0x4e>
 800e1a8:	085b      	lsrs	r3, r3, #1
 800e1aa:	f100 0001 	add.w	r0, r0, #1
 800e1ae:	d003      	beq.n	800e1b8 <__lo0bits+0x56>
 800e1b0:	6013      	str	r3, [r2, #0]
 800e1b2:	4770      	bx	lr
 800e1b4:	2000      	movs	r0, #0
 800e1b6:	4770      	bx	lr
 800e1b8:	2020      	movs	r0, #32
 800e1ba:	4770      	bx	lr

0800e1bc <__i2b>:
 800e1bc:	b510      	push	{r4, lr}
 800e1be:	460c      	mov	r4, r1
 800e1c0:	2101      	movs	r1, #1
 800e1c2:	f7ff ff05 	bl	800dfd0 <_Balloc>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	b928      	cbnz	r0, 800e1d6 <__i2b+0x1a>
 800e1ca:	4b05      	ldr	r3, [pc, #20]	@ (800e1e0 <__i2b+0x24>)
 800e1cc:	f240 1145 	movw	r1, #325	@ 0x145
 800e1d0:	4804      	ldr	r0, [pc, #16]	@ (800e1e4 <__i2b+0x28>)
 800e1d2:	f000 fcb3 	bl	800eb3c <__assert_func>
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	6144      	str	r4, [r0, #20]
 800e1da:	6103      	str	r3, [r0, #16]
 800e1dc:	bd10      	pop	{r4, pc}
 800e1de:	bf00      	nop
 800e1e0:	0801066c 	.word	0x0801066c
 800e1e4:	0801067d 	.word	0x0801067d

0800e1e8 <__multiply>:
 800e1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ec:	4614      	mov	r4, r2
 800e1ee:	690a      	ldr	r2, [r1, #16]
 800e1f0:	460f      	mov	r7, r1
 800e1f2:	b085      	sub	sp, #20
 800e1f4:	6923      	ldr	r3, [r4, #16]
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	bfa2      	ittt	ge
 800e1fa:	4623      	movge	r3, r4
 800e1fc:	460c      	movge	r4, r1
 800e1fe:	461f      	movge	r7, r3
 800e200:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e204:	68a3      	ldr	r3, [r4, #8]
 800e206:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e20a:	6861      	ldr	r1, [r4, #4]
 800e20c:	eb0a 0609 	add.w	r6, sl, r9
 800e210:	42b3      	cmp	r3, r6
 800e212:	bfb8      	it	lt
 800e214:	3101      	addlt	r1, #1
 800e216:	f7ff fedb 	bl	800dfd0 <_Balloc>
 800e21a:	b930      	cbnz	r0, 800e22a <__multiply+0x42>
 800e21c:	4602      	mov	r2, r0
 800e21e:	4b45      	ldr	r3, [pc, #276]	@ (800e334 <__multiply+0x14c>)
 800e220:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e224:	4844      	ldr	r0, [pc, #272]	@ (800e338 <__multiply+0x150>)
 800e226:	f000 fc89 	bl	800eb3c <__assert_func>
 800e22a:	f100 0514 	add.w	r5, r0, #20
 800e22e:	2200      	movs	r2, #0
 800e230:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e234:	462b      	mov	r3, r5
 800e236:	4543      	cmp	r3, r8
 800e238:	d321      	bcc.n	800e27e <__multiply+0x96>
 800e23a:	f107 0114 	add.w	r1, r7, #20
 800e23e:	f104 0214 	add.w	r2, r4, #20
 800e242:	f104 0715 	add.w	r7, r4, #21
 800e246:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e24a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e24e:	9302      	str	r3, [sp, #8]
 800e250:	1b13      	subs	r3, r2, r4
 800e252:	3b15      	subs	r3, #21
 800e254:	f023 0303 	bic.w	r3, r3, #3
 800e258:	3304      	adds	r3, #4
 800e25a:	42ba      	cmp	r2, r7
 800e25c:	bf38      	it	cc
 800e25e:	2304      	movcc	r3, #4
 800e260:	9301      	str	r3, [sp, #4]
 800e262:	9b02      	ldr	r3, [sp, #8]
 800e264:	9103      	str	r1, [sp, #12]
 800e266:	428b      	cmp	r3, r1
 800e268:	d80c      	bhi.n	800e284 <__multiply+0x9c>
 800e26a:	2e00      	cmp	r6, #0
 800e26c:	dd03      	ble.n	800e276 <__multiply+0x8e>
 800e26e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e272:	2b00      	cmp	r3, #0
 800e274:	d05b      	beq.n	800e32e <__multiply+0x146>
 800e276:	6106      	str	r6, [r0, #16]
 800e278:	b005      	add	sp, #20
 800e27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e27e:	f843 2b04 	str.w	r2, [r3], #4
 800e282:	e7d8      	b.n	800e236 <__multiply+0x4e>
 800e284:	f8b1 a000 	ldrh.w	sl, [r1]
 800e288:	f1ba 0f00 	cmp.w	sl, #0
 800e28c:	d024      	beq.n	800e2d8 <__multiply+0xf0>
 800e28e:	f104 0e14 	add.w	lr, r4, #20
 800e292:	46a9      	mov	r9, r5
 800e294:	f04f 0c00 	mov.w	ip, #0
 800e298:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e29c:	f8d9 3000 	ldr.w	r3, [r9]
 800e2a0:	fa1f fb87 	uxth.w	fp, r7
 800e2a4:	4572      	cmp	r2, lr
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	fb0a 330b 	mla	r3, sl, fp, r3
 800e2ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e2b0:	f8d9 7000 	ldr.w	r7, [r9]
 800e2b4:	4463      	add	r3, ip
 800e2b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e2ba:	fb0a c70b 	mla	r7, sl, fp, ip
 800e2be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e2c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e2cc:	f849 3b04 	str.w	r3, [r9], #4
 800e2d0:	d8e2      	bhi.n	800e298 <__multiply+0xb0>
 800e2d2:	9b01      	ldr	r3, [sp, #4]
 800e2d4:	f845 c003 	str.w	ip, [r5, r3]
 800e2d8:	9b03      	ldr	r3, [sp, #12]
 800e2da:	3104      	adds	r1, #4
 800e2dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e2e0:	f1b9 0f00 	cmp.w	r9, #0
 800e2e4:	d021      	beq.n	800e32a <__multiply+0x142>
 800e2e6:	682b      	ldr	r3, [r5, #0]
 800e2e8:	f104 0c14 	add.w	ip, r4, #20
 800e2ec:	46ae      	mov	lr, r5
 800e2ee:	f04f 0a00 	mov.w	sl, #0
 800e2f2:	f8bc b000 	ldrh.w	fp, [ip]
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e2fc:	fb09 770b 	mla	r7, r9, fp, r7
 800e300:	4457      	add	r7, sl
 800e302:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e306:	f84e 3b04 	str.w	r3, [lr], #4
 800e30a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e30e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e312:	f8be 3000 	ldrh.w	r3, [lr]
 800e316:	4562      	cmp	r2, ip
 800e318:	fb09 330a 	mla	r3, r9, sl, r3
 800e31c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e320:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e324:	d8e5      	bhi.n	800e2f2 <__multiply+0x10a>
 800e326:	9f01      	ldr	r7, [sp, #4]
 800e328:	51eb      	str	r3, [r5, r7]
 800e32a:	3504      	adds	r5, #4
 800e32c:	e799      	b.n	800e262 <__multiply+0x7a>
 800e32e:	3e01      	subs	r6, #1
 800e330:	e79b      	b.n	800e26a <__multiply+0x82>
 800e332:	bf00      	nop
 800e334:	0801066c 	.word	0x0801066c
 800e338:	0801067d 	.word	0x0801067d

0800e33c <__pow5mult>:
 800e33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e340:	4615      	mov	r5, r2
 800e342:	f012 0203 	ands.w	r2, r2, #3
 800e346:	4607      	mov	r7, r0
 800e348:	460e      	mov	r6, r1
 800e34a:	d007      	beq.n	800e35c <__pow5mult+0x20>
 800e34c:	3a01      	subs	r2, #1
 800e34e:	4c25      	ldr	r4, [pc, #148]	@ (800e3e4 <__pow5mult+0xa8>)
 800e350:	2300      	movs	r3, #0
 800e352:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e356:	f7ff fe9d 	bl	800e094 <__multadd>
 800e35a:	4606      	mov	r6, r0
 800e35c:	10ad      	asrs	r5, r5, #2
 800e35e:	d03d      	beq.n	800e3dc <__pow5mult+0xa0>
 800e360:	69fc      	ldr	r4, [r7, #28]
 800e362:	b97c      	cbnz	r4, 800e384 <__pow5mult+0x48>
 800e364:	2010      	movs	r0, #16
 800e366:	f7ff fd7d 	bl	800de64 <malloc>
 800e36a:	4602      	mov	r2, r0
 800e36c:	61f8      	str	r0, [r7, #28]
 800e36e:	b928      	cbnz	r0, 800e37c <__pow5mult+0x40>
 800e370:	4b1d      	ldr	r3, [pc, #116]	@ (800e3e8 <__pow5mult+0xac>)
 800e372:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e376:	481d      	ldr	r0, [pc, #116]	@ (800e3ec <__pow5mult+0xb0>)
 800e378:	f000 fbe0 	bl	800eb3c <__assert_func>
 800e37c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e380:	6004      	str	r4, [r0, #0]
 800e382:	60c4      	str	r4, [r0, #12]
 800e384:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e388:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e38c:	b94c      	cbnz	r4, 800e3a2 <__pow5mult+0x66>
 800e38e:	f240 2171 	movw	r1, #625	@ 0x271
 800e392:	4638      	mov	r0, r7
 800e394:	f7ff ff12 	bl	800e1bc <__i2b>
 800e398:	2300      	movs	r3, #0
 800e39a:	4604      	mov	r4, r0
 800e39c:	f8c8 0008 	str.w	r0, [r8, #8]
 800e3a0:	6003      	str	r3, [r0, #0]
 800e3a2:	f04f 0900 	mov.w	r9, #0
 800e3a6:	07eb      	lsls	r3, r5, #31
 800e3a8:	d50a      	bpl.n	800e3c0 <__pow5mult+0x84>
 800e3aa:	4631      	mov	r1, r6
 800e3ac:	4622      	mov	r2, r4
 800e3ae:	4638      	mov	r0, r7
 800e3b0:	f7ff ff1a 	bl	800e1e8 <__multiply>
 800e3b4:	4680      	mov	r8, r0
 800e3b6:	4631      	mov	r1, r6
 800e3b8:	4638      	mov	r0, r7
 800e3ba:	4646      	mov	r6, r8
 800e3bc:	f7ff fe48 	bl	800e050 <_Bfree>
 800e3c0:	106d      	asrs	r5, r5, #1
 800e3c2:	d00b      	beq.n	800e3dc <__pow5mult+0xa0>
 800e3c4:	6820      	ldr	r0, [r4, #0]
 800e3c6:	b938      	cbnz	r0, 800e3d8 <__pow5mult+0x9c>
 800e3c8:	4622      	mov	r2, r4
 800e3ca:	4621      	mov	r1, r4
 800e3cc:	4638      	mov	r0, r7
 800e3ce:	f7ff ff0b 	bl	800e1e8 <__multiply>
 800e3d2:	6020      	str	r0, [r4, #0]
 800e3d4:	f8c0 9000 	str.w	r9, [r0]
 800e3d8:	4604      	mov	r4, r0
 800e3da:	e7e4      	b.n	800e3a6 <__pow5mult+0x6a>
 800e3dc:	4630      	mov	r0, r6
 800e3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3e2:	bf00      	nop
 800e3e4:	080106d8 	.word	0x080106d8
 800e3e8:	080105fd 	.word	0x080105fd
 800e3ec:	0801067d 	.word	0x0801067d

0800e3f0 <__lshift>:
 800e3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3f4:	460c      	mov	r4, r1
 800e3f6:	4607      	mov	r7, r0
 800e3f8:	4691      	mov	r9, r2
 800e3fa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e3fe:	6923      	ldr	r3, [r4, #16]
 800e400:	6849      	ldr	r1, [r1, #4]
 800e402:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e406:	68a3      	ldr	r3, [r4, #8]
 800e408:	f108 0601 	add.w	r6, r8, #1
 800e40c:	42b3      	cmp	r3, r6
 800e40e:	db0b      	blt.n	800e428 <__lshift+0x38>
 800e410:	4638      	mov	r0, r7
 800e412:	f7ff fddd 	bl	800dfd0 <_Balloc>
 800e416:	4605      	mov	r5, r0
 800e418:	b948      	cbnz	r0, 800e42e <__lshift+0x3e>
 800e41a:	4602      	mov	r2, r0
 800e41c:	4b28      	ldr	r3, [pc, #160]	@ (800e4c0 <__lshift+0xd0>)
 800e41e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e422:	4828      	ldr	r0, [pc, #160]	@ (800e4c4 <__lshift+0xd4>)
 800e424:	f000 fb8a 	bl	800eb3c <__assert_func>
 800e428:	3101      	adds	r1, #1
 800e42a:	005b      	lsls	r3, r3, #1
 800e42c:	e7ee      	b.n	800e40c <__lshift+0x1c>
 800e42e:	2300      	movs	r3, #0
 800e430:	f100 0114 	add.w	r1, r0, #20
 800e434:	f100 0210 	add.w	r2, r0, #16
 800e438:	4618      	mov	r0, r3
 800e43a:	4553      	cmp	r3, sl
 800e43c:	db33      	blt.n	800e4a6 <__lshift+0xb6>
 800e43e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e442:	f104 0314 	add.w	r3, r4, #20
 800e446:	6920      	ldr	r0, [r4, #16]
 800e448:	f019 091f 	ands.w	r9, r9, #31
 800e44c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e450:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e454:	d02b      	beq.n	800e4ae <__lshift+0xbe>
 800e456:	f1c9 0e20 	rsb	lr, r9, #32
 800e45a:	468a      	mov	sl, r1
 800e45c:	2200      	movs	r2, #0
 800e45e:	6818      	ldr	r0, [r3, #0]
 800e460:	fa00 f009 	lsl.w	r0, r0, r9
 800e464:	4310      	orrs	r0, r2
 800e466:	f84a 0b04 	str.w	r0, [sl], #4
 800e46a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e46e:	459c      	cmp	ip, r3
 800e470:	fa22 f20e 	lsr.w	r2, r2, lr
 800e474:	d8f3      	bhi.n	800e45e <__lshift+0x6e>
 800e476:	ebac 0304 	sub.w	r3, ip, r4
 800e47a:	f104 0015 	add.w	r0, r4, #21
 800e47e:	3b15      	subs	r3, #21
 800e480:	f023 0303 	bic.w	r3, r3, #3
 800e484:	3304      	adds	r3, #4
 800e486:	4584      	cmp	ip, r0
 800e488:	bf38      	it	cc
 800e48a:	2304      	movcc	r3, #4
 800e48c:	50ca      	str	r2, [r1, r3]
 800e48e:	b10a      	cbz	r2, 800e494 <__lshift+0xa4>
 800e490:	f108 0602 	add.w	r6, r8, #2
 800e494:	3e01      	subs	r6, #1
 800e496:	4638      	mov	r0, r7
 800e498:	4621      	mov	r1, r4
 800e49a:	612e      	str	r6, [r5, #16]
 800e49c:	f7ff fdd8 	bl	800e050 <_Bfree>
 800e4a0:	4628      	mov	r0, r5
 800e4a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	f842 0f04 	str.w	r0, [r2, #4]!
 800e4ac:	e7c5      	b.n	800e43a <__lshift+0x4a>
 800e4ae:	3904      	subs	r1, #4
 800e4b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4b4:	459c      	cmp	ip, r3
 800e4b6:	f841 2f04 	str.w	r2, [r1, #4]!
 800e4ba:	d8f9      	bhi.n	800e4b0 <__lshift+0xc0>
 800e4bc:	e7ea      	b.n	800e494 <__lshift+0xa4>
 800e4be:	bf00      	nop
 800e4c0:	0801066c 	.word	0x0801066c
 800e4c4:	0801067d 	.word	0x0801067d

0800e4c8 <__mcmp>:
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	690a      	ldr	r2, [r1, #16]
 800e4cc:	6900      	ldr	r0, [r0, #16]
 800e4ce:	1a80      	subs	r0, r0, r2
 800e4d0:	b530      	push	{r4, r5, lr}
 800e4d2:	d10e      	bne.n	800e4f2 <__mcmp+0x2a>
 800e4d4:	3314      	adds	r3, #20
 800e4d6:	3114      	adds	r1, #20
 800e4d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e4dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e4e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e4e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e4e8:	4295      	cmp	r5, r2
 800e4ea:	d003      	beq.n	800e4f4 <__mcmp+0x2c>
 800e4ec:	d205      	bcs.n	800e4fa <__mcmp+0x32>
 800e4ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e4f2:	bd30      	pop	{r4, r5, pc}
 800e4f4:	42a3      	cmp	r3, r4
 800e4f6:	d3f3      	bcc.n	800e4e0 <__mcmp+0x18>
 800e4f8:	e7fb      	b.n	800e4f2 <__mcmp+0x2a>
 800e4fa:	2001      	movs	r0, #1
 800e4fc:	e7f9      	b.n	800e4f2 <__mcmp+0x2a>
	...

0800e500 <__mdiff>:
 800e500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e504:	4689      	mov	r9, r1
 800e506:	4606      	mov	r6, r0
 800e508:	4611      	mov	r1, r2
 800e50a:	4614      	mov	r4, r2
 800e50c:	4648      	mov	r0, r9
 800e50e:	f7ff ffdb 	bl	800e4c8 <__mcmp>
 800e512:	1e05      	subs	r5, r0, #0
 800e514:	d112      	bne.n	800e53c <__mdiff+0x3c>
 800e516:	4629      	mov	r1, r5
 800e518:	4630      	mov	r0, r6
 800e51a:	f7ff fd59 	bl	800dfd0 <_Balloc>
 800e51e:	4602      	mov	r2, r0
 800e520:	b928      	cbnz	r0, 800e52e <__mdiff+0x2e>
 800e522:	4b41      	ldr	r3, [pc, #260]	@ (800e628 <__mdiff+0x128>)
 800e524:	f240 2137 	movw	r1, #567	@ 0x237
 800e528:	4840      	ldr	r0, [pc, #256]	@ (800e62c <__mdiff+0x12c>)
 800e52a:	f000 fb07 	bl	800eb3c <__assert_func>
 800e52e:	2301      	movs	r3, #1
 800e530:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e534:	4610      	mov	r0, r2
 800e536:	b003      	add	sp, #12
 800e538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e53c:	bfbc      	itt	lt
 800e53e:	464b      	movlt	r3, r9
 800e540:	46a1      	movlt	r9, r4
 800e542:	4630      	mov	r0, r6
 800e544:	bfb8      	it	lt
 800e546:	2501      	movlt	r5, #1
 800e548:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e54c:	bfb4      	ite	lt
 800e54e:	461c      	movlt	r4, r3
 800e550:	2500      	movge	r5, #0
 800e552:	f7ff fd3d 	bl	800dfd0 <_Balloc>
 800e556:	4602      	mov	r2, r0
 800e558:	b918      	cbnz	r0, 800e562 <__mdiff+0x62>
 800e55a:	4b33      	ldr	r3, [pc, #204]	@ (800e628 <__mdiff+0x128>)
 800e55c:	f240 2145 	movw	r1, #581	@ 0x245
 800e560:	e7e2      	b.n	800e528 <__mdiff+0x28>
 800e562:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e566:	f104 0e14 	add.w	lr, r4, #20
 800e56a:	6926      	ldr	r6, [r4, #16]
 800e56c:	f100 0b14 	add.w	fp, r0, #20
 800e570:	60c5      	str	r5, [r0, #12]
 800e572:	f109 0514 	add.w	r5, r9, #20
 800e576:	f109 0310 	add.w	r3, r9, #16
 800e57a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e57e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e582:	46d9      	mov	r9, fp
 800e584:	f04f 0c00 	mov.w	ip, #0
 800e588:	9301      	str	r3, [sp, #4]
 800e58a:	9b01      	ldr	r3, [sp, #4]
 800e58c:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e590:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e594:	4576      	cmp	r6, lr
 800e596:	9301      	str	r3, [sp, #4]
 800e598:	fa1f f38a 	uxth.w	r3, sl
 800e59c:	4619      	mov	r1, r3
 800e59e:	b283      	uxth	r3, r0
 800e5a0:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800e5a4:	eba1 0303 	sub.w	r3, r1, r3
 800e5a8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e5ac:	4463      	add	r3, ip
 800e5ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e5b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e5bc:	f849 3b04 	str.w	r3, [r9], #4
 800e5c0:	d8e3      	bhi.n	800e58a <__mdiff+0x8a>
 800e5c2:	1b33      	subs	r3, r6, r4
 800e5c4:	3415      	adds	r4, #21
 800e5c6:	3b15      	subs	r3, #21
 800e5c8:	f023 0303 	bic.w	r3, r3, #3
 800e5cc:	3304      	adds	r3, #4
 800e5ce:	42a6      	cmp	r6, r4
 800e5d0:	bf38      	it	cc
 800e5d2:	2304      	movcc	r3, #4
 800e5d4:	441d      	add	r5, r3
 800e5d6:	445b      	add	r3, fp
 800e5d8:	462c      	mov	r4, r5
 800e5da:	461e      	mov	r6, r3
 800e5dc:	4544      	cmp	r4, r8
 800e5de:	d30e      	bcc.n	800e5fe <__mdiff+0xfe>
 800e5e0:	f108 0103 	add.w	r1, r8, #3
 800e5e4:	1b49      	subs	r1, r1, r5
 800e5e6:	3d03      	subs	r5, #3
 800e5e8:	f021 0103 	bic.w	r1, r1, #3
 800e5ec:	45a8      	cmp	r8, r5
 800e5ee:	bf38      	it	cc
 800e5f0:	2100      	movcc	r1, #0
 800e5f2:	440b      	add	r3, r1
 800e5f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e5f8:	b199      	cbz	r1, 800e622 <__mdiff+0x122>
 800e5fa:	6117      	str	r7, [r2, #16]
 800e5fc:	e79a      	b.n	800e534 <__mdiff+0x34>
 800e5fe:	f854 1b04 	ldr.w	r1, [r4], #4
 800e602:	46e6      	mov	lr, ip
 800e604:	fa1f fc81 	uxth.w	ip, r1
 800e608:	0c08      	lsrs	r0, r1, #16
 800e60a:	4471      	add	r1, lr
 800e60c:	44f4      	add	ip, lr
 800e60e:	b289      	uxth	r1, r1
 800e610:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e614:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e618:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e61c:	f846 1b04 	str.w	r1, [r6], #4
 800e620:	e7dc      	b.n	800e5dc <__mdiff+0xdc>
 800e622:	3f01      	subs	r7, #1
 800e624:	e7e6      	b.n	800e5f4 <__mdiff+0xf4>
 800e626:	bf00      	nop
 800e628:	0801066c 	.word	0x0801066c
 800e62c:	0801067d 	.word	0x0801067d

0800e630 <__d2b>:
 800e630:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e634:	460f      	mov	r7, r1
 800e636:	2101      	movs	r1, #1
 800e638:	4616      	mov	r6, r2
 800e63a:	ec59 8b10 	vmov	r8, r9, d0
 800e63e:	f7ff fcc7 	bl	800dfd0 <_Balloc>
 800e642:	4604      	mov	r4, r0
 800e644:	b930      	cbnz	r0, 800e654 <__d2b+0x24>
 800e646:	4602      	mov	r2, r0
 800e648:	4b23      	ldr	r3, [pc, #140]	@ (800e6d8 <__d2b+0xa8>)
 800e64a:	f240 310f 	movw	r1, #783	@ 0x30f
 800e64e:	4823      	ldr	r0, [pc, #140]	@ (800e6dc <__d2b+0xac>)
 800e650:	f000 fa74 	bl	800eb3c <__assert_func>
 800e654:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e658:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e65c:	b10d      	cbz	r5, 800e662 <__d2b+0x32>
 800e65e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e662:	9301      	str	r3, [sp, #4]
 800e664:	f1b8 0300 	subs.w	r3, r8, #0
 800e668:	d023      	beq.n	800e6b2 <__d2b+0x82>
 800e66a:	4668      	mov	r0, sp
 800e66c:	9300      	str	r3, [sp, #0]
 800e66e:	f7ff fd78 	bl	800e162 <__lo0bits>
 800e672:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e676:	b1d0      	cbz	r0, 800e6ae <__d2b+0x7e>
 800e678:	f1c0 0320 	rsb	r3, r0, #32
 800e67c:	fa02 f303 	lsl.w	r3, r2, r3
 800e680:	40c2      	lsrs	r2, r0
 800e682:	430b      	orrs	r3, r1
 800e684:	9201      	str	r2, [sp, #4]
 800e686:	6163      	str	r3, [r4, #20]
 800e688:	9b01      	ldr	r3, [sp, #4]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	61a3      	str	r3, [r4, #24]
 800e68e:	bf0c      	ite	eq
 800e690:	2201      	moveq	r2, #1
 800e692:	2202      	movne	r2, #2
 800e694:	6122      	str	r2, [r4, #16]
 800e696:	b1a5      	cbz	r5, 800e6c2 <__d2b+0x92>
 800e698:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e69c:	4405      	add	r5, r0
 800e69e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e6a2:	603d      	str	r5, [r7, #0]
 800e6a4:	6030      	str	r0, [r6, #0]
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	b003      	add	sp, #12
 800e6aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6ae:	6161      	str	r1, [r4, #20]
 800e6b0:	e7ea      	b.n	800e688 <__d2b+0x58>
 800e6b2:	a801      	add	r0, sp, #4
 800e6b4:	f7ff fd55 	bl	800e162 <__lo0bits>
 800e6b8:	9b01      	ldr	r3, [sp, #4]
 800e6ba:	3020      	adds	r0, #32
 800e6bc:	2201      	movs	r2, #1
 800e6be:	6163      	str	r3, [r4, #20]
 800e6c0:	e7e8      	b.n	800e694 <__d2b+0x64>
 800e6c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e6c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e6ca:	6038      	str	r0, [r7, #0]
 800e6cc:	6918      	ldr	r0, [r3, #16]
 800e6ce:	f7ff fd29 	bl	800e124 <__hi0bits>
 800e6d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e6d6:	e7e5      	b.n	800e6a4 <__d2b+0x74>
 800e6d8:	0801066c 	.word	0x0801066c
 800e6dc:	0801067d 	.word	0x0801067d

0800e6e0 <__ssputs_r>:
 800e6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6e4:	461f      	mov	r7, r3
 800e6e6:	688e      	ldr	r6, [r1, #8]
 800e6e8:	4682      	mov	sl, r0
 800e6ea:	460c      	mov	r4, r1
 800e6ec:	42be      	cmp	r6, r7
 800e6ee:	4690      	mov	r8, r2
 800e6f0:	680b      	ldr	r3, [r1, #0]
 800e6f2:	d82d      	bhi.n	800e750 <__ssputs_r+0x70>
 800e6f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e6f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e6fc:	d026      	beq.n	800e74c <__ssputs_r+0x6c>
 800e6fe:	6965      	ldr	r5, [r4, #20]
 800e700:	6909      	ldr	r1, [r1, #16]
 800e702:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e706:	eba3 0901 	sub.w	r9, r3, r1
 800e70a:	1c7b      	adds	r3, r7, #1
 800e70c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e710:	444b      	add	r3, r9
 800e712:	106d      	asrs	r5, r5, #1
 800e714:	429d      	cmp	r5, r3
 800e716:	bf38      	it	cc
 800e718:	461d      	movcc	r5, r3
 800e71a:	0553      	lsls	r3, r2, #21
 800e71c:	d527      	bpl.n	800e76e <__ssputs_r+0x8e>
 800e71e:	4629      	mov	r1, r5
 800e720:	f7ff fbca 	bl	800deb8 <_malloc_r>
 800e724:	4606      	mov	r6, r0
 800e726:	b360      	cbz	r0, 800e782 <__ssputs_r+0xa2>
 800e728:	464a      	mov	r2, r9
 800e72a:	6921      	ldr	r1, [r4, #16]
 800e72c:	f7fe fcf1 	bl	800d112 <memcpy>
 800e730:	89a3      	ldrh	r3, [r4, #12]
 800e732:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e73a:	81a3      	strh	r3, [r4, #12]
 800e73c:	6126      	str	r6, [r4, #16]
 800e73e:	444e      	add	r6, r9
 800e740:	6165      	str	r5, [r4, #20]
 800e742:	eba5 0509 	sub.w	r5, r5, r9
 800e746:	6026      	str	r6, [r4, #0]
 800e748:	463e      	mov	r6, r7
 800e74a:	60a5      	str	r5, [r4, #8]
 800e74c:	42be      	cmp	r6, r7
 800e74e:	d900      	bls.n	800e752 <__ssputs_r+0x72>
 800e750:	463e      	mov	r6, r7
 800e752:	4632      	mov	r2, r6
 800e754:	4641      	mov	r1, r8
 800e756:	6820      	ldr	r0, [r4, #0]
 800e758:	f000 f9c6 	bl	800eae8 <memmove>
 800e75c:	68a3      	ldr	r3, [r4, #8]
 800e75e:	2000      	movs	r0, #0
 800e760:	1b9b      	subs	r3, r3, r6
 800e762:	60a3      	str	r3, [r4, #8]
 800e764:	6823      	ldr	r3, [r4, #0]
 800e766:	4433      	add	r3, r6
 800e768:	6023      	str	r3, [r4, #0]
 800e76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e76e:	462a      	mov	r2, r5
 800e770:	f000 fa28 	bl	800ebc4 <_realloc_r>
 800e774:	4606      	mov	r6, r0
 800e776:	2800      	cmp	r0, #0
 800e778:	d1e0      	bne.n	800e73c <__ssputs_r+0x5c>
 800e77a:	6921      	ldr	r1, [r4, #16]
 800e77c:	4650      	mov	r0, sl
 800e77e:	f7ff fb27 	bl	800ddd0 <_free_r>
 800e782:	230c      	movs	r3, #12
 800e784:	f04f 30ff 	mov.w	r0, #4294967295
 800e788:	f8ca 3000 	str.w	r3, [sl]
 800e78c:	89a3      	ldrh	r3, [r4, #12]
 800e78e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e792:	81a3      	strh	r3, [r4, #12]
 800e794:	e7e9      	b.n	800e76a <__ssputs_r+0x8a>
	...

0800e798 <_svfiprintf_r>:
 800e798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e79c:	4698      	mov	r8, r3
 800e79e:	898b      	ldrh	r3, [r1, #12]
 800e7a0:	b09d      	sub	sp, #116	@ 0x74
 800e7a2:	4607      	mov	r7, r0
 800e7a4:	061b      	lsls	r3, r3, #24
 800e7a6:	460d      	mov	r5, r1
 800e7a8:	4614      	mov	r4, r2
 800e7aa:	d510      	bpl.n	800e7ce <_svfiprintf_r+0x36>
 800e7ac:	690b      	ldr	r3, [r1, #16]
 800e7ae:	b973      	cbnz	r3, 800e7ce <_svfiprintf_r+0x36>
 800e7b0:	2140      	movs	r1, #64	@ 0x40
 800e7b2:	f7ff fb81 	bl	800deb8 <_malloc_r>
 800e7b6:	6028      	str	r0, [r5, #0]
 800e7b8:	6128      	str	r0, [r5, #16]
 800e7ba:	b930      	cbnz	r0, 800e7ca <_svfiprintf_r+0x32>
 800e7bc:	230c      	movs	r3, #12
 800e7be:	603b      	str	r3, [r7, #0]
 800e7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c4:	b01d      	add	sp, #116	@ 0x74
 800e7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ca:	2340      	movs	r3, #64	@ 0x40
 800e7cc:	616b      	str	r3, [r5, #20]
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7d4:	f04f 0901 	mov.w	r9, #1
 800e7d8:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800e97c <_svfiprintf_r+0x1e4>
 800e7dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7de:	2320      	movs	r3, #32
 800e7e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e7e4:	2330      	movs	r3, #48	@ 0x30
 800e7e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e7ea:	4623      	mov	r3, r4
 800e7ec:	469a      	mov	sl, r3
 800e7ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7f2:	b10a      	cbz	r2, 800e7f8 <_svfiprintf_r+0x60>
 800e7f4:	2a25      	cmp	r2, #37	@ 0x25
 800e7f6:	d1f9      	bne.n	800e7ec <_svfiprintf_r+0x54>
 800e7f8:	ebba 0b04 	subs.w	fp, sl, r4
 800e7fc:	d00b      	beq.n	800e816 <_svfiprintf_r+0x7e>
 800e7fe:	465b      	mov	r3, fp
 800e800:	4622      	mov	r2, r4
 800e802:	4629      	mov	r1, r5
 800e804:	4638      	mov	r0, r7
 800e806:	f7ff ff6b 	bl	800e6e0 <__ssputs_r>
 800e80a:	3001      	adds	r0, #1
 800e80c:	f000 80a7 	beq.w	800e95e <_svfiprintf_r+0x1c6>
 800e810:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e812:	445a      	add	r2, fp
 800e814:	9209      	str	r2, [sp, #36]	@ 0x24
 800e816:	f89a 3000 	ldrb.w	r3, [sl]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	f000 809f 	beq.w	800e95e <_svfiprintf_r+0x1c6>
 800e820:	2300      	movs	r3, #0
 800e822:	f04f 32ff 	mov.w	r2, #4294967295
 800e826:	f10a 0a01 	add.w	sl, sl, #1
 800e82a:	9304      	str	r3, [sp, #16]
 800e82c:	9307      	str	r3, [sp, #28]
 800e82e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e832:	931a      	str	r3, [sp, #104]	@ 0x68
 800e834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e838:	4654      	mov	r4, sl
 800e83a:	2205      	movs	r2, #5
 800e83c:	484f      	ldr	r0, [pc, #316]	@ (800e97c <_svfiprintf_r+0x1e4>)
 800e83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e842:	f7fe fc58 	bl	800d0f6 <memchr>
 800e846:	9a04      	ldr	r2, [sp, #16]
 800e848:	b9d8      	cbnz	r0, 800e882 <_svfiprintf_r+0xea>
 800e84a:	06d0      	lsls	r0, r2, #27
 800e84c:	bf44      	itt	mi
 800e84e:	2320      	movmi	r3, #32
 800e850:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e854:	0711      	lsls	r1, r2, #28
 800e856:	bf44      	itt	mi
 800e858:	232b      	movmi	r3, #43	@ 0x2b
 800e85a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e85e:	f89a 3000 	ldrb.w	r3, [sl]
 800e862:	2b2a      	cmp	r3, #42	@ 0x2a
 800e864:	d015      	beq.n	800e892 <_svfiprintf_r+0xfa>
 800e866:	9a07      	ldr	r2, [sp, #28]
 800e868:	4654      	mov	r4, sl
 800e86a:	2000      	movs	r0, #0
 800e86c:	f04f 0c0a 	mov.w	ip, #10
 800e870:	4621      	mov	r1, r4
 800e872:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e876:	3b30      	subs	r3, #48	@ 0x30
 800e878:	2b09      	cmp	r3, #9
 800e87a:	d94b      	bls.n	800e914 <_svfiprintf_r+0x17c>
 800e87c:	b1b0      	cbz	r0, 800e8ac <_svfiprintf_r+0x114>
 800e87e:	9207      	str	r2, [sp, #28]
 800e880:	e014      	b.n	800e8ac <_svfiprintf_r+0x114>
 800e882:	eba0 0308 	sub.w	r3, r0, r8
 800e886:	46a2      	mov	sl, r4
 800e888:	fa09 f303 	lsl.w	r3, r9, r3
 800e88c:	4313      	orrs	r3, r2
 800e88e:	9304      	str	r3, [sp, #16]
 800e890:	e7d2      	b.n	800e838 <_svfiprintf_r+0xa0>
 800e892:	9b03      	ldr	r3, [sp, #12]
 800e894:	1d19      	adds	r1, r3, #4
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	9103      	str	r1, [sp, #12]
 800e89c:	bfbb      	ittet	lt
 800e89e:	425b      	neglt	r3, r3
 800e8a0:	f042 0202 	orrlt.w	r2, r2, #2
 800e8a4:	9307      	strge	r3, [sp, #28]
 800e8a6:	9307      	strlt	r3, [sp, #28]
 800e8a8:	bfb8      	it	lt
 800e8aa:	9204      	strlt	r2, [sp, #16]
 800e8ac:	7823      	ldrb	r3, [r4, #0]
 800e8ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8b0:	d10a      	bne.n	800e8c8 <_svfiprintf_r+0x130>
 800e8b2:	7863      	ldrb	r3, [r4, #1]
 800e8b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8b6:	d132      	bne.n	800e91e <_svfiprintf_r+0x186>
 800e8b8:	9b03      	ldr	r3, [sp, #12]
 800e8ba:	3402      	adds	r4, #2
 800e8bc:	1d1a      	adds	r2, r3, #4
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e8c4:	9203      	str	r2, [sp, #12]
 800e8c6:	9305      	str	r3, [sp, #20]
 800e8c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e98c <_svfiprintf_r+0x1f4>
 800e8cc:	2203      	movs	r2, #3
 800e8ce:	7821      	ldrb	r1, [r4, #0]
 800e8d0:	4650      	mov	r0, sl
 800e8d2:	f7fe fc10 	bl	800d0f6 <memchr>
 800e8d6:	b138      	cbz	r0, 800e8e8 <_svfiprintf_r+0x150>
 800e8d8:	eba0 000a 	sub.w	r0, r0, sl
 800e8dc:	2240      	movs	r2, #64	@ 0x40
 800e8de:	9b04      	ldr	r3, [sp, #16]
 800e8e0:	3401      	adds	r4, #1
 800e8e2:	4082      	lsls	r2, r0
 800e8e4:	4313      	orrs	r3, r2
 800e8e6:	9304      	str	r3, [sp, #16]
 800e8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8ec:	2206      	movs	r2, #6
 800e8ee:	4824      	ldr	r0, [pc, #144]	@ (800e980 <_svfiprintf_r+0x1e8>)
 800e8f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e8f4:	f7fe fbff 	bl	800d0f6 <memchr>
 800e8f8:	2800      	cmp	r0, #0
 800e8fa:	d036      	beq.n	800e96a <_svfiprintf_r+0x1d2>
 800e8fc:	4b21      	ldr	r3, [pc, #132]	@ (800e984 <_svfiprintf_r+0x1ec>)
 800e8fe:	bb1b      	cbnz	r3, 800e948 <_svfiprintf_r+0x1b0>
 800e900:	9b03      	ldr	r3, [sp, #12]
 800e902:	3307      	adds	r3, #7
 800e904:	f023 0307 	bic.w	r3, r3, #7
 800e908:	3308      	adds	r3, #8
 800e90a:	9303      	str	r3, [sp, #12]
 800e90c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e90e:	4433      	add	r3, r6
 800e910:	9309      	str	r3, [sp, #36]	@ 0x24
 800e912:	e76a      	b.n	800e7ea <_svfiprintf_r+0x52>
 800e914:	fb0c 3202 	mla	r2, ip, r2, r3
 800e918:	460c      	mov	r4, r1
 800e91a:	2001      	movs	r0, #1
 800e91c:	e7a8      	b.n	800e870 <_svfiprintf_r+0xd8>
 800e91e:	2300      	movs	r3, #0
 800e920:	3401      	adds	r4, #1
 800e922:	f04f 0c0a 	mov.w	ip, #10
 800e926:	4619      	mov	r1, r3
 800e928:	9305      	str	r3, [sp, #20]
 800e92a:	4620      	mov	r0, r4
 800e92c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e930:	3a30      	subs	r2, #48	@ 0x30
 800e932:	2a09      	cmp	r2, #9
 800e934:	d903      	bls.n	800e93e <_svfiprintf_r+0x1a6>
 800e936:	2b00      	cmp	r3, #0
 800e938:	d0c6      	beq.n	800e8c8 <_svfiprintf_r+0x130>
 800e93a:	9105      	str	r1, [sp, #20]
 800e93c:	e7c4      	b.n	800e8c8 <_svfiprintf_r+0x130>
 800e93e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e942:	4604      	mov	r4, r0
 800e944:	2301      	movs	r3, #1
 800e946:	e7f0      	b.n	800e92a <_svfiprintf_r+0x192>
 800e948:	ab03      	add	r3, sp, #12
 800e94a:	462a      	mov	r2, r5
 800e94c:	a904      	add	r1, sp, #16
 800e94e:	4638      	mov	r0, r7
 800e950:	9300      	str	r3, [sp, #0]
 800e952:	4b0d      	ldr	r3, [pc, #52]	@ (800e988 <_svfiprintf_r+0x1f0>)
 800e954:	f7fd fe6e 	bl	800c634 <_printf_float>
 800e958:	1c42      	adds	r2, r0, #1
 800e95a:	4606      	mov	r6, r0
 800e95c:	d1d6      	bne.n	800e90c <_svfiprintf_r+0x174>
 800e95e:	89ab      	ldrh	r3, [r5, #12]
 800e960:	065b      	lsls	r3, r3, #25
 800e962:	f53f af2d 	bmi.w	800e7c0 <_svfiprintf_r+0x28>
 800e966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e968:	e72c      	b.n	800e7c4 <_svfiprintf_r+0x2c>
 800e96a:	ab03      	add	r3, sp, #12
 800e96c:	462a      	mov	r2, r5
 800e96e:	a904      	add	r1, sp, #16
 800e970:	4638      	mov	r0, r7
 800e972:	9300      	str	r3, [sp, #0]
 800e974:	4b04      	ldr	r3, [pc, #16]	@ (800e988 <_svfiprintf_r+0x1f0>)
 800e976:	f7fe f8f9 	bl	800cb6c <_printf_i>
 800e97a:	e7ed      	b.n	800e958 <_svfiprintf_r+0x1c0>
 800e97c:	080107d8 	.word	0x080107d8
 800e980:	080107e2 	.word	0x080107e2
 800e984:	0800c635 	.word	0x0800c635
 800e988:	0800e6e1 	.word	0x0800e6e1
 800e98c:	080107de 	.word	0x080107de

0800e990 <__sflush_r>:
 800e990:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e998:	0716      	lsls	r6, r2, #28
 800e99a:	4605      	mov	r5, r0
 800e99c:	460c      	mov	r4, r1
 800e99e:	d454      	bmi.n	800ea4a <__sflush_r+0xba>
 800e9a0:	684b      	ldr	r3, [r1, #4]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	dc02      	bgt.n	800e9ac <__sflush_r+0x1c>
 800e9a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	dd48      	ble.n	800ea3e <__sflush_r+0xae>
 800e9ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e9ae:	2e00      	cmp	r6, #0
 800e9b0:	d045      	beq.n	800ea3e <__sflush_r+0xae>
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e9b8:	682f      	ldr	r7, [r5, #0]
 800e9ba:	6a21      	ldr	r1, [r4, #32]
 800e9bc:	602b      	str	r3, [r5, #0]
 800e9be:	d030      	beq.n	800ea22 <__sflush_r+0x92>
 800e9c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e9c2:	89a3      	ldrh	r3, [r4, #12]
 800e9c4:	0759      	lsls	r1, r3, #29
 800e9c6:	d505      	bpl.n	800e9d4 <__sflush_r+0x44>
 800e9c8:	6863      	ldr	r3, [r4, #4]
 800e9ca:	1ad2      	subs	r2, r2, r3
 800e9cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e9ce:	b10b      	cbz	r3, 800e9d4 <__sflush_r+0x44>
 800e9d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e9d2:	1ad2      	subs	r2, r2, r3
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e9d8:	6a21      	ldr	r1, [r4, #32]
 800e9da:	4628      	mov	r0, r5
 800e9dc:	47b0      	blx	r6
 800e9de:	1c43      	adds	r3, r0, #1
 800e9e0:	89a3      	ldrh	r3, [r4, #12]
 800e9e2:	d106      	bne.n	800e9f2 <__sflush_r+0x62>
 800e9e4:	6829      	ldr	r1, [r5, #0]
 800e9e6:	291d      	cmp	r1, #29
 800e9e8:	d82b      	bhi.n	800ea42 <__sflush_r+0xb2>
 800e9ea:	4a2a      	ldr	r2, [pc, #168]	@ (800ea94 <__sflush_r+0x104>)
 800e9ec:	410a      	asrs	r2, r1
 800e9ee:	07d6      	lsls	r6, r2, #31
 800e9f0:	d427      	bmi.n	800ea42 <__sflush_r+0xb2>
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	04d9      	lsls	r1, r3, #19
 800e9f6:	6062      	str	r2, [r4, #4]
 800e9f8:	6922      	ldr	r2, [r4, #16]
 800e9fa:	6022      	str	r2, [r4, #0]
 800e9fc:	d504      	bpl.n	800ea08 <__sflush_r+0x78>
 800e9fe:	1c42      	adds	r2, r0, #1
 800ea00:	d101      	bne.n	800ea06 <__sflush_r+0x76>
 800ea02:	682b      	ldr	r3, [r5, #0]
 800ea04:	b903      	cbnz	r3, 800ea08 <__sflush_r+0x78>
 800ea06:	6560      	str	r0, [r4, #84]	@ 0x54
 800ea08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea0a:	602f      	str	r7, [r5, #0]
 800ea0c:	b1b9      	cbz	r1, 800ea3e <__sflush_r+0xae>
 800ea0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea12:	4299      	cmp	r1, r3
 800ea14:	d002      	beq.n	800ea1c <__sflush_r+0x8c>
 800ea16:	4628      	mov	r0, r5
 800ea18:	f7ff f9da 	bl	800ddd0 <_free_r>
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea20:	e00d      	b.n	800ea3e <__sflush_r+0xae>
 800ea22:	2301      	movs	r3, #1
 800ea24:	4628      	mov	r0, r5
 800ea26:	47b0      	blx	r6
 800ea28:	4602      	mov	r2, r0
 800ea2a:	1c50      	adds	r0, r2, #1
 800ea2c:	d1c9      	bne.n	800e9c2 <__sflush_r+0x32>
 800ea2e:	682b      	ldr	r3, [r5, #0]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d0c6      	beq.n	800e9c2 <__sflush_r+0x32>
 800ea34:	2b1d      	cmp	r3, #29
 800ea36:	d001      	beq.n	800ea3c <__sflush_r+0xac>
 800ea38:	2b16      	cmp	r3, #22
 800ea3a:	d11d      	bne.n	800ea78 <__sflush_r+0xe8>
 800ea3c:	602f      	str	r7, [r5, #0]
 800ea3e:	2000      	movs	r0, #0
 800ea40:	e021      	b.n	800ea86 <__sflush_r+0xf6>
 800ea42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea46:	b21b      	sxth	r3, r3
 800ea48:	e01a      	b.n	800ea80 <__sflush_r+0xf0>
 800ea4a:	690f      	ldr	r7, [r1, #16]
 800ea4c:	2f00      	cmp	r7, #0
 800ea4e:	d0f6      	beq.n	800ea3e <__sflush_r+0xae>
 800ea50:	0793      	lsls	r3, r2, #30
 800ea52:	680e      	ldr	r6, [r1, #0]
 800ea54:	600f      	str	r7, [r1, #0]
 800ea56:	bf0c      	ite	eq
 800ea58:	694b      	ldreq	r3, [r1, #20]
 800ea5a:	2300      	movne	r3, #0
 800ea5c:	eba6 0807 	sub.w	r8, r6, r7
 800ea60:	608b      	str	r3, [r1, #8]
 800ea62:	f1b8 0f00 	cmp.w	r8, #0
 800ea66:	ddea      	ble.n	800ea3e <__sflush_r+0xae>
 800ea68:	4643      	mov	r3, r8
 800ea6a:	463a      	mov	r2, r7
 800ea6c:	6a21      	ldr	r1, [r4, #32]
 800ea6e:	4628      	mov	r0, r5
 800ea70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ea72:	47b0      	blx	r6
 800ea74:	2800      	cmp	r0, #0
 800ea76:	dc08      	bgt.n	800ea8a <__sflush_r+0xfa>
 800ea78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea80:	f04f 30ff 	mov.w	r0, #4294967295
 800ea84:	81a3      	strh	r3, [r4, #12]
 800ea86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea8a:	4407      	add	r7, r0
 800ea8c:	eba8 0800 	sub.w	r8, r8, r0
 800ea90:	e7e7      	b.n	800ea62 <__sflush_r+0xd2>
 800ea92:	bf00      	nop
 800ea94:	dfbffffe 	.word	0xdfbffffe

0800ea98 <_fflush_r>:
 800ea98:	b538      	push	{r3, r4, r5, lr}
 800ea9a:	690b      	ldr	r3, [r1, #16]
 800ea9c:	4605      	mov	r5, r0
 800ea9e:	460c      	mov	r4, r1
 800eaa0:	b913      	cbnz	r3, 800eaa8 <_fflush_r+0x10>
 800eaa2:	2500      	movs	r5, #0
 800eaa4:	4628      	mov	r0, r5
 800eaa6:	bd38      	pop	{r3, r4, r5, pc}
 800eaa8:	b118      	cbz	r0, 800eab2 <_fflush_r+0x1a>
 800eaaa:	6a03      	ldr	r3, [r0, #32]
 800eaac:	b90b      	cbnz	r3, 800eab2 <_fflush_r+0x1a>
 800eaae:	f7fe fa09 	bl	800cec4 <__sinit>
 800eab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d0f3      	beq.n	800eaa2 <_fflush_r+0xa>
 800eaba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eabc:	07d0      	lsls	r0, r2, #31
 800eabe:	d404      	bmi.n	800eaca <_fflush_r+0x32>
 800eac0:	0599      	lsls	r1, r3, #22
 800eac2:	d402      	bmi.n	800eaca <_fflush_r+0x32>
 800eac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eac6:	f7fe fb14 	bl	800d0f2 <__retarget_lock_acquire_recursive>
 800eaca:	4628      	mov	r0, r5
 800eacc:	4621      	mov	r1, r4
 800eace:	f7ff ff5f 	bl	800e990 <__sflush_r>
 800ead2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ead4:	4605      	mov	r5, r0
 800ead6:	07da      	lsls	r2, r3, #31
 800ead8:	d4e4      	bmi.n	800eaa4 <_fflush_r+0xc>
 800eada:	89a3      	ldrh	r3, [r4, #12]
 800eadc:	059b      	lsls	r3, r3, #22
 800eade:	d4e1      	bmi.n	800eaa4 <_fflush_r+0xc>
 800eae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eae2:	f7fe fb07 	bl	800d0f4 <__retarget_lock_release_recursive>
 800eae6:	e7dd      	b.n	800eaa4 <_fflush_r+0xc>

0800eae8 <memmove>:
 800eae8:	4288      	cmp	r0, r1
 800eaea:	b510      	push	{r4, lr}
 800eaec:	eb01 0402 	add.w	r4, r1, r2
 800eaf0:	d902      	bls.n	800eaf8 <memmove+0x10>
 800eaf2:	4284      	cmp	r4, r0
 800eaf4:	4623      	mov	r3, r4
 800eaf6:	d807      	bhi.n	800eb08 <memmove+0x20>
 800eaf8:	1e43      	subs	r3, r0, #1
 800eafa:	42a1      	cmp	r1, r4
 800eafc:	d008      	beq.n	800eb10 <memmove+0x28>
 800eafe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eb06:	e7f8      	b.n	800eafa <memmove+0x12>
 800eb08:	4402      	add	r2, r0
 800eb0a:	4601      	mov	r1, r0
 800eb0c:	428a      	cmp	r2, r1
 800eb0e:	d100      	bne.n	800eb12 <memmove+0x2a>
 800eb10:	bd10      	pop	{r4, pc}
 800eb12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eb1a:	e7f7      	b.n	800eb0c <memmove+0x24>

0800eb1c <_sbrk_r>:
 800eb1c:	b538      	push	{r3, r4, r5, lr}
 800eb1e:	2300      	movs	r3, #0
 800eb20:	4d05      	ldr	r5, [pc, #20]	@ (800eb38 <_sbrk_r+0x1c>)
 800eb22:	4604      	mov	r4, r0
 800eb24:	4608      	mov	r0, r1
 800eb26:	602b      	str	r3, [r5, #0]
 800eb28:	f7f5 f942 	bl	8003db0 <_sbrk>
 800eb2c:	1c43      	adds	r3, r0, #1
 800eb2e:	d102      	bne.n	800eb36 <_sbrk_r+0x1a>
 800eb30:	682b      	ldr	r3, [r5, #0]
 800eb32:	b103      	cbz	r3, 800eb36 <_sbrk_r+0x1a>
 800eb34:	6023      	str	r3, [r4, #0]
 800eb36:	bd38      	pop	{r3, r4, r5, pc}
 800eb38:	20003ef0 	.word	0x20003ef0

0800eb3c <__assert_func>:
 800eb3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb3e:	4614      	mov	r4, r2
 800eb40:	461a      	mov	r2, r3
 800eb42:	4b09      	ldr	r3, [pc, #36]	@ (800eb68 <__assert_func+0x2c>)
 800eb44:	4605      	mov	r5, r0
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	68d8      	ldr	r0, [r3, #12]
 800eb4a:	b954      	cbnz	r4, 800eb62 <__assert_func+0x26>
 800eb4c:	4b07      	ldr	r3, [pc, #28]	@ (800eb6c <__assert_func+0x30>)
 800eb4e:	461c      	mov	r4, r3
 800eb50:	9100      	str	r1, [sp, #0]
 800eb52:	4907      	ldr	r1, [pc, #28]	@ (800eb70 <__assert_func+0x34>)
 800eb54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb58:	462b      	mov	r3, r5
 800eb5a:	f000 f86f 	bl	800ec3c <fiprintf>
 800eb5e:	f000 f87f 	bl	800ec60 <abort>
 800eb62:	4b04      	ldr	r3, [pc, #16]	@ (800eb74 <__assert_func+0x38>)
 800eb64:	e7f4      	b.n	800eb50 <__assert_func+0x14>
 800eb66:	bf00      	nop
 800eb68:	2000001c 	.word	0x2000001c
 800eb6c:	0801082e 	.word	0x0801082e
 800eb70:	08010800 	.word	0x08010800
 800eb74:	080107f3 	.word	0x080107f3

0800eb78 <_calloc_r>:
 800eb78:	b570      	push	{r4, r5, r6, lr}
 800eb7a:	fba1 5402 	umull	r5, r4, r1, r2
 800eb7e:	b93c      	cbnz	r4, 800eb90 <_calloc_r+0x18>
 800eb80:	4629      	mov	r1, r5
 800eb82:	f7ff f999 	bl	800deb8 <_malloc_r>
 800eb86:	4606      	mov	r6, r0
 800eb88:	b928      	cbnz	r0, 800eb96 <_calloc_r+0x1e>
 800eb8a:	2600      	movs	r6, #0
 800eb8c:	4630      	mov	r0, r6
 800eb8e:	bd70      	pop	{r4, r5, r6, pc}
 800eb90:	220c      	movs	r2, #12
 800eb92:	6002      	str	r2, [r0, #0]
 800eb94:	e7f9      	b.n	800eb8a <_calloc_r+0x12>
 800eb96:	462a      	mov	r2, r5
 800eb98:	4621      	mov	r1, r4
 800eb9a:	f7fe fa2c 	bl	800cff6 <memset>
 800eb9e:	e7f5      	b.n	800eb8c <_calloc_r+0x14>

0800eba0 <__ascii_mbtowc>:
 800eba0:	b082      	sub	sp, #8
 800eba2:	b901      	cbnz	r1, 800eba6 <__ascii_mbtowc+0x6>
 800eba4:	a901      	add	r1, sp, #4
 800eba6:	b142      	cbz	r2, 800ebba <__ascii_mbtowc+0x1a>
 800eba8:	b14b      	cbz	r3, 800ebbe <__ascii_mbtowc+0x1e>
 800ebaa:	7813      	ldrb	r3, [r2, #0]
 800ebac:	600b      	str	r3, [r1, #0]
 800ebae:	7812      	ldrb	r2, [r2, #0]
 800ebb0:	1e10      	subs	r0, r2, #0
 800ebb2:	bf18      	it	ne
 800ebb4:	2001      	movne	r0, #1
 800ebb6:	b002      	add	sp, #8
 800ebb8:	4770      	bx	lr
 800ebba:	4610      	mov	r0, r2
 800ebbc:	e7fb      	b.n	800ebb6 <__ascii_mbtowc+0x16>
 800ebbe:	f06f 0001 	mvn.w	r0, #1
 800ebc2:	e7f8      	b.n	800ebb6 <__ascii_mbtowc+0x16>

0800ebc4 <_realloc_r>:
 800ebc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebc8:	4680      	mov	r8, r0
 800ebca:	4615      	mov	r5, r2
 800ebcc:	460c      	mov	r4, r1
 800ebce:	b921      	cbnz	r1, 800ebda <_realloc_r+0x16>
 800ebd0:	4611      	mov	r1, r2
 800ebd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebd6:	f7ff b96f 	b.w	800deb8 <_malloc_r>
 800ebda:	b92a      	cbnz	r2, 800ebe8 <_realloc_r+0x24>
 800ebdc:	f7ff f8f8 	bl	800ddd0 <_free_r>
 800ebe0:	2400      	movs	r4, #0
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebe8:	f000 f841 	bl	800ec6e <_malloc_usable_size_r>
 800ebec:	4285      	cmp	r5, r0
 800ebee:	4606      	mov	r6, r0
 800ebf0:	d802      	bhi.n	800ebf8 <_realloc_r+0x34>
 800ebf2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ebf6:	d8f4      	bhi.n	800ebe2 <_realloc_r+0x1e>
 800ebf8:	4629      	mov	r1, r5
 800ebfa:	4640      	mov	r0, r8
 800ebfc:	f7ff f95c 	bl	800deb8 <_malloc_r>
 800ec00:	4607      	mov	r7, r0
 800ec02:	2800      	cmp	r0, #0
 800ec04:	d0ec      	beq.n	800ebe0 <_realloc_r+0x1c>
 800ec06:	42b5      	cmp	r5, r6
 800ec08:	462a      	mov	r2, r5
 800ec0a:	4621      	mov	r1, r4
 800ec0c:	bf28      	it	cs
 800ec0e:	4632      	movcs	r2, r6
 800ec10:	f7fe fa7f 	bl	800d112 <memcpy>
 800ec14:	4621      	mov	r1, r4
 800ec16:	4640      	mov	r0, r8
 800ec18:	463c      	mov	r4, r7
 800ec1a:	f7ff f8d9 	bl	800ddd0 <_free_r>
 800ec1e:	e7e0      	b.n	800ebe2 <_realloc_r+0x1e>

0800ec20 <__ascii_wctomb>:
 800ec20:	4603      	mov	r3, r0
 800ec22:	4608      	mov	r0, r1
 800ec24:	b141      	cbz	r1, 800ec38 <__ascii_wctomb+0x18>
 800ec26:	2aff      	cmp	r2, #255	@ 0xff
 800ec28:	d904      	bls.n	800ec34 <__ascii_wctomb+0x14>
 800ec2a:	228a      	movs	r2, #138	@ 0x8a
 800ec2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec30:	601a      	str	r2, [r3, #0]
 800ec32:	4770      	bx	lr
 800ec34:	2001      	movs	r0, #1
 800ec36:	700a      	strb	r2, [r1, #0]
 800ec38:	4770      	bx	lr
	...

0800ec3c <fiprintf>:
 800ec3c:	b40e      	push	{r1, r2, r3}
 800ec3e:	b503      	push	{r0, r1, lr}
 800ec40:	ab03      	add	r3, sp, #12
 800ec42:	4601      	mov	r1, r0
 800ec44:	4805      	ldr	r0, [pc, #20]	@ (800ec5c <fiprintf+0x20>)
 800ec46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec4a:	6800      	ldr	r0, [r0, #0]
 800ec4c:	9301      	str	r3, [sp, #4]
 800ec4e:	f000 f83f 	bl	800ecd0 <_vfiprintf_r>
 800ec52:	b002      	add	sp, #8
 800ec54:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec58:	b003      	add	sp, #12
 800ec5a:	4770      	bx	lr
 800ec5c:	2000001c 	.word	0x2000001c

0800ec60 <abort>:
 800ec60:	2006      	movs	r0, #6
 800ec62:	b508      	push	{r3, lr}
 800ec64:	f000 fa08 	bl	800f078 <raise>
 800ec68:	2001      	movs	r0, #1
 800ec6a:	f7f5 f829 	bl	8003cc0 <_exit>

0800ec6e <_malloc_usable_size_r>:
 800ec6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec72:	1f18      	subs	r0, r3, #4
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	bfbc      	itt	lt
 800ec78:	580b      	ldrlt	r3, [r1, r0]
 800ec7a:	18c0      	addlt	r0, r0, r3
 800ec7c:	4770      	bx	lr

0800ec7e <__sfputc_r>:
 800ec7e:	6893      	ldr	r3, [r2, #8]
 800ec80:	3b01      	subs	r3, #1
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	6093      	str	r3, [r2, #8]
 800ec86:	b410      	push	{r4}
 800ec88:	da08      	bge.n	800ec9c <__sfputc_r+0x1e>
 800ec8a:	6994      	ldr	r4, [r2, #24]
 800ec8c:	42a3      	cmp	r3, r4
 800ec8e:	db01      	blt.n	800ec94 <__sfputc_r+0x16>
 800ec90:	290a      	cmp	r1, #10
 800ec92:	d103      	bne.n	800ec9c <__sfputc_r+0x1e>
 800ec94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec98:	f000 b932 	b.w	800ef00 <__swbuf_r>
 800ec9c:	6813      	ldr	r3, [r2, #0]
 800ec9e:	1c58      	adds	r0, r3, #1
 800eca0:	6010      	str	r0, [r2, #0]
 800eca2:	4608      	mov	r0, r1
 800eca4:	7019      	strb	r1, [r3, #0]
 800eca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecaa:	4770      	bx	lr

0800ecac <__sfputs_r>:
 800ecac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecae:	4606      	mov	r6, r0
 800ecb0:	460f      	mov	r7, r1
 800ecb2:	4614      	mov	r4, r2
 800ecb4:	18d5      	adds	r5, r2, r3
 800ecb6:	42ac      	cmp	r4, r5
 800ecb8:	d101      	bne.n	800ecbe <__sfputs_r+0x12>
 800ecba:	2000      	movs	r0, #0
 800ecbc:	e007      	b.n	800ecce <__sfputs_r+0x22>
 800ecbe:	463a      	mov	r2, r7
 800ecc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	f7ff ffda 	bl	800ec7e <__sfputc_r>
 800ecca:	1c43      	adds	r3, r0, #1
 800eccc:	d1f3      	bne.n	800ecb6 <__sfputs_r+0xa>
 800ecce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ecd0 <_vfiprintf_r>:
 800ecd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecd4:	460d      	mov	r5, r1
 800ecd6:	b09d      	sub	sp, #116	@ 0x74
 800ecd8:	4614      	mov	r4, r2
 800ecda:	4698      	mov	r8, r3
 800ecdc:	4606      	mov	r6, r0
 800ecde:	b118      	cbz	r0, 800ece8 <_vfiprintf_r+0x18>
 800ece0:	6a03      	ldr	r3, [r0, #32]
 800ece2:	b90b      	cbnz	r3, 800ece8 <_vfiprintf_r+0x18>
 800ece4:	f7fe f8ee 	bl	800cec4 <__sinit>
 800ece8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ecea:	07d9      	lsls	r1, r3, #31
 800ecec:	d405      	bmi.n	800ecfa <_vfiprintf_r+0x2a>
 800ecee:	89ab      	ldrh	r3, [r5, #12]
 800ecf0:	059a      	lsls	r2, r3, #22
 800ecf2:	d402      	bmi.n	800ecfa <_vfiprintf_r+0x2a>
 800ecf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ecf6:	f7fe f9fc 	bl	800d0f2 <__retarget_lock_acquire_recursive>
 800ecfa:	89ab      	ldrh	r3, [r5, #12]
 800ecfc:	071b      	lsls	r3, r3, #28
 800ecfe:	d501      	bpl.n	800ed04 <_vfiprintf_r+0x34>
 800ed00:	692b      	ldr	r3, [r5, #16]
 800ed02:	b99b      	cbnz	r3, 800ed2c <_vfiprintf_r+0x5c>
 800ed04:	4629      	mov	r1, r5
 800ed06:	4630      	mov	r0, r6
 800ed08:	f000 f938 	bl	800ef7c <__swsetup_r>
 800ed0c:	b170      	cbz	r0, 800ed2c <_vfiprintf_r+0x5c>
 800ed0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed10:	07dc      	lsls	r4, r3, #31
 800ed12:	d504      	bpl.n	800ed1e <_vfiprintf_r+0x4e>
 800ed14:	f04f 30ff 	mov.w	r0, #4294967295
 800ed18:	b01d      	add	sp, #116	@ 0x74
 800ed1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed1e:	89ab      	ldrh	r3, [r5, #12]
 800ed20:	0598      	lsls	r0, r3, #22
 800ed22:	d4f7      	bmi.n	800ed14 <_vfiprintf_r+0x44>
 800ed24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed26:	f7fe f9e5 	bl	800d0f4 <__retarget_lock_release_recursive>
 800ed2a:	e7f3      	b.n	800ed14 <_vfiprintf_r+0x44>
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed32:	f04f 0901 	mov.w	r9, #1
 800ed36:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800eeec <_vfiprintf_r+0x21c>
 800ed3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed3c:	2320      	movs	r3, #32
 800ed3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ed42:	2330      	movs	r3, #48	@ 0x30
 800ed44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ed48:	4623      	mov	r3, r4
 800ed4a:	469a      	mov	sl, r3
 800ed4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed50:	b10a      	cbz	r2, 800ed56 <_vfiprintf_r+0x86>
 800ed52:	2a25      	cmp	r2, #37	@ 0x25
 800ed54:	d1f9      	bne.n	800ed4a <_vfiprintf_r+0x7a>
 800ed56:	ebba 0b04 	subs.w	fp, sl, r4
 800ed5a:	d00b      	beq.n	800ed74 <_vfiprintf_r+0xa4>
 800ed5c:	465b      	mov	r3, fp
 800ed5e:	4622      	mov	r2, r4
 800ed60:	4629      	mov	r1, r5
 800ed62:	4630      	mov	r0, r6
 800ed64:	f7ff ffa2 	bl	800ecac <__sfputs_r>
 800ed68:	3001      	adds	r0, #1
 800ed6a:	f000 80a7 	beq.w	800eebc <_vfiprintf_r+0x1ec>
 800ed6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed70:	445a      	add	r2, fp
 800ed72:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed74:	f89a 3000 	ldrb.w	r3, [sl]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	f000 809f 	beq.w	800eebc <_vfiprintf_r+0x1ec>
 800ed7e:	2300      	movs	r3, #0
 800ed80:	f04f 32ff 	mov.w	r2, #4294967295
 800ed84:	f10a 0a01 	add.w	sl, sl, #1
 800ed88:	9304      	str	r3, [sp, #16]
 800ed8a:	9307      	str	r3, [sp, #28]
 800ed8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ed90:	931a      	str	r3, [sp, #104]	@ 0x68
 800ed92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed96:	4654      	mov	r4, sl
 800ed98:	2205      	movs	r2, #5
 800ed9a:	4854      	ldr	r0, [pc, #336]	@ (800eeec <_vfiprintf_r+0x21c>)
 800ed9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eda0:	f7fe f9a9 	bl	800d0f6 <memchr>
 800eda4:	9a04      	ldr	r2, [sp, #16]
 800eda6:	b9d8      	cbnz	r0, 800ede0 <_vfiprintf_r+0x110>
 800eda8:	06d1      	lsls	r1, r2, #27
 800edaa:	bf44      	itt	mi
 800edac:	2320      	movmi	r3, #32
 800edae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edb2:	0713      	lsls	r3, r2, #28
 800edb4:	bf44      	itt	mi
 800edb6:	232b      	movmi	r3, #43	@ 0x2b
 800edb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edbc:	f89a 3000 	ldrb.w	r3, [sl]
 800edc0:	2b2a      	cmp	r3, #42	@ 0x2a
 800edc2:	d015      	beq.n	800edf0 <_vfiprintf_r+0x120>
 800edc4:	9a07      	ldr	r2, [sp, #28]
 800edc6:	4654      	mov	r4, sl
 800edc8:	2000      	movs	r0, #0
 800edca:	f04f 0c0a 	mov.w	ip, #10
 800edce:	4621      	mov	r1, r4
 800edd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edd4:	3b30      	subs	r3, #48	@ 0x30
 800edd6:	2b09      	cmp	r3, #9
 800edd8:	d94b      	bls.n	800ee72 <_vfiprintf_r+0x1a2>
 800edda:	b1b0      	cbz	r0, 800ee0a <_vfiprintf_r+0x13a>
 800eddc:	9207      	str	r2, [sp, #28]
 800edde:	e014      	b.n	800ee0a <_vfiprintf_r+0x13a>
 800ede0:	eba0 0308 	sub.w	r3, r0, r8
 800ede4:	46a2      	mov	sl, r4
 800ede6:	fa09 f303 	lsl.w	r3, r9, r3
 800edea:	4313      	orrs	r3, r2
 800edec:	9304      	str	r3, [sp, #16]
 800edee:	e7d2      	b.n	800ed96 <_vfiprintf_r+0xc6>
 800edf0:	9b03      	ldr	r3, [sp, #12]
 800edf2:	1d19      	adds	r1, r3, #4
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	9103      	str	r1, [sp, #12]
 800edfa:	bfbb      	ittet	lt
 800edfc:	425b      	neglt	r3, r3
 800edfe:	f042 0202 	orrlt.w	r2, r2, #2
 800ee02:	9307      	strge	r3, [sp, #28]
 800ee04:	9307      	strlt	r3, [sp, #28]
 800ee06:	bfb8      	it	lt
 800ee08:	9204      	strlt	r2, [sp, #16]
 800ee0a:	7823      	ldrb	r3, [r4, #0]
 800ee0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ee0e:	d10a      	bne.n	800ee26 <_vfiprintf_r+0x156>
 800ee10:	7863      	ldrb	r3, [r4, #1]
 800ee12:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee14:	d132      	bne.n	800ee7c <_vfiprintf_r+0x1ac>
 800ee16:	9b03      	ldr	r3, [sp, #12]
 800ee18:	3402      	adds	r4, #2
 800ee1a:	1d1a      	adds	r2, r3, #4
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ee22:	9203      	str	r2, [sp, #12]
 800ee24:	9305      	str	r3, [sp, #20]
 800ee26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eefc <_vfiprintf_r+0x22c>
 800ee2a:	2203      	movs	r2, #3
 800ee2c:	7821      	ldrb	r1, [r4, #0]
 800ee2e:	4650      	mov	r0, sl
 800ee30:	f7fe f961 	bl	800d0f6 <memchr>
 800ee34:	b138      	cbz	r0, 800ee46 <_vfiprintf_r+0x176>
 800ee36:	eba0 000a 	sub.w	r0, r0, sl
 800ee3a:	2240      	movs	r2, #64	@ 0x40
 800ee3c:	9b04      	ldr	r3, [sp, #16]
 800ee3e:	3401      	adds	r4, #1
 800ee40:	4082      	lsls	r2, r0
 800ee42:	4313      	orrs	r3, r2
 800ee44:	9304      	str	r3, [sp, #16]
 800ee46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee4a:	2206      	movs	r2, #6
 800ee4c:	4828      	ldr	r0, [pc, #160]	@ (800eef0 <_vfiprintf_r+0x220>)
 800ee4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ee52:	f7fe f950 	bl	800d0f6 <memchr>
 800ee56:	2800      	cmp	r0, #0
 800ee58:	d03f      	beq.n	800eeda <_vfiprintf_r+0x20a>
 800ee5a:	4b26      	ldr	r3, [pc, #152]	@ (800eef4 <_vfiprintf_r+0x224>)
 800ee5c:	bb1b      	cbnz	r3, 800eea6 <_vfiprintf_r+0x1d6>
 800ee5e:	9b03      	ldr	r3, [sp, #12]
 800ee60:	3307      	adds	r3, #7
 800ee62:	f023 0307 	bic.w	r3, r3, #7
 800ee66:	3308      	adds	r3, #8
 800ee68:	9303      	str	r3, [sp, #12]
 800ee6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee6c:	443b      	add	r3, r7
 800ee6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee70:	e76a      	b.n	800ed48 <_vfiprintf_r+0x78>
 800ee72:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee76:	460c      	mov	r4, r1
 800ee78:	2001      	movs	r0, #1
 800ee7a:	e7a8      	b.n	800edce <_vfiprintf_r+0xfe>
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	3401      	adds	r4, #1
 800ee80:	f04f 0c0a 	mov.w	ip, #10
 800ee84:	4619      	mov	r1, r3
 800ee86:	9305      	str	r3, [sp, #20]
 800ee88:	4620      	mov	r0, r4
 800ee8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee8e:	3a30      	subs	r2, #48	@ 0x30
 800ee90:	2a09      	cmp	r2, #9
 800ee92:	d903      	bls.n	800ee9c <_vfiprintf_r+0x1cc>
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d0c6      	beq.n	800ee26 <_vfiprintf_r+0x156>
 800ee98:	9105      	str	r1, [sp, #20]
 800ee9a:	e7c4      	b.n	800ee26 <_vfiprintf_r+0x156>
 800ee9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800eea0:	4604      	mov	r4, r0
 800eea2:	2301      	movs	r3, #1
 800eea4:	e7f0      	b.n	800ee88 <_vfiprintf_r+0x1b8>
 800eea6:	ab03      	add	r3, sp, #12
 800eea8:	462a      	mov	r2, r5
 800eeaa:	a904      	add	r1, sp, #16
 800eeac:	4630      	mov	r0, r6
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	4b11      	ldr	r3, [pc, #68]	@ (800eef8 <_vfiprintf_r+0x228>)
 800eeb2:	f7fd fbbf 	bl	800c634 <_printf_float>
 800eeb6:	4607      	mov	r7, r0
 800eeb8:	1c78      	adds	r0, r7, #1
 800eeba:	d1d6      	bne.n	800ee6a <_vfiprintf_r+0x19a>
 800eebc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eebe:	07d9      	lsls	r1, r3, #31
 800eec0:	d405      	bmi.n	800eece <_vfiprintf_r+0x1fe>
 800eec2:	89ab      	ldrh	r3, [r5, #12]
 800eec4:	059a      	lsls	r2, r3, #22
 800eec6:	d402      	bmi.n	800eece <_vfiprintf_r+0x1fe>
 800eec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eeca:	f7fe f913 	bl	800d0f4 <__retarget_lock_release_recursive>
 800eece:	89ab      	ldrh	r3, [r5, #12]
 800eed0:	065b      	lsls	r3, r3, #25
 800eed2:	f53f af1f 	bmi.w	800ed14 <_vfiprintf_r+0x44>
 800eed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eed8:	e71e      	b.n	800ed18 <_vfiprintf_r+0x48>
 800eeda:	ab03      	add	r3, sp, #12
 800eedc:	462a      	mov	r2, r5
 800eede:	a904      	add	r1, sp, #16
 800eee0:	4630      	mov	r0, r6
 800eee2:	9300      	str	r3, [sp, #0]
 800eee4:	4b04      	ldr	r3, [pc, #16]	@ (800eef8 <_vfiprintf_r+0x228>)
 800eee6:	f7fd fe41 	bl	800cb6c <_printf_i>
 800eeea:	e7e4      	b.n	800eeb6 <_vfiprintf_r+0x1e6>
 800eeec:	080107d8 	.word	0x080107d8
 800eef0:	080107e2 	.word	0x080107e2
 800eef4:	0800c635 	.word	0x0800c635
 800eef8:	0800ecad 	.word	0x0800ecad
 800eefc:	080107de 	.word	0x080107de

0800ef00 <__swbuf_r>:
 800ef00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef02:	460e      	mov	r6, r1
 800ef04:	4614      	mov	r4, r2
 800ef06:	4605      	mov	r5, r0
 800ef08:	b118      	cbz	r0, 800ef12 <__swbuf_r+0x12>
 800ef0a:	6a03      	ldr	r3, [r0, #32]
 800ef0c:	b90b      	cbnz	r3, 800ef12 <__swbuf_r+0x12>
 800ef0e:	f7fd ffd9 	bl	800cec4 <__sinit>
 800ef12:	69a3      	ldr	r3, [r4, #24]
 800ef14:	60a3      	str	r3, [r4, #8]
 800ef16:	89a3      	ldrh	r3, [r4, #12]
 800ef18:	071a      	lsls	r2, r3, #28
 800ef1a:	d501      	bpl.n	800ef20 <__swbuf_r+0x20>
 800ef1c:	6923      	ldr	r3, [r4, #16]
 800ef1e:	b943      	cbnz	r3, 800ef32 <__swbuf_r+0x32>
 800ef20:	4621      	mov	r1, r4
 800ef22:	4628      	mov	r0, r5
 800ef24:	f000 f82a 	bl	800ef7c <__swsetup_r>
 800ef28:	b118      	cbz	r0, 800ef32 <__swbuf_r+0x32>
 800ef2a:	f04f 37ff 	mov.w	r7, #4294967295
 800ef2e:	4638      	mov	r0, r7
 800ef30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef32:	6823      	ldr	r3, [r4, #0]
 800ef34:	b2f6      	uxtb	r6, r6
 800ef36:	6922      	ldr	r2, [r4, #16]
 800ef38:	4637      	mov	r7, r6
 800ef3a:	1a98      	subs	r0, r3, r2
 800ef3c:	6963      	ldr	r3, [r4, #20]
 800ef3e:	4283      	cmp	r3, r0
 800ef40:	dc05      	bgt.n	800ef4e <__swbuf_r+0x4e>
 800ef42:	4621      	mov	r1, r4
 800ef44:	4628      	mov	r0, r5
 800ef46:	f7ff fda7 	bl	800ea98 <_fflush_r>
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	d1ed      	bne.n	800ef2a <__swbuf_r+0x2a>
 800ef4e:	68a3      	ldr	r3, [r4, #8]
 800ef50:	3b01      	subs	r3, #1
 800ef52:	60a3      	str	r3, [r4, #8]
 800ef54:	6823      	ldr	r3, [r4, #0]
 800ef56:	1c5a      	adds	r2, r3, #1
 800ef58:	6022      	str	r2, [r4, #0]
 800ef5a:	701e      	strb	r6, [r3, #0]
 800ef5c:	1c43      	adds	r3, r0, #1
 800ef5e:	6962      	ldr	r2, [r4, #20]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d004      	beq.n	800ef6e <__swbuf_r+0x6e>
 800ef64:	89a3      	ldrh	r3, [r4, #12]
 800ef66:	07db      	lsls	r3, r3, #31
 800ef68:	d5e1      	bpl.n	800ef2e <__swbuf_r+0x2e>
 800ef6a:	2e0a      	cmp	r6, #10
 800ef6c:	d1df      	bne.n	800ef2e <__swbuf_r+0x2e>
 800ef6e:	4621      	mov	r1, r4
 800ef70:	4628      	mov	r0, r5
 800ef72:	f7ff fd91 	bl	800ea98 <_fflush_r>
 800ef76:	2800      	cmp	r0, #0
 800ef78:	d0d9      	beq.n	800ef2e <__swbuf_r+0x2e>
 800ef7a:	e7d6      	b.n	800ef2a <__swbuf_r+0x2a>

0800ef7c <__swsetup_r>:
 800ef7c:	b538      	push	{r3, r4, r5, lr}
 800ef7e:	4b29      	ldr	r3, [pc, #164]	@ (800f024 <__swsetup_r+0xa8>)
 800ef80:	4605      	mov	r5, r0
 800ef82:	460c      	mov	r4, r1
 800ef84:	6818      	ldr	r0, [r3, #0]
 800ef86:	b118      	cbz	r0, 800ef90 <__swsetup_r+0x14>
 800ef88:	6a03      	ldr	r3, [r0, #32]
 800ef8a:	b90b      	cbnz	r3, 800ef90 <__swsetup_r+0x14>
 800ef8c:	f7fd ff9a 	bl	800cec4 <__sinit>
 800ef90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef94:	0719      	lsls	r1, r3, #28
 800ef96:	d422      	bmi.n	800efde <__swsetup_r+0x62>
 800ef98:	06da      	lsls	r2, r3, #27
 800ef9a:	d407      	bmi.n	800efac <__swsetup_r+0x30>
 800ef9c:	2209      	movs	r2, #9
 800ef9e:	602a      	str	r2, [r5, #0]
 800efa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efa4:	f04f 30ff 	mov.w	r0, #4294967295
 800efa8:	81a3      	strh	r3, [r4, #12]
 800efaa:	e033      	b.n	800f014 <__swsetup_r+0x98>
 800efac:	0758      	lsls	r0, r3, #29
 800efae:	d512      	bpl.n	800efd6 <__swsetup_r+0x5a>
 800efb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800efb2:	b141      	cbz	r1, 800efc6 <__swsetup_r+0x4a>
 800efb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800efb8:	4299      	cmp	r1, r3
 800efba:	d002      	beq.n	800efc2 <__swsetup_r+0x46>
 800efbc:	4628      	mov	r0, r5
 800efbe:	f7fe ff07 	bl	800ddd0 <_free_r>
 800efc2:	2300      	movs	r3, #0
 800efc4:	6363      	str	r3, [r4, #52]	@ 0x34
 800efc6:	89a3      	ldrh	r3, [r4, #12]
 800efc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800efcc:	81a3      	strh	r3, [r4, #12]
 800efce:	2300      	movs	r3, #0
 800efd0:	6063      	str	r3, [r4, #4]
 800efd2:	6923      	ldr	r3, [r4, #16]
 800efd4:	6023      	str	r3, [r4, #0]
 800efd6:	89a3      	ldrh	r3, [r4, #12]
 800efd8:	f043 0308 	orr.w	r3, r3, #8
 800efdc:	81a3      	strh	r3, [r4, #12]
 800efde:	6923      	ldr	r3, [r4, #16]
 800efe0:	b94b      	cbnz	r3, 800eff6 <__swsetup_r+0x7a>
 800efe2:	89a3      	ldrh	r3, [r4, #12]
 800efe4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800efe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800efec:	d003      	beq.n	800eff6 <__swsetup_r+0x7a>
 800efee:	4621      	mov	r1, r4
 800eff0:	4628      	mov	r0, r5
 800eff2:	f000 f882 	bl	800f0fa <__smakebuf_r>
 800eff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800effa:	f013 0201 	ands.w	r2, r3, #1
 800effe:	d00a      	beq.n	800f016 <__swsetup_r+0x9a>
 800f000:	2200      	movs	r2, #0
 800f002:	60a2      	str	r2, [r4, #8]
 800f004:	6962      	ldr	r2, [r4, #20]
 800f006:	4252      	negs	r2, r2
 800f008:	61a2      	str	r2, [r4, #24]
 800f00a:	6922      	ldr	r2, [r4, #16]
 800f00c:	b942      	cbnz	r2, 800f020 <__swsetup_r+0xa4>
 800f00e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f012:	d1c5      	bne.n	800efa0 <__swsetup_r+0x24>
 800f014:	bd38      	pop	{r3, r4, r5, pc}
 800f016:	0799      	lsls	r1, r3, #30
 800f018:	bf58      	it	pl
 800f01a:	6962      	ldrpl	r2, [r4, #20]
 800f01c:	60a2      	str	r2, [r4, #8]
 800f01e:	e7f4      	b.n	800f00a <__swsetup_r+0x8e>
 800f020:	2000      	movs	r0, #0
 800f022:	e7f7      	b.n	800f014 <__swsetup_r+0x98>
 800f024:	2000001c 	.word	0x2000001c

0800f028 <_raise_r>:
 800f028:	291f      	cmp	r1, #31
 800f02a:	b538      	push	{r3, r4, r5, lr}
 800f02c:	4605      	mov	r5, r0
 800f02e:	460c      	mov	r4, r1
 800f030:	d904      	bls.n	800f03c <_raise_r+0x14>
 800f032:	2316      	movs	r3, #22
 800f034:	6003      	str	r3, [r0, #0]
 800f036:	f04f 30ff 	mov.w	r0, #4294967295
 800f03a:	bd38      	pop	{r3, r4, r5, pc}
 800f03c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f03e:	b112      	cbz	r2, 800f046 <_raise_r+0x1e>
 800f040:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f044:	b94b      	cbnz	r3, 800f05a <_raise_r+0x32>
 800f046:	4628      	mov	r0, r5
 800f048:	f000 f830 	bl	800f0ac <_getpid_r>
 800f04c:	4622      	mov	r2, r4
 800f04e:	4601      	mov	r1, r0
 800f050:	4628      	mov	r0, r5
 800f052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f056:	f000 b817 	b.w	800f088 <_kill_r>
 800f05a:	2b01      	cmp	r3, #1
 800f05c:	d00a      	beq.n	800f074 <_raise_r+0x4c>
 800f05e:	1c59      	adds	r1, r3, #1
 800f060:	d103      	bne.n	800f06a <_raise_r+0x42>
 800f062:	2316      	movs	r3, #22
 800f064:	6003      	str	r3, [r0, #0]
 800f066:	2001      	movs	r0, #1
 800f068:	e7e7      	b.n	800f03a <_raise_r+0x12>
 800f06a:	2100      	movs	r1, #0
 800f06c:	4620      	mov	r0, r4
 800f06e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f072:	4798      	blx	r3
 800f074:	2000      	movs	r0, #0
 800f076:	e7e0      	b.n	800f03a <_raise_r+0x12>

0800f078 <raise>:
 800f078:	4b02      	ldr	r3, [pc, #8]	@ (800f084 <raise+0xc>)
 800f07a:	4601      	mov	r1, r0
 800f07c:	6818      	ldr	r0, [r3, #0]
 800f07e:	f7ff bfd3 	b.w	800f028 <_raise_r>
 800f082:	bf00      	nop
 800f084:	2000001c 	.word	0x2000001c

0800f088 <_kill_r>:
 800f088:	b538      	push	{r3, r4, r5, lr}
 800f08a:	2300      	movs	r3, #0
 800f08c:	4d06      	ldr	r5, [pc, #24]	@ (800f0a8 <_kill_r+0x20>)
 800f08e:	4604      	mov	r4, r0
 800f090:	4608      	mov	r0, r1
 800f092:	4611      	mov	r1, r2
 800f094:	602b      	str	r3, [r5, #0]
 800f096:	f7f4 fe03 	bl	8003ca0 <_kill>
 800f09a:	1c43      	adds	r3, r0, #1
 800f09c:	d102      	bne.n	800f0a4 <_kill_r+0x1c>
 800f09e:	682b      	ldr	r3, [r5, #0]
 800f0a0:	b103      	cbz	r3, 800f0a4 <_kill_r+0x1c>
 800f0a2:	6023      	str	r3, [r4, #0]
 800f0a4:	bd38      	pop	{r3, r4, r5, pc}
 800f0a6:	bf00      	nop
 800f0a8:	20003ef0 	.word	0x20003ef0

0800f0ac <_getpid_r>:
 800f0ac:	f7f4 bdf0 	b.w	8003c90 <_getpid>

0800f0b0 <__swhatbuf_r>:
 800f0b0:	b570      	push	{r4, r5, r6, lr}
 800f0b2:	460c      	mov	r4, r1
 800f0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0b8:	b096      	sub	sp, #88	@ 0x58
 800f0ba:	4615      	mov	r5, r2
 800f0bc:	2900      	cmp	r1, #0
 800f0be:	461e      	mov	r6, r3
 800f0c0:	da0c      	bge.n	800f0dc <__swhatbuf_r+0x2c>
 800f0c2:	89a3      	ldrh	r3, [r4, #12]
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f0ca:	bf14      	ite	ne
 800f0cc:	2340      	movne	r3, #64	@ 0x40
 800f0ce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f0d2:	2000      	movs	r0, #0
 800f0d4:	6031      	str	r1, [r6, #0]
 800f0d6:	602b      	str	r3, [r5, #0]
 800f0d8:	b016      	add	sp, #88	@ 0x58
 800f0da:	bd70      	pop	{r4, r5, r6, pc}
 800f0dc:	466a      	mov	r2, sp
 800f0de:	f000 f849 	bl	800f174 <_fstat_r>
 800f0e2:	2800      	cmp	r0, #0
 800f0e4:	dbed      	blt.n	800f0c2 <__swhatbuf_r+0x12>
 800f0e6:	9901      	ldr	r1, [sp, #4]
 800f0e8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f0ec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f0f0:	4259      	negs	r1, r3
 800f0f2:	4159      	adcs	r1, r3
 800f0f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f0f8:	e7eb      	b.n	800f0d2 <__swhatbuf_r+0x22>

0800f0fa <__smakebuf_r>:
 800f0fa:	898b      	ldrh	r3, [r1, #12]
 800f0fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0fe:	079d      	lsls	r5, r3, #30
 800f100:	4606      	mov	r6, r0
 800f102:	460c      	mov	r4, r1
 800f104:	d507      	bpl.n	800f116 <__smakebuf_r+0x1c>
 800f106:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f10a:	6023      	str	r3, [r4, #0]
 800f10c:	6123      	str	r3, [r4, #16]
 800f10e:	2301      	movs	r3, #1
 800f110:	6163      	str	r3, [r4, #20]
 800f112:	b003      	add	sp, #12
 800f114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f116:	ab01      	add	r3, sp, #4
 800f118:	466a      	mov	r2, sp
 800f11a:	f7ff ffc9 	bl	800f0b0 <__swhatbuf_r>
 800f11e:	9f00      	ldr	r7, [sp, #0]
 800f120:	4605      	mov	r5, r0
 800f122:	4630      	mov	r0, r6
 800f124:	4639      	mov	r1, r7
 800f126:	f7fe fec7 	bl	800deb8 <_malloc_r>
 800f12a:	b948      	cbnz	r0, 800f140 <__smakebuf_r+0x46>
 800f12c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f130:	059a      	lsls	r2, r3, #22
 800f132:	d4ee      	bmi.n	800f112 <__smakebuf_r+0x18>
 800f134:	f023 0303 	bic.w	r3, r3, #3
 800f138:	f043 0302 	orr.w	r3, r3, #2
 800f13c:	81a3      	strh	r3, [r4, #12]
 800f13e:	e7e2      	b.n	800f106 <__smakebuf_r+0xc>
 800f140:	89a3      	ldrh	r3, [r4, #12]
 800f142:	6020      	str	r0, [r4, #0]
 800f144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f148:	81a3      	strh	r3, [r4, #12]
 800f14a:	9b01      	ldr	r3, [sp, #4]
 800f14c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f150:	b15b      	cbz	r3, 800f16a <__smakebuf_r+0x70>
 800f152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f156:	4630      	mov	r0, r6
 800f158:	f000 f81e 	bl	800f198 <_isatty_r>
 800f15c:	b128      	cbz	r0, 800f16a <__smakebuf_r+0x70>
 800f15e:	89a3      	ldrh	r3, [r4, #12]
 800f160:	f023 0303 	bic.w	r3, r3, #3
 800f164:	f043 0301 	orr.w	r3, r3, #1
 800f168:	81a3      	strh	r3, [r4, #12]
 800f16a:	89a3      	ldrh	r3, [r4, #12]
 800f16c:	431d      	orrs	r5, r3
 800f16e:	81a5      	strh	r5, [r4, #12]
 800f170:	e7cf      	b.n	800f112 <__smakebuf_r+0x18>
	...

0800f174 <_fstat_r>:
 800f174:	b538      	push	{r3, r4, r5, lr}
 800f176:	2300      	movs	r3, #0
 800f178:	4d06      	ldr	r5, [pc, #24]	@ (800f194 <_fstat_r+0x20>)
 800f17a:	4604      	mov	r4, r0
 800f17c:	4608      	mov	r0, r1
 800f17e:	4611      	mov	r1, r2
 800f180:	602b      	str	r3, [r5, #0]
 800f182:	f7f4 fded 	bl	8003d60 <_fstat>
 800f186:	1c43      	adds	r3, r0, #1
 800f188:	d102      	bne.n	800f190 <_fstat_r+0x1c>
 800f18a:	682b      	ldr	r3, [r5, #0]
 800f18c:	b103      	cbz	r3, 800f190 <_fstat_r+0x1c>
 800f18e:	6023      	str	r3, [r4, #0]
 800f190:	bd38      	pop	{r3, r4, r5, pc}
 800f192:	bf00      	nop
 800f194:	20003ef0 	.word	0x20003ef0

0800f198 <_isatty_r>:
 800f198:	b538      	push	{r3, r4, r5, lr}
 800f19a:	2300      	movs	r3, #0
 800f19c:	4d05      	ldr	r5, [pc, #20]	@ (800f1b4 <_isatty_r+0x1c>)
 800f19e:	4604      	mov	r4, r0
 800f1a0:	4608      	mov	r0, r1
 800f1a2:	602b      	str	r3, [r5, #0]
 800f1a4:	f7f4 fdec 	bl	8003d80 <_isatty>
 800f1a8:	1c43      	adds	r3, r0, #1
 800f1aa:	d102      	bne.n	800f1b2 <_isatty_r+0x1a>
 800f1ac:	682b      	ldr	r3, [r5, #0]
 800f1ae:	b103      	cbz	r3, 800f1b2 <_isatty_r+0x1a>
 800f1b0:	6023      	str	r3, [r4, #0]
 800f1b2:	bd38      	pop	{r3, r4, r5, pc}
 800f1b4:	20003ef0 	.word	0x20003ef0

0800f1b8 <ceil>:
 800f1b8:	ec51 0b10 	vmov	r0, r1, d0
 800f1bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800f1c8:	460c      	mov	r4, r1
 800f1ca:	4605      	mov	r5, r0
 800f1cc:	4680      	mov	r8, r0
 800f1ce:	2e13      	cmp	r6, #19
 800f1d0:	dc2f      	bgt.n	800f232 <ceil+0x7a>
 800f1d2:	2e00      	cmp	r6, #0
 800f1d4:	da11      	bge.n	800f1fa <ceil+0x42>
 800f1d6:	a332      	add	r3, pc, #200	@ (adr r3, 800f2a0 <ceil+0xe8>)
 800f1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1dc:	f7f1 f86a 	bl	80002b4 <__adddf3>
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f7f1 fcac 	bl	8000b40 <__aeabi_dcmpgt>
 800f1e8:	b120      	cbz	r0, 800f1f4 <ceil+0x3c>
 800f1ea:	2c00      	cmp	r4, #0
 800f1ec:	db50      	blt.n	800f290 <ceil+0xd8>
 800f1ee:	4325      	orrs	r5, r4
 800f1f0:	d152      	bne.n	800f298 <ceil+0xe0>
 800f1f2:	462c      	mov	r4, r5
 800f1f4:	4621      	mov	r1, r4
 800f1f6:	4628      	mov	r0, r5
 800f1f8:	e024      	b.n	800f244 <ceil+0x8c>
 800f1fa:	4f2b      	ldr	r7, [pc, #172]	@ (800f2a8 <ceil+0xf0>)
 800f1fc:	4137      	asrs	r7, r6
 800f1fe:	ea01 0307 	and.w	r3, r1, r7
 800f202:	4303      	orrs	r3, r0
 800f204:	d01e      	beq.n	800f244 <ceil+0x8c>
 800f206:	a326      	add	r3, pc, #152	@ (adr r3, 800f2a0 <ceil+0xe8>)
 800f208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20c:	f7f1 f852 	bl	80002b4 <__adddf3>
 800f210:	2200      	movs	r2, #0
 800f212:	2300      	movs	r3, #0
 800f214:	f7f1 fc94 	bl	8000b40 <__aeabi_dcmpgt>
 800f218:	2800      	cmp	r0, #0
 800f21a:	d0eb      	beq.n	800f1f4 <ceil+0x3c>
 800f21c:	2c00      	cmp	r4, #0
 800f21e:	f04f 0500 	mov.w	r5, #0
 800f222:	bfc2      	ittt	gt
 800f224:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 800f228:	4133      	asrgt	r3, r6
 800f22a:	18e4      	addgt	r4, r4, r3
 800f22c:	ea24 0407 	bic.w	r4, r4, r7
 800f230:	e7e0      	b.n	800f1f4 <ceil+0x3c>
 800f232:	2e33      	cmp	r6, #51	@ 0x33
 800f234:	dd0a      	ble.n	800f24c <ceil+0x94>
 800f236:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800f23a:	d103      	bne.n	800f244 <ceil+0x8c>
 800f23c:	4602      	mov	r2, r0
 800f23e:	460b      	mov	r3, r1
 800f240:	f7f1 f838 	bl	80002b4 <__adddf3>
 800f244:	ec41 0b10 	vmov	d0, r0, r1
 800f248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f24c:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800f250:	f04f 37ff 	mov.w	r7, #4294967295
 800f254:	40df      	lsrs	r7, r3
 800f256:	4238      	tst	r0, r7
 800f258:	d0f4      	beq.n	800f244 <ceil+0x8c>
 800f25a:	a311      	add	r3, pc, #68	@ (adr r3, 800f2a0 <ceil+0xe8>)
 800f25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f260:	f7f1 f828 	bl	80002b4 <__adddf3>
 800f264:	2200      	movs	r2, #0
 800f266:	2300      	movs	r3, #0
 800f268:	f7f1 fc6a 	bl	8000b40 <__aeabi_dcmpgt>
 800f26c:	2800      	cmp	r0, #0
 800f26e:	d0c1      	beq.n	800f1f4 <ceil+0x3c>
 800f270:	2c00      	cmp	r4, #0
 800f272:	dd0a      	ble.n	800f28a <ceil+0xd2>
 800f274:	2e14      	cmp	r6, #20
 800f276:	d101      	bne.n	800f27c <ceil+0xc4>
 800f278:	3401      	adds	r4, #1
 800f27a:	e006      	b.n	800f28a <ceil+0xd2>
 800f27c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800f280:	2301      	movs	r3, #1
 800f282:	40b3      	lsls	r3, r6
 800f284:	441d      	add	r5, r3
 800f286:	45a8      	cmp	r8, r5
 800f288:	d8f6      	bhi.n	800f278 <ceil+0xc0>
 800f28a:	ea25 0507 	bic.w	r5, r5, r7
 800f28e:	e7b1      	b.n	800f1f4 <ceil+0x3c>
 800f290:	2500      	movs	r5, #0
 800f292:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800f296:	e7ad      	b.n	800f1f4 <ceil+0x3c>
 800f298:	2500      	movs	r5, #0
 800f29a:	4c04      	ldr	r4, [pc, #16]	@ (800f2ac <ceil+0xf4>)
 800f29c:	e7aa      	b.n	800f1f4 <ceil+0x3c>
 800f29e:	bf00      	nop
 800f2a0:	8800759c 	.word	0x8800759c
 800f2a4:	7e37e43c 	.word	0x7e37e43c
 800f2a8:	000fffff 	.word	0x000fffff
 800f2ac:	3ff00000 	.word	0x3ff00000

0800f2b0 <floor>:
 800f2b0:	ec51 0b10 	vmov	r0, r1, d0
 800f2b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2bc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800f2c0:	460c      	mov	r4, r1
 800f2c2:	4605      	mov	r5, r0
 800f2c4:	4680      	mov	r8, r0
 800f2c6:	2e13      	cmp	r6, #19
 800f2c8:	dc35      	bgt.n	800f336 <floor+0x86>
 800f2ca:	2e00      	cmp	r6, #0
 800f2cc:	da17      	bge.n	800f2fe <floor+0x4e>
 800f2ce:	a334      	add	r3, pc, #208	@ (adr r3, 800f3a0 <floor+0xf0>)
 800f2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d4:	f7f0 ffee 	bl	80002b4 <__adddf3>
 800f2d8:	2200      	movs	r2, #0
 800f2da:	2300      	movs	r3, #0
 800f2dc:	f7f1 fc30 	bl	8000b40 <__aeabi_dcmpgt>
 800f2e0:	b150      	cbz	r0, 800f2f8 <floor+0x48>
 800f2e2:	2c00      	cmp	r4, #0
 800f2e4:	da56      	bge.n	800f394 <floor+0xe4>
 800f2e6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800f2ea:	432c      	orrs	r4, r5
 800f2ec:	2500      	movs	r5, #0
 800f2ee:	42ac      	cmp	r4, r5
 800f2f0:	4c2d      	ldr	r4, [pc, #180]	@ (800f3a8 <floor+0xf8>)
 800f2f2:	bf08      	it	eq
 800f2f4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800f2f8:	4621      	mov	r1, r4
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	e024      	b.n	800f348 <floor+0x98>
 800f2fe:	4f2b      	ldr	r7, [pc, #172]	@ (800f3ac <floor+0xfc>)
 800f300:	4137      	asrs	r7, r6
 800f302:	ea01 0307 	and.w	r3, r1, r7
 800f306:	4303      	orrs	r3, r0
 800f308:	d01e      	beq.n	800f348 <floor+0x98>
 800f30a:	a325      	add	r3, pc, #148	@ (adr r3, 800f3a0 <floor+0xf0>)
 800f30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f310:	f7f0 ffd0 	bl	80002b4 <__adddf3>
 800f314:	2200      	movs	r2, #0
 800f316:	2300      	movs	r3, #0
 800f318:	f7f1 fc12 	bl	8000b40 <__aeabi_dcmpgt>
 800f31c:	2800      	cmp	r0, #0
 800f31e:	d0eb      	beq.n	800f2f8 <floor+0x48>
 800f320:	2c00      	cmp	r4, #0
 800f322:	f04f 0500 	mov.w	r5, #0
 800f326:	bfbe      	ittt	lt
 800f328:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800f32c:	4133      	asrlt	r3, r6
 800f32e:	18e4      	addlt	r4, r4, r3
 800f330:	ea24 0407 	bic.w	r4, r4, r7
 800f334:	e7e0      	b.n	800f2f8 <floor+0x48>
 800f336:	2e33      	cmp	r6, #51	@ 0x33
 800f338:	dd0a      	ble.n	800f350 <floor+0xa0>
 800f33a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800f33e:	d103      	bne.n	800f348 <floor+0x98>
 800f340:	4602      	mov	r2, r0
 800f342:	460b      	mov	r3, r1
 800f344:	f7f0 ffb6 	bl	80002b4 <__adddf3>
 800f348:	ec41 0b10 	vmov	d0, r0, r1
 800f34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f350:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800f354:	f04f 37ff 	mov.w	r7, #4294967295
 800f358:	40df      	lsrs	r7, r3
 800f35a:	4207      	tst	r7, r0
 800f35c:	d0f4      	beq.n	800f348 <floor+0x98>
 800f35e:	a310      	add	r3, pc, #64	@ (adr r3, 800f3a0 <floor+0xf0>)
 800f360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f364:	f7f0 ffa6 	bl	80002b4 <__adddf3>
 800f368:	2200      	movs	r2, #0
 800f36a:	2300      	movs	r3, #0
 800f36c:	f7f1 fbe8 	bl	8000b40 <__aeabi_dcmpgt>
 800f370:	2800      	cmp	r0, #0
 800f372:	d0c1      	beq.n	800f2f8 <floor+0x48>
 800f374:	2c00      	cmp	r4, #0
 800f376:	da0a      	bge.n	800f38e <floor+0xde>
 800f378:	2e14      	cmp	r6, #20
 800f37a:	d101      	bne.n	800f380 <floor+0xd0>
 800f37c:	3401      	adds	r4, #1
 800f37e:	e006      	b.n	800f38e <floor+0xde>
 800f380:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800f384:	2301      	movs	r3, #1
 800f386:	40b3      	lsls	r3, r6
 800f388:	441d      	add	r5, r3
 800f38a:	4545      	cmp	r5, r8
 800f38c:	d3f6      	bcc.n	800f37c <floor+0xcc>
 800f38e:	ea25 0507 	bic.w	r5, r5, r7
 800f392:	e7b1      	b.n	800f2f8 <floor+0x48>
 800f394:	2500      	movs	r5, #0
 800f396:	462c      	mov	r4, r5
 800f398:	e7ae      	b.n	800f2f8 <floor+0x48>
 800f39a:	bf00      	nop
 800f39c:	f3af 8000 	nop.w
 800f3a0:	8800759c 	.word	0x8800759c
 800f3a4:	7e37e43c 	.word	0x7e37e43c
 800f3a8:	bff00000 	.word	0xbff00000
 800f3ac:	000fffff 	.word	0x000fffff

0800f3b0 <roundf>:
 800f3b0:	feb8 0a40 	vrinta.f32	s0, s0
 800f3b4:	4770      	bx	lr
	...

0800f3b8 <_init>:
 800f3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ba:	bf00      	nop
 800f3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3be:	bc08      	pop	{r3}
 800f3c0:	469e      	mov	lr, r3
 800f3c2:	4770      	bx	lr

0800f3c4 <_fini>:
 800f3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c6:	bf00      	nop
 800f3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ca:	bc08      	pop	{r3}
 800f3cc:	469e      	mov	lr, r3
 800f3ce:	4770      	bx	lr
