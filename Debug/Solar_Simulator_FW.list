
Solar_Simulator_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2c0  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001578  0800f518  0800f518  00010518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a90  08010a90  000121d8  2**0
                  CONTENTS
  4 .ARM          00000008  08010a90  08010a90  00011a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a98  08010a98  000121d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a98  08010a98  00011a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010a9c  08010a9c  00011a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08010aa0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d2c  200001d8  08010c78  000121d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003f04  08010c78  00012f04  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023416  00000000  00000000  0001220e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aed  00000000  00000000  00035624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  00039118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000253a0  00000000  00000000  0003ae20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00023618  00000000  00000000  000601c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ec531  00000000  00000000  000837d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0016fd09  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000016a7  00000000  00000000  0016fd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000091f8  00000000  00000000  001713f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0017a5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200001d8 	.word	0x200001d8
 8000274:	00000000 	.word	0x00000000
 8000278:	0800f500 	.word	0x0800f500

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200001dc 	.word	0x200001dc
 8000294:	0800f500 	.word	0x0800f500

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b97e 	b.w	8000fc4 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f806 	bl	8000ce0 <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__udivmoddi4>:
 8000ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ce4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000ce6:	460c      	mov	r4, r1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d14d      	bne.n	8000d88 <__udivmoddi4+0xa8>
 8000cec:	428a      	cmp	r2, r1
 8000cee:	460f      	mov	r7, r1
 8000cf0:	4684      	mov	ip, r0
 8000cf2:	4696      	mov	lr, r2
 8000cf4:	fab2 f382 	clz	r3, r2
 8000cf8:	d960      	bls.n	8000dbc <__udivmoddi4+0xdc>
 8000cfa:	b14b      	cbz	r3, 8000d10 <__udivmoddi4+0x30>
 8000cfc:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d00:	f1c3 0220 	rsb	r2, r3, #32
 8000d04:	409f      	lsls	r7, r3
 8000d06:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d0e:	4317      	orrs	r7, r2
 8000d10:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d14:	fa1f f48e 	uxth.w	r4, lr
 8000d18:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d1c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d20:	fb06 7711 	mls	r7, r6, r1, r7
 8000d24:	fb01 f004 	mul.w	r0, r1, r4
 8000d28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x62>
 8000d30:	eb1e 0202 	adds.w	r2, lr, r2
 8000d34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x60>
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	f200 812d 	bhi.w	8000f9a <__udivmoddi4+0x2ba>
 8000d40:	4639      	mov	r1, r7
 8000d42:	1a12      	subs	r2, r2, r0
 8000d44:	fa1f fc8c 	uxth.w	ip, ip
 8000d48:	fbb2 f0f6 	udiv	r0, r2, r6
 8000d4c:	fb06 2210 	mls	r2, r6, r0, r2
 8000d50:	fb00 f404 	mul.w	r4, r0, r4
 8000d54:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d58:	4564      	cmp	r4, ip
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x8e>
 8000d5c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x8c>
 8000d66:	4564      	cmp	r4, ip
 8000d68:	f200 811a 	bhi.w	8000fa0 <__udivmoddi4+0x2c0>
 8000d6c:	4610      	mov	r0, r2
 8000d6e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d72:	ebac 0c04 	sub.w	ip, ip, r4
 8000d76:	2100      	movs	r1, #0
 8000d78:	b125      	cbz	r5, 8000d84 <__udivmoddi4+0xa4>
 8000d7a:	fa2c f303 	lsr.w	r3, ip, r3
 8000d7e:	2200      	movs	r2, #0
 8000d80:	e9c5 3200 	strd	r3, r2, [r5]
 8000d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d905      	bls.n	8000d98 <__udivmoddi4+0xb8>
 8000d8c:	b10d      	cbz	r5, 8000d92 <__udivmoddi4+0xb2>
 8000d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d92:	2100      	movs	r1, #0
 8000d94:	4608      	mov	r0, r1
 8000d96:	e7f5      	b.n	8000d84 <__udivmoddi4+0xa4>
 8000d98:	fab3 f183 	clz	r1, r3
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	d14d      	bne.n	8000e3c <__udivmoddi4+0x15c>
 8000da0:	42a3      	cmp	r3, r4
 8000da2:	f0c0 80f2 	bcc.w	8000f8a <__udivmoddi4+0x2aa>
 8000da6:	4290      	cmp	r0, r2
 8000da8:	f080 80ef 	bcs.w	8000f8a <__udivmoddi4+0x2aa>
 8000dac:	4606      	mov	r6, r0
 8000dae:	4623      	mov	r3, r4
 8000db0:	4608      	mov	r0, r1
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e6      	beq.n	8000d84 <__udivmoddi4+0xa4>
 8000db6:	e9c5 6300 	strd	r6, r3, [r5]
 8000dba:	e7e3      	b.n	8000d84 <__udivmoddi4+0xa4>
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f040 80a2 	bne.w	8000f06 <__udivmoddi4+0x226>
 8000dc2:	1a8a      	subs	r2, r1, r2
 8000dc4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000dc8:	fa1f f68e 	uxth.w	r6, lr
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fbb2 f4f7 	udiv	r4, r2, r7
 8000dd2:	fb07 2014 	mls	r0, r7, r4, r2
 8000dd6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000dda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dde:	fb06 f004 	mul.w	r0, r6, r4
 8000de2:	4290      	cmp	r0, r2
 8000de4:	d90f      	bls.n	8000e06 <__udivmoddi4+0x126>
 8000de6:	eb1e 0202 	adds.w	r2, lr, r2
 8000dea:	f104 38ff 	add.w	r8, r4, #4294967295
 8000dee:	bf2c      	ite	cs
 8000df0:	f04f 0901 	movcs.w	r9, #1
 8000df4:	f04f 0900 	movcc.w	r9, #0
 8000df8:	4290      	cmp	r0, r2
 8000dfa:	d903      	bls.n	8000e04 <__udivmoddi4+0x124>
 8000dfc:	f1b9 0f00 	cmp.w	r9, #0
 8000e00:	f000 80c8 	beq.w	8000f94 <__udivmoddi4+0x2b4>
 8000e04:	4644      	mov	r4, r8
 8000e06:	1a12      	subs	r2, r2, r0
 8000e08:	fa1f fc8c 	uxth.w	ip, ip
 8000e0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e10:	fb07 2210 	mls	r2, r7, r0, r2
 8000e14:	fb00 f606 	mul.w	r6, r0, r6
 8000e18:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e1c:	4566      	cmp	r6, ip
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x152>
 8000e20:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e28:	d202      	bcs.n	8000e30 <__udivmoddi4+0x150>
 8000e2a:	4566      	cmp	r6, ip
 8000e2c:	f200 80bb 	bhi.w	8000fa6 <__udivmoddi4+0x2c6>
 8000e30:	4610      	mov	r0, r2
 8000e32:	ebac 0c06 	sub.w	ip, ip, r6
 8000e36:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e3a:	e79d      	b.n	8000d78 <__udivmoddi4+0x98>
 8000e3c:	f1c1 0620 	rsb	r6, r1, #32
 8000e40:	408b      	lsls	r3, r1
 8000e42:	fa04 fe01 	lsl.w	lr, r4, r1
 8000e46:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4a:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e4e:	40f4      	lsrs	r4, r6
 8000e50:	408a      	lsls	r2, r1
 8000e52:	431f      	orrs	r7, r3
 8000e54:	ea4e 030c 	orr.w	r3, lr, ip
 8000e58:	fa00 fe01 	lsl.w	lr, r0, r1
 8000e5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e60:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e64:	fa1f fc87 	uxth.w	ip, r7
 8000e68:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6c:	fb08 4410 	mls	r4, r8, r0, r4
 8000e70:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e74:	fb00 f90c 	mul.w	r9, r0, ip
 8000e78:	45a1      	cmp	r9, r4
 8000e7a:	d90e      	bls.n	8000e9a <__udivmoddi4+0x1ba>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e82:	bf2c      	ite	cs
 8000e84:	f04f 0b01 	movcs.w	fp, #1
 8000e88:	f04f 0b00 	movcc.w	fp, #0
 8000e8c:	45a1      	cmp	r9, r4
 8000e8e:	d903      	bls.n	8000e98 <__udivmoddi4+0x1b8>
 8000e90:	f1bb 0f00 	cmp.w	fp, #0
 8000e94:	f000 8093 	beq.w	8000fbe <__udivmoddi4+0x2de>
 8000e98:	4650      	mov	r0, sl
 8000e9a:	eba4 0409 	sub.w	r4, r4, r9
 8000e9e:	fa1f f983 	uxth.w	r9, r3
 8000ea2:	fbb4 f3f8 	udiv	r3, r4, r8
 8000ea6:	fb08 4413 	mls	r4, r8, r3, r4
 8000eaa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d906      	bls.n	8000ec4 <__udivmoddi4+0x1e4>
 8000eb6:	193c      	adds	r4, r7, r4
 8000eb8:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ebc:	d201      	bcs.n	8000ec2 <__udivmoddi4+0x1e2>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d87a      	bhi.n	8000fb8 <__udivmoddi4+0x2d8>
 8000ec2:	4643      	mov	r3, r8
 8000ec4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ec8:	eba4 040c 	sub.w	r4, r4, ip
 8000ecc:	fba0 9802 	umull	r9, r8, r0, r2
 8000ed0:	4544      	cmp	r4, r8
 8000ed2:	46cc      	mov	ip, r9
 8000ed4:	4643      	mov	r3, r8
 8000ed6:	d302      	bcc.n	8000ede <__udivmoddi4+0x1fe>
 8000ed8:	d106      	bne.n	8000ee8 <__udivmoddi4+0x208>
 8000eda:	45ce      	cmp	lr, r9
 8000edc:	d204      	bcs.n	8000ee8 <__udivmoddi4+0x208>
 8000ede:	3801      	subs	r0, #1
 8000ee0:	ebb9 0c02 	subs.w	ip, r9, r2
 8000ee4:	eb68 0307 	sbc.w	r3, r8, r7
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x222>
 8000eea:	ebbe 020c 	subs.w	r2, lr, ip
 8000eee:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef2:	fa04 f606 	lsl.w	r6, r4, r6
 8000ef6:	fa22 f301 	lsr.w	r3, r2, r1
 8000efa:	40cc      	lsrs	r4, r1
 8000efc:	431e      	orrs	r6, r3
 8000efe:	e9c5 6400 	strd	r6, r4, [r5]
 8000f02:	2100      	movs	r1, #0
 8000f04:	e73e      	b.n	8000d84 <__udivmoddi4+0xa4>
 8000f06:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f0a:	f1c3 0120 	rsb	r1, r3, #32
 8000f0e:	fa04 f203 	lsl.w	r2, r4, r3
 8000f12:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f16:	40cc      	lsrs	r4, r1
 8000f18:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f1c:	fa20 f101 	lsr.w	r1, r0, r1
 8000f20:	fa1f f68e 	uxth.w	r6, lr
 8000f24:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	fb07 4410 	mls	r4, r7, r0, r4
 8000f2e:	0c11      	lsrs	r1, r2, #16
 8000f30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000f34:	fb00 f406 	mul.w	r4, r0, r6
 8000f38:	428c      	cmp	r4, r1
 8000f3a:	d90e      	bls.n	8000f5a <__udivmoddi4+0x27a>
 8000f3c:	eb1e 0101 	adds.w	r1, lr, r1
 8000f40:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f44:	bf2c      	ite	cs
 8000f46:	f04f 0901 	movcs.w	r9, #1
 8000f4a:	f04f 0900 	movcc.w	r9, #0
 8000f4e:	428c      	cmp	r4, r1
 8000f50:	d902      	bls.n	8000f58 <__udivmoddi4+0x278>
 8000f52:	f1b9 0f00 	cmp.w	r9, #0
 8000f56:	d02c      	beq.n	8000fb2 <__udivmoddi4+0x2d2>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	1b09      	subs	r1, r1, r4
 8000f5c:	b292      	uxth	r2, r2
 8000f5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f62:	fb07 1114 	mls	r1, r7, r4, r1
 8000f66:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f6a:	fb04 f106 	mul.w	r1, r4, r6
 8000f6e:	4291      	cmp	r1, r2
 8000f70:	d907      	bls.n	8000f82 <__udivmoddi4+0x2a2>
 8000f72:	eb1e 0202 	adds.w	r2, lr, r2
 8000f76:	f104 38ff 	add.w	r8, r4, #4294967295
 8000f7a:	d201      	bcs.n	8000f80 <__udivmoddi4+0x2a0>
 8000f7c:	4291      	cmp	r1, r2
 8000f7e:	d815      	bhi.n	8000fac <__udivmoddi4+0x2cc>
 8000f80:	4644      	mov	r4, r8
 8000f82:	1a52      	subs	r2, r2, r1
 8000f84:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000f88:	e721      	b.n	8000dce <__udivmoddi4+0xee>
 8000f8a:	1a86      	subs	r6, r0, r2
 8000f8c:	eb64 0303 	sbc.w	r3, r4, r3
 8000f90:	2001      	movs	r0, #1
 8000f92:	e70e      	b.n	8000db2 <__udivmoddi4+0xd2>
 8000f94:	3c02      	subs	r4, #2
 8000f96:	4472      	add	r2, lr
 8000f98:	e735      	b.n	8000e06 <__udivmoddi4+0x126>
 8000f9a:	3902      	subs	r1, #2
 8000f9c:	4472      	add	r2, lr
 8000f9e:	e6d0      	b.n	8000d42 <__udivmoddi4+0x62>
 8000fa0:	44f4      	add	ip, lr
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	e6e3      	b.n	8000d6e <__udivmoddi4+0x8e>
 8000fa6:	44f4      	add	ip, lr
 8000fa8:	3802      	subs	r0, #2
 8000faa:	e742      	b.n	8000e32 <__udivmoddi4+0x152>
 8000fac:	3c02      	subs	r4, #2
 8000fae:	4472      	add	r2, lr
 8000fb0:	e7e7      	b.n	8000f82 <__udivmoddi4+0x2a2>
 8000fb2:	3802      	subs	r0, #2
 8000fb4:	4471      	add	r1, lr
 8000fb6:	e7d0      	b.n	8000f5a <__udivmoddi4+0x27a>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	443c      	add	r4, r7
 8000fbc:	e782      	b.n	8000ec4 <__udivmoddi4+0x1e4>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	e76a      	b.n	8000e9a <__udivmoddi4+0x1ba>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <SPI_Transmit>:
    	return 0xFFFF;
    }
}

void SPI_Transmit(uint8_t *txData, uint16_t len)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
    // Enable the chip select (CS) line if using software NSS
    //HAL_GPIO_WritePin(GPIOB, DISP_CS_Pin, GPIO_PIN_RESET);
    // Transmit data
    //uint16_t length = 1;//strlen((char *)txData);

    if (HAL_SPI_Transmit(&hspi2, txData, len, HAL_MAX_DELAY) != HAL_OK)
 8000fd4:	887a      	ldrh	r2, [r7, #2]
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <SPI_Transmit+0x2c>)
 8000fde:	f009 fa0d 	bl	800a3fc <HAL_SPI_Transmit>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SPI_Transmit+0x24>
    {
        // Handle error
        Error_Handler();
 8000fe8:	f002 fbb4 	bl	8003754 <Error_Handler>
    }

    // Disable the chip select (CS) line
    //HAL_GPIO_WritePin(GPIOB, DISP_CS_Pin, GPIO_PIN_SET);
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200002e8 	.word	0x200002e8

08000ff8 <writeBuffer>:
  uint8_t tog_cmd[] = {Vcom, 0x00};
  SPI_Transmit(&tog_cmd, 2); //write line command (bits reversed)
  HAL_GPIO_WritePin(GPIOB, DISP_CS_Pin, GPIO_PIN_RESET);
}

void writeBuffer(){
 8000ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ffc:	b087      	sub	sp, #28
 8000ffe:	af00      	add	r7, sp, #0
  uint16_t i, currentline;
  HAL_GPIO_WritePin(GPIOB, DISP_CS_Pin, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001006:	4844      	ldr	r0, [pc, #272]	@ (8001118 <writeBuffer+0x120>)
 8001008:	f005 ff56 	bl	8006eb8 <HAL_GPIO_WritePin>

  uint8_t temp = (0x01 | Vcom);
 800100c:	4b43      	ldr	r3, [pc, #268]	@ (800111c <writeBuffer+0x124>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	b2db      	uxtb	r3, r3
 8001016:	717b      	strb	r3, [r7, #5]
  SPI_Transmit(&temp, 1);
 8001018:	1d7b      	adds	r3, r7, #5
 800101a:	2101      	movs	r1, #1
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ffd3 	bl	8000fc8 <SPI_Transmit>
  Vcom = Vcom ? 0x00 : 0x02;
 8001022:	4b3e      	ldr	r3, [pc, #248]	@ (800111c <writeBuffer+0x124>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <writeBuffer+0x36>
 800102a:	2200      	movs	r2, #0
 800102c:	e000      	b.n	8001030 <writeBuffer+0x38>
 800102e:	2202      	movs	r2, #2
 8001030:	4b3a      	ldr	r3, [pc, #232]	@ (800111c <writeBuffer+0x124>)
 8001032:	701a      	strb	r2, [r3, #0]

  uint8_t bytes_per_line = 50;
 8001034:	2332      	movs	r3, #50	@ 0x32
 8001036:	757b      	strb	r3, [r7, #21]
  uint16_t totalbytes = 12000;
 8001038:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 800103c:	827b      	strh	r3, [r7, #18]

  for (i = 0; i < totalbytes; i += bytes_per_line) {
 800103e:	2300      	movs	r3, #0
 8001040:	82fb      	strh	r3, [r7, #22]
 8001042:	e053      	b.n	80010ec <writeBuffer+0xf4>
 8001044:	466b      	mov	r3, sp
 8001046:	461e      	mov	r6, r3
    uint8_t line[bytes_per_line + 2];
 8001048:	7d7b      	ldrb	r3, [r7, #21]
 800104a:	1c99      	adds	r1, r3, #2
 800104c:	1e4b      	subs	r3, r1, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	460a      	mov	r2, r1
 8001052:	2300      	movs	r3, #0
 8001054:	4614      	mov	r4, r2
 8001056:	461d      	mov	r5, r3
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	00eb      	lsls	r3, r5, #3
 8001062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001066:	00e2      	lsls	r2, r4, #3
 8001068:	460a      	mov	r2, r1
 800106a:	2300      	movs	r3, #0
 800106c:	4690      	mov	r8, r2
 800106e:	4699      	mov	r9, r3
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800107c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001080:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001084:	460b      	mov	r3, r1
 8001086:	3307      	adds	r3, #7
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	ebad 0d03 	sub.w	sp, sp, r3
 8001090:	466b      	mov	r3, sp
 8001092:	3300      	adds	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]

    // Send address byte
    currentline = ((i + 1) / (400 / 8)) + 1;
 8001096:	8afb      	ldrh	r3, [r7, #22]
 8001098:	3301      	adds	r3, #1
 800109a:	4a21      	ldr	r2, [pc, #132]	@ (8001120 <writeBuffer+0x128>)
 800109c:	fb82 1203 	smull	r1, r2, r2, r3
 80010a0:	1112      	asrs	r2, r2, #4
 80010a2:	17db      	asrs	r3, r3, #31
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	3301      	adds	r3, #1
 80010aa:	80fb      	strh	r3, [r7, #6]
    line[0] = currentline;
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	701a      	strb	r2, [r3, #0]
    // copy over this line
    memcpy(line + 1, sharpmem_buffer + i, bytes_per_line);
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	1c58      	adds	r0, r3, #1
 80010b8:	8afb      	ldrh	r3, [r7, #22]
 80010ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001124 <writeBuffer+0x12c>)
 80010bc:	4413      	add	r3, r2
 80010be:	7d7a      	ldrb	r2, [r7, #21]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f00c f8ca 	bl	800d25a <memcpy>
    // Send end of line
    line[bytes_per_line + 1] = 0x00;
 80010c6:	7d7b      	ldrb	r3, [r7, #21]
 80010c8:	3301      	adds	r3, #1
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	2100      	movs	r1, #0
 80010ce:	54d1      	strb	r1, [r2, r3]
    // send it!
    //spidev->transfer(line, bytes_per_line + 2);
    SPI_Transmit(line, bytes_per_line + 2);
 80010d0:	7d7b      	ldrb	r3, [r7, #21]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	3302      	adds	r3, #2
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	4619      	mov	r1, r3
 80010da:	68b8      	ldr	r0, [r7, #8]
 80010dc:	f7ff ff74 	bl	8000fc8 <SPI_Transmit>
 80010e0:	46b5      	mov	sp, r6
  for (i = 0; i < totalbytes; i += bytes_per_line) {
 80010e2:	7d7b      	ldrb	r3, [r7, #21]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	8afb      	ldrh	r3, [r7, #22]
 80010e8:	4413      	add	r3, r2
 80010ea:	82fb      	strh	r3, [r7, #22]
 80010ec:	8afa      	ldrh	r2, [r7, #22]
 80010ee:	8a7b      	ldrh	r3, [r7, #18]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d3a7      	bcc.n	8001044 <writeBuffer+0x4c>
  }
  uint8_t zerob = 0b00000000;
 80010f4:	2300      	movs	r3, #0
 80010f6:	713b      	strb	r3, [r7, #4]
  SPI_Transmit(&zerob, 1);
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2101      	movs	r1, #1
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff63 	bl	8000fc8 <SPI_Transmit>

  HAL_GPIO_WritePin(GPIOB, DISP_CS_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001108:	4803      	ldr	r0, [pc, #12]	@ (8001118 <writeBuffer+0x120>)
 800110a:	f005 fed5 	bl	8006eb8 <HAL_GPIO_WritePin>

}
 800110e:	bf00      	nop
 8001110:	371c      	adds	r7, #28
 8001112:	46bd      	mov	sp, r7
 8001114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001118:	42020400 	.word	0x42020400
 800111c:	200007e2 	.word	0x200007e2
 8001120:	51eb851f 	.word	0x51eb851f
 8001124:	200007e4 	.word	0x200007e4

08001128 <init_buffer>:

void init_buffer(){
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b087      	sub	sp, #28
 800112c:	af04      	add	r7, sp, #16


	  // set all pixels in frame buffer to 1
	  for (i = 0; i < 12000; i++) {
 800112e:	4b60      	ldr	r3, [pc, #384]	@ (80012b0 <init_buffer+0x188>)
 8001130:	2200      	movs	r2, #0
 8001132:	801a      	strh	r2, [r3, #0]
 8001134:	e00d      	b.n	8001152 <init_buffer+0x2a>
		  sharpmem_buffer[i] = 255;
 8001136:	4b5e      	ldr	r3, [pc, #376]	@ (80012b0 <init_buffer+0x188>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	b29b      	uxth	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	4b5d      	ldr	r3, [pc, #372]	@ (80012b4 <init_buffer+0x18c>)
 8001140:	21ff      	movs	r1, #255	@ 0xff
 8001142:	5499      	strb	r1, [r3, r2]
	  for (i = 0; i < 12000; i++) {
 8001144:	4b5a      	ldr	r3, [pc, #360]	@ (80012b0 <init_buffer+0x188>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	b29b      	uxth	r3, r3
 800114a:	3301      	adds	r3, #1
 800114c:	b29a      	uxth	r2, r3
 800114e:	4b58      	ldr	r3, [pc, #352]	@ (80012b0 <init_buffer+0x188>)
 8001150:	801a      	strh	r2, [r3, #0]
 8001152:	4b57      	ldr	r3, [pc, #348]	@ (80012b0 <init_buffer+0x188>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	b29b      	uxth	r3, r3
 8001158:	f642 62df 	movw	r2, #11999	@ 0x2edf
 800115c:	4293      	cmp	r3, r2
 800115e:	d9ea      	bls.n	8001136 <init_buffer+0xe>
	  writeLine(30, 110, 260, 110, 0);

	  writeLine(30, 130, 30, 230, 0);
	  writeLine(30, 230, 260, 230, 0); */

	  writeLine(40, 50, 40, 200, 0);
 8001160:	2300      	movs	r3, #0
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	23c8      	movs	r3, #200	@ 0xc8
 8001166:	2228      	movs	r2, #40	@ 0x28
 8001168:	2132      	movs	r1, #50	@ 0x32
 800116a:	2028      	movs	r0, #40	@ 0x28
 800116c:	f000 fac4 	bl	80016f8 <writeLine>
	  writeLine(40, 200, 325, 200, 0);
 8001170:	2300      	movs	r3, #0
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	23c8      	movs	r3, #200	@ 0xc8
 8001176:	f240 1245 	movw	r2, #325	@ 0x145
 800117a:	21c8      	movs	r1, #200	@ 0xc8
 800117c:	2028      	movs	r0, #40	@ 0x28
 800117e:	f000 fabb 	bl	80016f8 <writeLine>
		  uint16_t y2_mapped =  map(V_sc[i+1]/Z_sc[i+1], 0, .075, 110, 10);

		  writeLine(x1_mapped, y1_mapped, x2_mapped, y2_mapped, 0);
	  }*/

	  for (i = 0; i < 60; i++) {
 8001182:	4b4b      	ldr	r3, [pc, #300]	@ (80012b0 <init_buffer+0x188>)
 8001184:	2200      	movs	r2, #0
 8001186:	801a      	strh	r2, [r3, #0]
 8001188:	e156      	b.n	8001438 <init_buffer+0x310>


			  if(A_buffer_active == 1){
 800118a:	4b4b      	ldr	r3, [pc, #300]	@ (80012b8 <init_buffer+0x190>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b01      	cmp	r3, #1
 8001192:	f040 80ab 	bne.w	80012ec <init_buffer+0x1c4>
				  x1_mapped =  map(V_sc_interp_A[i], 0, 5, 40, 320);
 8001196:	4b46      	ldr	r3, [pc, #280]	@ (80012b0 <init_buffer+0x188>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4a47      	ldr	r2, [pc, #284]	@ (80012bc <init_buffer+0x194>)
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	ed9f 2a46 	vldr	s4, [pc, #280]	@ 80012c0 <init_buffer+0x198>
 80011aa:	eddf 1a46 	vldr	s3, [pc, #280]	@ 80012c4 <init_buffer+0x19c>
 80011ae:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 80011b2:	eddf 0a45 	vldr	s1, [pc, #276]	@ 80012c8 <init_buffer+0x1a0>
 80011b6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ba:	f000 fe2b 	bl	8001e14 <map>
 80011be:	eef0 7a40 	vmov.f32	s15, s0
 80011c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011c6:	ee17 3a90 	vmov	r3, s15
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b3f      	ldr	r3, [pc, #252]	@ (80012cc <init_buffer+0x1a4>)
 80011ce:	801a      	strh	r2, [r3, #0]
				  x2_mapped =  map(V_sc_interp_A[i+1], 0, 5, 40, 320);
 80011d0:	4b37      	ldr	r3, [pc, #220]	@ (80012b0 <init_buffer+0x188>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	3301      	adds	r3, #1
 80011d8:	4a38      	ldr	r2, [pc, #224]	@ (80012bc <init_buffer+0x194>)
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	ed9f 2a37 	vldr	s4, [pc, #220]	@ 80012c0 <init_buffer+0x198>
 80011e6:	eddf 1a37 	vldr	s3, [pc, #220]	@ 80012c4 <init_buffer+0x19c>
 80011ea:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 80011ee:	eddf 0a36 	vldr	s1, [pc, #216]	@ 80012c8 <init_buffer+0x1a0>
 80011f2:	eeb0 0a67 	vmov.f32	s0, s15
 80011f6:	f000 fe0d 	bl	8001e14 <map>
 80011fa:	eef0 7a40 	vmov.f32	s15, s0
 80011fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001202:	ee17 3a90 	vmov	r3, s15
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b31      	ldr	r3, [pc, #196]	@ (80012d0 <init_buffer+0x1a8>)
 800120a:	801a      	strh	r2, [r3, #0]
				  y1_mapped =  map(V_sc_interp_A[i]/Z_sc_interp_A[i], 0, .05, 200, 50);
 800120c:	4b28      	ldr	r3, [pc, #160]	@ (80012b0 <init_buffer+0x188>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	b29b      	uxth	r3, r3
 8001212:	4a2a      	ldr	r2, [pc, #168]	@ (80012bc <init_buffer+0x194>)
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	ed93 7a00 	vldr	s14, [r3]
 800121c:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <init_buffer+0x188>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	b29b      	uxth	r3, r3
 8001222:	4a2c      	ldr	r2, [pc, #176]	@ (80012d4 <init_buffer+0x1ac>)
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	edd3 7a00 	vldr	s15, [r3]
 800122c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001230:	ed9f 2a29 	vldr	s4, [pc, #164]	@ 80012d8 <init_buffer+0x1b0>
 8001234:	eddf 1a29 	vldr	s3, [pc, #164]	@ 80012dc <init_buffer+0x1b4>
 8001238:	ed9f 1a29 	vldr	s2, [pc, #164]	@ 80012e0 <init_buffer+0x1b8>
 800123c:	eddf 0a22 	vldr	s1, [pc, #136]	@ 80012c8 <init_buffer+0x1a0>
 8001240:	eeb0 0a66 	vmov.f32	s0, s13
 8001244:	f000 fde6 	bl	8001e14 <map>
 8001248:	eef0 7a40 	vmov.f32	s15, s0
 800124c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001250:	ee17 3a90 	vmov	r3, s15
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b23      	ldr	r3, [pc, #140]	@ (80012e4 <init_buffer+0x1bc>)
 8001258:	801a      	strh	r2, [r3, #0]
				  y2_mapped =  map(V_sc_interp_A[i+1]/Z_sc_interp_A[i+1], 0, .05, 200, 50);
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <init_buffer+0x188>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	b29b      	uxth	r3, r3
 8001260:	3301      	adds	r3, #1
 8001262:	4a16      	ldr	r2, [pc, #88]	@ (80012bc <init_buffer+0x194>)
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	ed93 7a00 	vldr	s14, [r3]
 800126c:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <init_buffer+0x188>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	b29b      	uxth	r3, r3
 8001272:	3301      	adds	r3, #1
 8001274:	4a17      	ldr	r2, [pc, #92]	@ (80012d4 <init_buffer+0x1ac>)
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	edd3 7a00 	vldr	s15, [r3]
 800127e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001282:	ed9f 2a15 	vldr	s4, [pc, #84]	@ 80012d8 <init_buffer+0x1b0>
 8001286:	eddf 1a15 	vldr	s3, [pc, #84]	@ 80012dc <init_buffer+0x1b4>
 800128a:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 80012e0 <init_buffer+0x1b8>
 800128e:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 80012c8 <init_buffer+0x1a0>
 8001292:	eeb0 0a66 	vmov.f32	s0, s13
 8001296:	f000 fdbd 	bl	8001e14 <map>
 800129a:	eef0 7a40 	vmov.f32	s15, s0
 800129e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a2:	ee17 3a90 	vmov	r3, s15
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <init_buffer+0x1c0>)
 80012aa:	801a      	strh	r2, [r3, #0]
 80012ac:	e0a9      	b.n	8001402 <init_buffer+0x2da>
 80012ae:	bf00      	nop
 80012b0:	200037b8 	.word	0x200037b8
 80012b4:	200007e4 	.word	0x200007e4
 80012b8:	20000000 	.word	0x20000000
 80012bc:	200037bc 	.word	0x200037bc
 80012c0:	43a00000 	.word	0x43a00000
 80012c4:	42200000 	.word	0x42200000
 80012c8:	00000000 	.word	0x00000000
 80012cc:	200037b0 	.word	0x200037b0
 80012d0:	200037b2 	.word	0x200037b2
 80012d4:	200038b8 	.word	0x200038b8
 80012d8:	42480000 	.word	0x42480000
 80012dc:	43480000 	.word	0x43480000
 80012e0:	3d4ccccd 	.word	0x3d4ccccd
 80012e4:	200037b4 	.word	0x200037b4
 80012e8:	200037b6 	.word	0x200037b6
			  }
			  else{
				  x1_mapped =  map(V_sc_interp_B[i], 0, 5, 40, 320);
 80012ec:	4b94      	ldr	r3, [pc, #592]	@ (8001540 <init_buffer+0x418>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4a94      	ldr	r2, [pc, #592]	@ (8001544 <init_buffer+0x41c>)
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ed9f 2a92 	vldr	s4, [pc, #584]	@ 8001548 <init_buffer+0x420>
 8001300:	eddf 1a92 	vldr	s3, [pc, #584]	@ 800154c <init_buffer+0x424>
 8001304:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8001308:	eddf 0a91 	vldr	s1, [pc, #580]	@ 8001550 <init_buffer+0x428>
 800130c:	eeb0 0a67 	vmov.f32	s0, s15
 8001310:	f000 fd80 	bl	8001e14 <map>
 8001314:	eef0 7a40 	vmov.f32	s15, s0
 8001318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800131c:	ee17 3a90 	vmov	r3, s15
 8001320:	b29a      	uxth	r2, r3
 8001322:	4b8c      	ldr	r3, [pc, #560]	@ (8001554 <init_buffer+0x42c>)
 8001324:	801a      	strh	r2, [r3, #0]
				  x2_mapped =  map(V_sc_interp_B[i+1], 0, 5, 40, 320);
 8001326:	4b86      	ldr	r3, [pc, #536]	@ (8001540 <init_buffer+0x418>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	3301      	adds	r3, #1
 800132e:	4a85      	ldr	r2, [pc, #532]	@ (8001544 <init_buffer+0x41c>)
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	edd3 7a00 	vldr	s15, [r3]
 8001338:	ed9f 2a83 	vldr	s4, [pc, #524]	@ 8001548 <init_buffer+0x420>
 800133c:	eddf 1a83 	vldr	s3, [pc, #524]	@ 800154c <init_buffer+0x424>
 8001340:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8001344:	eddf 0a82 	vldr	s1, [pc, #520]	@ 8001550 <init_buffer+0x428>
 8001348:	eeb0 0a67 	vmov.f32	s0, s15
 800134c:	f000 fd62 	bl	8001e14 <map>
 8001350:	eef0 7a40 	vmov.f32	s15, s0
 8001354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001358:	ee17 3a90 	vmov	r3, s15
 800135c:	b29a      	uxth	r2, r3
 800135e:	4b7e      	ldr	r3, [pc, #504]	@ (8001558 <init_buffer+0x430>)
 8001360:	801a      	strh	r2, [r3, #0]
				  y1_mapped =  map(V_sc_interp_B[i]/Z_sc_interp_B[i], 0, .05, 200, 50);
 8001362:	4b77      	ldr	r3, [pc, #476]	@ (8001540 <init_buffer+0x418>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	b29b      	uxth	r3, r3
 8001368:	4a76      	ldr	r2, [pc, #472]	@ (8001544 <init_buffer+0x41c>)
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	ed93 7a00 	vldr	s14, [r3]
 8001372:	4b73      	ldr	r3, [pc, #460]	@ (8001540 <init_buffer+0x418>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	b29b      	uxth	r3, r3
 8001378:	4a78      	ldr	r2, [pc, #480]	@ (800155c <init_buffer+0x434>)
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001386:	ed9f 2a76 	vldr	s4, [pc, #472]	@ 8001560 <init_buffer+0x438>
 800138a:	eddf 1a76 	vldr	s3, [pc, #472]	@ 8001564 <init_buffer+0x43c>
 800138e:	ed9f 1a76 	vldr	s2, [pc, #472]	@ 8001568 <init_buffer+0x440>
 8001392:	eddf 0a6f 	vldr	s1, [pc, #444]	@ 8001550 <init_buffer+0x428>
 8001396:	eeb0 0a66 	vmov.f32	s0, s13
 800139a:	f000 fd3b 	bl	8001e14 <map>
 800139e:	eef0 7a40 	vmov.f32	s15, s0
 80013a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013a6:	ee17 3a90 	vmov	r3, s15
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	4b6f      	ldr	r3, [pc, #444]	@ (800156c <init_buffer+0x444>)
 80013ae:	801a      	strh	r2, [r3, #0]
				  y2_mapped =  map(V_sc_interp_B[i+1]/Z_sc_interp_B[i+1], 0, .05, 200, 50);
 80013b0:	4b63      	ldr	r3, [pc, #396]	@ (8001540 <init_buffer+0x418>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	3301      	adds	r3, #1
 80013b8:	4a62      	ldr	r2, [pc, #392]	@ (8001544 <init_buffer+0x41c>)
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	ed93 7a00 	vldr	s14, [r3]
 80013c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001540 <init_buffer+0x418>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	3301      	adds	r3, #1
 80013ca:	4a64      	ldr	r2, [pc, #400]	@ (800155c <init_buffer+0x434>)
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013d8:	ed9f 2a61 	vldr	s4, [pc, #388]	@ 8001560 <init_buffer+0x438>
 80013dc:	eddf 1a61 	vldr	s3, [pc, #388]	@ 8001564 <init_buffer+0x43c>
 80013e0:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 8001568 <init_buffer+0x440>
 80013e4:	eddf 0a5a 	vldr	s1, [pc, #360]	@ 8001550 <init_buffer+0x428>
 80013e8:	eeb0 0a66 	vmov.f32	s0, s13
 80013ec:	f000 fd12 	bl	8001e14 <map>
 80013f0:	eef0 7a40 	vmov.f32	s15, s0
 80013f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f8:	ee17 3a90 	vmov	r3, s15
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001570 <init_buffer+0x448>)
 8001400:	801a      	strh	r2, [r3, #0]
			  }
		  writeLine(x1_mapped, y1_mapped, x2_mapped, y2_mapped, 0);
 8001402:	4b54      	ldr	r3, [pc, #336]	@ (8001554 <init_buffer+0x42c>)
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	b29b      	uxth	r3, r3
 8001408:	b218      	sxth	r0, r3
 800140a:	4b58      	ldr	r3, [pc, #352]	@ (800156c <init_buffer+0x444>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	b219      	sxth	r1, r3
 8001412:	4b51      	ldr	r3, [pc, #324]	@ (8001558 <init_buffer+0x430>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	b21a      	sxth	r2, r3
 800141a:	4b55      	ldr	r3, [pc, #340]	@ (8001570 <init_buffer+0x448>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	b29b      	uxth	r3, r3
 8001420:	b21b      	sxth	r3, r3
 8001422:	2400      	movs	r4, #0
 8001424:	9400      	str	r4, [sp, #0]
 8001426:	f000 f967 	bl	80016f8 <writeLine>
	  for (i = 0; i < 60; i++) {
 800142a:	4b45      	ldr	r3, [pc, #276]	@ (8001540 <init_buffer+0x418>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	3301      	adds	r3, #1
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b42      	ldr	r3, [pc, #264]	@ (8001540 <init_buffer+0x418>)
 8001436:	801a      	strh	r2, [r3, #0]
 8001438:	4b41      	ldr	r3, [pc, #260]	@ (8001540 <init_buffer+0x418>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001440:	f67f aea3 	bls.w	800118a <init_buffer+0x62>
	  }

	  drawString(120,210,"Output Voltage [V]", 0, 1, 1, 1);
 8001444:	2301      	movs	r3, #1
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	2301      	movs	r3, #1
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	2301      	movs	r3, #1
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	2300      	movs	r3, #0
 8001452:	4a48      	ldr	r2, [pc, #288]	@ (8001574 <init_buffer+0x44c>)
 8001454:	21d2      	movs	r1, #210	@ 0xd2
 8001456:	2078      	movs	r0, #120	@ 0x78
 8001458:	f000 fc52 	bl	8001d00 <drawString>
	  rotation = 3;
 800145c:	4b46      	ldr	r3, [pc, #280]	@ (8001578 <init_buffer+0x450>)
 800145e:	2203      	movs	r2, #3
 8001460:	701a      	strb	r2, [r3, #0]
	  drawString(60,25,"Output Current [mA]", 0, 1, 1, 1);
 8001462:	2301      	movs	r3, #1
 8001464:	9302      	str	r3, [sp, #8]
 8001466:	2301      	movs	r3, #1
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	2301      	movs	r3, #1
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2300      	movs	r3, #0
 8001470:	4a42      	ldr	r2, [pc, #264]	@ (800157c <init_buffer+0x454>)
 8001472:	2119      	movs	r1, #25
 8001474:	203c      	movs	r0, #60	@ 0x3c
 8001476:	f000 fc43 	bl	8001d00 <drawString>
	  rotation = 0;
 800147a:	4b3f      	ldr	r3, [pc, #252]	@ (8001578 <init_buffer+0x450>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]

	  drawString(25,48,"50", 0, 1, 1, 1);
 8001480:	2301      	movs	r3, #1
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	2301      	movs	r3, #1
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	2301      	movs	r3, #1
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2300      	movs	r3, #0
 800148e:	4a3c      	ldr	r2, [pc, #240]	@ (8001580 <init_buffer+0x458>)
 8001490:	2130      	movs	r1, #48	@ 0x30
 8001492:	2019      	movs	r0, #25
 8001494:	f000 fc34 	bl	8001d00 <drawString>
	  drawString(325,205,"5", 0, 1, 1, 1);
 8001498:	2301      	movs	r3, #1
 800149a:	9302      	str	r3, [sp, #8]
 800149c:	2301      	movs	r3, #1
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	2301      	movs	r3, #1
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2300      	movs	r3, #0
 80014a6:	4a37      	ldr	r2, [pc, #220]	@ (8001584 <init_buffer+0x45c>)
 80014a8:	21cd      	movs	r1, #205	@ 0xcd
 80014aa:	f240 1045 	movw	r0, #325	@ 0x145
 80014ae:	f000 fc27 	bl	8001d00 <drawString>

	  for(uint8_t k=0; k<10; k++){
 80014b2:	2300      	movs	r3, #0
 80014b4:	71fb      	strb	r3, [r7, #7]
 80014b6:	e01a      	b.n	80014ee <init_buffer+0x3c6>
		writeLine(40,185-k*15,45,185-k*15,0);
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	461a      	mov	r2, r3
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	33b9      	adds	r3, #185	@ 0xb9
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	b219      	sxth	r1, r3
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	461a      	mov	r2, r3
 80014d0:	011b      	lsls	r3, r3, #4
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	33b9      	adds	r3, #185	@ 0xb9
 80014d8:	b29b      	uxth	r3, r3
 80014da:	b21b      	sxth	r3, r3
 80014dc:	2200      	movs	r2, #0
 80014de:	9200      	str	r2, [sp, #0]
 80014e0:	222d      	movs	r2, #45	@ 0x2d
 80014e2:	2028      	movs	r0, #40	@ 0x28
 80014e4:	f000 f908 	bl	80016f8 <writeLine>
	  for(uint8_t k=0; k<10; k++){
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	3301      	adds	r3, #1
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b09      	cmp	r3, #9
 80014f2:	d9e1      	bls.n	80014b8 <init_buffer+0x390>
	  }

	  for(uint8_t k=0; k<19; k++){
 80014f4:	2300      	movs	r3, #0
 80014f6:	71bb      	strb	r3, [r7, #6]
 80014f8:	e01a      	b.n	8001530 <init_buffer+0x408>
		writeLine(55+k*15,200,55+k*15,195,0);
 80014fa:	79bb      	ldrb	r3, [r7, #6]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	0112      	lsls	r2, r2, #4
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	b29b      	uxth	r3, r3
 8001506:	3337      	adds	r3, #55	@ 0x37
 8001508:	b29b      	uxth	r3, r3
 800150a:	b218      	sxth	r0, r3
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	b29b      	uxth	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	0112      	lsls	r2, r2, #4
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	b29b      	uxth	r3, r3
 8001518:	3337      	adds	r3, #55	@ 0x37
 800151a:	b29b      	uxth	r3, r3
 800151c:	b21a      	sxth	r2, r3
 800151e:	2300      	movs	r3, #0
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	23c3      	movs	r3, #195	@ 0xc3
 8001524:	21c8      	movs	r1, #200	@ 0xc8
 8001526:	f000 f8e7 	bl	80016f8 <writeLine>
	  for(uint8_t k=0; k<19; k++){
 800152a:	79bb      	ldrb	r3, [r7, #6]
 800152c:	3301      	adds	r3, #1
 800152e:	71bb      	strb	r3, [r7, #6]
 8001530:	79bb      	ldrb	r3, [r7, #6]
 8001532:	2b12      	cmp	r3, #18
 8001534:	d9e1      	bls.n	80014fa <init_buffer+0x3d2>
	  fillRect(100,50,50,50,0);
	  drawChar(25, 25, 'a', 0, 1, 2, 2);
	  drawString(25, 50, "Vout=2.436 V",  0, 1, 1, 1);

*/
}
 8001536:	bf00      	nop
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	200037b8 	.word	0x200037b8
 8001544:	200039b4 	.word	0x200039b4
 8001548:	43a00000 	.word	0x43a00000
 800154c:	42200000 	.word	0x42200000
 8001550:	00000000 	.word	0x00000000
 8001554:	200037b0 	.word	0x200037b0
 8001558:	200037b2 	.word	0x200037b2
 800155c:	20003ab0 	.word	0x20003ab0
 8001560:	42480000 	.word	0x42480000
 8001564:	43480000 	.word	0x43480000
 8001568:	3d4ccccd 	.word	0x3d4ccccd
 800156c:	200037b4 	.word	0x200037b4
 8001570:	200037b6 	.word	0x200037b6
 8001574:	0800f518 	.word	0x0800f518
 8001578:	200036c4 	.word	0x200036c4
 800157c:	0800f52c 	.word	0x0800f52c
 8001580:	0800f540 	.word	0x0800f540
 8001584:	0800f544 	.word	0x0800f544

08001588 <clearDisplay>:

void clearDisplay() {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
  // MLCD write line command 0x80, reversed 0x01
  // MLCD clear memory command 0x20, reversed 0x04
  // MLCD static mode command 0x00
  // MLCD VCOM bit 0x40 , reversed 0x02
  HAL_GPIO_WritePin(GPIOB, DISP_CS_Pin, GPIO_PIN_SET);
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001594:	4811      	ldr	r0, [pc, #68]	@ (80015dc <clearDisplay+0x54>)
 8001596:	f005 fc8f 	bl	8006eb8 <HAL_GPIO_WritePin>
  uint8_t clear_cmd[] = {(0x04 | Vcom), 0};
 800159a:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <clearDisplay+0x58>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	713b      	strb	r3, [r7, #4]
 80015a6:	2300      	movs	r3, #0
 80015a8:	717b      	strb	r3, [r7, #5]
  SPI_Transmit(&clear_cmd, 2);
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2102      	movs	r1, #2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fd0a 	bl	8000fc8 <SPI_Transmit>
  Vcom = Vcom ? 0x00 : 0x02;
 80015b4:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <clearDisplay+0x58>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <clearDisplay+0x38>
 80015bc:	2200      	movs	r2, #0
 80015be:	e000      	b.n	80015c2 <clearDisplay+0x3a>
 80015c0:	2202      	movs	r2, #2
 80015c2:	4b07      	ldr	r3, [pc, #28]	@ (80015e0 <clearDisplay+0x58>)
 80015c4:	701a      	strb	r2, [r3, #0]
  //uint8_t temp = (0x04 | Vcom);
  //SPI_Transmit(&temp);
  //uint8_t zerob = 0b00000000;
  //SPI_Transmit(&zerob);
  HAL_GPIO_WritePin(GPIOB, DISP_CS_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015cc:	4803      	ldr	r0, [pc, #12]	@ (80015dc <clearDisplay+0x54>)
 80015ce:	f005 fc73 	bl	8006eb8 <HAL_GPIO_WritePin>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	42020400 	.word	0x42020400
 80015e0:	200007e2 	.word	0x200007e2

080015e4 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color){
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	80fb      	strh	r3, [r7, #6]
 80015ee:	460b      	mov	r3, r1
 80015f0:	80bb      	strh	r3, [r7, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	807b      	strh	r3, [r7, #2]
	int16_t t;

    switch (rotation) {
 80015f6:	4b3c      	ldr	r3, [pc, #240]	@ (80016e8 <drawPixel+0x104>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d01d      	beq.n	800163a <drawPixel+0x56>
 80015fe:	2b03      	cmp	r3, #3
 8001600:	dc25      	bgt.n	800164e <drawPixel+0x6a>
 8001602:	2b01      	cmp	r3, #1
 8001604:	d002      	beq.n	800160c <drawPixel+0x28>
 8001606:	2b02      	cmp	r3, #2
 8001608:	d00b      	beq.n	8001622 <drawPixel+0x3e>
 800160a:	e020      	b.n	800164e <drawPixel+0x6a>
    case 1:
      t = x;
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	81fb      	strh	r3, [r7, #14]
      x = 400 - 1 - y;
 8001610:	88bb      	ldrh	r3, [r7, #4]
 8001612:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 8001616:	3301      	adds	r3, #1
 8001618:	b29b      	uxth	r3, r3
 800161a:	80fb      	strh	r3, [r7, #6]
      y = t;
 800161c:	89fb      	ldrh	r3, [r7, #14]
 800161e:	80bb      	strh	r3, [r7, #4]
      break;
 8001620:	e015      	b.n	800164e <drawPixel+0x6a>
    case 2:
      x = 400 - 1 - x;
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 8001628:	3301      	adds	r3, #1
 800162a:	b29b      	uxth	r3, r3
 800162c:	80fb      	strh	r3, [r7, #6]
      y = 240 - 1 - y;
 800162e:	88bb      	ldrh	r3, [r7, #4]
 8001630:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001634:	b29b      	uxth	r3, r3
 8001636:	80bb      	strh	r3, [r7, #4]
      break;
 8001638:	e009      	b.n	800164e <drawPixel+0x6a>
    case 3:
      t = x;
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	81fb      	strh	r3, [r7, #14]
      x = y;
 800163e:	88bb      	ldrh	r3, [r7, #4]
 8001640:	80fb      	strh	r3, [r7, #6]
      y = 240 - 1 - t;
 8001642:	89fb      	ldrh	r3, [r7, #14]
 8001644:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001648:	b29b      	uxth	r3, r3
 800164a:	80bb      	strh	r3, [r7, #4]
      break;
 800164c:	bf00      	nop
    }

	if ((x < 0) || (x >= 400) || (y < 0) || (y >= 240))
 800164e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db41      	blt.n	80016da <drawPixel+0xf6>
 8001656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800165a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800165e:	da3c      	bge.n	80016da <drawPixel+0xf6>
 8001660:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	db38      	blt.n	80016da <drawPixel+0xf6>
 8001668:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800166c:	2bef      	cmp	r3, #239	@ 0xef
 800166e:	dc34      	bgt.n	80016da <drawPixel+0xf6>
	    return;

	  if (color) {
 8001670:	887b      	ldrh	r3, [r7, #2]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d018      	beq.n	80016a8 <drawPixel+0xc4>
	    sharpmem_buffer[(y * 400 + x) / 8] |= set[x & 7];
 8001676:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800167a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800167e:	fb03 f202 	mul.w	r2, r3, r2
 8001682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001686:	4413      	add	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	da00      	bge.n	800168e <drawPixel+0xaa>
 800168c:	3307      	adds	r3, #7
 800168e:	10db      	asrs	r3, r3, #3
 8001690:	4a16      	ldr	r2, [pc, #88]	@ (80016ec <drawPixel+0x108>)
 8001692:	5cd1      	ldrb	r1, [r2, r3]
 8001694:	88fa      	ldrh	r2, [r7, #6]
 8001696:	f002 0207 	and.w	r2, r2, #7
 800169a:	4815      	ldr	r0, [pc, #84]	@ (80016f0 <drawPixel+0x10c>)
 800169c:	5c82      	ldrb	r2, [r0, r2]
 800169e:	430a      	orrs	r2, r1
 80016a0:	b2d1      	uxtb	r1, r2
 80016a2:	4a12      	ldr	r2, [pc, #72]	@ (80016ec <drawPixel+0x108>)
 80016a4:	54d1      	strb	r1, [r2, r3]
 80016a6:	e019      	b.n	80016dc <drawPixel+0xf8>
	  } else {
	    sharpmem_buffer[(y * 400 + x) / 8] &= clr[x & 7];
 80016a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016ac:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80016b0:	fb03 f202 	mul.w	r2, r3, r2
 80016b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b8:	4413      	add	r3, r2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	da00      	bge.n	80016c0 <drawPixel+0xdc>
 80016be:	3307      	adds	r3, #7
 80016c0:	10db      	asrs	r3, r3, #3
 80016c2:	4a0a      	ldr	r2, [pc, #40]	@ (80016ec <drawPixel+0x108>)
 80016c4:	5cd1      	ldrb	r1, [r2, r3]
 80016c6:	88fa      	ldrh	r2, [r7, #6]
 80016c8:	f002 0207 	and.w	r2, r2, #7
 80016cc:	4809      	ldr	r0, [pc, #36]	@ (80016f4 <drawPixel+0x110>)
 80016ce:	5c82      	ldrb	r2, [r0, r2]
 80016d0:	400a      	ands	r2, r1
 80016d2:	b2d1      	uxtb	r1, r2
 80016d4:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <drawPixel+0x108>)
 80016d6:	54d1      	strb	r1, [r2, r3]
 80016d8:	e000      	b.n	80016dc <drawPixel+0xf8>
	    return;
 80016da:	bf00      	nop
	  }
}
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	200036c4 	.word	0x200036c4
 80016ec:	200007e4 	.word	0x200007e4
 80016f0:	080106d0 	.word	0x080106d0
 80016f4:	080106d8 	.word	0x080106d8

080016f8 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b089      	sub	sp, #36	@ 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4604      	mov	r4, r0
 8001700:	4608      	mov	r0, r1
 8001702:	4611      	mov	r1, r2
 8001704:	461a      	mov	r2, r3
 8001706:	4623      	mov	r3, r4
 8001708:	80fb      	strh	r3, [r7, #6]
 800170a:	4603      	mov	r3, r0
 800170c:	80bb      	strh	r3, [r7, #4]
 800170e:	460b      	mov	r3, r1
 8001710:	807b      	strh	r3, [r7, #2]
 8001712:	4613      	mov	r3, r2
 8001714:	803b      	strh	r3, [r7, #0]

  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001716:	f9b7 2000 	ldrsh.w	r2, [r7]
 800171a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001724:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001728:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800172c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001730:	1acb      	subs	r3, r1, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	bfb8      	it	lt
 8001736:	425b      	neglt	r3, r3
 8001738:	429a      	cmp	r2, r3
 800173a:	bfcc      	ite	gt
 800173c:	2301      	movgt	r3, #1
 800173e:	2300      	movle	r3, #0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	837b      	strh	r3, [r7, #26]
  if (steep) {
 8001744:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d00b      	beq.n	8001764 <writeLine+0x6c>
    _swap_int16_t(x0, y0);
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	833b      	strh	r3, [r7, #24]
 8001750:	88bb      	ldrh	r3, [r7, #4]
 8001752:	80fb      	strh	r3, [r7, #6]
 8001754:	8b3b      	ldrh	r3, [r7, #24]
 8001756:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8001758:	887b      	ldrh	r3, [r7, #2]
 800175a:	82fb      	strh	r3, [r7, #22]
 800175c:	883b      	ldrh	r3, [r7, #0]
 800175e:	807b      	strh	r3, [r7, #2]
 8001760:	8afb      	ldrh	r3, [r7, #22]
 8001762:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 8001764:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001768:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800176c:	429a      	cmp	r2, r3
 800176e:	dd0b      	ble.n	8001788 <writeLine+0x90>
    _swap_int16_t(x0, x1);
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	82bb      	strh	r3, [r7, #20]
 8001774:	887b      	ldrh	r3, [r7, #2]
 8001776:	80fb      	strh	r3, [r7, #6]
 8001778:	8abb      	ldrh	r3, [r7, #20]
 800177a:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 800177c:	88bb      	ldrh	r3, [r7, #4]
 800177e:	827b      	strh	r3, [r7, #18]
 8001780:	883b      	ldrh	r3, [r7, #0]
 8001782:	80bb      	strh	r3, [r7, #4]
 8001784:	8a7b      	ldrh	r3, [r7, #18]
 8001786:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8001788:	887a      	ldrh	r2, [r7, #2]
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	b29b      	uxth	r3, r3
 8001790:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8001792:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001796:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	bfb8      	it	lt
 80017a0:	425b      	neglt	r3, r3
 80017a2:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 80017a4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017a8:	0fda      	lsrs	r2, r3, #31
 80017aa:	4413      	add	r3, r2
 80017ac:	105b      	asrs	r3, r3, #1
 80017ae:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 80017b0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017b4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	da02      	bge.n	80017c2 <writeLine+0xca>
    ystep = 1;
 80017bc:	2301      	movs	r3, #1
 80017be:	83bb      	strh	r3, [r7, #28]
 80017c0:	e031      	b.n	8001826 <writeLine+0x12e>
  } else {
    ystep = -1;
 80017c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017c6:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0 <= x1; x0++) {
 80017c8:	e02d      	b.n	8001826 <writeLine+0x12e>
    if (steep) {
 80017ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d008      	beq.n	80017e4 <writeLine+0xec>
      drawPixel(y0, x0, color);
 80017d2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80017d4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80017d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff01 	bl	80015e4 <drawPixel>
 80017e2:	e007      	b.n	80017f4 <writeLine+0xfc>
    } else {
      drawPixel(x0, y0, color);
 80017e4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80017e6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fef8 	bl	80015e4 <drawPixel>
    }
    err -= dy;
 80017f4:	8bfa      	ldrh	r2, [r7, #30]
 80017f6:	89fb      	ldrh	r3, [r7, #14]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 80017fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001802:	2b00      	cmp	r3, #0
 8001804:	da09      	bge.n	800181a <writeLine+0x122>
      y0 += ystep;
 8001806:	88ba      	ldrh	r2, [r7, #4]
 8001808:	8bbb      	ldrh	r3, [r7, #28]
 800180a:	4413      	add	r3, r2
 800180c:	b29b      	uxth	r3, r3
 800180e:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8001810:	8bfa      	ldrh	r2, [r7, #30]
 8001812:	8a3b      	ldrh	r3, [r7, #16]
 8001814:	4413      	add	r3, r2
 8001816:	b29b      	uxth	r3, r3
 8001818:	83fb      	strh	r3, [r7, #30]
  for (; x0 <= x1; x0++) {
 800181a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181e:	b29b      	uxth	r3, r3
 8001820:	3301      	adds	r3, #1
 8001822:	b29b      	uxth	r3, r3
 8001824:	80fb      	strh	r3, [r7, #6]
 8001826:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800182a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800182e:	429a      	cmp	r2, r3
 8001830:	ddcb      	ble.n	80017ca <writeLine+0xd2>
    }
  }
}
 8001832:	bf00      	nop
 8001834:	bf00      	nop
 8001836:	3724      	adds	r7, #36	@ 0x24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd90      	pop	{r4, r7, pc}

0800183c <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	4604      	mov	r4, r0
 8001844:	4608      	mov	r0, r1
 8001846:	4611      	mov	r1, r2
 8001848:	461a      	mov	r2, r3
 800184a:	4623      	mov	r3, r4
 800184c:	80fb      	strh	r3, [r7, #6]
 800184e:	4603      	mov	r3, r0
 8001850:	80bb      	strh	r3, [r7, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	807b      	strh	r3, [r7, #2]
 8001856:	4613      	mov	r3, r2
 8001858:	803b      	strh	r3, [r7, #0]

  int16_t f = 1 - r;
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	f1c3 0301 	rsb	r3, r3, #1
 8001860:	b29b      	uxth	r3, r3
 8001862:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8001864:	2301      	movs	r3, #1
 8001866:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8001868:	887b      	ldrh	r3, [r7, #2]
 800186a:	461a      	mov	r2, r3
 800186c:	03d2      	lsls	r2, r2, #15
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	b29b      	uxth	r3, r3
 8001874:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 800187a:	887b      	ldrh	r3, [r7, #2]
 800187c:	81fb      	strh	r3, [r7, #14]

  drawPixel(x0, y0 + r, color);
 800187e:	88ba      	ldrh	r2, [r7, #4]
 8001880:	887b      	ldrh	r3, [r7, #2]
 8001882:	4413      	add	r3, r2
 8001884:	b29b      	uxth	r3, r3
 8001886:	b219      	sxth	r1, r3
 8001888:	883a      	ldrh	r2, [r7, #0]
 800188a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fea8 	bl	80015e4 <drawPixel>
  drawPixel(x0, y0 - r, color);
 8001894:	88ba      	ldrh	r2, [r7, #4]
 8001896:	887b      	ldrh	r3, [r7, #2]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	b29b      	uxth	r3, r3
 800189c:	b219      	sxth	r1, r3
 800189e:	883a      	ldrh	r2, [r7, #0]
 80018a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fe9d 	bl	80015e4 <drawPixel>
  drawPixel(x0 + r, y0, color);
 80018aa:	88fa      	ldrh	r2, [r7, #6]
 80018ac:	887b      	ldrh	r3, [r7, #2]
 80018ae:	4413      	add	r3, r2
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	883a      	ldrh	r2, [r7, #0]
 80018b6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fe92 	bl	80015e4 <drawPixel>
  drawPixel(x0 - r, y0, color);
 80018c0:	88fa      	ldrh	r2, [r7, #6]
 80018c2:	887b      	ldrh	r3, [r7, #2]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	883a      	ldrh	r2, [r7, #0]
 80018cc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fe87 	bl	80015e4 <drawPixel>

  while (x < y) {
 80018d6:	e091      	b.n	80019fc <drawCircle+0x1c0>
    if (f >= 0) {
 80018d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	db0e      	blt.n	80018fe <drawCircle+0xc2>
      y--;
 80018e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 80018ec:	8a7b      	ldrh	r3, [r7, #18]
 80018ee:	3302      	adds	r3, #2
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 80018f4:	8afa      	ldrh	r2, [r7, #22]
 80018f6:	8a7b      	ldrh	r3, [r7, #18]
 80018f8:	4413      	add	r3, r2
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 80018fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001902:	b29b      	uxth	r3, r3
 8001904:	3301      	adds	r3, #1
 8001906:	b29b      	uxth	r3, r3
 8001908:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 800190a:	8abb      	ldrh	r3, [r7, #20]
 800190c:	3302      	adds	r3, #2
 800190e:	b29b      	uxth	r3, r3
 8001910:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8001912:	8afa      	ldrh	r2, [r7, #22]
 8001914:	8abb      	ldrh	r3, [r7, #20]
 8001916:	4413      	add	r3, r2
 8001918:	b29b      	uxth	r3, r3
 800191a:	82fb      	strh	r3, [r7, #22]

    drawPixel(x0 + x, y0 + y, color);
 800191c:	88fa      	ldrh	r2, [r7, #6]
 800191e:	8a3b      	ldrh	r3, [r7, #16]
 8001920:	4413      	add	r3, r2
 8001922:	b29b      	uxth	r3, r3
 8001924:	b218      	sxth	r0, r3
 8001926:	88ba      	ldrh	r2, [r7, #4]
 8001928:	89fb      	ldrh	r3, [r7, #14]
 800192a:	4413      	add	r3, r2
 800192c:	b29b      	uxth	r3, r3
 800192e:	b21b      	sxth	r3, r3
 8001930:	883a      	ldrh	r2, [r7, #0]
 8001932:	4619      	mov	r1, r3
 8001934:	f7ff fe56 	bl	80015e4 <drawPixel>
    drawPixel(x0 - x, y0 + y, color);
 8001938:	88fa      	ldrh	r2, [r7, #6]
 800193a:	8a3b      	ldrh	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	b29b      	uxth	r3, r3
 8001940:	b218      	sxth	r0, r3
 8001942:	88ba      	ldrh	r2, [r7, #4]
 8001944:	89fb      	ldrh	r3, [r7, #14]
 8001946:	4413      	add	r3, r2
 8001948:	b29b      	uxth	r3, r3
 800194a:	b21b      	sxth	r3, r3
 800194c:	883a      	ldrh	r2, [r7, #0]
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff fe48 	bl	80015e4 <drawPixel>
    drawPixel(x0 + x, y0 - y, color);
 8001954:	88fa      	ldrh	r2, [r7, #6]
 8001956:	8a3b      	ldrh	r3, [r7, #16]
 8001958:	4413      	add	r3, r2
 800195a:	b29b      	uxth	r3, r3
 800195c:	b218      	sxth	r0, r3
 800195e:	88ba      	ldrh	r2, [r7, #4]
 8001960:	89fb      	ldrh	r3, [r7, #14]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	b29b      	uxth	r3, r3
 8001966:	b21b      	sxth	r3, r3
 8001968:	883a      	ldrh	r2, [r7, #0]
 800196a:	4619      	mov	r1, r3
 800196c:	f7ff fe3a 	bl	80015e4 <drawPixel>
    drawPixel(x0 - x, y0 - y, color);
 8001970:	88fa      	ldrh	r2, [r7, #6]
 8001972:	8a3b      	ldrh	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	b29b      	uxth	r3, r3
 8001978:	b218      	sxth	r0, r3
 800197a:	88ba      	ldrh	r2, [r7, #4]
 800197c:	89fb      	ldrh	r3, [r7, #14]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	b29b      	uxth	r3, r3
 8001982:	b21b      	sxth	r3, r3
 8001984:	883a      	ldrh	r2, [r7, #0]
 8001986:	4619      	mov	r1, r3
 8001988:	f7ff fe2c 	bl	80015e4 <drawPixel>
    drawPixel(x0 + y, y0 + x, color);
 800198c:	88fa      	ldrh	r2, [r7, #6]
 800198e:	89fb      	ldrh	r3, [r7, #14]
 8001990:	4413      	add	r3, r2
 8001992:	b29b      	uxth	r3, r3
 8001994:	b218      	sxth	r0, r3
 8001996:	88ba      	ldrh	r2, [r7, #4]
 8001998:	8a3b      	ldrh	r3, [r7, #16]
 800199a:	4413      	add	r3, r2
 800199c:	b29b      	uxth	r3, r3
 800199e:	b21b      	sxth	r3, r3
 80019a0:	883a      	ldrh	r2, [r7, #0]
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7ff fe1e 	bl	80015e4 <drawPixel>
    drawPixel(x0 - y, y0 + x, color);
 80019a8:	88fa      	ldrh	r2, [r7, #6]
 80019aa:	89fb      	ldrh	r3, [r7, #14]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	b218      	sxth	r0, r3
 80019b2:	88ba      	ldrh	r2, [r7, #4]
 80019b4:	8a3b      	ldrh	r3, [r7, #16]
 80019b6:	4413      	add	r3, r2
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	883a      	ldrh	r2, [r7, #0]
 80019be:	4619      	mov	r1, r3
 80019c0:	f7ff fe10 	bl	80015e4 <drawPixel>
    drawPixel(x0 + y, y0 - x, color);
 80019c4:	88fa      	ldrh	r2, [r7, #6]
 80019c6:	89fb      	ldrh	r3, [r7, #14]
 80019c8:	4413      	add	r3, r2
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	b218      	sxth	r0, r3
 80019ce:	88ba      	ldrh	r2, [r7, #4]
 80019d0:	8a3b      	ldrh	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	883a      	ldrh	r2, [r7, #0]
 80019da:	4619      	mov	r1, r3
 80019dc:	f7ff fe02 	bl	80015e4 <drawPixel>
    drawPixel(x0 - y, y0 - x, color);
 80019e0:	88fa      	ldrh	r2, [r7, #6]
 80019e2:	89fb      	ldrh	r3, [r7, #14]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	b218      	sxth	r0, r3
 80019ea:	88ba      	ldrh	r2, [r7, #4]
 80019ec:	8a3b      	ldrh	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	883a      	ldrh	r2, [r7, #0]
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff fdf4 	bl	80015e4 <drawPixel>
  while (x < y) {
 80019fc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001a00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f6ff af67 	blt.w	80018d8 <drawCircle+0x9c>
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	bf00      	nop
 8001a0e:	371c      	adds	r7, #28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd90      	pop	{r4, r7, pc}

08001a14 <drawFastVLine>:

  drawFastRawHLine(x, y, w, color);

}

void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af02      	add	r7, sp, #8
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	4608      	mov	r0, r1
 8001a1e:	4611      	mov	r1, r2
 8001a20:	461a      	mov	r2, r3
 8001a22:	4623      	mov	r3, r4
 8001a24:	80fb      	strh	r3, [r7, #6]
 8001a26:	4603      	mov	r3, r0
 8001a28:	80bb      	strh	r3, [r7, #4]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	807b      	strh	r3, [r7, #2]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	803b      	strh	r3, [r7, #0]
  if (y + h > 240) { // Clip bottom
    h = 240 - y;
  }

  drawFastRawVLine(x, y, h, color);*/
  writeLine(x, y, x, y + h - 1, color);
 8001a32:	88ba      	ldrh	r2, [r7, #4]
 8001a34:	887b      	ldrh	r3, [r7, #2]
 8001a36:	4413      	add	r3, r2
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	b21c      	sxth	r4, r3
 8001a40:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001a44:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a48:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001a4c:	883b      	ldrh	r3, [r7, #0]
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	4623      	mov	r3, r4
 8001a52:	f7ff fe51 	bl	80016f8 <writeLine>
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd90      	pop	{r4, r7, pc}

08001a5e <fillRect>:
    	 sharpmem_buffer[i] = color;
    }
  }
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8001a5e:	b590      	push	{r4, r7, lr}
 8001a60:	b085      	sub	sp, #20
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4604      	mov	r4, r0
 8001a66:	4608      	mov	r0, r1
 8001a68:	4611      	mov	r1, r2
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4623      	mov	r3, r4
 8001a6e:	80fb      	strh	r3, [r7, #6]
 8001a70:	4603      	mov	r3, r0
 8001a72:	80bb      	strh	r3, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	807b      	strh	r3, [r7, #2]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	803b      	strh	r3, [r7, #0]
  for (int16_t i = x; i < x + w; i++) {
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	81fb      	strh	r3, [r7, #14]
 8001a80:	e00e      	b.n	8001aa0 <fillRect+0x42>
    drawFastVLine(i, y, h, color);
 8001a82:	8c3b      	ldrh	r3, [r7, #32]
 8001a84:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001a88:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a8c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001a90:	f7ff ffc0 	bl	8001a14 <drawFastVLine>
  for (int16_t i = x; i < x + w; i++) {
 8001a94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	81fb      	strh	r3, [r7, #14]
 8001aa0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001aa4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001aa8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001aac:	440b      	add	r3, r1
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dbe7      	blt.n	8001a82 <fillRect+0x24>
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd90      	pop	{r4, r7, pc}

08001abc <drawChar>:

void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b087      	sub	sp, #28
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	4608      	mov	r0, r1
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4623      	mov	r3, r4
 8001acc:	80fb      	strh	r3, [r7, #6]
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80bb      	strh	r3, [r7, #4]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	70fb      	strb	r3, [r7, #3]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	803b      	strh	r3, [r7, #0]


	if ((x >= 400) ||              // Clip right
 8001ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ade:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001ae2:	f280 8106 	bge.w	8001cf2 <drawChar+0x236>
 8001ae6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001aea:	2bef      	cmp	r3, #239	@ 0xef
 8001aec:	f300 8101 	bgt.w	8001cf2 <drawChar+0x236>
		(y >= 240) ||             // Clip bottom
		((x + 6 * size_x - 1) < 0) || // Clip left
 8001af0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001af4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001af8:	4613      	mov	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	440b      	add	r3, r1
		(y >= 240) ||             // Clip bottom
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f340 80f5 	ble.w	8001cf2 <drawChar+0x236>
		((y + 8 * size_y - 1) < 0))   // Clip top
 8001b08:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b0c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4413      	add	r3, r2
		((x + 6 * size_x - 1) < 0) || // Clip left
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f340 80ec 	ble.w	8001cf2 <drawChar+0x236>
	  return;

	if ((c >= 176))
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	2baf      	cmp	r3, #175	@ 0xaf
 8001b1e:	d902      	bls.n	8001b26 <drawChar+0x6a>
	  c++; // Handle 'classic' charset behavior
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	3301      	adds	r3, #1
 8001b24:	70fb      	strb	r3, [r7, #3]

	for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8001b26:	2300      	movs	r3, #0
 8001b28:	73fb      	strb	r3, [r7, #15]
 8001b2a:	e0aa      	b.n	8001c82 <drawChar+0x1c6>
	  uint8_t line = font[c * 5 + i];
 8001b2c:	78fa      	ldrb	r2, [r7, #3]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	441a      	add	r2, r3
 8001b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a70      	ldr	r2, [pc, #448]	@ (8001cfc <drawChar+0x240>)
 8001b3c:	5cd3      	ldrb	r3, [r2, r3]
 8001b3e:	73bb      	strb	r3, [r7, #14]
	  for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8001b40:	2300      	movs	r3, #0
 8001b42:	737b      	strb	r3, [r7, #13]
 8001b44:	e092      	b.n	8001c6c <drawChar+0x1b0>
		if (line & 1) {
 8001b46:	7bbb      	ldrb	r3, [r7, #14]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d040      	beq.n	8001bd2 <drawChar+0x116>
		  if (size_x == 1 && size_y == 1)
 8001b50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d116      	bne.n	8001b86 <drawChar+0xca>
 8001b58:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d112      	bne.n	8001b86 <drawChar+0xca>
			drawPixel(x + i, y + j, color);
 8001b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	4413      	add	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	b218      	sxth	r0, r3
 8001b6e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	88bb      	ldrh	r3, [r7, #4]
 8001b76:	4413      	add	r3, r2
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	883a      	ldrh	r2, [r7, #0]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f7ff fd30 	bl	80015e4 <drawPixel>
 8001b84:	e069      	b.n	8001c5a <drawChar+0x19e>
		  else
			fillRect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8001b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	fb12 f303 	smulbb	r3, r2, r3
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	b218      	sxth	r0, r3
 8001ba0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	fb12 f303 	smulbb	r3, r2, r3
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	88bb      	ldrh	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	b219      	sxth	r1, r3
 8001bba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bbe:	b21a      	sxth	r2, r3
 8001bc0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001bc4:	b21c      	sxth	r4, r3
 8001bc6:	883b      	ldrh	r3, [r7, #0]
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	4623      	mov	r3, r4
 8001bcc:	f7ff ff47 	bl	8001a5e <fillRect>
 8001bd0:	e043      	b.n	8001c5a <drawChar+0x19e>
		} else if (bg != color) {
 8001bd2:	8c3a      	ldrh	r2, [r7, #32]
 8001bd4:	883b      	ldrh	r3, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d03f      	beq.n	8001c5a <drawChar+0x19e>
		  if (size_x == 1 && size_y == 1)
 8001bda:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d116      	bne.n	8001c10 <drawChar+0x154>
 8001be2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d112      	bne.n	8001c10 <drawChar+0x154>
			  drawPixel(x + i, y + j, bg);
 8001bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	b218      	sxth	r0, r3
 8001bf8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	88bb      	ldrh	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	8c3a      	ldrh	r2, [r7, #32]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f7ff fceb 	bl	80015e4 <drawPixel>
 8001c0e:	e024      	b.n	8001c5a <drawChar+0x19e>
		  else
			fillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8001c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	fb12 f303 	smulbb	r3, r2, r3
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	4413      	add	r3, r2
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	b218      	sxth	r0, r3
 8001c2a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	fb12 f303 	smulbb	r3, r2, r3
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	88bb      	ldrh	r3, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	b219      	sxth	r1, r3
 8001c44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001c48:	b21a      	sxth	r2, r3
 8001c4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c4e:	b21c      	sxth	r4, r3
 8001c50:	8c3b      	ldrh	r3, [r7, #32]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	4623      	mov	r3, r4
 8001c56:	f7ff ff02 	bl	8001a5e <fillRect>
	  for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8001c5a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	3301      	adds	r3, #1
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	737b      	strb	r3, [r7, #13]
 8001c66:	7bbb      	ldrb	r3, [r7, #14]
 8001c68:	085b      	lsrs	r3, r3, #1
 8001c6a:	73bb      	strb	r3, [r7, #14]
 8001c6c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c70:	2b07      	cmp	r3, #7
 8001c72:	f77f af68 	ble.w	8001b46 <drawChar+0x8a>
	for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	73fb      	strb	r3, [r7, #15]
 8001c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	f77f af50 	ble.w	8001b2c <drawChar+0x70>
		}
	  }
	}
	if (bg != color) { // If opaque, draw vertical line for last column
 8001c8c:	8c3a      	ldrh	r2, [r7, #32]
 8001c8e:	883b      	ldrh	r3, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d02f      	beq.n	8001cf4 <drawChar+0x238>
	  if (size_x == 1 && size_y == 1)
 8001c94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d10e      	bne.n	8001cba <drawChar+0x1fe>
 8001c9c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d10a      	bne.n	8001cba <drawChar+0x1fe>
		drawFastVLine(x + 5, y, 8, bg);
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	3305      	adds	r3, #5
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	b218      	sxth	r0, r3
 8001cac:	8c3b      	ldrh	r3, [r7, #32]
 8001cae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001cb2:	2208      	movs	r2, #8
 8001cb4:	f7ff feae 	bl	8001a14 <drawFastVLine>
 8001cb8:	e01c      	b.n	8001cf4 <drawChar+0x238>
	  else
		fillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8001cba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	0092      	lsls	r2, r2, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	4413      	add	r3, r2
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	b218      	sxth	r0, r3
 8001cd0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001cd4:	b21a      	sxth	r2, r3
 8001cd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	b21c      	sxth	r4, r3
 8001ce2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001ce6:	8c3b      	ldrh	r3, [r7, #32]
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	4623      	mov	r3, r4
 8001cec:	f7ff feb7 	bl	8001a5e <fillRect>
 8001cf0:	e000      	b.n	8001cf4 <drawChar+0x238>
	  return;
 8001cf2:	bf00      	nop
	}

}
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd90      	pop	{r4, r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	080101d0 	.word	0x080101d0

08001d00 <drawString>:

void drawString(int16_t x, int16_t y, const char *str,  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y){
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b08d      	sub	sp, #52	@ 0x34
 8001d04:	af04      	add	r7, sp, #16
 8001d06:	60ba      	str	r2, [r7, #8]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	81fb      	strh	r3, [r7, #14]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	81bb      	strh	r3, [r7, #12]
 8001d12:	4613      	mov	r3, r2
 8001d14:	80fb      	strh	r3, [r7, #6]
	int16_t cursor_x = x;
 8001d16:	89fb      	ldrh	r3, [r7, #14]
 8001d18:	83fb      	strh	r3, [r7, #30]
	int16_t cursor_y = y;
 8001d1a:	89bb      	ldrh	r3, [r7, #12]
 8001d1c:	82fb      	strh	r3, [r7, #22]
	int16_t len = strlen(str);
 8001d1e:	68b8      	ldr	r0, [r7, #8]
 8001d20:	f7fe faba 	bl	8000298 <strlen>
 8001d24:	4603      	mov	r3, r0
 8001d26:	82bb      	strh	r3, [r7, #20]


	uint32_t i = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61bb      	str	r3, [r7, #24]
	for(i; i<len; i++){
 8001d2c:	e01a      	b.n	8001d64 <drawString+0x64>
		drawChar(cursor_x, cursor_y, str[i], color, bg, size_x, size_y);
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	4413      	add	r3, r2
 8001d34:	781a      	ldrb	r2, [r3, #0]
 8001d36:	88fc      	ldrh	r4, [r7, #6]
 8001d38:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8001d3c:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 8001d40:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001d44:	9302      	str	r3, [sp, #8]
 8001d46:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	4623      	mov	r3, r4
 8001d52:	f7ff feb3 	bl	8001abc <drawChar>
		cursor_x += 6;
 8001d56:	8bfb      	ldrh	r3, [r7, #30]
 8001d58:	3306      	adds	r3, #6
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	83fb      	strh	r3, [r7, #30]
	for(i; i<len; i++){
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	3301      	adds	r3, #1
 8001d62:	61bb      	str	r3, [r7, #24]
 8001d64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d3df      	bcc.n	8001d2e <drawString+0x2e>
	}

}
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
 8001d72:	3724      	adds	r7, #36	@ 0x24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd90      	pop	{r4, r7, pc}

08001d78 <drawDouble>:

void drawDouble(float val, int16_t x, int16_t y){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b094      	sub	sp, #80	@ 0x50
 8001d7c:	af04      	add	r7, sp, #16
 8001d7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d82:	4603      	mov	r3, r0
 8001d84:	460a      	mov	r2, r1
 8001d86:	807b      	strh	r3, [r7, #2]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	803b      	strh	r3, [r7, #0]
	char count_str[50];
	sprintf(count_str, "%.3f", val);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7fe fbef 	bl	8000570 <__aeabi_f2d>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	f107 000c 	add.w	r0, r7, #12
 8001d9a:	490b      	ldr	r1, [pc, #44]	@ (8001dc8 <drawDouble+0x50>)
 8001d9c:	f00b f96c 	bl	800d078 <siprintf>
	drawString(x, y, count_str,  0, 1, 1, 1);
 8001da0:	f107 020c 	add.w	r2, r7, #12
 8001da4:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001da8:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8001dac:	2301      	movs	r3, #1
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	2301      	movs	r3, #1
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	2301      	movs	r3, #1
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2300      	movs	r3, #0
 8001dba:	f7ff ffa1 	bl	8001d00 <drawString>
}
 8001dbe:	bf00      	nop
 8001dc0:	3740      	adds	r7, #64	@ 0x40
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	0800f548 	.word	0x0800f548

08001dcc <drawInt>:

void drawInt(int val, int16_t x, int16_t y){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b094      	sub	sp, #80	@ 0x50
 8001dd0:	af04      	add	r7, sp, #16
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	807b      	strh	r3, [r7, #2]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	803b      	strh	r3, [r7, #0]
	char count_str[50];
	sprintf(count_str, "%d", val);
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	490b      	ldr	r1, [pc, #44]	@ (8001e10 <drawInt+0x44>)
 8001de4:	4618      	mov	r0, r3
 8001de6:	f00b f947 	bl	800d078 <siprintf>
	drawString(x, y, count_str,  0, 1, 1, 1);
 8001dea:	f107 020c 	add.w	r2, r7, #12
 8001dee:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001df2:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8001df6:	2301      	movs	r3, #1
 8001df8:	9302      	str	r3, [sp, #8]
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	2301      	movs	r3, #1
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	2300      	movs	r3, #0
 8001e04:	f7ff ff7c 	bl	8001d00 <drawString>
}
 8001e08:	bf00      	nop
 8001e0a:	3740      	adds	r7, #64	@ 0x40
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	0800f550 	.word	0x0800f550

08001e14 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	ed87 0a05 	vstr	s0, [r7, #20]
 8001e1e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001e22:	ed87 1a03 	vstr	s2, [r7, #12]
 8001e26:	edc7 1a02 	vstr	s3, [r7, #8]
 8001e2a:	ed87 2a01 	vstr	s4, [r7, #4]
    // Handle division by zero and avoid NaN results
    if (in_max - in_min == 0) {
 8001e2e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e32:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e42:	d102      	bne.n	8001e4a <map+0x36>
        return 0; // Return a default value
 8001e44:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8001e8c <map+0x78>
 8001e48:	e019      	b.n	8001e7e <map+0x6a>
    }
    // Map the input value to the new range
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001e4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e56:	edd7 6a01 	vldr	s13, [r7, #4]
 8001e5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e5e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e62:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e66:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e76:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	00000000 	.word	0x00000000

08001e90 <HAL_TIM_PeriodElapsedCallback>:

// Timer callback implementation
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1)  // Check if interrupt is from TIM1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d103      	bne.n	8001eaa <HAL_TIM_PeriodElapsedCallback+0x1a>
    {
        slow_timer_flag = 1;  // Set the flag
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_test);
    	HAL_GPIO_TogglePin(GPIOB, LED_RED_Pin);*/

    }
}
 8001ea8:	e00a      	b.n	8001ec0 <HAL_TIM_PeriodElapsedCallback+0x30>
    else if (htim->Instance == TIM3)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a08      	ldr	r2, [pc, #32]	@ (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d105      	bne.n	8001ec0 <HAL_TIM_PeriodElapsedCallback+0x30>
    	HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001eba:	4806      	ldr	r0, [pc, #24]	@ (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001ebc:	f004 fffc 	bl	8006eb8 <HAL_GPIO_WritePin>
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40012c00 	.word	0x40012c00
 8001ecc:	200007d4 	.word	0x200007d4
 8001ed0:	40000400 	.word	0x40000400
 8001ed4:	42020400 	.word	0x42020400

08001ed8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ed8:	b5b0      	push	{r4, r5, r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4abe      	ldr	r2, [pc, #760]	@ (80021e0 <HAL_ADC_ConvCpltCallback+0x308>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	f040 8254 	bne.w	8002394 <HAL_ADC_ConvCpltCallback+0x4bc>
    {
    	//HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
        ADC_LOAD_VOL_V  = (float)adc_buffer[0]*0.00366300366; ///4095.0*2.5*6.0
 8001eec:	4bbd      	ldr	r3, [pc, #756]	@ (80021e4 <HAL_ADC_ConvCpltCallback+0x30c>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001efa:	ee17 0a90 	vmov	r0, s15
 8001efe:	f7fe fb37 	bl	8000570 <__aeabi_f2d>
 8001f02:	a3ab      	add	r3, pc, #684	@ (adr r3, 80021b0 <HAL_ADC_ConvCpltCallback+0x2d8>)
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	f7fe fb8a 	bl	8000620 <__aeabi_dmul>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	f7fe fe7c 	bl	8000c10 <__aeabi_d2f>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4ab3      	ldr	r2, [pc, #716]	@ (80021e8 <HAL_ADC_ConvCpltCallback+0x310>)
 8001f1c:	6013      	str	r3, [r2, #0]
		ADC_LOAD_CUR_A  = ((float)adc_buffer[1]*0.00015262515 - 0.031095); ///4095.0*2.5 - 0.12438)/0.20/20.0
 8001f1e:	4bb1      	ldr	r3, [pc, #708]	@ (80021e4 <HAL_ADC_ConvCpltCallback+0x30c>)
 8001f20:	885b      	ldrh	r3, [r3, #2]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	ee07 3a90 	vmov	s15, r3
 8001f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f2c:	ee17 0a90 	vmov	r0, s15
 8001f30:	f7fe fb1e 	bl	8000570 <__aeabi_f2d>
 8001f34:	a3a0      	add	r3, pc, #640	@ (adr r3, 80021b8 <HAL_ADC_ConvCpltCallback+0x2e0>)
 8001f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3a:	f7fe fb71 	bl	8000620 <__aeabi_dmul>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	a39e      	add	r3, pc, #632	@ (adr r3, 80021c0 <HAL_ADC_ConvCpltCallback+0x2e8>)
 8001f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4c:	f7fe f9b0 	bl	80002b0 <__aeabi_dsub>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	f7fe fe5a 	bl	8000c10 <__aeabi_d2f>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	4aa3      	ldr	r2, [pc, #652]	@ (80021ec <HAL_ADC_ConvCpltCallback+0x314>)
 8001f60:	6013      	str	r3, [r2, #0]

	    Z_out = ADC_LOAD_VOL_V / ADC_LOAD_CUR_A;
 8001f62:	4ba1      	ldr	r3, [pc, #644]	@ (80021e8 <HAL_ADC_ConvCpltCallback+0x310>)
 8001f64:	edd3 6a00 	vldr	s13, [r3]
 8001f68:	4ba0      	ldr	r3, [pc, #640]	@ (80021ec <HAL_ADC_ConvCpltCallback+0x314>)
 8001f6a:	ed93 7a00 	vldr	s14, [r3]
 8001f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f72:	4b9f      	ldr	r3, [pc, #636]	@ (80021f0 <HAL_ADC_ConvCpltCallback+0x318>)
 8001f74:	edc3 7a00 	vstr	s15, [r3]
	    Z_out = limit(Z_out, .25, 22e3);
 8001f78:	4b9d      	ldr	r3, [pc, #628]	@ (80021f0 <HAL_ADC_ConvCpltCallback+0x318>)
 8001f7a:	edd3 7a00 	vldr	s15, [r3]
 8001f7e:	ed9f 1a9d 	vldr	s2, [pc, #628]	@ 80021f4 <HAL_ADC_ConvCpltCallback+0x31c>
 8001f82:	eef5 0a00 	vmov.f32	s1, #80	@ 0x3e800000  0.250
 8001f86:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8a:	f000 fa63 	bl	8002454 <limit>
 8001f8e:	eef0 7a40 	vmov.f32	s15, s0
 8001f92:	4b97      	ldr	r3, [pc, #604]	@ (80021f0 <HAL_ADC_ConvCpltCallback+0x318>)
 8001f94:	edc3 7a00 	vstr	s15, [r3]

	    //alpha = calculate_alpha(1000, 50e3);
	    Z_out_filt = 0.38586954509 * Z_out + (0.6141304549)*Z_out_filt_prev;
 8001f98:	4b95      	ldr	r3, [pc, #596]	@ (80021f0 <HAL_ADC_ConvCpltCallback+0x318>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fae7 	bl	8000570 <__aeabi_f2d>
 8001fa2:	a389      	add	r3, pc, #548	@ (adr r3, 80021c8 <HAL_ADC_ConvCpltCallback+0x2f0>)
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	f7fe fb3a 	bl	8000620 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4614      	mov	r4, r2
 8001fb2:	461d      	mov	r5, r3
 8001fb4:	4b90      	ldr	r3, [pc, #576]	@ (80021f8 <HAL_ADC_ConvCpltCallback+0x320>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fad9 	bl	8000570 <__aeabi_f2d>
 8001fbe:	a384      	add	r3, pc, #528	@ (adr r3, 80021d0 <HAL_ADC_ConvCpltCallback+0x2f8>)
 8001fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc4:	f7fe fb2c 	bl	8000620 <__aeabi_dmul>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4620      	mov	r0, r4
 8001fce:	4629      	mov	r1, r5
 8001fd0:	f7fe f970 	bl	80002b4 <__adddf3>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f7fe fe18 	bl	8000c10 <__aeabi_d2f>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4a86      	ldr	r2, [pc, #536]	@ (80021fc <HAL_ADC_ConvCpltCallback+0x324>)
 8001fe4:	6013      	str	r3, [r2, #0]
	    Z_out_filt_prev = Z_out_filt;
 8001fe6:	4b85      	ldr	r3, [pc, #532]	@ (80021fc <HAL_ADC_ConvCpltCallback+0x324>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a83      	ldr	r2, [pc, #524]	@ (80021f8 <HAL_ADC_ConvCpltCallback+0x320>)
 8001fec:	6013      	str	r3, [r2, #0]

        // A_buffer being used in high speed loop
    	if(A_buffer_active == 1 && initial_run==1){
 8001fee:	4b84      	ldr	r3, [pc, #528]	@ (8002200 <HAL_ADC_ConvCpltCallback+0x328>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d147      	bne.n	8002088 <HAL_ADC_ConvCpltCallback+0x1b0>
 8001ff8:	4b82      	ldr	r3, [pc, #520]	@ (8002204 <HAL_ADC_ConvCpltCallback+0x32c>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d142      	bne.n	8002088 <HAL_ADC_ConvCpltCallback+0x1b0>
    		Z_target_ind = find_indices(Z_sc_interp_A, 63, Z_out);
 8002002:	4b7b      	ldr	r3, [pc, #492]	@ (80021f0 <HAL_ADC_ConvCpltCallback+0x318>)
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	eeb0 0a67 	vmov.f32	s0, s15
 800200c:	213f      	movs	r1, #63	@ 0x3f
 800200e:	487e      	ldr	r0, [pc, #504]	@ (8002208 <HAL_ADC_ConvCpltCallback+0x330>)
 8002010:	f000 f9e8 	bl	80023e4 <find_indices>
 8002014:	4603      	mov	r3, r0
 8002016:	b29a      	uxth	r2, r3
 8002018:	4b7c      	ldr	r3, [pc, #496]	@ (800220c <HAL_ADC_ConvCpltCallback+0x334>)
 800201a:	801a      	strh	r2, [r3, #0]
    		//Z_target_ind = 50;
    		V_target = linear_interpolate(Z_sc_interp_A[Z_target_ind], Z_sc_interp_A[Z_target_ind-1], V_sc_interp_A[Z_target_ind], Z_out, Z_V_slopes_A[Z_target_ind]);
 800201c:	4b7b      	ldr	r3, [pc, #492]	@ (800220c <HAL_ADC_ConvCpltCallback+0x334>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	b29b      	uxth	r3, r3
 8002022:	4a79      	ldr	r2, [pc, #484]	@ (8002208 <HAL_ADC_ConvCpltCallback+0x330>)
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	edd3 7a00 	vldr	s15, [r3]
 800202c:	4b77      	ldr	r3, [pc, #476]	@ (800220c <HAL_ADC_ConvCpltCallback+0x334>)
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	b29b      	uxth	r3, r3
 8002032:	3b01      	subs	r3, #1
 8002034:	4a74      	ldr	r2, [pc, #464]	@ (8002208 <HAL_ADC_ConvCpltCallback+0x330>)
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	ed93 7a00 	vldr	s14, [r3]
 800203e:	4b73      	ldr	r3, [pc, #460]	@ (800220c <HAL_ADC_ConvCpltCallback+0x334>)
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	4a72      	ldr	r2, [pc, #456]	@ (8002210 <HAL_ADC_ConvCpltCallback+0x338>)
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	edd3 6a00 	vldr	s13, [r3]
 800204e:	4b68      	ldr	r3, [pc, #416]	@ (80021f0 <HAL_ADC_ConvCpltCallback+0x318>)
 8002050:	ed93 6a00 	vldr	s12, [r3]
 8002054:	4b6d      	ldr	r3, [pc, #436]	@ (800220c <HAL_ADC_ConvCpltCallback+0x334>)
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	b29b      	uxth	r3, r3
 800205a:	4a6e      	ldr	r2, [pc, #440]	@ (8002214 <HAL_ADC_ConvCpltCallback+0x33c>)
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	edd3 5a00 	vldr	s11, [r3]
 8002064:	eeb0 2a65 	vmov.f32	s4, s11
 8002068:	eef0 1a46 	vmov.f32	s3, s12
 800206c:	eeb0 1a66 	vmov.f32	s2, s13
 8002070:	eef0 0a47 	vmov.f32	s1, s14
 8002074:	eeb0 0a67 	vmov.f32	s0, s15
 8002078:	f000 fa16 	bl	80024a8 <linear_interpolate>
 800207c:	eef0 7a40 	vmov.f32	s15, s0
 8002080:	4b65      	ldr	r3, [pc, #404]	@ (8002218 <HAL_ADC_ConvCpltCallback+0x340>)
 8002082:	edc3 7a00 	vstr	s15, [r3]
 8002086:	e04f      	b.n	8002128 <HAL_ADC_ConvCpltCallback+0x250>
    		//ADC_LOAD_VOL_V = V_target;

    	}

    	// B_buffer being used in high speed loop
    	else if(A_buffer_active == 0 && initial_run==1){
 8002088:	4b5d      	ldr	r3, [pc, #372]	@ (8002200 <HAL_ADC_ConvCpltCallback+0x328>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d147      	bne.n	8002122 <HAL_ADC_ConvCpltCallback+0x24a>
 8002092:	4b5c      	ldr	r3, [pc, #368]	@ (8002204 <HAL_ADC_ConvCpltCallback+0x32c>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	d142      	bne.n	8002122 <HAL_ADC_ConvCpltCallback+0x24a>
    		Z_target_ind = find_indices(Z_sc_interp_B, 63, Z_out);
 800209c:	4b54      	ldr	r3, [pc, #336]	@ (80021f0 <HAL_ADC_ConvCpltCallback+0x318>)
 800209e:	edd3 7a00 	vldr	s15, [r3]
 80020a2:	eeb0 0a67 	vmov.f32	s0, s15
 80020a6:	213f      	movs	r1, #63	@ 0x3f
 80020a8:	485c      	ldr	r0, [pc, #368]	@ (800221c <HAL_ADC_ConvCpltCallback+0x344>)
 80020aa:	f000 f99b 	bl	80023e4 <find_indices>
 80020ae:	4603      	mov	r3, r0
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	4b56      	ldr	r3, [pc, #344]	@ (800220c <HAL_ADC_ConvCpltCallback+0x334>)
 80020b4:	801a      	strh	r2, [r3, #0]
    		//Z_target_ind = 50;
    		V_target = linear_interpolate(Z_sc_interp_B[Z_target_ind], Z_sc_interp_B[Z_target_ind-1], V_sc_interp_B[Z_target_ind], Z_out, Z_V_slopes_B[Z_target_ind]);
 80020b6:	4b55      	ldr	r3, [pc, #340]	@ (800220c <HAL_ADC_ConvCpltCallback+0x334>)
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	4a57      	ldr	r2, [pc, #348]	@ (800221c <HAL_ADC_ConvCpltCallback+0x344>)
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	4b51      	ldr	r3, [pc, #324]	@ (800220c <HAL_ADC_ConvCpltCallback+0x334>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	4a53      	ldr	r2, [pc, #332]	@ (800221c <HAL_ADC_ConvCpltCallback+0x344>)
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	ed93 7a00 	vldr	s14, [r3]
 80020d8:	4b4c      	ldr	r3, [pc, #304]	@ (800220c <HAL_ADC_ConvCpltCallback+0x334>)
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	4a50      	ldr	r2, [pc, #320]	@ (8002220 <HAL_ADC_ConvCpltCallback+0x348>)
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	edd3 6a00 	vldr	s13, [r3]
 80020e8:	4b41      	ldr	r3, [pc, #260]	@ (80021f0 <HAL_ADC_ConvCpltCallback+0x318>)
 80020ea:	ed93 6a00 	vldr	s12, [r3]
 80020ee:	4b47      	ldr	r3, [pc, #284]	@ (800220c <HAL_ADC_ConvCpltCallback+0x334>)
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	4a4b      	ldr	r2, [pc, #300]	@ (8002224 <HAL_ADC_ConvCpltCallback+0x34c>)
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	edd3 5a00 	vldr	s11, [r3]
 80020fe:	eeb0 2a65 	vmov.f32	s4, s11
 8002102:	eef0 1a46 	vmov.f32	s3, s12
 8002106:	eeb0 1a66 	vmov.f32	s2, s13
 800210a:	eef0 0a47 	vmov.f32	s1, s14
 800210e:	eeb0 0a67 	vmov.f32	s0, s15
 8002112:	f000 f9c9 	bl	80024a8 <linear_interpolate>
 8002116:	eef0 7a40 	vmov.f32	s15, s0
 800211a:	4b3f      	ldr	r3, [pc, #252]	@ (8002218 <HAL_ADC_ConvCpltCallback+0x340>)
 800211c:	edc3 7a00 	vstr	s15, [r3]
 8002120:	e002      	b.n	8002128 <HAL_ADC_ConvCpltCallback+0x250>
    	}

    	else{
    		V_target = 0.1;
 8002122:	4b3d      	ldr	r3, [pc, #244]	@ (8002218 <HAL_ADC_ConvCpltCallback+0x340>)
 8002124:	4a40      	ldr	r2, [pc, #256]	@ (8002228 <HAL_ADC_ConvCpltCallback+0x350>)
 8002126:	601a      	str	r2, [r3, #0]
    	}

    	//Z_target_ind = find_indices(Z_sc, 46, Z_out);
    	//V_target = linear_interpolate(Z_sc[Z_target_ind], Z_sc[Z_target_ind-1], V_sc[Z_target_ind], Z_out, Z_V_slopes[Z_target_ind]);

    	V_target = limit(V_target, 0.1, 7);
 8002128:	4b3b      	ldr	r3, [pc, #236]	@ (8002218 <HAL_ADC_ConvCpltCallback+0x340>)
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	eeb1 1a0c 	vmov.f32	s2, #28	@ 0x40e00000  7.0
 8002132:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 800222c <HAL_ADC_ConvCpltCallback+0x354>
 8002136:	eeb0 0a67 	vmov.f32	s0, s15
 800213a:	f000 f98b 	bl	8002454 <limit>
 800213e:	eef0 7a40 	vmov.f32	s15, s0
 8002142:	4b35      	ldr	r3, [pc, #212]	@ (8002218 <HAL_ADC_ConvCpltCallback+0x340>)
 8002144:	edc3 7a00 	vstr	s15, [r3]

    	error = V_target - ADC_LOAD_VOL_V;
 8002148:	4b33      	ldr	r3, [pc, #204]	@ (8002218 <HAL_ADC_ConvCpltCallback+0x340>)
 800214a:	ed93 7a00 	vldr	s14, [r3]
 800214e:	4b26      	ldr	r3, [pc, #152]	@ (80021e8 <HAL_ADC_ConvCpltCallback+0x310>)
 8002150:	edd3 7a00 	vldr	s15, [r3]
 8002154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002158:	4b35      	ldr	r3, [pc, #212]	@ (8002230 <HAL_ADC_ConvCpltCallback+0x358>)
 800215a:	edc3 7a00 	vstr	s15, [r3]
        if((error < 2e-3) & (error>0)){
 800215e:	4b34      	ldr	r3, [pc, #208]	@ (8002230 <HAL_ADC_ConvCpltCallback+0x358>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fa04 	bl	8000570 <__aeabi_f2d>
 8002168:	2301      	movs	r3, #1
 800216a:	461c      	mov	r4, r3
 800216c:	a31a      	add	r3, pc, #104	@ (adr r3, 80021d8 <HAL_ADC_ConvCpltCallback+0x300>)
 800216e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002172:	f7fe fcc7 	bl	8000b04 <__aeabi_dcmplt>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_ADC_ConvCpltCallback+0x2a8>
 800217c:	2300      	movs	r3, #0
 800217e:	461c      	mov	r4, r3
 8002180:	b2e2      	uxtb	r2, r4
 8002182:	4b2b      	ldr	r3, [pc, #172]	@ (8002230 <HAL_ADC_ConvCpltCallback+0x358>)
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800218c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002190:	bfcc      	ite	gt
 8002192:	2301      	movgt	r3, #1
 8002194:	2300      	movle	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	4013      	ands	r3, r2
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d049      	beq.n	8002234 <HAL_ADC_ConvCpltCallback+0x35c>
        	error = 0;
 80021a0:	4b23      	ldr	r3, [pc, #140]	@ (8002230 <HAL_ADC_ConvCpltCallback+0x358>)
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	e069      	b.n	800227e <HAL_ADC_ConvCpltCallback+0x3a6>
 80021aa:	bf00      	nop
 80021ac:	f3af 8000 	nop.w
 80021b0:	1d983187 	.word	0x1d983187
 80021b4:	3f6e01e0 	.word	0x3f6e01e0
 80021b8:	0e3b6bb7 	.word	0x0e3b6bb7
 80021bc:	3f240140 	.word	0x3f240140
 80021c0:	2046c765 	.word	0x2046c765
 80021c4:	3f9fd75e 	.word	0x3f9fd75e
 80021c8:	2d2bc5cb 	.word	0x2d2bc5cb
 80021cc:	3fd8b216 	.word	0x3fd8b216
 80021d0:	e968bd42 	.word	0xe968bd42
 80021d4:	3fe3a6f4 	.word	0x3fe3a6f4
 80021d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80021dc:	3f60624d 	.word	0x3f60624d
 80021e0:	42028000 	.word	0x42028000
 80021e4:	200007d8 	.word	0x200007d8
 80021e8:	200036c8 	.word	0x200036c8
 80021ec:	200036d0 	.word	0x200036d0
 80021f0:	200037a0 	.word	0x200037a0
 80021f4:	46abe000 	.word	0x46abe000
 80021f8:	200037a8 	.word	0x200037a8
 80021fc:	200037a4 	.word	0x200037a4
 8002200:	20000000 	.word	0x20000000
 8002204:	20003da4 	.word	0x20003da4
 8002208:	200038b8 	.word	0x200038b8
 800220c:	200036e6 	.word	0x200036e6
 8002210:	200037bc 	.word	0x200037bc
 8002214:	20003bac 	.word	0x20003bac
 8002218:	2000379c 	.word	0x2000379c
 800221c:	20003ab0 	.word	0x20003ab0
 8002220:	200039b4 	.word	0x200039b4
 8002224:	20003ca8 	.word	0x20003ca8
 8002228:	3dcccccd 	.word	0x3dcccccd
 800222c:	3dcccccd 	.word	0x3dcccccd
 8002230:	200036d4 	.word	0x200036d4
        }
        else if((error > -2e-3) & (error<0)){
 8002234:	4b60      	ldr	r3, [pc, #384]	@ (80023b8 <HAL_ADC_ConvCpltCallback+0x4e0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe f999 	bl	8000570 <__aeabi_f2d>
 800223e:	2301      	movs	r3, #1
 8002240:	461c      	mov	r4, r3
 8002242:	a357      	add	r3, pc, #348	@ (adr r3, 80023a0 <HAL_ADC_ConvCpltCallback+0x4c8>)
 8002244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002248:	f7fe fc7a 	bl	8000b40 <__aeabi_dcmpgt>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_ADC_ConvCpltCallback+0x37e>
 8002252:	2300      	movs	r3, #0
 8002254:	461c      	mov	r4, r3
 8002256:	b2e2      	uxtb	r2, r4
 8002258:	4b57      	ldr	r3, [pc, #348]	@ (80023b8 <HAL_ADC_ConvCpltCallback+0x4e0>)
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002266:	bf4c      	ite	mi
 8002268:	2301      	movmi	r3, #1
 800226a:	2300      	movpl	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	4013      	ands	r3, r2
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_ADC_ConvCpltCallback+0x3a6>
        	error = 0;
 8002276:	4b50      	ldr	r3, [pc, #320]	@ (80023b8 <HAL_ADC_ConvCpltCallback+0x4e0>)
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
        }

        u =  .3*error + 20*err_accum;
 800227e:	4b4e      	ldr	r3, [pc, #312]	@ (80023b8 <HAL_ADC_ConvCpltCallback+0x4e0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f974 	bl	8000570 <__aeabi_f2d>
 8002288:	a347      	add	r3, pc, #284	@ (adr r3, 80023a8 <HAL_ADC_ConvCpltCallback+0x4d0>)
 800228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228e:	f7fe f9c7 	bl	8000620 <__aeabi_dmul>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4614      	mov	r4, r2
 8002298:	461d      	mov	r5, r3
 800229a:	4b48      	ldr	r3, [pc, #288]	@ (80023bc <HAL_ADC_ConvCpltCallback+0x4e4>)
 800229c:	edd3 7a00 	vldr	s15, [r3]
 80022a0:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80022a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a8:	ee17 0a90 	vmov	r0, s15
 80022ac:	f7fe f960 	bl	8000570 <__aeabi_f2d>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4620      	mov	r0, r4
 80022b6:	4629      	mov	r1, r5
 80022b8:	f7fd fffc 	bl	80002b4 <__adddf3>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f7fe fca4 	bl	8000c10 <__aeabi_d2f>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4a3d      	ldr	r2, [pc, #244]	@ (80023c0 <HAL_ADC_ConvCpltCallback+0x4e8>)
 80022cc:	6013      	str	r3, [r2, #0]
        err_accum = err_accum + error * 1e-4;
 80022ce:	4b3b      	ldr	r3, [pc, #236]	@ (80023bc <HAL_ADC_ConvCpltCallback+0x4e4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe f94c 	bl	8000570 <__aeabi_f2d>
 80022d8:	4604      	mov	r4, r0
 80022da:	460d      	mov	r5, r1
 80022dc:	4b36      	ldr	r3, [pc, #216]	@ (80023b8 <HAL_ADC_ConvCpltCallback+0x4e0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe f945 	bl	8000570 <__aeabi_f2d>
 80022e6:	a332      	add	r3, pc, #200	@ (adr r3, 80023b0 <HAL_ADC_ConvCpltCallback+0x4d8>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	f7fe f998 	bl	8000620 <__aeabi_dmul>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4620      	mov	r0, r4
 80022f6:	4629      	mov	r1, r5
 80022f8:	f7fd ffdc 	bl	80002b4 <__adddf3>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	f7fe fc84 	bl	8000c10 <__aeabi_d2f>
 8002308:	4603      	mov	r3, r0
 800230a:	4a2c      	ldr	r2, [pc, #176]	@ (80023bc <HAL_ADC_ConvCpltCallback+0x4e4>)
 800230c:	6013      	str	r3, [r2, #0]
        //Int_1 = limit(Int_1, -1, .0465);

        //ADC_VIN_V = V_target;

    	REF_V = 2.5 - u;
 800230e:	4b2c      	ldr	r3, [pc, #176]	@ (80023c0 <HAL_ADC_ConvCpltCallback+0x4e8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe f92c 	bl	8000570 <__aeabi_f2d>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	f04f 0000 	mov.w	r0, #0
 8002320:	4928      	ldr	r1, [pc, #160]	@ (80023c4 <HAL_ADC_ConvCpltCallback+0x4ec>)
 8002322:	f7fd ffc5 	bl	80002b0 <__aeabi_dsub>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	f7fe fc6f 	bl	8000c10 <__aeabi_d2f>
 8002332:	4603      	mov	r3, r0
 8002334:	4a24      	ldr	r2, [pc, #144]	@ (80023c8 <HAL_ADC_ConvCpltCallback+0x4f0>)
 8002336:	6013      	str	r3, [r2, #0]
    	REF_CNTS = (uint16_t)(REF_V*1638); // /2.5*4095.0
 8002338:	4b23      	ldr	r3, [pc, #140]	@ (80023c8 <HAL_ADC_ConvCpltCallback+0x4f0>)
 800233a:	edd3 7a00 	vldr	s15, [r3]
 800233e:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80023cc <HAL_ADC_ConvCpltCallback+0x4f4>
 8002342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800234a:	ee17 3a90 	vmov	r3, s15
 800234e:	b29a      	uxth	r2, r3
 8002350:	4b1f      	ldr	r3, [pc, #124]	@ (80023d0 <HAL_ADC_ConvCpltCallback+0x4f8>)
 8002352:	801a      	strh	r2, [r3, #0]
    	if(REF_CNTS>4095)
 8002354:	4b1e      	ldr	r3, [pc, #120]	@ (80023d0 <HAL_ADC_ConvCpltCallback+0x4f8>)
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	b29b      	uxth	r3, r3
 800235a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800235e:	d304      	bcc.n	800236a <HAL_ADC_ConvCpltCallback+0x492>
    		REF_CNTS = 4095;
 8002360:	4b1b      	ldr	r3, [pc, #108]	@ (80023d0 <HAL_ADC_ConvCpltCallback+0x4f8>)
 8002362:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002366:	801a      	strh	r2, [r3, #0]
 8002368:	e001      	b.n	800236e <HAL_ADC_ConvCpltCallback+0x496>
    	else if(REF_CNTS<0)
 800236a:	4b19      	ldr	r3, [pc, #100]	@ (80023d0 <HAL_ADC_ConvCpltCallback+0x4f8>)
 800236c:	881b      	ldrh	r3, [r3, #0]
    		REF_CNTS = 0;

    	//ADC_VIN_V = REF_CNTS;

		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, REF_CNTS);
 800236e:	4b18      	ldr	r3, [pc, #96]	@ (80023d0 <HAL_ADC_ConvCpltCallback+0x4f8>)
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	2200      	movs	r2, #0
 8002376:	2100      	movs	r1, #0
 8002378:	4816      	ldr	r0, [pc, #88]	@ (80023d4 <HAL_ADC_ConvCpltCallback+0x4fc>)
 800237a:	f003 fc33 	bl	8005be4 <HAL_DAC_SetValue>
    	HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);
 800237e:	2200      	movs	r2, #0
 8002380:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002384:	4814      	ldr	r0, [pc, #80]	@ (80023d8 <HAL_ADC_ConvCpltCallback+0x500>)
 8002386:	f004 fd97 	bl	8006eb8 <HAL_GPIO_WritePin>

    	//HAL_GPIO_TogglePin(GPIOB, LED_RED_Pin);
    	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, 5);
 800238a:	2205      	movs	r2, #5
 800238c:	4913      	ldr	r1, [pc, #76]	@ (80023dc <HAL_ADC_ConvCpltCallback+0x504>)
 800238e:	4814      	ldr	r0, [pc, #80]	@ (80023e0 <HAL_ADC_ConvCpltCallback+0x508>)
 8002390:	f002 faec 	bl	800496c <HAL_ADC_Start_DMA>

    }
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bdb0      	pop	{r4, r5, r7, pc}
 800239c:	f3af 8000 	nop.w
 80023a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80023a4:	bf60624d 	.word	0xbf60624d
 80023a8:	33333333 	.word	0x33333333
 80023ac:	3fd33333 	.word	0x3fd33333
 80023b0:	eb1c432d 	.word	0xeb1c432d
 80023b4:	3f1a36e2 	.word	0x3f1a36e2
 80023b8:	200036d4 	.word	0x200036d4
 80023bc:	200036d8 	.word	0x200036d8
 80023c0:	200036e0 	.word	0x200036e0
 80023c4:	40040000 	.word	0x40040000
 80023c8:	200036dc 	.word	0x200036dc
 80023cc:	44ccc000 	.word	0x44ccc000
 80023d0:	200036e4 	.word	0x200036e4
 80023d4:	200002d4 	.word	0x200002d4
 80023d8:	42020400 	.word	0x42020400
 80023dc:	200007d8 	.word	0x200007d8
 80023e0:	200001f4 	.word	0x200001f4

080023e4 <find_indices>:

static inline int find_indices(const float array[], int n, float x) {
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t i = 1;
 80023f2:	2301      	movs	r3, #1
 80023f4:	75fb      	strb	r3, [r7, #23]
	for (i; i < n; i++) {
 80023f6:	e021      	b.n	800243c <find_indices+0x58>
        if (array[i-1] >= x && x > array[i]) {
 80023f8:	7dfb      	ldrb	r3, [r7, #23]
 80023fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023fe:	3b01      	subs	r3, #1
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4413      	add	r3, r2
 8002406:	edd3 7a00 	vldr	s15, [r3]
 800240a:	ed97 7a01 	vldr	s14, [r7, #4]
 800240e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002416:	d80e      	bhi.n	8002436 <find_indices+0x52>
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4413      	add	r3, r2
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	ed97 7a01 	vldr	s14, [r7, #4]
 8002428:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800242c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002430:	dd01      	ble.n	8002436 <find_indices+0x52>
            return i;
 8002432:	7dfb      	ldrb	r3, [r7, #23]
 8002434:	e008      	b.n	8002448 <find_indices+0x64>
	for (i; i < n; i++) {
 8002436:	7dfb      	ldrb	r3, [r7, #23]
 8002438:	3301      	adds	r3, #1
 800243a:	75fb      	strb	r3, [r7, #23]
 800243c:	7dfb      	ldrb	r3, [r7, #23]
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	429a      	cmp	r2, r3
 8002442:	dcd9      	bgt.n	80023f8 <find_indices+0x14>
        }
    }
    // If no valid indices are found
    return -1;
 8002444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002448:	4618      	mov	r0, r3
 800244a:	371c      	adds	r7, #28
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <limit>:

static inline float limit(float in, float min, float max){
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	ed87 0a03 	vstr	s0, [r7, #12]
 800245e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002462:	ed87 1a01 	vstr	s2, [r7, #4]
   if(in>max){
 8002466:	ed97 7a03 	vldr	s14, [r7, #12]
 800246a:	edd7 7a01 	vldr	s15, [r7, #4]
 800246e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002476:	dd02      	ble.n	800247e <limit+0x2a>
      in=max;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	e00a      	b.n	8002494 <limit+0x40>
   }
   else if(in<min){
 800247e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002482:	edd7 7a02 	vldr	s15, [r7, #8]
 8002486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800248a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248e:	d501      	bpl.n	8002494 <limit+0x40>
      in = min;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	60fb      	str	r3, [r7, #12]
   }
   return in;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	ee07 3a90 	vmov	s15, r3
}
 800249a:	eeb0 0a67 	vmov.f32	s0, s15
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <linear_interpolate>:


static inline float linear_interpolate(float x0, float x1, float y0, float x, float slope){
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	ed87 0a05 	vstr	s0, [r7, #20]
 80024b2:	edc7 0a04 	vstr	s1, [r7, #16]
 80024b6:	ed87 1a03 	vstr	s2, [r7, #12]
 80024ba:	edc7 1a02 	vstr	s3, [r7, #8]
 80024be:	ed87 2a01 	vstr	s4, [r7, #4]

    return y0 + slope * (x - x0);
 80024c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80024c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80024ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80024d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80024da:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80024de:	eeb0 0a67 	vmov.f32	s0, s15
 80024e2:	371c      	adds	r7, #28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <precompute_slopes>:

void precompute_slopes(const float *x_values, const float *y_values, float *slopes, int size) {
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	@ 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	603b      	str	r3, [r7, #0]

	for (uint8_t i = 1; i < size; i++) {
 80024fa:	2301      	movs	r3, #1
 80024fc:	77fb      	strb	r3, [r7, #31]
 80024fe:	e043      	b.n	8002588 <precompute_slopes+0x9c>
        float dx = x_values[i - 1] - x_values[i];
 8002500:	7ffb      	ldrb	r3, [r7, #31]
 8002502:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002506:	3b01      	subs	r3, #1
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4413      	add	r3, r2
 800250e:	ed93 7a00 	vldr	s14, [r3]
 8002512:	7ffb      	ldrb	r3, [r7, #31]
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4413      	add	r3, r2
 800251a:	edd3 7a00 	vldr	s15, [r3]
 800251e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002522:	edc7 7a06 	vstr	s15, [r7, #24]
        float dy = y_values[i - 1] - y_values[i];
 8002526:	7ffb      	ldrb	r3, [r7, #31]
 8002528:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800252c:	3b01      	subs	r3, #1
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	4413      	add	r3, r2
 8002534:	ed93 7a00 	vldr	s14, [r3]
 8002538:	7ffb      	ldrb	r3, [r7, #31]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	4413      	add	r3, r2
 8002540:	edd3 7a00 	vldr	s15, [r3]
 8002544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002548:	edc7 7a05 	vstr	s15, [r7, #20]

        // Avoid division by zero
        if (dx != 0.0f) {
 800254c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002550:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	d00c      	beq.n	8002574 <precompute_slopes+0x88>
            slopes[i] = dy / dx;
 800255a:	7ffb      	ldrb	r3, [r7, #31]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	edd7 6a05 	vldr	s13, [r7, #20]
 8002566:	ed97 7a06 	vldr	s14, [r7, #24]
 800256a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800256e:	edc3 7a00 	vstr	s15, [r3]
 8002572:	e006      	b.n	8002582 <precompute_slopes+0x96>
        } else {
            slopes[i] = 0.0f;  // Handle vertical segments
 8002574:	7ffb      	ldrb	r3, [r7, #31]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	4413      	add	r3, r2
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 1; i < size; i++) {
 8002582:	7ffb      	ldrb	r3, [r7, #31]
 8002584:	3301      	adds	r3, #1
 8002586:	77fb      	strb	r3, [r7, #31]
 8002588:	7ffb      	ldrb	r3, [r7, #31]
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	dcb7      	bgt.n	8002500 <precompute_slopes+0x14>
        }
    }
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	3724      	adds	r7, #36	@ 0x24
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <curve_interp_1d>:


void curve_interp_1d(float *x_orig, float *y_orig, uint8_t n_orig, float *x_new, float *y_new, uint8_t n_new)
{
 800259e:	b480      	push	{r7}
 80025a0:	b08b      	sub	sp, #44	@ 0x2c
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	603b      	str	r3, [r7, #0]
 80025aa:	4613      	mov	r3, r2
 80025ac:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < n_new; i++) {
 80025ae:	2300      	movs	r3, #0
 80025b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80025b4:	e0a4      	b.n	8002700 <curve_interp_1d+0x162>
    	float x = x_new[i];
 80025b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	623b      	str	r3, [r7, #32]

        // Find the interval [x_orig[j], x_orig[j+1]] where x falls
    	uint8_t j;
        for (j = 0; j < n_orig - 1; j++) {
 80025c4:	2300      	movs	r3, #0
 80025c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80025ca:	e021      	b.n	8002610 <curve_interp_1d+0x72>
            if (x_orig[j] <= x && x <= x_orig[j + 1]) {
 80025cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4413      	add	r3, r2
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	ed97 7a08 	vldr	s14, [r7, #32]
 80025de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e6:	db0e      	blt.n	8002606 <curve_interp_1d+0x68>
 80025e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80025ec:	3301      	adds	r3, #1
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	edd3 7a00 	vldr	s15, [r3]
 80025f8:	ed97 7a08 	vldr	s14, [r7, #32]
 80025fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002604:	d90b      	bls.n	800261e <curve_interp_1d+0x80>
        for (j = 0; j < n_orig - 1; j++) {
 8002606:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800260a:	3301      	adds	r3, #1
 800260c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002610:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	3b01      	subs	r3, #1
 8002618:	429a      	cmp	r2, r3
 800261a:	dbd7      	blt.n	80025cc <curve_interp_1d+0x2e>
 800261c:	e000      	b.n	8002620 <curve_interp_1d+0x82>
                break;
 800261e:	bf00      	nop
            }
        }

        // Handle edge cases where x is outside the range
        if (j == n_orig - 1 || x < x_orig[0]) {
 8002620:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	3b01      	subs	r3, #1
 8002628:	429a      	cmp	r2, r3
 800262a:	d009      	beq.n	8002640 <curve_interp_1d+0xa2>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	edd3 7a00 	vldr	s15, [r3]
 8002632:	ed97 7a08 	vldr	s14, [r7, #32]
 8002636:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800263a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263e:	d51b      	bpl.n	8002678 <curve_interp_1d+0xda>
            y_new[i] = (x < x_orig[0]) ? y_orig[0] : y_orig[n_orig - 1];
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	edd3 7a00 	vldr	s15, [r3]
 8002646:	ed97 7a08 	vldr	s14, [r7, #32]
 800264a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800264e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002652:	d502      	bpl.n	800265a <curve_interp_1d+0xbc>
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	e007      	b.n	800266a <curve_interp_1d+0xcc>
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002660:	3b01      	subs	r3, #1
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	4413      	add	r3, r2
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800266e:	0092      	lsls	r2, r2, #2
 8002670:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002672:	440a      	add	r2, r1
 8002674:	6013      	str	r3, [r2, #0]
            continue;
 8002676:	e03e      	b.n	80026f6 <curve_interp_1d+0x158>
        }

        // Linear interpolation formula
        float x1 = x_orig[j], y1 = y_orig[j];
 8002678:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4413      	add	r3, r2
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	4413      	add	r3, r2
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	61bb      	str	r3, [r7, #24]
        float x2 = x_orig[j + 1], y2 = y_orig[j + 1];
 8002694:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002698:	3301      	adds	r3, #1
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4413      	add	r3, r2
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80026a8:	3301      	adds	r3, #1
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	4413      	add	r3, r2
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	613b      	str	r3, [r7, #16]
        y_new[i] = y1 + (y2 - y1) / (x2 - x1) * (x - x1);
 80026b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80026b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80026bc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80026c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80026c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026d0:	edd7 6a08 	vldr	s13, [r7, #32]
 80026d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80026d8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80026dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026e8:	4413      	add	r3, r2
 80026ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80026ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f2:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < n_new; i++) {
 80026f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026fa:	3301      	adds	r3, #1
 80026fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002700:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002704:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002708:	429a      	cmp	r2, r3
 800270a:	f4ff af54 	bcc.w	80025b6 <curve_interp_1d+0x18>
    }
}
 800270e:	bf00      	nop
 8002710:	bf00      	nop
 8002712:	372c      	adds	r7, #44	@ 0x2c
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <curve_interp>:


void curve_interp(uint16_t irradiance, float *V_sc_interp_inactive, float *Z_sc_interp_inactive){
 800271c:	b580      	push	{r7, lr}
 800271e:	f5ad 6d8a 	sub.w	sp, sp, #1104	@ 0x450
 8002722:	af02      	add	r7, sp, #8
 8002724:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8002728:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800272c:	6019      	str	r1, [r3, #0]
 800272e:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8002732:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800273c:	f2a3 433a 	subw	r3, r3, #1082	@ 0x43a
 8002740:	4602      	mov	r2, r0
 8002742:	801a      	strh	r2, [r3, #0]

	char buffert[50];

	uint16_t curve_num_low  = (uint16_t)floor((float)irradiance / 100);
 8002744:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8002748:	f2a3 433a 	subw	r3, r3, #1082	@ 0x43a
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	ee07 3a90 	vmov	s15, r3
 8002752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002756:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 8002a14 <curve_interp+0x2f8>
 800275a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800275e:	ee16 0a90 	vmov	r0, s13
 8002762:	f7fd ff05 	bl	8000570 <__aeabi_f2d>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	ec43 2b10 	vmov	d0, r2, r3
 800276e:	f00c fe43 	bl	800f3f8 <floor>
 8002772:	ec53 2b10 	vmov	r2, r3, d0
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	f7fe fa29 	bl	8000bd0 <__aeabi_d2uiz>
 800277e:	4603      	mov	r3, r0
 8002780:	f8a7 343e 	strh.w	r3, [r7, #1086]	@ 0x43e
	uint16_t curve_num_high = (uint16_t)ceil((float)irradiance / 100);
 8002784:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8002788:	f2a3 433a 	subw	r3, r3, #1082	@ 0x43a
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	ee07 3a90 	vmov	s15, r3
 8002792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002796:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8002a14 <curve_interp+0x2f8>
 800279a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800279e:	ee16 0a90 	vmov	r0, s13
 80027a2:	f7fd fee5 	bl	8000570 <__aeabi_f2d>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	ec43 2b10 	vmov	d0, r2, r3
 80027ae:	f00c fda7 	bl	800f300 <ceil>
 80027b2:	ec53 2b10 	vmov	r2, r3, d0
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	f7fe fa09 	bl	8000bd0 <__aeabi_d2uiz>
 80027be:	4603      	mov	r3, r0
 80027c0:	f8a7 343c 	strh.w	r3, [r7, #1084]	@ 0x43c
	float alpha = ((float)(irradiance - curve_num_low*100))/100;
 80027c4:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80027c8:	f2a3 433a 	subw	r3, r3, #1082	@ 0x43a
 80027cc:	881a      	ldrh	r2, [r3, #0]
 80027ce:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	@ 0x43e
 80027d2:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	4413      	add	r3, r2
 80027dc:	ee07 3a90 	vmov	s15, r3
 80027e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027e4:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 8002a14 <curve_interp+0x2f8>
 80027e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027ec:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80027f0:	edc3 7a00 	vstr	s15, [r3]


	float x_max_1 = V_max[curve_num_low-1];
 80027f4:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	@ 0x43e
 80027f8:	3b01      	subs	r3, #1
 80027fa:	4a87      	ldr	r2, [pc, #540]	@ (8002a18 <curve_interp+0x2fc>)
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f207 4234 	addw	r2, r7, #1076	@ 0x434
 8002806:	6013      	str	r3, [r2, #0]
	float x_max_2 = V_max[curve_num_high-1];
 8002808:	f8b7 343c 	ldrh.w	r3, [r7, #1084]	@ 0x43c
 800280c:	3b01      	subs	r3, #1
 800280e:	4a82      	ldr	r2, [pc, #520]	@ (8002a18 <curve_interp+0x2fc>)
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f507 6286 	add.w	r2, r7, #1072	@ 0x430
 800281a:	6013      	str	r3, [r2, #0]
	float x_max_new = x_max_1 + (x_max_2 - x_max_1) * alpha;
 800281c:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8002820:	ed93 7a00 	vldr	s14, [r3]
 8002824:	f207 4334 	addw	r3, r7, #1076	@ 0x434
 8002828:	edd3 7a00 	vldr	s15, [r3]
 800282c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002830:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002834:	edd3 7a00 	vldr	s15, [r3]
 8002838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283c:	f207 4334 	addw	r3, r7, #1076	@ 0x434
 8002840:	ed93 7a00 	vldr	s14, [r3]
 8002844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002848:	f207 432c 	addw	r3, r7, #1068	@ 0x42c
 800284c:	edc3 7a00 	vstr	s15, [r3]
	float x2_norm[62];
	float y2_interp_norm[62];
	float y1;
	float y2[62];

	for(int i=0; i<62; i++){
 8002850:	2300      	movs	r3, #0
 8002852:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 8002856:	e04a      	b.n	80028ee <curve_interp+0x1d2>
		x1_norm[i] = V_sc_irr[i] / x_max_1;
 8002858:	4a70      	ldr	r2, [pc, #448]	@ (8002a1c <curve_interp+0x300>)
 800285a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	edd3 6a00 	vldr	s13, [r3]
 8002866:	f207 4334 	addw	r3, r7, #1076	@ 0x434
 800286a:	ed93 7a00 	vldr	s14, [r3]
 800286e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002872:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8002876:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 800287a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	edc3 7a00 	vstr	s15, [r3]
		x2_norm[i] = V_sc_irr[i] / x_max_2;
 8002886:	4a65      	ldr	r2, [pc, #404]	@ (8002a1c <curve_interp+0x300>)
 8002888:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	edd3 6a00 	vldr	s13, [r3]
 8002894:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8002898:	ed93 7a00 	vldr	s14, [r3]
 800289c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028a0:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80028a4:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 80028a8:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	edc3 7a00 	vstr	s15, [r3]
		y2[i] = Z_sc_irr[(62 * (curve_num_high-1) + i)];
 80028b4:	f8b7 343c 	ldrh.w	r3, [r7, #1084]	@ 0x43c
 80028b8:	1e5a      	subs	r2, r3, #1
 80028ba:	4613      	mov	r3, r2
 80028bc:	015b      	lsls	r3, r3, #5
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	461a      	mov	r2, r3
 80028c4:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80028c8:	4413      	add	r3, r2
 80028ca:	4a55      	ldr	r2, [pc, #340]	@ (8002a20 <curve_interp+0x304>)
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80028d6:	f2a3 4134 	subw	r1, r3, #1076	@ 0x434
 80028da:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	601a      	str	r2, [r3, #0]
	for(int i=0; i<62; i++){
 80028e4:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80028e8:	3301      	adds	r3, #1
 80028ea:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 80028ee:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80028f2:	2b3d      	cmp	r3, #61	@ 0x3d
 80028f4:	ddb0      	ble.n	8002858 <curve_interp+0x13c>
		//sprintf(buffert, "%.3f\r\n", y2[i]);
		//sendData(buffert);
	}

	curve_interp_1d(x2_norm, y2, 62, x1_norm, y2_interp_norm, 62);
 80028f6:	f507 723f 	add.w	r2, r7, #764	@ 0x2fc
 80028fa:	f107 0114 	add.w	r1, r7, #20
 80028fe:	f507 7001 	add.w	r0, r7, #516	@ 0x204
 8002902:	233e      	movs	r3, #62	@ 0x3e
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	223e      	movs	r2, #62	@ 0x3e
 8002910:	f7ff fe45 	bl	800259e <curve_interp_1d>


	for(int i=0; i<62; i++){
 8002914:	2300      	movs	r3, #0
 8002916:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
 800291a:	e060      	b.n	80029de <curve_interp+0x2c2>
		y1 = Z_sc_irr[(62 * (curve_num_low-1) + i)];
 800291c:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	@ 0x43e
 8002920:	1e5a      	subs	r2, r3, #1
 8002922:	4613      	mov	r3, r2
 8002924:	015b      	lsls	r3, r3, #5
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	461a      	mov	r2, r3
 800292c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8002930:	4413      	add	r3, r2
 8002932:	4a3b      	ldr	r2, [pc, #236]	@ (8002a20 <curve_interp+0x304>)
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 800293e:	6013      	str	r3, [r2, #0]
		Z_sc_interp_inactive[61-i] =  (1 - alpha) * y1 + alpha * y2_interp_norm[i];
 8002940:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002944:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002948:	edd3 7a00 	vldr	s15, [r3]
 800294c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002950:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	ee27 7a27 	vmul.f32	s14, s14, s15
 800295c:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8002960:	f5a3 724f 	sub.w	r2, r3, #828	@ 0x33c
 8002964:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	edd3 6a00 	vldr	s13, [r3]
 8002970:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002974:	edd3 7a00 	vldr	s15, [r3]
 8002978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800297c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8002980:	f1c3 033d 	rsb	r3, r3, #61	@ 0x3d
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	f507 6289 	add.w	r2, r7, #1096	@ 0x448
 800298a:	f2a2 4244 	subw	r2, r2, #1092	@ 0x444
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	4413      	add	r3, r2
 8002992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002996:	edc3 7a00 	vstr	s15, [r3]
		V_sc_interp_inactive[61-i] = x1_norm[i] * x_max_new;
 800299a:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800299e:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 80029a2:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	ed93 7a00 	vldr	s14, [r3]
 80029ae:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80029b2:	f1c3 033d 	rsb	r3, r3, #61	@ 0x3d
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	f507 6289 	add.w	r2, r7, #1096	@ 0x448
 80029bc:	f5a2 6288 	sub.w	r2, r2, #1088	@ 0x440
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	4413      	add	r3, r2
 80029c4:	f207 422c 	addw	r2, r7, #1068	@ 0x42c
 80029c8:	edd2 7a00 	vldr	s15, [r2]
 80029cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d0:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<62; i++){
 80029d4:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80029d8:	3301      	adds	r3, #1
 80029da:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
 80029de:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80029e2:	2b3d      	cmp	r3, #61	@ 0x3d
 80029e4:	dd9a      	ble.n	800291c <curve_interp+0x200>
		/*sprintf(buffert, "%.3f\r\n", Z_sc_interp_inactive[i]);
		//sprintf(buffert, "%.3f\r\n", y2_interp_norm[i]);
		sendData(buffert);*/
	}
	V_sc_interp_inactive[62] = 0;
 80029e6:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80029ea:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	33f8      	adds	r3, #248	@ 0xf8
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
	Z_sc_interp_inactive[62] = 0;
 80029f8:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80029fc:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	33f8      	adds	r3, #248	@ 0xf8
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
}
 8002a0a:	bf00      	nop
 8002a0c:	f507 6789 	add.w	r7, r7, #1096	@ 0x448
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	42c80000 	.word	0x42c80000
 8002a18:	080101a8 	.word	0x080101a8
 8002a1c:	080100b0 	.word	0x080100b0
 8002a20:	0800f700 	.word	0x0800f700
 8002a24:	00000000 	.word	0x00000000

08002a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a28:	b5b0      	push	{r4, r5, r7, lr}
 8002a2a:	b08a      	sub	sp, #40	@ 0x28
 8002a2c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a2e:	f001 fb35 	bl	800409c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a32:	f000 fad9 	bl	8002fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a36:	f000 fe25 	bl	8003684 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8002a3a:	f000 fc33 	bl	80032a4 <MX_GPDMA1_Init>
  MX_ADC1_Init();
 8002a3e:	f000 fb51 	bl	80030e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8002a42:	f000 fbf7 	bl	8003234 <MX_DAC1_Init>
  MX_SPI2_Init();
 8002a46:	f000 fc4d 	bl	80032e4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8002a4a:	f000 fcf5 	bl	8003438 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8002a4e:	f000 fd9b 	bl	8003588 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8002a52:	f000 fde5 	bl	8003620 <MX_USB_PCD_Init>
  MX_TIM3_Init();
 8002a56:	f000 fd49 	bl	80034ec <MX_TIM3_Init>
  MX_TIM1_Init();
 8002a5a:	f000 fc99 	bl	8003390 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, EN_Pin, GPIO_PIN_RESET);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2140      	movs	r1, #64	@ 0x40
 8002a62:	4899      	ldr	r0, [pc, #612]	@ (8002cc8 <main+0x2a0>)
 8002a64:	f004 fa28 	bl	8006eb8 <HAL_GPIO_WritePin>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002a68:	217f      	movs	r1, #127	@ 0x7f
 8002a6a:	4898      	ldr	r0, [pc, #608]	@ (8002ccc <main+0x2a4>)
 8002a6c:	f002 fe3a 	bl	80056e4 <HAL_ADCEx_Calibration_Start>
  HAL_GPIO_WritePin(GPIOB, DISP_CS_Pin, GPIO_PIN_RESET);
 8002a70:	2200      	movs	r2, #0
 8002a72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a76:	4896      	ldr	r0, [pc, #600]	@ (8002cd0 <main+0x2a8>)
 8002a78:	f004 fa1e 	bl	8006eb8 <HAL_GPIO_WritePin>
  clearDisplay();
 8002a7c:	f7fe fd84 	bl	8001588 <clearDisplay>
  init_buffer();
 8002a80:	f7fe fb52 	bl	8001128 <init_buffer>
  writeBuffer();
 8002a84:	f7fe fab8 	bl	8000ff8 <writeBuffer>

  precompute_slopes(Z_sc, V_sc, Z_V_slopes, 46);
 8002a88:	232e      	movs	r3, #46	@ 0x2e
 8002a8a:	4a92      	ldr	r2, [pc, #584]	@ (8002cd4 <main+0x2ac>)
 8002a8c:	4992      	ldr	r1, [pc, #584]	@ (8002cd8 <main+0x2b0>)
 8002a8e:	4893      	ldr	r0, [pc, #588]	@ (8002cdc <main+0x2b4>)
 8002a90:	f7ff fd2c 	bl	80024ec <precompute_slopes>


  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // Start DAC
 8002a94:	2100      	movs	r1, #0
 8002a96:	4892      	ldr	r0, [pc, #584]	@ (8002ce0 <main+0x2b8>)
 8002a98:	f003 f838 	bl	8005b0c <HAL_DAC_Start>

  HAL_TIM_Base_Start_IT(&htim1);  // Slow LCD interrupt (T = 300ms)
 8002a9c:	4891      	ldr	r0, [pc, #580]	@ (8002ce4 <main+0x2bc>)
 8002a9e:	f007 ffef 	bl	800aa80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);  // Fast control loop interrupt (f = 10kHz)
 8002aa2:	4891      	ldr	r0, [pc, #580]	@ (8002ce8 <main+0x2c0>)
 8002aa4:	f007 ffec 	bl	800aa80 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, 5);
 8002aa8:	2205      	movs	r2, #5
 8002aaa:	4990      	ldr	r1, [pc, #576]	@ (8002cec <main+0x2c4>)
 8002aac:	4887      	ldr	r0, [pc, #540]	@ (8002ccc <main+0x2a4>)
 8002aae:	f001 ff5d 	bl	800496c <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(slow_timer_flag){
 8002ab2:	4b8f      	ldr	r3, [pc, #572]	@ (8002cf0 <main+0x2c8>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0fa      	beq.n	8002ab2 <main+0x8a>
		  //ADC_LOAD_VOL_CNTS           = Read_ADC_Value(ADC_CHANNEL_1);
		  //uint32_t ADC_LOAD_CURR_CNTS = Read_ADC_Value(ADC_CHANNEL_0);
		  //uint32_t ADC_POT_CNTS       = Read_ADC_Value(ADC_CHANNEL_14);
		  //uint32_t ADC_TEMP_CNTS      = Read_ADC_Value(ADC_CHANNEL_9);

		  ADC_VIN_V       = (float)adc_buffer[2]/4095.0*2.5*6.1;
 8002abc:	4b8b      	ldr	r3, [pc, #556]	@ (8002cec <main+0x2c4>)
 8002abe:	889b      	ldrh	r3, [r3, #4]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	ee07 3a90 	vmov	s15, r3
 8002ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aca:	ee17 0a90 	vmov	r0, s15
 8002ace:	f7fd fd4f 	bl	8000570 <__aeabi_f2d>
 8002ad2:	a375      	add	r3, pc, #468	@ (adr r3, 8002ca8 <main+0x280>)
 8002ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad8:	f7fd fecc 	bl	8000874 <__aeabi_ddiv>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	4b82      	ldr	r3, [pc, #520]	@ (8002cf4 <main+0x2cc>)
 8002aea:	f7fd fd99 	bl	8000620 <__aeabi_dmul>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	a36e      	add	r3, pc, #440	@ (adr r3, 8002cb0 <main+0x288>)
 8002af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afc:	f7fd fd90 	bl	8000620 <__aeabi_dmul>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4610      	mov	r0, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	f7fe f882 	bl	8000c10 <__aeabi_d2f>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4a7a      	ldr	r2, [pc, #488]	@ (8002cf8 <main+0x2d0>)
 8002b10:	6013      	str	r3, [r2, #0]
		  //ADC_LOAD_VOL_V         = (double)ADC_LOAD_VOL_CNTS/4095.0*2.5*6.0;
		  //double ADC_LOAD_CUR_A  = ((double)adc_buffer[1]/4095.0*2.5 - 0.12438)/0.20/20.0;
		  float ADC_TEMP_DC     = ((float)adc_buffer[3]/4095.0*2.5 - 0.5)/0.010;
 8002b12:	4b76      	ldr	r3, [pc, #472]	@ (8002cec <main+0x2c4>)
 8002b14:	88db      	ldrh	r3, [r3, #6]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	ee07 3a90 	vmov	s15, r3
 8002b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b20:	ee17 0a90 	vmov	r0, s15
 8002b24:	f7fd fd24 	bl	8000570 <__aeabi_f2d>
 8002b28:	a35f      	add	r3, pc, #380	@ (adr r3, 8002ca8 <main+0x280>)
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	f7fd fea1 	bl	8000874 <__aeabi_ddiv>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	4b6d      	ldr	r3, [pc, #436]	@ (8002cf4 <main+0x2cc>)
 8002b40:	f7fd fd6e 	bl	8000620 <__aeabi_dmul>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	4b6a      	ldr	r3, [pc, #424]	@ (8002cfc <main+0x2d4>)
 8002b52:	f7fd fbad 	bl	80002b0 <__aeabi_dsub>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	a356      	add	r3, pc, #344	@ (adr r3, 8002cb8 <main+0x290>)
 8002b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b64:	f7fd fe86 	bl	8000874 <__aeabi_ddiv>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f7fe f84e 	bl	8000c10 <__aeabi_d2f>
 8002b74:	4603      	mov	r3, r0
 8002b76:	617b      	str	r3, [r7, #20]
		  uint16_t ADC_POT_IRR  = (uint16_t)((float)adc_buffer[4]*0.2442002442);
 8002b78:	4b5c      	ldr	r3, [pc, #368]	@ (8002cec <main+0x2c4>)
 8002b7a:	891b      	ldrh	r3, [r3, #8]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	ee07 3a90 	vmov	s15, r3
 8002b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b86:	ee17 0a90 	vmov	r0, s15
 8002b8a:	f7fd fcf1 	bl	8000570 <__aeabi_f2d>
 8002b8e:	a34c      	add	r3, pc, #304	@ (adr r3, 8002cc0 <main+0x298>)
 8002b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b94:	f7fd fd44 	bl	8000620 <__aeabi_dmul>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f7fe f816 	bl	8000bd0 <__aeabi_d2uiz>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	827b      	strh	r3, [r7, #18]

		  ADC_POT_IRR_FILT = (uint16_t)((.75 * (float)ADC_POT_IRR) + (0.25 * (float)ADC_POT_IRR_FILT_PREV));
 8002ba8:	8a7b      	ldrh	r3, [r7, #18]
 8002baa:	ee07 3a90 	vmov	s15, r3
 8002bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb2:	ee17 0a90 	vmov	r0, s15
 8002bb6:	f7fd fcdb 	bl	8000570 <__aeabi_f2d>
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	4b50      	ldr	r3, [pc, #320]	@ (8002d00 <main+0x2d8>)
 8002bc0:	f7fd fd2e 	bl	8000620 <__aeabi_dmul>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4614      	mov	r4, r2
 8002bca:	461d      	mov	r5, r3
 8002bcc:	4b4d      	ldr	r3, [pc, #308]	@ (8002d04 <main+0x2dc>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	ee07 3a90 	vmov	s15, r3
 8002bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd8:	ee17 0a90 	vmov	r0, s15
 8002bdc:	f7fd fcc8 	bl	8000570 <__aeabi_f2d>
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	4b48      	ldr	r3, [pc, #288]	@ (8002d08 <main+0x2e0>)
 8002be6:	f7fd fd1b 	bl	8000620 <__aeabi_dmul>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4620      	mov	r0, r4
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	f7fd fb5f 	bl	80002b4 <__adddf3>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f7fd ffe7 	bl	8000bd0 <__aeabi_d2uiz>
 8002c02:	4603      	mov	r3, r0
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	4b41      	ldr	r3, [pc, #260]	@ (8002d0c <main+0x2e4>)
 8002c08:	801a      	strh	r2, [r3, #0]

		  	 // *******************
		  uint32_t currentTime = HAL_GetTick(); // Current system time in ms
 8002c0a:	f001 faf9 	bl	8004200 <HAL_GetTick>
 8002c0e:	60f8      	str	r0, [r7, #12]

		  //if(abs(ADC_POT_IRR_FILT_PREV - ADC_POT_IRR_FILT)  > 3){
		  if(ADC_POT_IRR_FILT != ADC_POT_IRR_FILT_PREV){
 8002c10:	4b3e      	ldr	r3, [pc, #248]	@ (8002d0c <main+0x2e4>)
 8002c12:	881a      	ldrh	r2, [r3, #0]
 8002c14:	4b3b      	ldr	r3, [pc, #236]	@ (8002d04 <main+0x2dc>)
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d009      	beq.n	8002c30 <main+0x208>
			  lastStableTime = currentTime;
 8002c1c:	4a3c      	ldr	r2, [pc, #240]	@ (8002d10 <main+0x2e8>)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6013      	str	r3, [r2, #0]
			  isStable = false;
 8002c22:	4b3c      	ldr	r3, [pc, #240]	@ (8002d14 <main+0x2ec>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
			  hasRun = false;
 8002c28:	4b3b      	ldr	r3, [pc, #236]	@ (8002d18 <main+0x2f0>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	e010      	b.n	8002c52 <main+0x22a>
		  } else if (!isStable && (currentTime - lastStableTime >= 300)) {
 8002c30:	4b38      	ldr	r3, [pc, #224]	@ (8002d14 <main+0x2ec>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	f083 0301 	eor.w	r3, r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <main+0x22a>
 8002c3e:	4b34      	ldr	r3, [pc, #208]	@ (8002d10 <main+0x2e8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002c4a:	d302      	bcc.n	8002c52 <main+0x22a>
		      // Value remained unchanged for the required duration
			  isStable = true;
 8002c4c:	4b31      	ldr	r3, [pc, #196]	@ (8002d14 <main+0x2ec>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
		    }
		    if (isStable && !hasRun) {
 8002c52:	4b30      	ldr	r3, [pc, #192]	@ (8002d14 <main+0x2ec>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d07b      	beq.n	8002d52 <main+0x32a>
 8002c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d18 <main+0x2f0>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	f083 0301 	eor.w	r3, r3, #1
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d074      	beq.n	8002d52 <main+0x32a>
		        hasRun = true; // Ensure this block only runs once
 8002c68:	4b2b      	ldr	r3, [pc, #172]	@ (8002d18 <main+0x2f0>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
		        HAL_GPIO_TogglePin(GPIOB, LED_YELLOW_Pin);
 8002c6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c72:	4817      	ldr	r0, [pc, #92]	@ (8002cd0 <main+0x2a8>)
 8002c74:	f004 f938 	bl	8006ee8 <HAL_GPIO_TogglePin>


		            // A_buffer being used in high speed loop
		        	if(A_buffer_active == 1){
 8002c78:	4b28      	ldr	r3, [pc, #160]	@ (8002d1c <main+0x2f4>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d154      	bne.n	8002d2c <main+0x304>
		        		curve_interp(ADC_POT_IRR_FILT, V_sc_interp_B, Z_sc_interp_B);
 8002c82:	4b22      	ldr	r3, [pc, #136]	@ (8002d0c <main+0x2e4>)
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	4a26      	ldr	r2, [pc, #152]	@ (8002d20 <main+0x2f8>)
 8002c88:	4926      	ldr	r1, [pc, #152]	@ (8002d24 <main+0x2fc>)
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fd46 	bl	800271c <curve_interp>
		        		precompute_slopes(Z_sc_interp_B, V_sc_interp_B, Z_V_slopes_B, 63);
 8002c90:	233f      	movs	r3, #63	@ 0x3f
 8002c92:	4a25      	ldr	r2, [pc, #148]	@ (8002d28 <main+0x300>)
 8002c94:	4923      	ldr	r1, [pc, #140]	@ (8002d24 <main+0x2fc>)
 8002c96:	4822      	ldr	r0, [pc, #136]	@ (8002d20 <main+0x2f8>)
 8002c98:	f7ff fc28 	bl	80024ec <precompute_slopes>
		        		A_buffer_active = 0;
 8002c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002d1c <main+0x2f4>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	e053      	b.n	8002d4c <main+0x324>
 8002ca4:	f3af 8000 	nop.w
 8002ca8:	00000000 	.word	0x00000000
 8002cac:	40affe00 	.word	0x40affe00
 8002cb0:	66666666 	.word	0x66666666
 8002cb4:	40186666 	.word	0x40186666
 8002cb8:	47ae147b 	.word	0x47ae147b
 8002cbc:	3f847ae1 	.word	0x3f847ae1
 8002cc0:	1f41d1c1 	.word	0x1f41d1c1
 8002cc4:	3fcf41f4 	.word	0x3fcf41f4
 8002cc8:	42020000 	.word	0x42020000
 8002ccc:	200001f4 	.word	0x200001f4
 8002cd0:	42020400 	.word	0x42020400
 8002cd4:	200036e8 	.word	0x200036e8
 8002cd8:	0800f590 	.word	0x0800f590
 8002cdc:	0800f648 	.word	0x0800f648
 8002ce0:	200002d4 	.word	0x200002d4
 8002ce4:	20000378 	.word	0x20000378
 8002ce8:	20000410 	.word	0x20000410
 8002cec:	200007d8 	.word	0x200007d8
 8002cf0:	200007d4 	.word	0x200007d4
 8002cf4:	40040000 	.word	0x40040000
 8002cf8:	200036cc 	.word	0x200036cc
 8002cfc:	3fe00000 	.word	0x3fe00000
 8002d00:	3fe80000 	.word	0x3fe80000
 8002d04:	200037ae 	.word	0x200037ae
 8002d08:	3fd00000 	.word	0x3fd00000
 8002d0c:	200037ac 	.word	0x200037ac
 8002d10:	20003da8 	.word	0x20003da8
 8002d14:	20003dac 	.word	0x20003dac
 8002d18:	20003dad 	.word	0x20003dad
 8002d1c:	20000000 	.word	0x20000000
 8002d20:	20003ab0 	.word	0x20003ab0
 8002d24:	200039b4 	.word	0x200039b4
 8002d28:	20003ca8 	.word	0x20003ca8

		        	}

		        	// B_buffer being used in high speed loop
		        	else{
		        		curve_interp(ADC_POT_IRR_FILT, V_sc_interp_A, Z_sc_interp_A);
 8002d2c:	4b91      	ldr	r3, [pc, #580]	@ (8002f74 <main+0x54c>)
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	4a91      	ldr	r2, [pc, #580]	@ (8002f78 <main+0x550>)
 8002d32:	4992      	ldr	r1, [pc, #584]	@ (8002f7c <main+0x554>)
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fcf1 	bl	800271c <curve_interp>
		        		precompute_slopes(Z_sc_interp_A, V_sc_interp_A, Z_V_slopes_A, 63);
 8002d3a:	233f      	movs	r3, #63	@ 0x3f
 8002d3c:	4a90      	ldr	r2, [pc, #576]	@ (8002f80 <main+0x558>)
 8002d3e:	498f      	ldr	r1, [pc, #572]	@ (8002f7c <main+0x554>)
 8002d40:	488d      	ldr	r0, [pc, #564]	@ (8002f78 <main+0x550>)
 8002d42:	f7ff fbd3 	bl	80024ec <precompute_slopes>
		        		A_buffer_active = 1;
 8002d46:	4b8f      	ldr	r3, [pc, #572]	@ (8002f84 <main+0x55c>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]
		        	}

		        //

				initial_run = 1;
 8002d4c:	4b8e      	ldr	r3, [pc, #568]	@ (8002f88 <main+0x560>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]

		    } //**************************
		    ADC_POT_IRR_FILT_PREV = ADC_POT_IRR_FILT;
 8002d52:	4b88      	ldr	r3, [pc, #544]	@ (8002f74 <main+0x54c>)
 8002d54:	881a      	ldrh	r2, [r3, #0]
 8002d56:	4b8d      	ldr	r3, [pc, #564]	@ (8002f8c <main+0x564>)
 8002d58:	801a      	strh	r2, [r3, #0]

		  sendData(adcBuffer1);
		  sprintf(adcBuffer1, "%lu\n\n", ADC_LOAD_CURR_CNTS);  // Convert to string (optional)
		  sendData(adcBuffer1);*/

		  uint8_t OUTPUT_EN_SW_STATE =  HAL_GPIO_ReadPin(GPIOA, OUTPUT_EN_SW_Pin);
 8002d5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d5e:	488c      	ldr	r0, [pc, #560]	@ (8002f90 <main+0x568>)
 8002d60:	f004 f892 	bl	8006e88 <HAL_GPIO_ReadPin>
 8002d64:	4603      	mov	r3, r0
 8002d66:	72fb      	strb	r3, [r7, #11]
		  HAL_GPIO_WritePin(GPIOA, EN_Pin, OUTPUT_EN_SW_STATE);
 8002d68:	7afb      	ldrb	r3, [r7, #11]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2140      	movs	r1, #64	@ 0x40
 8002d6e:	4888      	ldr	r0, [pc, #544]	@ (8002f90 <main+0x568>)
 8002d70:	f004 f8a2 	bl	8006eb8 <HAL_GPIO_WritePin>

		  HAL_GPIO_TogglePin(GPIOB, LED_BLUE_Pin);
 8002d74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d78:	4886      	ldr	r0, [pc, #536]	@ (8002f94 <main+0x56c>)
 8002d7a:	f004 f8b5 	bl	8006ee8 <HAL_GPIO_TogglePin>

		  init_buffer();
 8002d7e:	f7fe f9d3 	bl	8001128 <init_buffer>

		  drawString(290, 20, "Vout = ",  0, 1, 1, 1);
 8002d82:	2301      	movs	r3, #1
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	2301      	movs	r3, #1
 8002d88:	9301      	str	r3, [sp, #4]
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	4a81      	ldr	r2, [pc, #516]	@ (8002f98 <main+0x570>)
 8002d92:	2114      	movs	r1, #20
 8002d94:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8002d98:	f7fe ffb2 	bl	8001d00 <drawString>
		  drawDouble(ADC_LOAD_VOL_V, 330, 20);
 8002d9c:	4b7f      	ldr	r3, [pc, #508]	@ (8002f9c <main+0x574>)
 8002d9e:	edd3 7a00 	vldr	s15, [r3]
 8002da2:	2114      	movs	r1, #20
 8002da4:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8002da8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dac:	f7fe ffe4 	bl	8001d78 <drawDouble>
		  drawString(365, 20, "V",  0, 1, 1, 1);
 8002db0:	2301      	movs	r3, #1
 8002db2:	9302      	str	r3, [sp, #8]
 8002db4:	2301      	movs	r3, #1
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	2301      	movs	r3, #1
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	4a78      	ldr	r2, [pc, #480]	@ (8002fa0 <main+0x578>)
 8002dc0:	2114      	movs	r1, #20
 8002dc2:	f240 106d 	movw	r0, #365	@ 0x16d
 8002dc6:	f7fe ff9b 	bl	8001d00 <drawString>

		  drawString(290, 35, "Iout = ",  0, 1, 1, 1);
 8002dca:	2301      	movs	r3, #1
 8002dcc:	9302      	str	r3, [sp, #8]
 8002dce:	2301      	movs	r3, #1
 8002dd0:	9301      	str	r3, [sp, #4]
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	4a72      	ldr	r2, [pc, #456]	@ (8002fa4 <main+0x57c>)
 8002dda:	2123      	movs	r1, #35	@ 0x23
 8002ddc:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8002de0:	f7fe ff8e 	bl	8001d00 <drawString>
		  drawDouble(ADC_LOAD_CUR_A*1000, 330, 35);
 8002de4:	4b70      	ldr	r3, [pc, #448]	@ (8002fa8 <main+0x580>)
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8002fac <main+0x584>
 8002dee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002df2:	2123      	movs	r1, #35	@ 0x23
 8002df4:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8002df8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dfc:	f7fe ffbc 	bl	8001d78 <drawDouble>
		  drawString(370, 35, "mA",  0, 1, 1, 1);
 8002e00:	2301      	movs	r3, #1
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	2301      	movs	r3, #1
 8002e06:	9301      	str	r3, [sp, #4]
 8002e08:	2301      	movs	r3, #1
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	4a68      	ldr	r2, [pc, #416]	@ (8002fb0 <main+0x588>)
 8002e10:	2123      	movs	r1, #35	@ 0x23
 8002e12:	f44f 70b9 	mov.w	r0, #370	@ 0x172
 8002e16:	f7fe ff73 	bl	8001d00 <drawString>

		  drawString(290, 50, "Temp = ",  0, 1, 1, 1);
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	9302      	str	r3, [sp, #8]
 8002e1e:	2301      	movs	r3, #1
 8002e20:	9301      	str	r3, [sp, #4]
 8002e22:	2301      	movs	r3, #1
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	2300      	movs	r3, #0
 8002e28:	4a62      	ldr	r2, [pc, #392]	@ (8002fb4 <main+0x58c>)
 8002e2a:	2132      	movs	r1, #50	@ 0x32
 8002e2c:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8002e30:	f7fe ff66 	bl	8001d00 <drawString>
		  drawDouble(ADC_TEMP_DC, 330, 50);
 8002e34:	2132      	movs	r1, #50	@ 0x32
 8002e36:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8002e3a:	ed97 0a05 	vldr	s0, [r7, #20]
 8002e3e:	f7fe ff9b 	bl	8001d78 <drawDouble>
		  drawString(370, 50, "C",  0, 1, 1, 1);
 8002e42:	2301      	movs	r3, #1
 8002e44:	9302      	str	r3, [sp, #8]
 8002e46:	2301      	movs	r3, #1
 8002e48:	9301      	str	r3, [sp, #4]
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	4a59      	ldr	r2, [pc, #356]	@ (8002fb8 <main+0x590>)
 8002e52:	2132      	movs	r1, #50	@ 0x32
 8002e54:	f44f 70b9 	mov.w	r0, #370	@ 0x172
 8002e58:	f7fe ff52 	bl	8001d00 <drawString>

		  drawString(290, 65, "Vin = ",  0, 1, 1, 1);
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	9302      	str	r3, [sp, #8]
 8002e60:	2301      	movs	r3, #1
 8002e62:	9301      	str	r3, [sp, #4]
 8002e64:	2301      	movs	r3, #1
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	4a54      	ldr	r2, [pc, #336]	@ (8002fbc <main+0x594>)
 8002e6c:	2141      	movs	r1, #65	@ 0x41
 8002e6e:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8002e72:	f7fe ff45 	bl	8001d00 <drawString>
		  drawDouble(ADC_VIN_V, 330, 65);
 8002e76:	4b52      	ldr	r3, [pc, #328]	@ (8002fc0 <main+0x598>)
 8002e78:	edd3 7a00 	vldr	s15, [r3]
 8002e7c:	2141      	movs	r1, #65	@ 0x41
 8002e7e:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8002e82:	eeb0 0a67 	vmov.f32	s0, s15
 8002e86:	f7fe ff77 	bl	8001d78 <drawDouble>
		  drawString(365, 65, "V",  0, 1, 1, 1);
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	9302      	str	r3, [sp, #8]
 8002e8e:	2301      	movs	r3, #1
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	2301      	movs	r3, #1
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	2300      	movs	r3, #0
 8002e98:	4a41      	ldr	r2, [pc, #260]	@ (8002fa0 <main+0x578>)
 8002e9a:	2141      	movs	r1, #65	@ 0x41
 8002e9c:	f240 106d 	movw	r0, #365	@ 0x16d
 8002ea0:	f7fe ff2e 	bl	8001d00 <drawString>

		  drawString(290, 80, "Irr = ",  0, 1, 1, 1);
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	9302      	str	r3, [sp, #8]
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	2301      	movs	r3, #1
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	4a44      	ldr	r2, [pc, #272]	@ (8002fc4 <main+0x59c>)
 8002eb4:	2150      	movs	r1, #80	@ 0x50
 8002eb6:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8002eba:	f7fe ff21 	bl	8001d00 <drawString>
		  drawInt(ADC_POT_IRR_FILT, 330, 80);
 8002ebe:	4b2d      	ldr	r3, [pc, #180]	@ (8002f74 <main+0x54c>)
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	2250      	movs	r2, #80	@ 0x50
 8002ec4:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe ff7f 	bl	8001dcc <drawInt>
		  drawString(350, 80, "W/m^2",  0, 1, 1, 1);
 8002ece:	2301      	movs	r3, #1
 8002ed0:	9302      	str	r3, [sp, #8]
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	2300      	movs	r3, #0
 8002edc:	4a3a      	ldr	r2, [pc, #232]	@ (8002fc8 <main+0x5a0>)
 8002ede:	2150      	movs	r1, #80	@ 0x50
 8002ee0:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8002ee4:	f7fe ff0c 	bl	8001d00 <drawString>

		  //
		  //uint16_t ADC_LOAD_VOL_MAPPED   = (uint16_t)roundf(map(ADC_LOAD_VOL_V, 0, 3, 30, 260));
		  uint16_t ADC_LOAD_VOL_MAPPED   = (uint16_t)roundf(map(ADC_LOAD_VOL_V, 0, 5, 40, 320));
 8002ee8:	4b2c      	ldr	r3, [pc, #176]	@ (8002f9c <main+0x574>)
 8002eea:	edd3 7a00 	vldr	s15, [r3]
 8002eee:	ed9f 2a37 	vldr	s4, [pc, #220]	@ 8002fcc <main+0x5a4>
 8002ef2:	eddf 1a37 	vldr	s3, [pc, #220]	@ 8002fd0 <main+0x5a8>
 8002ef6:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8002efa:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8002fd4 <main+0x5ac>
 8002efe:	eeb0 0a67 	vmov.f32	s0, s15
 8002f02:	f7fe ff87 	bl	8001e14 <map>
 8002f06:	eef0 7a40 	vmov.f32	s15, s0
 8002f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f0e:	f00c faf3 	bl	800f4f8 <roundf>
 8002f12:	eef0 7a40 	vmov.f32	s15, s0
 8002f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f1a:	ee17 3a90 	vmov	r3, s15
 8002f1e:	813b      	strh	r3, [r7, #8]
		  uint16_t ADC_LOAD_CUR_A_MAPPED = (uint16_t)roundf(map(ADC_LOAD_CUR_A, 0, .05, 200, 50));
 8002f20:	4b21      	ldr	r3, [pc, #132]	@ (8002fa8 <main+0x580>)
 8002f22:	edd3 7a00 	vldr	s15, [r3]
 8002f26:	ed9f 2a2c 	vldr	s4, [pc, #176]	@ 8002fd8 <main+0x5b0>
 8002f2a:	eddf 1a2c 	vldr	s3, [pc, #176]	@ 8002fdc <main+0x5b4>
 8002f2e:	ed9f 1a2c 	vldr	s2, [pc, #176]	@ 8002fe0 <main+0x5b8>
 8002f32:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8002fd4 <main+0x5ac>
 8002f36:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3a:	f7fe ff6b 	bl	8001e14 <map>
 8002f3e:	eef0 7a40 	vmov.f32	s15, s0
 8002f42:	eeb0 0a67 	vmov.f32	s0, s15
 8002f46:	f00c fad7 	bl	800f4f8 <roundf>
 8002f4a:	eef0 7a40 	vmov.f32	s15, s0
 8002f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f52:	ee17 3a90 	vmov	r3, s15
 8002f56:	80fb      	strh	r3, [r7, #6]
		  drawCircle(ADC_LOAD_VOL_MAPPED, ADC_LOAD_CUR_A_MAPPED, 2, 0);
 8002f58:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8002f5c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002f60:	2300      	movs	r3, #0
 8002f62:	2202      	movs	r2, #2
 8002f64:	f7fe fc6a 	bl	800183c <drawCircle>

		  writeBuffer();
 8002f68:	f7fe f846 	bl	8000ff8 <writeBuffer>

		  slow_timer_flag = 0;
 8002f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe4 <main+0x5bc>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
	  if(slow_timer_flag){
 8002f72:	e59e      	b.n	8002ab2 <main+0x8a>
 8002f74:	200037ac 	.word	0x200037ac
 8002f78:	200038b8 	.word	0x200038b8
 8002f7c:	200037bc 	.word	0x200037bc
 8002f80:	20003bac 	.word	0x20003bac
 8002f84:	20000000 	.word	0x20000000
 8002f88:	20003da4 	.word	0x20003da4
 8002f8c:	200037ae 	.word	0x200037ae
 8002f90:	42020000 	.word	0x42020000
 8002f94:	42020400 	.word	0x42020400
 8002f98:	0800f554 	.word	0x0800f554
 8002f9c:	200036c8 	.word	0x200036c8
 8002fa0:	0800f55c 	.word	0x0800f55c
 8002fa4:	0800f560 	.word	0x0800f560
 8002fa8:	200036d0 	.word	0x200036d0
 8002fac:	447a0000 	.word	0x447a0000
 8002fb0:	0800f568 	.word	0x0800f568
 8002fb4:	0800f56c 	.word	0x0800f56c
 8002fb8:	0800f574 	.word	0x0800f574
 8002fbc:	0800f578 	.word	0x0800f578
 8002fc0:	200036cc 	.word	0x200036cc
 8002fc4:	0800f580 	.word	0x0800f580
 8002fc8:	0800f588 	.word	0x0800f588
 8002fcc:	43a00000 	.word	0x43a00000
 8002fd0:	42200000 	.word	0x42200000
 8002fd4:	00000000 	.word	0x00000000
 8002fd8:	42480000 	.word	0x42480000
 8002fdc:	43480000 	.word	0x43480000
 8002fe0:	3d4ccccd 	.word	0x3d4ccccd
 8002fe4:	200007d4 	.word	0x200007d4

08002fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b09c      	sub	sp, #112	@ 0x70
 8002fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fee:	f107 0320 	add.w	r3, r7, #32
 8002ff2:	2250      	movs	r2, #80	@ 0x50
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f00a f8a1 	bl	800d13e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ffc:	f107 0308 	add.w	r3, r7, #8
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	611a      	str	r2, [r3, #16]
 800300c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800300e:	4b33      	ldr	r3, [pc, #204]	@ (80030dc <SystemClock_Config+0xf4>)
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	4a32      	ldr	r2, [pc, #200]	@ (80030dc <SystemClock_Config+0xf4>)
 8003014:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003018:	6113      	str	r3, [r2, #16]
 800301a:	4b30      	ldr	r3, [pc, #192]	@ (80030dc <SystemClock_Config+0xf4>)
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003026:	bf00      	nop
 8003028:	4b2c      	ldr	r3, [pc, #176]	@ (80030dc <SystemClock_Config+0xf4>)
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b08      	cmp	r3, #8
 8003032:	d1f9      	bne.n	8003028 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8003034:	233a      	movs	r3, #58	@ 0x3a
 8003036:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_CSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003038:	2301      	movs	r3, #1
 800303a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 800303c:	2308      	movs	r3, #8
 800303e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003040:	2340      	movs	r3, #64	@ 0x40
 8003042:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003044:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003048:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800304a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800304e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8003050:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003054:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8003056:	2320      	movs	r3, #32
 8003058:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800305a:	2302      	movs	r3, #2
 800305c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSI;
 800305e:	2301      	movs	r3, #1
 8003060:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003062:	2302      	movs	r3, #2
 8003064:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 26;
 8003066:	231a      	movs	r3, #26
 8003068:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800306a:	2302      	movs	r3, #2
 800306c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 16;
 800306e:	2310      	movs	r3, #16
 8003070:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003072:	2302      	movs	r3, #2
 8003074:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8003076:	230c      	movs	r3, #12
 8003078:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800307a:	2300      	movs	r3, #0
 800307c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003082:	f107 0320 	add.w	r3, r7, #32
 8003086:	4618      	mov	r0, r3
 8003088:	f004 f86c 	bl	8007164 <HAL_RCC_OscConfig>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003092:	f000 fb5f 	bl	8003754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003096:	231f      	movs	r3, #31
 8003098:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800309a:	2303      	movs	r3, #3
 800309c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800309e:	2308      	movs	r3, #8
 80030a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80030ae:	f107 0308 	add.w	r3, r7, #8
 80030b2:	2104      	movs	r1, #4
 80030b4:	4618      	mov	r0, r3
 80030b6:	f004 fc8d 	bl	80079d4 <HAL_RCC_ClockConfig>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80030c0:	f000 fb48 	bl	8003754 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80030c4:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <SystemClock_Config+0xf8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80030cc:	4a04      	ldr	r2, [pc, #16]	@ (80030e0 <SystemClock_Config+0xf8>)
 80030ce:	f043 0320 	orr.w	r3, r3, #32
 80030d2:	6013      	str	r3, [r2, #0]
}
 80030d4:	bf00      	nop
 80030d6:	3770      	adds	r7, #112	@ 0x70
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	44020800 	.word	0x44020800
 80030e0:	40022000 	.word	0x40022000

080030e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80030ea:	463b      	mov	r3, r7
 80030ec:	2220      	movs	r2, #32
 80030ee:	2100      	movs	r1, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f00a f824 	bl	800d13e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80030f6:	4b49      	ldr	r3, [pc, #292]	@ (800321c <MX_ADC1_Init+0x138>)
 80030f8:	4a49      	ldr	r2, [pc, #292]	@ (8003220 <MX_ADC1_Init+0x13c>)
 80030fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80030fc:	4b47      	ldr	r3, [pc, #284]	@ (800321c <MX_ADC1_Init+0x138>)
 80030fe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003102:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003104:	4b45      	ldr	r3, [pc, #276]	@ (800321c <MX_ADC1_Init+0x138>)
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800310a:	4b44      	ldr	r3, [pc, #272]	@ (800321c <MX_ADC1_Init+0x138>)
 800310c:	2200      	movs	r2, #0
 800310e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003110:	4b42      	ldr	r3, [pc, #264]	@ (800321c <MX_ADC1_Init+0x138>)
 8003112:	2201      	movs	r2, #1
 8003114:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003116:	4b41      	ldr	r3, [pc, #260]	@ (800321c <MX_ADC1_Init+0x138>)
 8003118:	2204      	movs	r2, #4
 800311a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800311c:	4b3f      	ldr	r3, [pc, #252]	@ (800321c <MX_ADC1_Init+0x138>)
 800311e:	2200      	movs	r2, #0
 8003120:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003122:	4b3e      	ldr	r3, [pc, #248]	@ (800321c <MX_ADC1_Init+0x138>)
 8003124:	2200      	movs	r2, #0
 8003126:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8003128:	4b3c      	ldr	r3, [pc, #240]	@ (800321c <MX_ADC1_Init+0x138>)
 800312a:	2205      	movs	r2, #5
 800312c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800312e:	4b3b      	ldr	r3, [pc, #236]	@ (800321c <MX_ADC1_Init+0x138>)
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8003136:	4b39      	ldr	r3, [pc, #228]	@ (800321c <MX_ADC1_Init+0x138>)
 8003138:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 800313c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800313e:	4b37      	ldr	r3, [pc, #220]	@ (800321c <MX_ADC1_Init+0x138>)
 8003140:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003144:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003146:	4b35      	ldr	r3, [pc, #212]	@ (800321c <MX_ADC1_Init+0x138>)
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800314e:	4b33      	ldr	r3, [pc, #204]	@ (800321c <MX_ADC1_Init+0x138>)
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003154:	4b31      	ldr	r3, [pc, #196]	@ (800321c <MX_ADC1_Init+0x138>)
 8003156:	2200      	movs	r2, #0
 8003158:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800315a:	4b30      	ldr	r3, [pc, #192]	@ (800321c <MX_ADC1_Init+0x138>)
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003162:	482e      	ldr	r0, [pc, #184]	@ (800321c <MX_ADC1_Init+0x138>)
 8003164:	f001 fab4 	bl	80046d0 <HAL_ADC_Init>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800316e:	f000 faf1 	bl	8003754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003172:	4b2c      	ldr	r3, [pc, #176]	@ (8003224 <MX_ADC1_Init+0x140>)
 8003174:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003176:	2306      	movs	r3, #6
 8003178:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800317a:	2302      	movs	r3, #2
 800317c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800317e:	237f      	movs	r3, #127	@ 0x7f
 8003180:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003182:	2304      	movs	r3, #4
 8003184:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800318a:	463b      	mov	r3, r7
 800318c:	4619      	mov	r1, r3
 800318e:	4823      	ldr	r0, [pc, #140]	@ (800321c <MX_ADC1_Init+0x138>)
 8003190:	f001 fcf8 	bl	8004b84 <HAL_ADC_ConfigChannel>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 800319a:	f000 fadb 	bl	8003754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800319e:	2301      	movs	r3, #1
 80031a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80031a2:	230c      	movs	r3, #12
 80031a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031a6:	463b      	mov	r3, r7
 80031a8:	4619      	mov	r1, r3
 80031aa:	481c      	ldr	r0, [pc, #112]	@ (800321c <MX_ADC1_Init+0x138>)
 80031ac:	f001 fcea 	bl	8004b84 <HAL_ADC_ConfigChannel>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80031b6:	f000 facd 	bl	8003754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80031ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003228 <MX_ADC1_Init+0x144>)
 80031bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80031be:	2312      	movs	r3, #18
 80031c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80031c2:	2301      	movs	r3, #1
 80031c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031c6:	463b      	mov	r3, r7
 80031c8:	4619      	mov	r1, r3
 80031ca:	4814      	ldr	r0, [pc, #80]	@ (800321c <MX_ADC1_Init+0x138>)
 80031cc:	f001 fcda 	bl	8004b84 <HAL_ADC_ConfigChannel>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80031d6:	f000 fabd 	bl	8003754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80031da:	4b14      	ldr	r3, [pc, #80]	@ (800322c <MX_ADC1_Init+0x148>)
 80031dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80031de:	2318      	movs	r3, #24
 80031e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031e2:	463b      	mov	r3, r7
 80031e4:	4619      	mov	r1, r3
 80031e6:	480d      	ldr	r0, [pc, #52]	@ (800321c <MX_ADC1_Init+0x138>)
 80031e8:	f001 fccc 	bl	8004b84 <HAL_ADC_ConfigChannel>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 80031f2:	f000 faaf 	bl	8003754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80031f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003230 <MX_ADC1_Init+0x14c>)
 80031f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80031fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003200:	463b      	mov	r3, r7
 8003202:	4619      	mov	r1, r3
 8003204:	4805      	ldr	r0, [pc, #20]	@ (800321c <MX_ADC1_Init+0x138>)
 8003206:	f001 fcbd 	bl	8004b84 <HAL_ADC_ConfigChannel>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8003210:	f000 faa0 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003214:	bf00      	nop
 8003216:	3720      	adds	r7, #32
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	200001f4 	.word	0x200001f4
 8003220:	42028000 	.word	0x42028000
 8003224:	04300002 	.word	0x04300002
 8003228:	4fb80000 	.word	0x4fb80000
 800322c:	25b00200 	.word	0x25b00200
 8003230:	3ac04000 	.word	0x3ac04000

08003234 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08c      	sub	sp, #48	@ 0x30
 8003238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800323a:	1d3b      	adds	r3, r7, #4
 800323c:	222c      	movs	r2, #44	@ 0x2c
 800323e:	2100      	movs	r1, #0
 8003240:	4618      	mov	r0, r3
 8003242:	f009 ff7c 	bl	800d13e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003246:	4b15      	ldr	r3, [pc, #84]	@ (800329c <MX_DAC1_Init+0x68>)
 8003248:	4a15      	ldr	r2, [pc, #84]	@ (80032a0 <MX_DAC1_Init+0x6c>)
 800324a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800324c:	4813      	ldr	r0, [pc, #76]	@ (800329c <MX_DAC1_Init+0x68>)
 800324e:	f002 fc3b 	bl	8005ac8 <HAL_DAC_Init>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8003258:	f000 fa7c 	bl	8003754 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800325c:	2300      	movs	r3, #0
 800325e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003260:	2300      	movs	r3, #0
 8003262:	723b      	strb	r3, [r7, #8]
  sConfig.DAC_SignedFormat = DISABLE;
 8003264:	2300      	movs	r3, #0
 8003266:	727b      	strb	r3, [r7, #9]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800326c:	2300      	movs	r3, #0
 800326e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8003274:	2301      	movs	r3, #1
 8003276:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003278:	2300      	movs	r3, #0
 800327a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800327c:	1d3b      	adds	r3, r7, #4
 800327e:	2200      	movs	r2, #0
 8003280:	4619      	mov	r1, r3
 8003282:	4806      	ldr	r0, [pc, #24]	@ (800329c <MX_DAC1_Init+0x68>)
 8003284:	f002 fcdc 	bl	8005c40 <HAL_DAC_ConfigChannel>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <MX_DAC1_Init+0x5e>
  {
    Error_Handler();
 800328e:	f000 fa61 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003292:	bf00      	nop
 8003294:	3730      	adds	r7, #48	@ 0x30
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	200002d4 	.word	0x200002d4
 80032a0:	42028400 	.word	0x42028400

080032a4 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80032aa:	4b0d      	ldr	r3, [pc, #52]	@ (80032e0 <MX_GPDMA1_Init+0x3c>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b0:	4a0b      	ldr	r2, [pc, #44]	@ (80032e0 <MX_GPDMA1_Init+0x3c>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80032ba:	4b09      	ldr	r3, [pc, #36]	@ (80032e0 <MX_GPDMA1_Init+0x3c>)
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	607b      	str	r3, [r7, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel7_IRQn, 0, 0);
 80032c8:	2200      	movs	r2, #0
 80032ca:	2100      	movs	r1, #0
 80032cc:	2022      	movs	r0, #34	@ 0x22
 80032ce:	f002 fb23 	bl	8005918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel7_IRQn);
 80032d2:	2022      	movs	r0, #34	@ 0x22
 80032d4:	f002 fb3a 	bl	800594c <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	44020c00 	.word	0x44020c00

080032e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80032e8:	4b27      	ldr	r3, [pc, #156]	@ (8003388 <MX_SPI2_Init+0xa4>)
 80032ea:	4a28      	ldr	r2, [pc, #160]	@ (800338c <MX_SPI2_Init+0xa8>)
 80032ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80032ee:	4b26      	ldr	r3, [pc, #152]	@ (8003388 <MX_SPI2_Init+0xa4>)
 80032f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80032f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80032f6:	4b24      	ldr	r3, [pc, #144]	@ (8003388 <MX_SPI2_Init+0xa4>)
 80032f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032fc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80032fe:	4b22      	ldr	r3, [pc, #136]	@ (8003388 <MX_SPI2_Init+0xa4>)
 8003300:	2207      	movs	r2, #7
 8003302:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003304:	4b20      	ldr	r3, [pc, #128]	@ (8003388 <MX_SPI2_Init+0xa4>)
 8003306:	2200      	movs	r2, #0
 8003308:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800330a:	4b1f      	ldr	r3, [pc, #124]	@ (8003388 <MX_SPI2_Init+0xa4>)
 800330c:	2200      	movs	r2, #0
 800330e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003310:	4b1d      	ldr	r3, [pc, #116]	@ (8003388 <MX_SPI2_Init+0xa4>)
 8003312:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003316:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003318:	4b1b      	ldr	r3, [pc, #108]	@ (8003388 <MX_SPI2_Init+0xa4>)
 800331a:	2200      	movs	r2, #0
 800331c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800331e:	4b1a      	ldr	r3, [pc, #104]	@ (8003388 <MX_SPI2_Init+0xa4>)
 8003320:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003324:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003326:	4b18      	ldr	r3, [pc, #96]	@ (8003388 <MX_SPI2_Init+0xa4>)
 8003328:	2200      	movs	r2, #0
 800332a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800332c:	4b16      	ldr	r3, [pc, #88]	@ (8003388 <MX_SPI2_Init+0xa4>)
 800332e:	2200      	movs	r2, #0
 8003330:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8003332:	4b15      	ldr	r3, [pc, #84]	@ (8003388 <MX_SPI2_Init+0xa4>)
 8003334:	2207      	movs	r2, #7
 8003336:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003338:	4b13      	ldr	r3, [pc, #76]	@ (8003388 <MX_SPI2_Init+0xa4>)
 800333a:	2200      	movs	r2, #0
 800333c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800333e:	4b12      	ldr	r3, [pc, #72]	@ (8003388 <MX_SPI2_Init+0xa4>)
 8003340:	2200      	movs	r2, #0
 8003342:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003344:	4b10      	ldr	r3, [pc, #64]	@ (8003388 <MX_SPI2_Init+0xa4>)
 8003346:	2200      	movs	r2, #0
 8003348:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800334a:	4b0f      	ldr	r3, [pc, #60]	@ (8003388 <MX_SPI2_Init+0xa4>)
 800334c:	2200      	movs	r2, #0
 800334e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003350:	4b0d      	ldr	r3, [pc, #52]	@ (8003388 <MX_SPI2_Init+0xa4>)
 8003352:	2200      	movs	r2, #0
 8003354:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003356:	4b0c      	ldr	r3, [pc, #48]	@ (8003388 <MX_SPI2_Init+0xa4>)
 8003358:	2200      	movs	r2, #0
 800335a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800335c:	4b0a      	ldr	r3, [pc, #40]	@ (8003388 <MX_SPI2_Init+0xa4>)
 800335e:	2200      	movs	r2, #0
 8003360:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003362:	4b09      	ldr	r3, [pc, #36]	@ (8003388 <MX_SPI2_Init+0xa4>)
 8003364:	2200      	movs	r2, #0
 8003366:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8003368:	4b07      	ldr	r3, [pc, #28]	@ (8003388 <MX_SPI2_Init+0xa4>)
 800336a:	2200      	movs	r2, #0
 800336c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800336e:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <MX_SPI2_Init+0xa4>)
 8003370:	2200      	movs	r2, #0
 8003372:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003374:	4804      	ldr	r0, [pc, #16]	@ (8003388 <MX_SPI2_Init+0xa4>)
 8003376:	f006 ff41 	bl	800a1fc <HAL_SPI_Init>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8003380:	f000 f9e8 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003384:	bf00      	nop
 8003386:	bd80      	pop	{r7, pc}
 8003388:	200002e8 	.word	0x200002e8
 800338c:	40003800 	.word	0x40003800

08003390 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003396:	f107 0310 	add.w	r3, r7, #16
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	605a      	str	r2, [r3, #4]
 80033a0:	609a      	str	r2, [r3, #8]
 80033a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80033ae:	4b20      	ldr	r3, [pc, #128]	@ (8003430 <MX_TIM1_Init+0xa0>)
 80033b0:	4a20      	ldr	r2, [pc, #128]	@ (8003434 <MX_TIM1_Init+0xa4>)
 80033b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 519;
 80033b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003430 <MX_TIM1_Init+0xa0>)
 80033b6:	f240 2207 	movw	r2, #519	@ 0x207
 80033ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003430 <MX_TIM1_Init+0xa0>)
 80033be:	2200      	movs	r2, #0
 80033c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 80033c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003430 <MX_TIM1_Init+0xa0>)
 80033c4:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80033c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ca:	4b19      	ldr	r3, [pc, #100]	@ (8003430 <MX_TIM1_Init+0xa0>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80033d0:	4b17      	ldr	r3, [pc, #92]	@ (8003430 <MX_TIM1_Init+0xa0>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033d6:	4b16      	ldr	r3, [pc, #88]	@ (8003430 <MX_TIM1_Init+0xa0>)
 80033d8:	2200      	movs	r2, #0
 80033da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80033dc:	4814      	ldr	r0, [pc, #80]	@ (8003430 <MX_TIM1_Init+0xa0>)
 80033de:	f007 faf8 	bl	800a9d2 <HAL_TIM_Base_Init>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80033e8:	f000 f9b4 	bl	8003754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80033f2:	f107 0310 	add.w	r3, r7, #16
 80033f6:	4619      	mov	r1, r3
 80033f8:	480d      	ldr	r0, [pc, #52]	@ (8003430 <MX_TIM1_Init+0xa0>)
 80033fa:	f007 fe4f 	bl	800b09c <HAL_TIM_ConfigClockSource>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003404:	f000 f9a6 	bl	8003754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003408:	2300      	movs	r3, #0
 800340a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800340c:	2300      	movs	r3, #0
 800340e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003414:	1d3b      	adds	r3, r7, #4
 8003416:	4619      	mov	r1, r3
 8003418:	4805      	ldr	r0, [pc, #20]	@ (8003430 <MX_TIM1_Init+0xa0>)
 800341a:	f008 fad1 	bl	800b9c0 <HAL_TIMEx_MasterConfigSynchronization>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003424:	f000 f996 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003428:	bf00      	nop
 800342a:	3720      	adds	r7, #32
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20000378 	.word	0x20000378
 8003434:	40012c00 	.word	0x40012c00

08003438 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	@ 0x28
 800343c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800343e:	f107 031c 	add.w	r3, r7, #28
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800344a:	463b      	mov	r3, r7
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]
 8003456:	611a      	str	r2, [r3, #16]
 8003458:	615a      	str	r2, [r3, #20]
 800345a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800345c:	4b22      	ldr	r3, [pc, #136]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 800345e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003462:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003464:	4b20      	ldr	r3, [pc, #128]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 8003466:	2200      	movs	r2, #0
 8003468:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800346a:	4b1f      	ldr	r3, [pc, #124]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003470:	4b1d      	ldr	r3, [pc, #116]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 8003472:	f04f 32ff 	mov.w	r2, #4294967295
 8003476:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003478:	4b1b      	ldr	r3, [pc, #108]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 800347a:	2200      	movs	r2, #0
 800347c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800347e:	4b1a      	ldr	r3, [pc, #104]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 8003480:	2200      	movs	r2, #0
 8003482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003484:	4818      	ldr	r0, [pc, #96]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 8003486:	f007 fb4f 	bl	800ab28 <HAL_TIM_PWM_Init>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003490:	f000 f960 	bl	8003754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003498:	2300      	movs	r3, #0
 800349a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800349c:	f107 031c 	add.w	r3, r7, #28
 80034a0:	4619      	mov	r1, r3
 80034a2:	4811      	ldr	r0, [pc, #68]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 80034a4:	f008 fa8c 	bl	800b9c0 <HAL_TIMEx_MasterConfigSynchronization>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80034ae:	f000 f951 	bl	8003754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034b2:	2360      	movs	r3, #96	@ 0x60
 80034b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80034c2:	463b      	mov	r3, r7
 80034c4:	220c      	movs	r2, #12
 80034c6:	4619      	mov	r1, r3
 80034c8:	4807      	ldr	r0, [pc, #28]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 80034ca:	f007 fcd3 	bl	800ae74 <HAL_TIM_PWM_ConfigChannel>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80034d4:	f000 f93e 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80034d8:	4803      	ldr	r0, [pc, #12]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 80034da:	f000 fb3f 	bl	8003b5c <HAL_TIM_MspPostInit>

}
 80034de:	bf00      	nop
 80034e0:	3728      	adds	r7, #40	@ 0x28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200003c4 	.word	0x200003c4

080034ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034f2:	f107 0310 	add.w	r3, r7, #16
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	609a      	str	r2, [r3, #8]
 80034fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003500:	1d3b      	adds	r3, r7, #4
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	605a      	str	r2, [r3, #4]
 8003508:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800350a:	4b1d      	ldr	r3, [pc, #116]	@ (8003580 <MX_TIM3_Init+0x94>)
 800350c:	4a1d      	ldr	r2, [pc, #116]	@ (8003584 <MX_TIM3_Init+0x98>)
 800350e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003510:	4b1b      	ldr	r3, [pc, #108]	@ (8003580 <MX_TIM3_Init+0x94>)
 8003512:	2200      	movs	r2, #0
 8003514:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003516:	4b1a      	ldr	r3, [pc, #104]	@ (8003580 <MX_TIM3_Init+0x94>)
 8003518:	2200      	movs	r2, #0
 800351a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10399;
 800351c:	4b18      	ldr	r3, [pc, #96]	@ (8003580 <MX_TIM3_Init+0x94>)
 800351e:	f642 029f 	movw	r2, #10399	@ 0x289f
 8003522:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003524:	4b16      	ldr	r3, [pc, #88]	@ (8003580 <MX_TIM3_Init+0x94>)
 8003526:	2200      	movs	r2, #0
 8003528:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800352a:	4b15      	ldr	r3, [pc, #84]	@ (8003580 <MX_TIM3_Init+0x94>)
 800352c:	2200      	movs	r2, #0
 800352e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003530:	4813      	ldr	r0, [pc, #76]	@ (8003580 <MX_TIM3_Init+0x94>)
 8003532:	f007 fa4e 	bl	800a9d2 <HAL_TIM_Base_Init>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800353c:	f000 f90a 	bl	8003754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003544:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003546:	f107 0310 	add.w	r3, r7, #16
 800354a:	4619      	mov	r1, r3
 800354c:	480c      	ldr	r0, [pc, #48]	@ (8003580 <MX_TIM3_Init+0x94>)
 800354e:	f007 fda5 	bl	800b09c <HAL_TIM_ConfigClockSource>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003558:	f000 f8fc 	bl	8003754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800355c:	2320      	movs	r3, #32
 800355e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003564:	1d3b      	adds	r3, r7, #4
 8003566:	4619      	mov	r1, r3
 8003568:	4805      	ldr	r0, [pc, #20]	@ (8003580 <MX_TIM3_Init+0x94>)
 800356a:	f008 fa29 	bl	800b9c0 <HAL_TIMEx_MasterConfigSynchronization>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003574:	f000 f8ee 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003578:	bf00      	nop
 800357a:	3720      	adds	r7, #32
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000410 	.word	0x20000410
 8003584:	40000400 	.word	0x40000400

08003588 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800358c:	4b22      	ldr	r3, [pc, #136]	@ (8003618 <MX_USART3_UART_Init+0x90>)
 800358e:	4a23      	ldr	r2, [pc, #140]	@ (800361c <MX_USART3_UART_Init+0x94>)
 8003590:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003592:	4b21      	ldr	r3, [pc, #132]	@ (8003618 <MX_USART3_UART_Init+0x90>)
 8003594:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003598:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800359a:	4b1f      	ldr	r3, [pc, #124]	@ (8003618 <MX_USART3_UART_Init+0x90>)
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80035a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003618 <MX_USART3_UART_Init+0x90>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80035a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003618 <MX_USART3_UART_Init+0x90>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80035ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003618 <MX_USART3_UART_Init+0x90>)
 80035ae:	220c      	movs	r2, #12
 80035b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035b2:	4b19      	ldr	r3, [pc, #100]	@ (8003618 <MX_USART3_UART_Init+0x90>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80035b8:	4b17      	ldr	r3, [pc, #92]	@ (8003618 <MX_USART3_UART_Init+0x90>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035be:	4b16      	ldr	r3, [pc, #88]	@ (8003618 <MX_USART3_UART_Init+0x90>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80035c4:	4b14      	ldr	r3, [pc, #80]	@ (8003618 <MX_USART3_UART_Init+0x90>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035ca:	4b13      	ldr	r3, [pc, #76]	@ (8003618 <MX_USART3_UART_Init+0x90>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80035d0:	4811      	ldr	r0, [pc, #68]	@ (8003618 <MX_USART3_UART_Init+0x90>)
 80035d2:	f008 faa3 	bl	800bb1c <HAL_UART_Init>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80035dc:	f000 f8ba 	bl	8003754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035e0:	2100      	movs	r1, #0
 80035e2:	480d      	ldr	r0, [pc, #52]	@ (8003618 <MX_USART3_UART_Init+0x90>)
 80035e4:	f008 fec0 	bl	800c368 <HAL_UARTEx_SetTxFifoThreshold>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80035ee:	f000 f8b1 	bl	8003754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035f2:	2100      	movs	r1, #0
 80035f4:	4808      	ldr	r0, [pc, #32]	@ (8003618 <MX_USART3_UART_Init+0x90>)
 80035f6:	f008 fef5 	bl	800c3e4 <HAL_UARTEx_SetRxFifoThreshold>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003600:	f000 f8a8 	bl	8003754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003604:	4804      	ldr	r0, [pc, #16]	@ (8003618 <MX_USART3_UART_Init+0x90>)
 8003606:	f008 fe76 	bl	800c2f6 <HAL_UARTEx_DisableFifoMode>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003610:	f000 f8a0 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003614:	bf00      	nop
 8003616:	bd80      	pop	{r7, pc}
 8003618:	2000045c 	.word	0x2000045c
 800361c:	40004800 	.word	0x40004800

08003620 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8003624:	4b15      	ldr	r3, [pc, #84]	@ (800367c <MX_USB_PCD_Init+0x5c>)
 8003626:	4a16      	ldr	r2, [pc, #88]	@ (8003680 <MX_USB_PCD_Init+0x60>)
 8003628:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800362a:	4b14      	ldr	r3, [pc, #80]	@ (800367c <MX_USB_PCD_Init+0x5c>)
 800362c:	2208      	movs	r2, #8
 800362e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8003630:	4b12      	ldr	r3, [pc, #72]	@ (800367c <MX_USB_PCD_Init+0x5c>)
 8003632:	2202      	movs	r2, #2
 8003634:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003636:	4b11      	ldr	r3, [pc, #68]	@ (800367c <MX_USB_PCD_Init+0x5c>)
 8003638:	2202      	movs	r2, #2
 800363a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800363c:	4b0f      	ldr	r3, [pc, #60]	@ (800367c <MX_USB_PCD_Init+0x5c>)
 800363e:	2200      	movs	r2, #0
 8003640:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8003642:	4b0e      	ldr	r3, [pc, #56]	@ (800367c <MX_USB_PCD_Init+0x5c>)
 8003644:	2200      	movs	r2, #0
 8003646:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8003648:	4b0c      	ldr	r3, [pc, #48]	@ (800367c <MX_USB_PCD_Init+0x5c>)
 800364a:	2200      	movs	r2, #0
 800364c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800364e:	4b0b      	ldr	r3, [pc, #44]	@ (800367c <MX_USB_PCD_Init+0x5c>)
 8003650:	2200      	movs	r2, #0
 8003652:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8003654:	4b09      	ldr	r3, [pc, #36]	@ (800367c <MX_USB_PCD_Init+0x5c>)
 8003656:	2200      	movs	r2, #0
 8003658:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800365a:	4b08      	ldr	r3, [pc, #32]	@ (800367c <MX_USB_PCD_Init+0x5c>)
 800365c:	2200      	movs	r2, #0
 800365e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8003660:	4b06      	ldr	r3, [pc, #24]	@ (800367c <MX_USB_PCD_Init+0x5c>)
 8003662:	2200      	movs	r2, #0
 8003664:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8003666:	4805      	ldr	r0, [pc, #20]	@ (800367c <MX_USB_PCD_Init+0x5c>)
 8003668:	f003 fc58 	bl	8006f1c <HAL_PCD_Init>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8003672:	f000 f86f 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	200004f0 	.word	0x200004f0
 8003680:	40016000 	.word	0x40016000

08003684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800368a:	f107 030c 	add.w	r3, r7, #12
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	605a      	str	r2, [r3, #4]
 8003694:	609a      	str	r2, [r3, #8]
 8003696:	60da      	str	r2, [r3, #12]
 8003698:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800369a:	4b2b      	ldr	r3, [pc, #172]	@ (8003748 <MX_GPIO_Init+0xc4>)
 800369c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036a0:	4a29      	ldr	r2, [pc, #164]	@ (8003748 <MX_GPIO_Init+0xc4>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80036aa:	4b27      	ldr	r3, [pc, #156]	@ (8003748 <MX_GPIO_Init+0xc4>)
 80036ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b8:	4b23      	ldr	r3, [pc, #140]	@ (8003748 <MX_GPIO_Init+0xc4>)
 80036ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036be:	4a22      	ldr	r2, [pc, #136]	@ (8003748 <MX_GPIO_Init+0xc4>)
 80036c0:	f043 0302 	orr.w	r3, r3, #2
 80036c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80036c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003748 <MX_GPIO_Init+0xc4>)
 80036ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	607b      	str	r3, [r7, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80036d6:	2200      	movs	r2, #0
 80036d8:	2140      	movs	r1, #64	@ 0x40
 80036da:	481c      	ldr	r0, [pc, #112]	@ (800374c <MX_GPIO_Init+0xc8>)
 80036dc:	f003 fbec 	bl	8006eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISP_CS_Pin|LED_RED_Pin|LED_BLUE_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 80036e0:	2200      	movs	r2, #0
 80036e2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80036e6:	481a      	ldr	r0, [pc, #104]	@ (8003750 <MX_GPIO_Init+0xcc>)
 80036e8:	f003 fbe6 	bl	8006eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 80036ec:	2340      	movs	r3, #64	@ 0x40
 80036ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036f0:	2301      	movs	r3, #1
 80036f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 80036fc:	f107 030c 	add.w	r3, r7, #12
 8003700:	4619      	mov	r1, r3
 8003702:	4812      	ldr	r0, [pc, #72]	@ (800374c <MX_GPIO_Init+0xc8>)
 8003704:	f003 fa6e 	bl	8006be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_CS_Pin LED_RED_Pin LED_BLUE_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = DISP_CS_Pin|LED_RED_Pin|LED_BLUE_Pin|LED_YELLOW_Pin;
 8003708:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800370c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800370e:	2301      	movs	r3, #1
 8003710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003716:	2300      	movs	r3, #0
 8003718:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800371a:	f107 030c 	add.w	r3, r7, #12
 800371e:	4619      	mov	r1, r3
 8003720:	480b      	ldr	r0, [pc, #44]	@ (8003750 <MX_GPIO_Init+0xcc>)
 8003722:	f003 fa5f 	bl	8006be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUTPUT_EN_SW_Pin */
  GPIO_InitStruct.Pin = OUTPUT_EN_SW_Pin;
 8003726:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800372a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800372c:	2300      	movs	r3, #0
 800372e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(OUTPUT_EN_SW_GPIO_Port, &GPIO_InitStruct);
 8003734:	f107 030c 	add.w	r3, r7, #12
 8003738:	4619      	mov	r1, r3
 800373a:	4804      	ldr	r0, [pc, #16]	@ (800374c <MX_GPIO_Init+0xc8>)
 800373c:	f003 fa52 	bl	8006be4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003740:	bf00      	nop
 8003742:	3720      	adds	r7, #32
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	44020c00 	.word	0x44020c00
 800374c:	42020000 	.word	0x42020000
 8003750:	42020400 	.word	0x42020400

08003754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003758:	b672      	cpsid	i
}
 800375a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800375c:	bf00      	nop
 800375e:	e7fd      	b.n	800375c <Error_Handler+0x8>

08003760 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b0ae      	sub	sp, #184	@ 0xb8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003778:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	60da      	str	r2, [r3, #12]
 8003786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003788:	f107 0318 	add.w	r3, r7, #24
 800378c:	2288      	movs	r2, #136	@ 0x88
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f009 fcd4 	bl	800d13e <memset>
  if(hadc->Instance==ADC1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a54      	ldr	r2, [pc, #336]	@ (80038ec <HAL_ADC_MspInit+0x17c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	f040 80a1 	bne.w	80038e4 <HAL_ADC_MspInit+0x174>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80037a2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037b2:	f107 0318 	add.w	r3, r7, #24
 80037b6:	4618      	mov	r0, r3
 80037b8:	f004 fc4e 	bl	8008058 <HAL_RCCEx_PeriphCLKConfig>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_ADC_MspInit+0x56>
    {
      Error_Handler();
 80037c2:	f7ff ffc7 	bl	8003754 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80037c6:	4b4a      	ldr	r3, [pc, #296]	@ (80038f0 <HAL_ADC_MspInit+0x180>)
 80037c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037cc:	4a48      	ldr	r2, [pc, #288]	@ (80038f0 <HAL_ADC_MspInit+0x180>)
 80037ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80037d6:	4b46      	ldr	r3, [pc, #280]	@ (80038f0 <HAL_ADC_MspInit+0x180>)
 80037d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e4:	4b42      	ldr	r3, [pc, #264]	@ (80038f0 <HAL_ADC_MspInit+0x180>)
 80037e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037ea:	4a41      	ldr	r2, [pc, #260]	@ (80038f0 <HAL_ADC_MspInit+0x180>)
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80037f4:	4b3e      	ldr	r3, [pc, #248]	@ (80038f0 <HAL_ADC_MspInit+0x180>)
 80037f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003802:	4b3b      	ldr	r3, [pc, #236]	@ (80038f0 <HAL_ADC_MspInit+0x180>)
 8003804:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003808:	4a39      	ldr	r2, [pc, #228]	@ (80038f0 <HAL_ADC_MspInit+0x180>)
 800380a:	f043 0302 	orr.w	r3, r3, #2
 800380e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003812:	4b37      	ldr	r3, [pc, #220]	@ (80038f0 <HAL_ADC_MspInit+0x180>)
 8003814:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_INP14
    PA5     ------> ADC1_INP19
    PA7     ------> ADC1_INP7
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = ADC_LOAD_CURR_Pin|ADC_LOAD_VOL_Pin|ADC_POT_Pin|ADC_VIN_Pin
 8003820:	23a7      	movs	r3, #167	@ 0xa7
 8003822:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |_5V_DIV_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003826:	2303      	movs	r3, #3
 8003828:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382c:	2300      	movs	r3, #0
 800382e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003832:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003836:	4619      	mov	r1, r3
 8003838:	482e      	ldr	r0, [pc, #184]	@ (80038f4 <HAL_ADC_MspInit+0x184>)
 800383a:	f003 f9d3 	bl	8006be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_TEMP_Pin;
 800383e:	2301      	movs	r3, #1
 8003840:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003844:	2303      	movs	r3, #3
 8003846:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384a:	2300      	movs	r3, #0
 800384c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(ADC_TEMP_GPIO_Port, &GPIO_InitStruct);
 8003850:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003854:	4619      	mov	r1, r3
 8003856:	4828      	ldr	r0, [pc, #160]	@ (80038f8 <HAL_ADC_MspInit+0x188>)
 8003858:	f003 f9c4 	bl	8006be4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    handle_GPDMA1_Channel7.Instance = GPDMA1_Channel7;
 800385c:	4b27      	ldr	r3, [pc, #156]	@ (80038fc <HAL_ADC_MspInit+0x18c>)
 800385e:	4a28      	ldr	r2, [pc, #160]	@ (8003900 <HAL_ADC_MspInit+0x190>)
 8003860:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel7.Init.Request = GPDMA1_REQUEST_ADC1;
 8003862:	4b26      	ldr	r3, [pc, #152]	@ (80038fc <HAL_ADC_MspInit+0x18c>)
 8003864:	2200      	movs	r2, #0
 8003866:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel7.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8003868:	4b24      	ldr	r3, [pc, #144]	@ (80038fc <HAL_ADC_MspInit+0x18c>)
 800386a:	2200      	movs	r2, #0
 800386c:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel7.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800386e:	4b23      	ldr	r3, [pc, #140]	@ (80038fc <HAL_ADC_MspInit+0x18c>)
 8003870:	2200      	movs	r2, #0
 8003872:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel7.Init.SrcInc = DMA_SINC_FIXED;
 8003874:	4b21      	ldr	r3, [pc, #132]	@ (80038fc <HAL_ADC_MspInit+0x18c>)
 8003876:	2200      	movs	r2, #0
 8003878:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel7.Init.DestInc = DMA_DINC_INCREMENTED;
 800387a:	4b20      	ldr	r3, [pc, #128]	@ (80038fc <HAL_ADC_MspInit+0x18c>)
 800387c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003880:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel7.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8003882:	4b1e      	ldr	r3, [pc, #120]	@ (80038fc <HAL_ADC_MspInit+0x18c>)
 8003884:	2201      	movs	r2, #1
 8003886:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel7.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8003888:	4b1c      	ldr	r3, [pc, #112]	@ (80038fc <HAL_ADC_MspInit+0x18c>)
 800388a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800388e:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel7.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8003890:	4b1a      	ldr	r3, [pc, #104]	@ (80038fc <HAL_ADC_MspInit+0x18c>)
 8003892:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003896:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel7.Init.SrcBurstLength = 1;
 8003898:	4b18      	ldr	r3, [pc, #96]	@ (80038fc <HAL_ADC_MspInit+0x18c>)
 800389a:	2201      	movs	r2, #1
 800389c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel7.Init.DestBurstLength = 1;
 800389e:	4b17      	ldr	r3, [pc, #92]	@ (80038fc <HAL_ADC_MspInit+0x18c>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel7.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80038a4:	4b15      	ldr	r3, [pc, #84]	@ (80038fc <HAL_ADC_MspInit+0x18c>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel7.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80038aa:	4b14      	ldr	r3, [pc, #80]	@ (80038fc <HAL_ADC_MspInit+0x18c>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel7.Init.Mode = DMA_NORMAL;
 80038b0:	4b12      	ldr	r3, [pc, #72]	@ (80038fc <HAL_ADC_MspInit+0x18c>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel7) != HAL_OK)
 80038b6:	4811      	ldr	r0, [pc, #68]	@ (80038fc <HAL_ADC_MspInit+0x18c>)
 80038b8:	f002 fb7c 	bl	8005fb4 <HAL_DMA_Init>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_ADC_MspInit+0x156>
    {
      Error_Handler();
 80038c2:	f7ff ff47 	bl	8003754 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel7);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a0c      	ldr	r2, [pc, #48]	@ (80038fc <HAL_ADC_MspInit+0x18c>)
 80038ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80038cc:	4a0b      	ldr	r2, [pc, #44]	@ (80038fc <HAL_ADC_MspInit+0x18c>)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel7, DMA_CHANNEL_NPRIV) != HAL_OK)
 80038d2:	2110      	movs	r1, #16
 80038d4:	4809      	ldr	r0, [pc, #36]	@ (80038fc <HAL_ADC_MspInit+0x18c>)
 80038d6:	f002 fde4 	bl	80064a2 <HAL_DMA_ConfigChannelAttributes>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_ADC_MspInit+0x174>
    {
      Error_Handler();
 80038e0:	f7ff ff38 	bl	8003754 <Error_Handler>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80038e4:	bf00      	nop
 80038e6:	37b8      	adds	r7, #184	@ 0xb8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	42028000 	.word	0x42028000
 80038f0:	44020c00 	.word	0x44020c00
 80038f4:	42020000 	.word	0x42020000
 80038f8:	42020400 	.word	0x42020400
 80038fc:	2000025c 	.word	0x2000025c
 8003900:	400203d0 	.word	0x400203d0

08003904 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	@ 0x28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a18      	ldr	r2, [pc, #96]	@ (8003984 <HAL_DAC_MspInit+0x80>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d129      	bne.n	800397a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003926:	4b18      	ldr	r3, [pc, #96]	@ (8003988 <HAL_DAC_MspInit+0x84>)
 8003928:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800392c:	4a16      	ldr	r2, [pc, #88]	@ (8003988 <HAL_DAC_MspInit+0x84>)
 800392e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003932:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003936:	4b14      	ldr	r3, [pc, #80]	@ (8003988 <HAL_DAC_MspInit+0x84>)
 8003938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800393c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003944:	4b10      	ldr	r3, [pc, #64]	@ (8003988 <HAL_DAC_MspInit+0x84>)
 8003946:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800394a:	4a0f      	ldr	r2, [pc, #60]	@ (8003988 <HAL_DAC_MspInit+0x84>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003954:	4b0c      	ldr	r3, [pc, #48]	@ (8003988 <HAL_DAC_MspInit+0x84>)
 8003956:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003962:	2310      	movs	r3, #16
 8003964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003966:	2303      	movs	r3, #3
 8003968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396a:	2300      	movs	r3, #0
 800396c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800396e:	f107 0314 	add.w	r3, r7, #20
 8003972:	4619      	mov	r1, r3
 8003974:	4805      	ldr	r0, [pc, #20]	@ (800398c <HAL_DAC_MspInit+0x88>)
 8003976:	f003 f935 	bl	8006be4 <HAL_GPIO_Init>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800397a:	bf00      	nop
 800397c:	3728      	adds	r7, #40	@ 0x28
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	42028400 	.word	0x42028400
 8003988:	44020c00 	.word	0x44020c00
 800398c:	42020000 	.word	0x42020000

08003990 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b0ac      	sub	sp, #176	@ 0xb0
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003998:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039a8:	f107 0310 	add.w	r3, r7, #16
 80039ac:	2288      	movs	r2, #136	@ 0x88
 80039ae:	2100      	movs	r1, #0
 80039b0:	4618      	mov	r0, r3
 80039b2:	f009 fbc4 	bl	800d13e <memset>
  if(hspi->Instance==SPI2)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a31      	ldr	r2, [pc, #196]	@ (8003a80 <HAL_SPI_MspInit+0xf0>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d15a      	bne.n	8003a76 <HAL_SPI_MspInit+0xe6>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80039c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2Source = RCC_PLL2_SOURCE_CSI;
 80039cc:	2302      	movs	r3, #2
 80039ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80039d0:	2301      	movs	r3, #1
 80039d2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 32;
 80039d4:	2320      	movs	r3, #32
 80039d6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 32;
 80039d8:	2320      	movs	r3, #32
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 80039dc:	2301      	movs	r3, #1
 80039de:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80039e0:	2302      	movs	r3, #2
 80039e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2_VCIRANGE_2;
 80039e4:	2308      	movs	r3, #8
 80039e6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2_VCORANGE_WIDE;
 80039e8:	2300      	movs	r3, #0
 80039ea:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2ClockOut = RCC_PLL2_DIVP;
 80039f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL2P;
 80039f6:	2308      	movs	r3, #8
 80039f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039fc:	f107 0310 	add.w	r3, r7, #16
 8003a00:	4618      	mov	r0, r3
 8003a02:	f004 fb29 	bl	8008058 <HAL_RCCEx_PeriphCLKConfig>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8003a0c:	f7ff fea2 	bl	8003754 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003a10:	4b1c      	ldr	r3, [pc, #112]	@ (8003a84 <HAL_SPI_MspInit+0xf4>)
 8003a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a16:	4a1b      	ldr	r2, [pc, #108]	@ (8003a84 <HAL_SPI_MspInit+0xf4>)
 8003a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a1c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003a20:	4b18      	ldr	r3, [pc, #96]	@ (8003a84 <HAL_SPI_MspInit+0xf4>)
 8003a22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a2e:	4b15      	ldr	r3, [pc, #84]	@ (8003a84 <HAL_SPI_MspInit+0xf4>)
 8003a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a34:	4a13      	ldr	r2, [pc, #76]	@ (8003a84 <HAL_SPI_MspInit+0xf4>)
 8003a36:	f043 0302 	orr.w	r3, r3, #2
 8003a3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003a3e:	4b11      	ldr	r3, [pc, #68]	@ (8003a84 <HAL_SPI_MspInit+0xf4>)
 8003a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB1     ------> SPI2_MOSI
    PB2     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003a4c:	2306      	movs	r3, #6
 8003a4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a52:	2302      	movs	r3, #2
 8003a54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8003a64:	2306      	movs	r3, #6
 8003a66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a6a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4805      	ldr	r0, [pc, #20]	@ (8003a88 <HAL_SPI_MspInit+0xf8>)
 8003a72:	f003 f8b7 	bl	8006be4 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003a76:	bf00      	nop
 8003a78:	37b0      	adds	r7, #176	@ 0xb0
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40003800 	.word	0x40003800
 8003a84:	44020c00 	.word	0x44020c00
 8003a88:	42020400 	.word	0x42020400

08003a8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a1d      	ldr	r2, [pc, #116]	@ (8003b10 <HAL_TIM_Base_MspInit+0x84>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d117      	bne.n	8003ace <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <HAL_TIM_Base_MspInit+0x88>)
 8003aa0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b14 <HAL_TIM_Base_MspInit+0x88>)
 8003aa6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003aaa:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003aae:	4b19      	ldr	r3, [pc, #100]	@ (8003b14 <HAL_TIM_Base_MspInit+0x88>)
 8003ab0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 8003abc:	2200      	movs	r2, #0
 8003abe:	2101      	movs	r1, #1
 8003ac0:	202a      	movs	r0, #42	@ 0x2a
 8003ac2:	f001 ff29 	bl	8005918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003ac6:	202a      	movs	r0, #42	@ 0x2a
 8003ac8:	f001 ff40 	bl	800594c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003acc:	e01b      	b.n	8003b06 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM3)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a11      	ldr	r2, [pc, #68]	@ (8003b18 <HAL_TIM_Base_MspInit+0x8c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d116      	bne.n	8003b06 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8003b14 <HAL_TIM_Base_MspInit+0x88>)
 8003ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ade:	4a0d      	ldr	r2, [pc, #52]	@ (8003b14 <HAL_TIM_Base_MspInit+0x88>)
 8003ae0:	f043 0302 	orr.w	r3, r3, #2
 8003ae4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8003b14 <HAL_TIM_Base_MspInit+0x88>)
 8003aea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003af6:	2200      	movs	r2, #0
 8003af8:	2100      	movs	r1, #0
 8003afa:	202e      	movs	r0, #46	@ 0x2e
 8003afc:	f001 ff0c 	bl	8005918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b00:	202e      	movs	r0, #46	@ 0x2e
 8003b02:	f001 ff23 	bl	800594c <HAL_NVIC_EnableIRQ>
}
 8003b06:	bf00      	nop
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40012c00 	.word	0x40012c00
 8003b14:	44020c00 	.word	0x44020c00
 8003b18:	40000400 	.word	0x40000400

08003b1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b2c:	d10e      	bne.n	8003b4c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b58 <HAL_TIM_PWM_MspInit+0x3c>)
 8003b30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b34:	4a08      	ldr	r2, [pc, #32]	@ (8003b58 <HAL_TIM_PWM_MspInit+0x3c>)
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003b3e:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <HAL_TIM_PWM_MspInit+0x3c>)
 8003b40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	44020c00 	.word	0x44020c00

08003b5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b64:	f107 030c 	add.w	r3, r7, #12
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b7c:	d11e      	bne.n	8003bbc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b7e:	4b11      	ldr	r3, [pc, #68]	@ (8003bc4 <HAL_TIM_MspPostInit+0x68>)
 8003b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b84:	4a0f      	ldr	r2, [pc, #60]	@ (8003bc4 <HAL_TIM_MspPostInit+0x68>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc4 <HAL_TIM_MspPostInit+0x68>)
 8003b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003bac:	2301      	movs	r3, #1
 8003bae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8003bb0:	f107 030c 	add.w	r3, r7, #12
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4804      	ldr	r0, [pc, #16]	@ (8003bc8 <HAL_TIM_MspPostInit+0x6c>)
 8003bb8:	f003 f814 	bl	8006be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003bbc:	bf00      	nop
 8003bbe:	3720      	adds	r7, #32
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	44020c00 	.word	0x44020c00
 8003bc8:	42020000 	.word	0x42020000

08003bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b0ac      	sub	sp, #176	@ 0xb0
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	60da      	str	r2, [r3, #12]
 8003be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003be4:	f107 0310 	add.w	r3, r7, #16
 8003be8:	2288      	movs	r2, #136	@ 0x88
 8003bea:	2100      	movs	r1, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f009 faa6 	bl	800d13e <memset>
  if(huart->Instance==USART3)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a31      	ldr	r2, [pc, #196]	@ (8003cbc <HAL_UART_MspInit+0xf0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d15b      	bne.n	8003cb4 <HAL_UART_MspInit+0xe8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003bfc:	f04f 0204 	mov.w	r2, #4
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 8003c08:	23c0      	movs	r3, #192	@ 0xc0
 8003c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c0c:	f107 0310 	add.w	r3, r7, #16
 8003c10:	4618      	mov	r0, r3
 8003c12:	f004 fa21 	bl	8008058 <HAL_RCCEx_PeriphCLKConfig>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8003c1c:	f7ff fd9a 	bl	8003754 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c20:	4b27      	ldr	r3, [pc, #156]	@ (8003cc0 <HAL_UART_MspInit+0xf4>)
 8003c22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c26:	4a26      	ldr	r2, [pc, #152]	@ (8003cc0 <HAL_UART_MspInit+0xf4>)
 8003c28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c2c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003c30:	4b23      	ldr	r3, [pc, #140]	@ (8003cc0 <HAL_UART_MspInit+0xf4>)
 8003c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c3e:	4b20      	ldr	r3, [pc, #128]	@ (8003cc0 <HAL_UART_MspInit+0xf4>)
 8003c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c44:	4a1e      	ldr	r2, [pc, #120]	@ (8003cc0 <HAL_UART_MspInit+0xf4>)
 8003c46:	f043 0302 	orr.w	r3, r3, #2
 8003c4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003cc0 <HAL_UART_MspInit+0xf4>)
 8003c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB8     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c64:	2302      	movs	r3, #2
 8003c66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c70:	2300      	movs	r3, #0
 8003c72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c76:	2307      	movs	r3, #7
 8003c78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c7c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003c80:	4619      	mov	r1, r3
 8003c82:	4810      	ldr	r0, [pc, #64]	@ (8003cc4 <HAL_UART_MspInit+0xf8>)
 8003c84:	f002 ffae 	bl	8006be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c90:	2302      	movs	r3, #2
 8003c92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8003ca2:	230d      	movs	r3, #13
 8003ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003cac:	4619      	mov	r1, r3
 8003cae:	4805      	ldr	r0, [pc, #20]	@ (8003cc4 <HAL_UART_MspInit+0xf8>)
 8003cb0:	f002 ff98 	bl	8006be4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003cb4:	bf00      	nop
 8003cb6:	37b0      	adds	r7, #176	@ 0xb0
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40004800 	.word	0x40004800
 8003cc0:	44020c00 	.word	0x44020c00
 8003cc4:	42020400 	.word	0x42020400

08003cc8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b0a6      	sub	sp, #152	@ 0x98
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cd0:	f107 0310 	add.w	r3, r7, #16
 8003cd4:	2288      	movs	r2, #136	@ 0x88
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f009 fa30 	bl	800d13e <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a14      	ldr	r2, [pc, #80]	@ (8003d34 <HAL_PCD_MspInit+0x6c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d121      	bne.n	8003d2c <HAL_PCD_MspInit+0x64>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0310 	mov.w	r3, #16
 8003cf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003cf4:	2330      	movs	r3, #48	@ 0x30
 8003cf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cfa:	f107 0310 	add.w	r3, r7, #16
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f004 f9aa 	bl	8008058 <HAL_RCCEx_PeriphCLKConfig>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 8003d0a:	f7ff fd23 	bl	8003754 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d38 <HAL_PCD_MspInit+0x70>)
 8003d10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d14:	4a08      	ldr	r2, [pc, #32]	@ (8003d38 <HAL_PCD_MspInit+0x70>)
 8003d16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d1a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003d1e:	4b06      	ldr	r3, [pc, #24]	@ (8003d38 <HAL_PCD_MspInit+0x70>)
 8003d20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8003d2c:	bf00      	nop
 8003d2e:	3798      	adds	r7, #152	@ 0x98
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40016000 	.word	0x40016000
 8003d38:	44020c00 	.word	0x44020c00

08003d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d40:	bf00      	nop
 8003d42:	e7fd      	b.n	8003d40 <NMI_Handler+0x4>

08003d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d48:	bf00      	nop
 8003d4a:	e7fd      	b.n	8003d48 <HardFault_Handler+0x4>

08003d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d50:	bf00      	nop
 8003d52:	e7fd      	b.n	8003d50 <MemManage_Handler+0x4>

08003d54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d58:	bf00      	nop
 8003d5a:	e7fd      	b.n	8003d58 <BusFault_Handler+0x4>

08003d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d60:	bf00      	nop
 8003d62:	e7fd      	b.n	8003d60 <UsageFault_Handler+0x4>

08003d64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d68:	bf00      	nop
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d72:	b480      	push	{r7}
 8003d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d76:	bf00      	nop
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d84:	bf00      	nop
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d92:	f000 fa21 	bl	80041d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <GPDMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 7 global interrupt.
  */
void GPDMA1_Channel7_IRQHandler(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel7_IRQn 0 */

  /* USER CODE END GPDMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel7);
 8003da0:	4802      	ldr	r0, [pc, #8]	@ (8003dac <GPDMA1_Channel7_IRQHandler+0x10>)
 8003da2:	f002 fa1d 	bl	80061e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel7_IRQn 1 */

  /* USER CODE END GPDMA1_Channel7_IRQn 1 */
}
 8003da6:	bf00      	nop
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	2000025c 	.word	0x2000025c

08003db0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003db4:	4802      	ldr	r0, [pc, #8]	@ (8003dc0 <TIM1_UP_IRQHandler+0x10>)
 8003db6:	f006 ff0e 	bl	800abd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000378 	.word	0x20000378

08003dc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003dc8:	4802      	ldr	r0, [pc, #8]	@ (8003dd4 <TIM3_IRQHandler+0x10>)
 8003dca:	f006 ff04 	bl	800abd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003dce:	bf00      	nop
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000410 	.word	0x20000410

08003dd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return 1;
 8003ddc:	2301      	movs	r3, #1
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <_kill>:

int _kill(int pid, int sig)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003df2:	f009 f9f7 	bl	800d1e4 <__errno>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2216      	movs	r2, #22
 8003dfa:	601a      	str	r2, [r3, #0]
  return -1;
 8003dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <_exit>:

void _exit (int status)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e10:	f04f 31ff 	mov.w	r1, #4294967295
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7ff ffe7 	bl	8003de8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e1a:	bf00      	nop
 8003e1c:	e7fd      	b.n	8003e1a <_exit+0x12>

08003e1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b086      	sub	sp, #24
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	e00a      	b.n	8003e46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e30:	f3af 8000 	nop.w
 8003e34:	4601      	mov	r1, r0
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	60ba      	str	r2, [r7, #8]
 8003e3c:	b2ca      	uxtb	r2, r1
 8003e3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	3301      	adds	r3, #1
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	dbf0      	blt.n	8003e30 <_read+0x12>
  }

  return len;
 8003e4e:	687b      	ldr	r3, [r7, #4]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	e009      	b.n	8003e7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	60ba      	str	r2, [r7, #8]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	dbf1      	blt.n	8003e6a <_write+0x12>
  }
  return len;
 8003e86:	687b      	ldr	r3, [r7, #4]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <_close>:

int _close(int file)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003eb8:	605a      	str	r2, [r3, #4]
  return 0;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <_isatty>:

int _isatty(int file)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ed0:	2301      	movs	r3, #1
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b085      	sub	sp, #20
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f00:	4a14      	ldr	r2, [pc, #80]	@ (8003f54 <_sbrk+0x5c>)
 8003f02:	4b15      	ldr	r3, [pc, #84]	@ (8003f58 <_sbrk+0x60>)
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f0c:	4b13      	ldr	r3, [pc, #76]	@ (8003f5c <_sbrk+0x64>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d102      	bne.n	8003f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f14:	4b11      	ldr	r3, [pc, #68]	@ (8003f5c <_sbrk+0x64>)
 8003f16:	4a12      	ldr	r2, [pc, #72]	@ (8003f60 <_sbrk+0x68>)
 8003f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f1a:	4b10      	ldr	r3, [pc, #64]	@ (8003f5c <_sbrk+0x64>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4413      	add	r3, r2
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d207      	bcs.n	8003f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f28:	f009 f95c 	bl	800d1e4 <__errno>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	220c      	movs	r2, #12
 8003f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f32:	f04f 33ff 	mov.w	r3, #4294967295
 8003f36:	e009      	b.n	8003f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f38:	4b08      	ldr	r3, [pc, #32]	@ (8003f5c <_sbrk+0x64>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f3e:	4b07      	ldr	r3, [pc, #28]	@ (8003f5c <_sbrk+0x64>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4413      	add	r3, r2
 8003f46:	4a05      	ldr	r2, [pc, #20]	@ (8003f5c <_sbrk+0x64>)
 8003f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20008000 	.word	0x20008000
 8003f58:	00000400 	.word	0x00000400
 8003f5c:	20003db0 	.word	0x20003db0
 8003f60:	20003f08 	.word	0x20003f08

08003f64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003f6a:	4b30      	ldr	r3, [pc, #192]	@ (800402c <SystemInit+0xc8>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f70:	4a2e      	ldr	r2, [pc, #184]	@ (800402c <SystemInit+0xc8>)
 8003f72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f76:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8003f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8004030 <SystemInit+0xcc>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8003f80:	4b2b      	ldr	r3, [pc, #172]	@ (8004030 <SystemInit+0xcc>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003f86:	4b2a      	ldr	r3, [pc, #168]	@ (8004030 <SystemInit+0xcc>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8003f8c:	4b28      	ldr	r3, [pc, #160]	@ (8004030 <SystemInit+0xcc>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	4927      	ldr	r1, [pc, #156]	@ (8004030 <SystemInit+0xcc>)
 8003f92:	4b28      	ldr	r3, [pc, #160]	@ (8004034 <SystemInit+0xd0>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8003f98:	4b25      	ldr	r3, [pc, #148]	@ (8004030 <SystemInit+0xcc>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8003f9e:	4b24      	ldr	r3, [pc, #144]	@ (8004030 <SystemInit+0xcc>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8003fa4:	4b22      	ldr	r3, [pc, #136]	@ (8004030 <SystemInit+0xcc>)
 8003fa6:	4a24      	ldr	r2, [pc, #144]	@ (8004038 <SystemInit+0xd4>)
 8003fa8:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8003faa:	4b21      	ldr	r3, [pc, #132]	@ (8004030 <SystemInit+0xcc>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8003fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8004030 <SystemInit+0xcc>)
 8003fb2:	4a21      	ldr	r2, [pc, #132]	@ (8004038 <SystemInit+0xd4>)
 8003fb4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8003fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8004030 <SystemInit+0xcc>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8004030 <SystemInit+0xcc>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8004030 <SystemInit+0xcc>)
 8003fc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003fc8:	4b19      	ldr	r3, [pc, #100]	@ (8004030 <SystemInit+0xcc>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003fce:	4b17      	ldr	r3, [pc, #92]	@ (800402c <SystemInit+0xc8>)
 8003fd0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003fd4:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8003fd6:	4b19      	ldr	r3, [pc, #100]	@ (800403c <SystemInit+0xd8>)
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8003fde:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8003fe6:	d003      	beq.n	8003ff0 <SystemInit+0x8c>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003fee:	d117      	bne.n	8004020 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8003ff0:	4b12      	ldr	r3, [pc, #72]	@ (800403c <SystemInit+0xd8>)
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8003ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800403c <SystemInit+0xd8>)
 8003ffe:	4a10      	ldr	r2, [pc, #64]	@ (8004040 <SystemInit+0xdc>)
 8004000:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8004002:	4b0e      	ldr	r3, [pc, #56]	@ (800403c <SystemInit+0xd8>)
 8004004:	4a0f      	ldr	r2, [pc, #60]	@ (8004044 <SystemInit+0xe0>)
 8004006:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8004008:	4b0c      	ldr	r3, [pc, #48]	@ (800403c <SystemInit+0xd8>)
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	4a0b      	ldr	r2, [pc, #44]	@ (800403c <SystemInit+0xd8>)
 800400e:	f043 0302 	orr.w	r3, r3, #2
 8004012:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8004014:	4b09      	ldr	r3, [pc, #36]	@ (800403c <SystemInit+0xd8>)
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	4a08      	ldr	r2, [pc, #32]	@ (800403c <SystemInit+0xd8>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	61d3      	str	r3, [r2, #28]
  }
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000ed00 	.word	0xe000ed00
 8004030:	44020c00 	.word	0x44020c00
 8004034:	fae2eae3 	.word	0xfae2eae3
 8004038:	01010280 	.word	0x01010280
 800403c:	40022000 	.word	0x40022000
 8004040:	08192a3b 	.word	0x08192a3b
 8004044:	4c5d6e7f 	.word	0x4c5d6e7f

08004048 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8004048:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004080 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800404c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800404e:	e003      	b.n	8004058 <LoopCopyDataInit>

08004050 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004050:	4b0c      	ldr	r3, [pc, #48]	@ (8004084 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004052:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004054:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004056:	3104      	adds	r1, #4

08004058 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004058:	480b      	ldr	r0, [pc, #44]	@ (8004088 <LoopForever+0xa>)
	ldr	r3, =_edata
 800405a:	4b0c      	ldr	r3, [pc, #48]	@ (800408c <LoopForever+0xe>)
	adds	r2, r0, r1
 800405c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800405e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004060:	d3f6      	bcc.n	8004050 <CopyDataInit>
	ldr	r2, =_sbss
 8004062:	4a0b      	ldr	r2, [pc, #44]	@ (8004090 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004064:	e002      	b.n	800406c <LoopFillZerobss>

08004066 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004066:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004068:	f842 3b04 	str.w	r3, [r2], #4

0800406c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800406c:	4b09      	ldr	r3, [pc, #36]	@ (8004094 <LoopForever+0x16>)
	cmp	r2, r3
 800406e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004070:	d3f9      	bcc.n	8004066 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004072:	f7ff ff77 	bl	8003f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004076:	f009 f8bb 	bl	800d1f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800407a:	f7fe fcd5 	bl	8002a28 <main>

0800407e <LoopForever>:

LoopForever:
    b LoopForever
 800407e:	e7fe      	b.n	800407e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8004080:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8004084:	08010aa0 	.word	0x08010aa0
	ldr	r0, =_sdata
 8004088:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800408c:	200001d8 	.word	0x200001d8
	ldr	r2, =_sbss
 8004090:	200001d8 	.word	0x200001d8
	ldr	r3, = _ebss
 8004094:	20003f04 	.word	0x20003f04

08004098 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004098:	e7fe      	b.n	8004098 <ADC1_IRQHandler>
	...

0800409c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040a0:	2003      	movs	r0, #3
 80040a2:	f001 fc2e 	bl	8005902 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80040a6:	f003 fe4d 	bl	8007d44 <HAL_RCC_GetSysClockFreq>
 80040aa:	4602      	mov	r2, r0
 80040ac:	4b0c      	ldr	r3, [pc, #48]	@ (80040e0 <HAL_Init+0x44>)
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	490b      	ldr	r1, [pc, #44]	@ (80040e4 <HAL_Init+0x48>)
 80040b6:	5ccb      	ldrb	r3, [r1, r3]
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
 80040bc:	4a0a      	ldr	r2, [pc, #40]	@ (80040e8 <HAL_Init+0x4c>)
 80040be:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80040c0:	2004      	movs	r0, #4
 80040c2:	f001 fc73 	bl	80059ac <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040c6:	200f      	movs	r0, #15
 80040c8:	f000 f810 	bl	80040ec <HAL_InitTick>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e002      	b.n	80040dc <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80040d6:	f7ff fb43 	bl	8003760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	44020c00 	.word	0x44020c00
 80040e4:	080106e0 	.word	0x080106e0
 80040e8:	20000004 	.word	0x20000004

080040ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80040f8:	4b33      	ldr	r3, [pc, #204]	@ (80041c8 <HAL_InitTick+0xdc>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e05c      	b.n	80041be <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8004104:	4b31      	ldr	r3, [pc, #196]	@ (80041cc <HAL_InitTick+0xe0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b04      	cmp	r3, #4
 800410e:	d10c      	bne.n	800412a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8004110:	4b2f      	ldr	r3, [pc, #188]	@ (80041d0 <HAL_InitTick+0xe4>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4b2c      	ldr	r3, [pc, #176]	@ (80041c8 <HAL_InitTick+0xdc>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	4619      	mov	r1, r3
 800411a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800411e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004122:	fbb2 f3f3 	udiv	r3, r2, r3
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	e037      	b.n	800419a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800412a:	f001 fc97 	bl	8005a5c <HAL_SYSTICK_GetCLKSourceConfig>
 800412e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d023      	beq.n	800417e <HAL_InitTick+0x92>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b02      	cmp	r3, #2
 800413a:	d82d      	bhi.n	8004198 <HAL_InitTick+0xac>
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_InitTick+0x5e>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d00d      	beq.n	8004164 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8004148:	e026      	b.n	8004198 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800414a:	4b21      	ldr	r3, [pc, #132]	@ (80041d0 <HAL_InitTick+0xe4>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	4b1e      	ldr	r3, [pc, #120]	@ (80041c8 <HAL_InitTick+0xdc>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	4619      	mov	r1, r3
 8004154:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8004158:	fbb3 f3f1 	udiv	r3, r3, r1
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	60fb      	str	r3, [r7, #12]
        break;
 8004162:	e01a      	b.n	800419a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8004164:	4b18      	ldr	r3, [pc, #96]	@ (80041c8 <HAL_InitTick+0xdc>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800416e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004172:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8004176:	fbb2 f3f3 	udiv	r3, r2, r3
 800417a:	60fb      	str	r3, [r7, #12]
        break;
 800417c:	e00d      	b.n	800419a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800417e:	4b12      	ldr	r3, [pc, #72]	@ (80041c8 <HAL_InitTick+0xdc>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004188:	fbb3 f3f2 	udiv	r3, r3, r2
 800418c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004190:	fbb2 f3f3 	udiv	r3, r2, r3
 8004194:	60fb      	str	r3, [r7, #12]
        break;
 8004196:	e000      	b.n	800419a <HAL_InitTick+0xae>
        break;
 8004198:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f001 fbe4 	bl	8005968 <HAL_SYSTICK_Config>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e009      	b.n	80041be <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041aa:	2200      	movs	r2, #0
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	f04f 30ff 	mov.w	r0, #4294967295
 80041b2:	f001 fbb1 	bl	8005918 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80041b6:	4a07      	ldr	r2, [pc, #28]	@ (80041d4 <HAL_InitTick+0xe8>)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	2000000c 	.word	0x2000000c
 80041cc:	e000e010 	.word	0xe000e010
 80041d0:	20000004 	.word	0x20000004
 80041d4:	20000008 	.word	0x20000008

080041d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041dc:	4b06      	ldr	r3, [pc, #24]	@ (80041f8 <HAL_IncTick+0x20>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	461a      	mov	r2, r3
 80041e2:	4b06      	ldr	r3, [pc, #24]	@ (80041fc <HAL_IncTick+0x24>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4413      	add	r3, r2
 80041e8:	4a04      	ldr	r2, [pc, #16]	@ (80041fc <HAL_IncTick+0x24>)
 80041ea:	6013      	str	r3, [r2, #0]
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	2000000c 	.word	0x2000000c
 80041fc:	20003db4 	.word	0x20003db4

08004200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  return uwTick;
 8004204:	4b03      	ldr	r3, [pc, #12]	@ (8004214 <HAL_GetTick+0x14>)
 8004206:	681b      	ldr	r3, [r3, #0]
}
 8004208:	4618      	mov	r0, r3
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	20003db4 	.word	0x20003db4

08004218 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	609a      	str	r2, [r3, #8]
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	609a      	str	r2, [r3, #8]
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP1       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP1);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800428e:	f043 0202 	orr.w	r2, r3, #2
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 80042ac:	4b06      	ldr	r3, [pc, #24]	@ (80042c8 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80042ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80042b2:	4a05      	ldr	r2, [pc, #20]	@ (80042c8 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	42028000 	.word	0x42028000

080042cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3360      	adds	r3, #96	@ 0x60
 80042de:	461a      	mov	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4b08      	ldr	r3, [pc, #32]	@ (8004310 <LL_ADC_SetOffset+0x44>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004304:	bf00      	nop
 8004306:	371c      	adds	r7, #28
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	03fff000 	.word	0x03fff000

08004314 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3360      	adds	r3, #96	@ 0x60
 8004322:	461a      	mov	r2, r3
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3360      	adds	r3, #96	@ 0x60
 8004350:	461a      	mov	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	431a      	orrs	r2, r3
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800436a:	bf00      	nop
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004376:	b480      	push	{r7}
 8004378:	b087      	sub	sp, #28
 800437a:	af00      	add	r7, sp, #0
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	3360      	adds	r3, #96	@ 0x60
 8004386:	461a      	mov	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	431a      	orrs	r2, r3
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80043a0:	bf00      	nop
 80043a2:	371c      	adds	r7, #28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3360      	adds	r3, #96	@ 0x60
 80043bc:	461a      	mov	r2, r3
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	431a      	orrs	r2, r3
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80043d6:	bf00      	nop
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	615a      	str	r2, [r3, #20]
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800442e:	b480      	push	{r7}
 8004430:	b087      	sub	sp, #28
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3330      	adds	r3, #48	@ 0x30
 800443e:	461a      	mov	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	0a1b      	lsrs	r3, r3, #8
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	4413      	add	r3, r2
 800444c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f003 031f 	and.w	r3, r3, #31
 8004458:	211f      	movs	r1, #31
 800445a:	fa01 f303 	lsl.w	r3, r1, r3
 800445e:	43db      	mvns	r3, r3
 8004460:	401a      	ands	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	0e9b      	lsrs	r3, r3, #26
 8004466:	f003 011f 	and.w	r1, r3, #31
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f003 031f 	and.w	r3, r3, #31
 8004470:	fa01 f303 	lsl.w	r3, r1, r3
 8004474:	431a      	orrs	r2, r3
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800447a:	bf00      	nop
 800447c:	371c      	adds	r7, #28
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004486:	b480      	push	{r7}
 8004488:	b087      	sub	sp, #28
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3314      	adds	r3, #20
 8004496:	461a      	mov	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	0e5b      	lsrs	r3, r3, #25
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	4413      	add	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	0d1b      	lsrs	r3, r3, #20
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	2107      	movs	r1, #7
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	401a      	ands	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	0d1b      	lsrs	r3, r3, #20
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ca:	431a      	orrs	r2, r3
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044f4:	43db      	mvns	r3, r3
 80044f6:	401a      	ands	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f003 0318 	and.w	r3, r3, #24
 80044fe:	4908      	ldr	r1, [pc, #32]	@ (8004520 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004500:	40d9      	lsrs	r1, r3
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	400b      	ands	r3, r1
 8004506:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800450a:	431a      	orrs	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004512:	bf00      	nop
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	000fffff 	.word	0x000fffff

08004524 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004534:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6093      	str	r3, [r2, #8]
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004558:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800455c:	d101      	bne.n	8004562 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004580:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004584:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045ac:	d101      	bne.n	80045b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80045d4:	f043 0201 	orr.w	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80045fc:	f043 0202 	orr.w	r2, r3, #2
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <LL_ADC_IsEnabled+0x18>
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <LL_ADC_IsEnabled+0x1a>
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b02      	cmp	r3, #2
 8004648:	d101      	bne.n	800464e <LL_ADC_IsDisableOngoing+0x18>
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <LL_ADC_IsDisableOngoing+0x1a>
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800466c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004670:	f043 0204 	orr.w	r2, r3, #4
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b04      	cmp	r3, #4
 8004696:	d101      	bne.n	800469c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d101      	bne.n	80046c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e131      	b.n	800494e <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d109      	bne.n	800470c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff f839 	bl	8003770 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff ff19 	bl	8004548 <LL_ADC_IsDeepPowerDownEnabled>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff feff 	bl	8004524 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff ff34 	bl	8004598 <LL_ADC_IsInternalRegulatorEnabled>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d115      	bne.n	8004762 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff ff18 	bl	8004570 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004740:	4b85      	ldr	r3, [pc, #532]	@ (8004958 <HAL_ADC_Init+0x288>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	099b      	lsrs	r3, r3, #6
 8004746:	4a85      	ldr	r2, [pc, #532]	@ (800495c <HAL_ADC_Init+0x28c>)
 8004748:	fba2 2303 	umull	r2, r3, r2, r3
 800474c:	099b      	lsrs	r3, r3, #6
 800474e:	3301      	adds	r3, #1
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004754:	e002      	b.n	800475c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3b01      	subs	r3, #1
 800475a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f9      	bne.n	8004756 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff ff16 	bl	8004598 <LL_ADC_IsInternalRegulatorEnabled>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10d      	bne.n	800478e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004776:	f043 0210 	orr.w	r2, r3, #16
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004782:	f043 0201 	orr.w	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff ff76 	bl	8004684 <LL_ADC_REG_IsConversionOngoing>
 8004798:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f040 80ca 	bne.w	800493c <HAL_ADC_Init+0x26c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f040 80c6 	bne.w	800493c <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80047b8:	f043 0202 	orr.w	r2, r3, #2
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff ff23 	bl	8004610 <LL_ADC_IsEnabled>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10b      	bne.n	80047e8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047d0:	4863      	ldr	r0, [pc, #396]	@ (8004960 <HAL_ADC_Init+0x290>)
 80047d2:	f7ff ff1d 	bl	8004610 <LL_ADC_IsEnabled>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d105      	bne.n	80047e8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	4619      	mov	r1, r3
 80047e2:	4860      	ldr	r0, [pc, #384]	@ (8004964 <HAL_ADC_Init+0x294>)
 80047e4:	f7ff fd18 	bl	8004218 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	7e5b      	ldrb	r3, [r3, #25]
 80047ec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047f2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80047f8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80047fe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004806:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004808:	4313      	orrs	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d106      	bne.n	8004824 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481a:	3b01      	subs	r3, #1
 800481c:	045b      	lsls	r3, r3, #17
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4313      	orrs	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004830:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004838:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4313      	orrs	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	4b48      	ldr	r3, [pc, #288]	@ (8004968 <HAL_ADC_Init+0x298>)
 8004848:	4013      	ands	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	69b9      	ldr	r1, [r7, #24]
 8004850:	430b      	orrs	r3, r1
 8004852:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff ff1b 	bl	80046aa <LL_ADC_INJ_IsConversionOngoing>
 8004874:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d13d      	bne.n	80048f8 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d13a      	bne.n	80048f8 <HAL_ADC_Init+0x228>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	7e1b      	ldrb	r3, [r3, #24]
 8004886:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800488e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8004890:	4313      	orrs	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800489e:	f023 0302 	bic.w	r3, r3, #2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6812      	ldr	r2, [r2, #0]
 80048a6:	69b9      	ldr	r1, [r7, #24]
 80048a8:	430b      	orrs	r3, r1
 80048aa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d118      	bne.n	80048e8 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80048c0:	f023 0304 	bic.w	r3, r3, #4
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80048cc:	4311      	orrs	r1, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80048d2:	4311      	orrs	r1, r2
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80048d8:	430a      	orrs	r2, r1
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0201 	orr.w	r2, r2, #1
 80048e4:	611a      	str	r2, [r3, #16]
 80048e6:	e007      	b.n	80048f8 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691a      	ldr	r2, [r3, #16]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d10c      	bne.n	800491a <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004906:	f023 010f 	bic.w	r1, r3, #15
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	1e5a      	subs	r2, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	631a      	str	r2, [r3, #48]	@ 0x30
 8004918:	e007      	b.n	800492a <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 020f 	bic.w	r2, r2, #15
 8004928:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492e:	f023 0303 	bic.w	r3, r3, #3
 8004932:	f043 0201 	orr.w	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	659a      	str	r2, [r3, #88]	@ 0x58
 800493a:	e007      	b.n	800494c <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004940:	f043 0210 	orr.w	r2, r3, #16
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800494c:	7ffb      	ldrb	r3, [r7, #31]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20000004 	.word	0x20000004
 800495c:	053e2d63 	.word	0x053e2d63
 8004960:	42028000 	.word	0x42028000
 8004964:	42028300 	.word	0x42028300
 8004968:	fff04007 	.word	0xfff04007

0800496c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b0a2      	sub	sp, #136	@ 0x88
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff fe81 	bl	8004684 <LL_ADC_REG_IsConversionOngoing>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	f040 80d9 	bne.w	8004b3c <HAL_ADC_Start_DMA+0x1d0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_ADC_Start_DMA+0x2c>
 8004994:	2302      	movs	r3, #2
 8004996:	e0d6      	b.n	8004b46 <HAL_ADC_Start_DMA+0x1da>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 fcfd 	bl	80053a0 <ADC_Enable>
 80049a6:	4603      	mov	r3, r0
 80049a8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80049ac:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f040 80be 	bne.w	8004b32 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049be:	f023 0301 	bic.w	r3, r3, #1
 80049c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d006      	beq.n	80049e4 <HAL_ADC_Start_DMA+0x78>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049da:	f023 0206 	bic.w	r2, r3, #6
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049e2:	e002      	b.n	80049ea <HAL_ADC_Start_DMA+0x7e>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ee:	4a58      	ldr	r2, [pc, #352]	@ (8004b50 <HAL_ADC_Start_DMA+0x1e4>)
 80049f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049f6:	4a57      	ldr	r2, [pc, #348]	@ (8004b54 <HAL_ADC_Start_DMA+0x1e8>)
 80049f8:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049fe:	4a56      	ldr	r2, [pc, #344]	@ (8004b58 <HAL_ADC_Start_DMA+0x1ec>)
 8004a00:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	221c      	movs	r2, #28
 8004a08:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f042 0210 	orr.w	r2, r2, #16
 8004a20:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0201 	orr.w	r2, r2, #1
 8004a30:	60da      	str	r2, [r3, #12]

        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d04d      	beq.n	8004adc <HAL_ADC_Start_DMA+0x170>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d046      	beq.n	8004ad8 <HAL_ADC_Start_DMA+0x16c>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d040      	beq.n	8004ad8 <HAL_ADC_Start_DMA+0x16c>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	f107 0314 	add.w	r3, r7, #20
 8004a62:	4611      	mov	r1, r2
 8004a64:	4618      	mov	r0, r3
 8004a66:	f001 ff6d 	bl	8006944 <HAL_DMAEx_List_GetNodeConfig>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_ADC_Start_DMA+0x108>
            {
              return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e068      	b.n	8004b46 <HAL_ADC_Start_DMA+0x1da>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8004a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d104      	bne.n	8004a84 <HAL_ADC_Start_DMA+0x118>
            {
              /* Word -> Bytes */
              length_bytes = Length * 4U;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a82:	e00a      	b.n	8004a9a <HAL_ADC_Start_DMA+0x12e>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8004a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d104      	bne.n	8004a94 <HAL_ADC_Start_DMA+0x128>
            {
              /* Halfword -> Bytes */
              length_bytes = Length * 2U;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a92:	e002      	b.n	8004a9a <HAL_ADC_Start_DMA+0x12e>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              length_bytes = Length;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)length_bytes;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004aa6:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aca:	4618      	mov	r0, r3
 8004acc:	f001 fea6 	bl	800681c <HAL_DMAEx_List_Start_IT>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004ad6:	e026      	b.n	8004b26 <HAL_ADC_Start_DMA+0x1ba>
          }
          else
          {
            return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e034      	b.n	8004b46 <HAL_ADC_Start_DMA+0x1da>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d104      	bne.n	8004af0 <HAL_ADC_Start_DMA+0x184>
          {
            /* Word -> Bytes */
            length_bytes = Length * 4U;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004aee:	e00c      	b.n	8004b0a <HAL_ADC_Start_DMA+0x19e>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d104      	bne.n	8004b04 <HAL_ADC_Start_DMA+0x198>
          {
            /* Halfword -> Bytes */
            length_bytes = Length * 2U;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b02:	e002      	b.n	8004b0a <HAL_ADC_Start_DMA+0x19e>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            length_bytes = Length;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          /* Start the DMA channel */
          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3340      	adds	r3, #64	@ 0x40
 8004b14:	4619      	mov	r1, r3
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b1c:	f001 fb00 	bl	8006120 <HAL_DMA_Start_IT>
 8004b20:	4603      	mov	r3, r0
 8004b22:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fd96 	bl	800465c <LL_ADC_REG_StartConversion>
 8004b30:	e007      	b.n	8004b42 <HAL_ADC_Start_DMA+0x1d6>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8004b3a:	e002      	b.n	8004b42 <HAL_ADC_Start_DMA+0x1d6>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  /* Return function status */
  return tmp_hal_status;
 8004b42:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3788      	adds	r7, #136	@ 0x88
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	08005563 	.word	0x08005563
 8004b54:	0800563b 	.word	0x0800563b
 8004b58:	08005657 	.word	0x08005657

08004b5c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b0b6      	sub	sp, #216	@ 0xd8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_ADC_ConfigChannel+0x22>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e3e6      	b.n	8005374 <HAL_ADC_ConfigChannel+0x7f0>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff fd66 	bl	8004684 <LL_ADC_REG_IsConversionOngoing>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f040 83cb 	bne.w	8005356 <HAL_ADC_ConfigChannel+0x7d2>
  {
    if ((pConfig->Channel == ADC_CHANNEL_0)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d009      	beq.n	8004bdc <HAL_ADC_ConfigChannel+0x58>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4ab0      	ldr	r2, [pc, #704]	@ (8004e90 <HAL_ADC_ConfigChannel+0x30c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d109      	bne.n	8004be6 <HAL_ADC_ConfigChannel+0x62>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	4aaf      	ldr	r2, [pc, #700]	@ (8004e94 <HAL_ADC_ConfigChannel+0x310>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d104      	bne.n	8004be6 <HAL_ADC_ConfigChannel+0x62>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff fb5f 	bl	80042a4 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6859      	ldr	r1, [r3, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f7ff fc1b 	bl	800442e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fd41 	bl	8004684 <LL_ADC_REG_IsConversionOngoing>
 8004c02:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff fd4d 	bl	80046aa <LL_ADC_INJ_IsConversionOngoing>
 8004c10:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f040 81dd 	bne.w	8004fd8 <HAL_ADC_ConfigChannel+0x454>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f040 81d8 	bne.w	8004fd8 <HAL_ADC_ConfigChannel+0x454>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c30:	d10f      	bne.n	8004c52 <HAL_ADC_ConfigChannel+0xce>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6818      	ldr	r0, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	f7ff fc22 	bl	8004486 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff fbc9 	bl	80043e2 <LL_ADC_SetSamplingTimeCommonConfig>
 8004c50:	e00e      	b.n	8004c70 <HAL_ADC_ConfigChannel+0xec>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	6819      	ldr	r1, [r3, #0]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f7ff fc11 	bl	8004486 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff fbb9 	bl	80043e2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	695a      	ldr	r2, [r3, #20]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	08db      	lsrs	r3, r3, #3
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d022      	beq.n	8004cd8 <HAL_ADC_ConfigChannel+0x154>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	6919      	ldr	r1, [r3, #16]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ca2:	f7ff fb13 	bl	80042cc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6919      	ldr	r1, [r3, #16]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f7ff fb5f 	bl	8004376 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6818      	ldr	r0, [r3, #0]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d102      	bne.n	8004cce <HAL_ADC_ConfigChannel+0x14a>
 8004cc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ccc:	e000      	b.n	8004cd0 <HAL_ADC_ConfigChannel+0x14c>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	f7ff fb6b 	bl	80043ac <LL_ADC_SetOffsetSaturation>
 8004cd6:	e17f      	b.n	8004fd8 <HAL_ADC_ConfigChannel+0x454>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2100      	movs	r1, #0
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff fb18 	bl	8004314 <LL_ADC_GetOffsetChannel>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10a      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x180>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff fb0d 	bl	8004314 <LL_ADC_GetOffsetChannel>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	0e9b      	lsrs	r3, r3, #26
 8004cfe:	f003 021f 	and.w	r2, r3, #31
 8004d02:	e01e      	b.n	8004d42 <HAL_ADC_ConfigChannel+0x1be>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2100      	movs	r1, #0
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fb02 	bl	8004314 <LL_ADC_GetOffsetChannel>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004d1a:	fa93 f3a3 	rbit	r3, r3
 8004d1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8004d22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8004d2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_ADC_ConfigChannel+0x1b2>
    return 32U;
 8004d32:	2320      	movs	r3, #32
 8004d34:	e004      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x1bc>
  return __builtin_clz(value);
 8004d36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d3a:	fab3 f383 	clz	r3, r3
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d105      	bne.n	8004d5a <HAL_ADC_ConfigChannel+0x1d6>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	0e9b      	lsrs	r3, r3, #26
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	e018      	b.n	8004d8c <HAL_ADC_ConfigChannel+0x208>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004d66:	fa93 f3a3 	rbit	r3, r3
 8004d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004d6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004d76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_ADC_ConfigChannel+0x1fe>
    return 32U;
 8004d7e:	2320      	movs	r3, #32
 8004d80:	e004      	b.n	8004d8c <HAL_ADC_ConfigChannel+0x208>
  return __builtin_clz(value);
 8004d82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d86:	fab3 f383 	clz	r3, r3
 8004d8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d106      	bne.n	8004d9e <HAL_ADC_ConfigChannel+0x21a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2200      	movs	r2, #0
 8004d96:	2100      	movs	r1, #0
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff fad1 	bl	8004340 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2101      	movs	r1, #1
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff fab5 	bl	8004314 <LL_ADC_GetOffsetChannel>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <HAL_ADC_ConfigChannel+0x246>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2101      	movs	r1, #1
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff faaa 	bl	8004314 <LL_ADC_GetOffsetChannel>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	0e9b      	lsrs	r3, r3, #26
 8004dc4:	f003 021f 	and.w	r2, r3, #31
 8004dc8:	e01e      	b.n	8004e08 <HAL_ADC_ConfigChannel+0x284>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2101      	movs	r1, #1
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7ff fa9f 	bl	8004314 <LL_ADC_GetOffsetChannel>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ddc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004de0:	fa93 f3a3 	rbit	r3, r3
 8004de4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004de8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004dec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004df0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_ADC_ConfigChannel+0x278>
    return 32U;
 8004df8:	2320      	movs	r3, #32
 8004dfa:	e004      	b.n	8004e06 <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 8004dfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e00:	fab3 f383 	clz	r3, r3
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d105      	bne.n	8004e20 <HAL_ADC_ConfigChannel+0x29c>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	0e9b      	lsrs	r3, r3, #26
 8004e1a:	f003 031f 	and.w	r3, r3, #31
 8004e1e:	e018      	b.n	8004e52 <HAL_ADC_ConfigChannel+0x2ce>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e2c:	fa93 f3a3 	rbit	r3, r3
 8004e30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004e34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8004e44:	2320      	movs	r3, #32
 8004e46:	e004      	b.n	8004e52 <HAL_ADC_ConfigChannel+0x2ce>
  return __builtin_clz(value);
 8004e48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e4c:	fab3 f383 	clz	r3, r3
 8004e50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d106      	bne.n	8004e64 <HAL_ADC_ConfigChannel+0x2e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff fa6e 	bl	8004340 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2102      	movs	r1, #2
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff fa52 	bl	8004314 <LL_ADC_GetOffsetChannel>
 8004e70:	4603      	mov	r3, r0
 8004e72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10e      	bne.n	8004e98 <HAL_ADC_ConfigChannel+0x314>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2102      	movs	r1, #2
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff fa47 	bl	8004314 <LL_ADC_GetOffsetChannel>
 8004e86:	4603      	mov	r3, r0
 8004e88:	0e9b      	lsrs	r3, r3, #26
 8004e8a:	f003 021f 	and.w	r2, r3, #31
 8004e8e:	e022      	b.n	8004ed6 <HAL_ADC_ConfigChannel+0x352>
 8004e90:	04300002 	.word	0x04300002
 8004e94:	407f0000 	.word	0x407f0000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2102      	movs	r1, #2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff fa38 	bl	8004314 <LL_ADC_GetOffsetChannel>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eae:	fa93 f3a3 	rbit	r3, r3
 8004eb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004eb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004eba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004ebe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_ADC_ConfigChannel+0x346>
    return 32U;
 8004ec6:	2320      	movs	r3, #32
 8004ec8:	e004      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8004eca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004ece:	fab3 f383 	clz	r3, r3
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d105      	bne.n	8004eee <HAL_ADC_ConfigChannel+0x36a>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	0e9b      	lsrs	r3, r3, #26
 8004ee8:	f003 031f 	and.w	r3, r3, #31
 8004eec:	e016      	b.n	8004f1c <HAL_ADC_ConfigChannel+0x398>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004efa:	fa93 f3a3 	rbit	r3, r3
 8004efe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004f00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004f06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_ADC_ConfigChannel+0x38e>
    return 32U;
 8004f0e:	2320      	movs	r3, #32
 8004f10:	e004      	b.n	8004f1c <HAL_ADC_ConfigChannel+0x398>
  return __builtin_clz(value);
 8004f12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f16:	fab3 f383 	clz	r3, r3
 8004f1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d106      	bne.n	8004f2e <HAL_ADC_ConfigChannel+0x3aa>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2200      	movs	r2, #0
 8004f26:	2102      	movs	r1, #2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff fa09 	bl	8004340 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2103      	movs	r1, #3
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff f9ed 	bl	8004314 <LL_ADC_GetOffsetChannel>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10a      	bne.n	8004f5a <HAL_ADC_ConfigChannel+0x3d6>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2103      	movs	r1, #3
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff f9e2 	bl	8004314 <LL_ADC_GetOffsetChannel>
 8004f50:	4603      	mov	r3, r0
 8004f52:	0e9b      	lsrs	r3, r3, #26
 8004f54:	f003 021f 	and.w	r2, r3, #31
 8004f58:	e017      	b.n	8004f8a <HAL_ADC_ConfigChannel+0x406>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2103      	movs	r1, #3
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff f9d7 	bl	8004314 <LL_ADC_GetOffsetChannel>
 8004f66:	4603      	mov	r3, r0
 8004f68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f6c:	fa93 f3a3 	rbit	r3, r3
 8004f70:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004f72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f74:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004f76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004f7c:	2320      	movs	r3, #32
 8004f7e:	e003      	b.n	8004f88 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004f80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f82:	fab3 f383 	clz	r3, r3
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d105      	bne.n	8004fa2 <HAL_ADC_ConfigChannel+0x41e>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	0e9b      	lsrs	r3, r3, #26
 8004f9c:	f003 031f 	and.w	r3, r3, #31
 8004fa0:	e011      	b.n	8004fc6 <HAL_ADC_ConfigChannel+0x442>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004faa:	fa93 f3a3 	rbit	r3, r3
 8004fae:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004fb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004fb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_ADC_ConfigChannel+0x43a>
    return 32U;
 8004fba:	2320      	movs	r3, #32
 8004fbc:	e003      	b.n	8004fc6 <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 8004fbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fc0:	fab3 f383 	clz	r3, r3
 8004fc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d106      	bne.n	8004fd8 <HAL_ADC_ConfigChannel+0x454>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	2103      	movs	r1, #3
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff f9b4 	bl	8004340 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff fb17 	bl	8004610 <LL_ADC_IsEnabled>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f040 813f 	bne.w	8005268 <HAL_ADC_ConfigChannel+0x6e4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6818      	ldr	r0, [r3, #0]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	6819      	ldr	r1, [r3, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f7ff fa70 	bl	80044dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	4a8e      	ldr	r2, [pc, #568]	@ (800523c <HAL_ADC_ConfigChannel+0x6b8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	f040 8130 	bne.w	8005268 <HAL_ADC_ConfigChannel+0x6e4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10b      	bne.n	8005030 <HAL_ADC_ConfigChannel+0x4ac>
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	0e9b      	lsrs	r3, r3, #26
 800501e:	3301      	adds	r3, #1
 8005020:	f003 031f 	and.w	r3, r3, #31
 8005024:	2b09      	cmp	r3, #9
 8005026:	bf94      	ite	ls
 8005028:	2301      	movls	r3, #1
 800502a:	2300      	movhi	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	e019      	b.n	8005064 <HAL_ADC_ConfigChannel+0x4e0>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005036:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005038:	fa93 f3a3 	rbit	r3, r3
 800503c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800503e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005040:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005042:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_ADC_ConfigChannel+0x4c8>
    return 32U;
 8005048:	2320      	movs	r3, #32
 800504a:	e003      	b.n	8005054 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 800504c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800504e:	fab3 f383 	clz	r3, r3
 8005052:	b2db      	uxtb	r3, r3
 8005054:	3301      	adds	r3, #1
 8005056:	f003 031f 	and.w	r3, r3, #31
 800505a:	2b09      	cmp	r3, #9
 800505c:	bf94      	ite	ls
 800505e:	2301      	movls	r3, #1
 8005060:	2300      	movhi	r3, #0
 8005062:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005064:	2b00      	cmp	r3, #0
 8005066:	d079      	beq.n	800515c <HAL_ADC_ConfigChannel+0x5d8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005070:	2b00      	cmp	r3, #0
 8005072:	d107      	bne.n	8005084 <HAL_ADC_ConfigChannel+0x500>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	0e9b      	lsrs	r3, r3, #26
 800507a:	3301      	adds	r3, #1
 800507c:	069b      	lsls	r3, r3, #26
 800507e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005082:	e015      	b.n	80050b0 <HAL_ADC_ConfigChannel+0x52c>
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800508c:	fa93 f3a3 	rbit	r3, r3
 8005090:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005094:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_ADC_ConfigChannel+0x51c>
    return 32U;
 800509c:	2320      	movs	r3, #32
 800509e:	e003      	b.n	80050a8 <HAL_ADC_ConfigChannel+0x524>
  return __builtin_clz(value);
 80050a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a2:	fab3 f383 	clz	r3, r3
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	3301      	adds	r3, #1
 80050aa:	069b      	lsls	r3, r3, #26
 80050ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d109      	bne.n	80050d0 <HAL_ADC_ConfigChannel+0x54c>
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	0e9b      	lsrs	r3, r3, #26
 80050c2:	3301      	adds	r3, #1
 80050c4:	f003 031f 	and.w	r3, r3, #31
 80050c8:	2101      	movs	r1, #1
 80050ca:	fa01 f303 	lsl.w	r3, r1, r3
 80050ce:	e017      	b.n	8005100 <HAL_ADC_ConfigChannel+0x57c>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050d8:	fa93 f3a3 	rbit	r3, r3
 80050dc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80050de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80050e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_ADC_ConfigChannel+0x568>
    return 32U;
 80050e8:	2320      	movs	r3, #32
 80050ea:	e003      	b.n	80050f4 <HAL_ADC_ConfigChannel+0x570>
  return __builtin_clz(value);
 80050ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050ee:	fab3 f383 	clz	r3, r3
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	3301      	adds	r3, #1
 80050f6:	f003 031f 	and.w	r3, r3, #31
 80050fa:	2101      	movs	r1, #1
 80050fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005100:	ea42 0103 	orr.w	r1, r2, r3
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <HAL_ADC_ConfigChannel+0x5a2>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	0e9b      	lsrs	r3, r3, #26
 8005116:	3301      	adds	r3, #1
 8005118:	f003 021f 	and.w	r2, r3, #31
 800511c:	4613      	mov	r3, r2
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	4413      	add	r3, r2
 8005122:	051b      	lsls	r3, r3, #20
 8005124:	e018      	b.n	8005158 <HAL_ADC_ConfigChannel+0x5d4>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512e:	fa93 f3a3 	rbit	r3, r3
 8005132:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005136:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_ADC_ConfigChannel+0x5be>
    return 32U;
 800513e:	2320      	movs	r3, #32
 8005140:	e003      	b.n	800514a <HAL_ADC_ConfigChannel+0x5c6>
  return __builtin_clz(value);
 8005142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005144:	fab3 f383 	clz	r3, r3
 8005148:	b2db      	uxtb	r3, r3
 800514a:	3301      	adds	r3, #1
 800514c:	f003 021f 	and.w	r2, r3, #31
 8005150:	4613      	mov	r3, r2
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	4413      	add	r3, r2
 8005156:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005158:	430b      	orrs	r3, r1
 800515a:	e080      	b.n	800525e <HAL_ADC_ConfigChannel+0x6da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005164:	2b00      	cmp	r3, #0
 8005166:	d107      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x5f4>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	0e9b      	lsrs	r3, r3, #26
 800516e:	3301      	adds	r3, #1
 8005170:	069b      	lsls	r3, r3, #26
 8005172:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005176:	e015      	b.n	80051a4 <HAL_ADC_ConfigChannel+0x620>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005180:	fa93 f3a3 	rbit	r3, r3
 8005184:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005188:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800518a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_ADC_ConfigChannel+0x610>
    return 32U;
 8005190:	2320      	movs	r3, #32
 8005192:	e003      	b.n	800519c <HAL_ADC_ConfigChannel+0x618>
  return __builtin_clz(value);
 8005194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005196:	fab3 f383 	clz	r3, r3
 800519a:	b2db      	uxtb	r3, r3
 800519c:	3301      	adds	r3, #1
 800519e:	069b      	lsls	r3, r3, #26
 80051a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d109      	bne.n	80051c4 <HAL_ADC_ConfigChannel+0x640>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	0e9b      	lsrs	r3, r3, #26
 80051b6:	3301      	adds	r3, #1
 80051b8:	f003 031f 	and.w	r3, r3, #31
 80051bc:	2101      	movs	r1, #1
 80051be:	fa01 f303 	lsl.w	r3, r1, r3
 80051c2:	e017      	b.n	80051f4 <HAL_ADC_ConfigChannel+0x670>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	fa93 f3a3 	rbit	r3, r3
 80051d0:	61fb      	str	r3, [r7, #28]
  return result;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_ADC_ConfigChannel+0x65c>
    return 32U;
 80051dc:	2320      	movs	r3, #32
 80051de:	e003      	b.n	80051e8 <HAL_ADC_ConfigChannel+0x664>
  return __builtin_clz(value);
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	fab3 f383 	clz	r3, r3
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	3301      	adds	r3, #1
 80051ea:	f003 031f 	and.w	r3, r3, #31
 80051ee:	2101      	movs	r1, #1
 80051f0:	fa01 f303 	lsl.w	r3, r1, r3
 80051f4:	ea42 0103 	orr.w	r1, r2, r3
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10d      	bne.n	8005220 <HAL_ADC_ConfigChannel+0x69c>
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	0e9b      	lsrs	r3, r3, #26
 800520a:	3301      	adds	r3, #1
 800520c:	f003 021f 	and.w	r2, r3, #31
 8005210:	4613      	mov	r3, r2
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	4413      	add	r3, r2
 8005216:	3b1e      	subs	r3, #30
 8005218:	051b      	lsls	r3, r3, #20
 800521a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800521e:	e01d      	b.n	800525c <HAL_ADC_ConfigChannel+0x6d8>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	fa93 f3a3 	rbit	r3, r3
 800522c:	613b      	str	r3, [r7, #16]
  return result;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d103      	bne.n	8005240 <HAL_ADC_ConfigChannel+0x6bc>
    return 32U;
 8005238:	2320      	movs	r3, #32
 800523a:	e005      	b.n	8005248 <HAL_ADC_ConfigChannel+0x6c4>
 800523c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	fab3 f383 	clz	r3, r3
 8005246:	b2db      	uxtb	r3, r3
 8005248:	3301      	adds	r3, #1
 800524a:	f003 021f 	and.w	r2, r3, #31
 800524e:	4613      	mov	r3, r2
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	4413      	add	r3, r2
 8005254:	3b1e      	subs	r3, #30
 8005256:	051b      	lsls	r3, r3, #20
 8005258:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800525c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005262:	4619      	mov	r1, r3
 8005264:	f7ff f90f 	bl	8004486 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	4b43      	ldr	r3, [pc, #268]	@ (800537c <HAL_ADC_ConfigChannel+0x7f8>)
 800526e:	4013      	ands	r3, r2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d079      	beq.n	8005368 <HAL_ADC_ConfigChannel+0x7e4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005274:	4842      	ldr	r0, [pc, #264]	@ (8005380 <HAL_ADC_ConfigChannel+0x7fc>)
 8005276:	f7fe fff5 	bl	8004264 <LL_ADC_GetCommonPathInternalCh>
 800527a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a40      	ldr	r2, [pc, #256]	@ (8005384 <HAL_ADC_ConfigChannel+0x800>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d124      	bne.n	80052d2 <HAL_ADC_ConfigChannel+0x74e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005288:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800528c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d11e      	bne.n	80052d2 <HAL_ADC_ConfigChannel+0x74e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a3b      	ldr	r2, [pc, #236]	@ (8005388 <HAL_ADC_ConfigChannel+0x804>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d164      	bne.n	8005368 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800529e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80052a6:	4619      	mov	r1, r3
 80052a8:	4835      	ldr	r0, [pc, #212]	@ (8005380 <HAL_ADC_ConfigChannel+0x7fc>)
 80052aa:	f7fe ffc8 	bl	800423e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052ae:	4b37      	ldr	r3, [pc, #220]	@ (800538c <HAL_ADC_ConfigChannel+0x808>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	099b      	lsrs	r3, r3, #6
 80052b4:	4a36      	ldr	r2, [pc, #216]	@ (8005390 <HAL_ADC_ConfigChannel+0x80c>)
 80052b6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ba:	099b      	lsrs	r3, r3, #6
 80052bc:	3301      	adds	r3, #1
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80052c2:	e002      	b.n	80052ca <HAL_ADC_ConfigChannel+0x746>
          {
            wait_loop_index--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1f9      	bne.n	80052c4 <HAL_ADC_ConfigChannel+0x740>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052d0:	e04a      	b.n	8005368 <HAL_ADC_ConfigChannel+0x7e4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a2f      	ldr	r2, [pc, #188]	@ (8005394 <HAL_ADC_ConfigChannel+0x810>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d113      	bne.n	8005304 <HAL_ADC_ConfigChannel+0x780>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80052dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10d      	bne.n	8005304 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a26      	ldr	r2, [pc, #152]	@ (8005388 <HAL_ADC_ConfigChannel+0x804>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d13a      	bne.n	8005368 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052fa:	4619      	mov	r1, r3
 80052fc:	4820      	ldr	r0, [pc, #128]	@ (8005380 <HAL_ADC_ConfigChannel+0x7fc>)
 80052fe:	f7fe ff9e 	bl	800423e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005302:	e031      	b.n	8005368 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a23      	ldr	r2, [pc, #140]	@ (8005398 <HAL_ADC_ConfigChannel+0x814>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d113      	bne.n	8005336 <HAL_ADC_ConfigChannel+0x7b2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800530e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10d      	bne.n	8005336 <HAL_ADC_ConfigChannel+0x7b2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a1a      	ldr	r2, [pc, #104]	@ (8005388 <HAL_ADC_ConfigChannel+0x804>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d121      	bne.n	8005368 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005324:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005328:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800532c:	4619      	mov	r1, r3
 800532e:	4814      	ldr	r0, [pc, #80]	@ (8005380 <HAL_ADC_ConfigChannel+0x7fc>)
 8005330:	f7fe ff85 	bl	800423e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8005334:	e018      	b.n	8005368 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a18      	ldr	r2, [pc, #96]	@ (800539c <HAL_ADC_ConfigChannel+0x818>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d113      	bne.n	8005368 <HAL_ADC_ConfigChannel+0x7e4>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a10      	ldr	r2, [pc, #64]	@ (8005388 <HAL_ADC_ConfigChannel+0x804>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00e      	beq.n	8005368 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4618      	mov	r0, r3
 8005350:	f7fe ff96 	bl	8004280 <LL_ADC_EnableChannelVDDcore>
 8005354:	e008      	b.n	8005368 <HAL_ADC_ConfigChannel+0x7e4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535a:	f043 0220 	orr.w	r2, r3, #32
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8005370:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005374:	4618      	mov	r0, r3
 8005376:	37d8      	adds	r7, #216	@ 0xd8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	80080000 	.word	0x80080000
 8005380:	42028300 	.word	0x42028300
 8005384:	c3210000 	.word	0xc3210000
 8005388:	42028000 	.word	0x42028000
 800538c:	20000004 	.word	0x20000004
 8005390:	053e2d63 	.word	0x053e2d63
 8005394:	88600004 	.word	0x88600004
 8005398:	c7520000 	.word	0xc7520000
 800539c:	99200040 	.word	0x99200040

080053a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff f92d 	bl	8004610 <LL_ADC_IsEnabled>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d166      	bne.n	800548a <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	4b34      	ldr	r3, [pc, #208]	@ (8005494 <ADC_Enable+0xf4>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00d      	beq.n	80053e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ce:	f043 0210 	orr.w	r2, r3, #16
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053da:	f043 0201 	orr.w	r2, r3, #1
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e052      	b.n	800548c <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff f8e8 	bl	80045c0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80053f0:	4829      	ldr	r0, [pc, #164]	@ (8005498 <ADC_Enable+0xf8>)
 80053f2:	f7fe ff37 	bl	8004264 <LL_ADC_GetCommonPathInternalCh>
 80053f6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80053f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d010      	beq.n	8005422 <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005400:	4b26      	ldr	r3, [pc, #152]	@ (800549c <ADC_Enable+0xfc>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	099b      	lsrs	r3, r3, #6
 8005406:	4a26      	ldr	r2, [pc, #152]	@ (80054a0 <ADC_Enable+0x100>)
 8005408:	fba2 2303 	umull	r2, r3, r2, r3
 800540c:	099b      	lsrs	r3, r3, #6
 800540e:	3301      	adds	r3, #1
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005414:	e002      	b.n	800541c <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	3b01      	subs	r3, #1
 800541a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f9      	bne.n	8005416 <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005422:	f7fe feed 	bl	8004200 <HAL_GetTick>
 8005426:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005428:	e028      	b.n	800547c <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f7ff f8ee 	bl	8004610 <LL_ADC_IsEnabled>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d104      	bne.n	8005444 <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff f8be 	bl	80045c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005444:	f7fe fedc 	bl	8004200 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d914      	bls.n	800547c <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b01      	cmp	r3, #1
 800545e:	d00d      	beq.n	800547c <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005464:	f043 0210 	orr.w	r2, r3, #16
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005470:	f043 0201 	orr.w	r2, r3, #1
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e007      	b.n	800548c <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b01      	cmp	r3, #1
 8005488:	d1cf      	bne.n	800542a <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	8000003f 	.word	0x8000003f
 8005498:	42028300 	.word	0x42028300
 800549c:	20000004 	.word	0x20000004
 80054a0:	053e2d63 	.word	0x053e2d63

080054a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff f8c0 	bl	8004636 <LL_ADC_IsDisableOngoing>
 80054b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff f8a7 	bl	8004610 <LL_ADC_IsEnabled>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d047      	beq.n	8005558 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d144      	bne.n	8005558 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f003 030d 	and.w	r3, r3, #13
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d10c      	bne.n	80054f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff f881 	bl	80045e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2203      	movs	r2, #3
 80054ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80054ee:	f7fe fe87 	bl	8004200 <HAL_GetTick>
 80054f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054f4:	e029      	b.n	800554a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054fa:	f043 0210 	orr.w	r2, r3, #16
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005506:	f043 0201 	orr.w	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e023      	b.n	800555a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005512:	f7fe fe75 	bl	8004200 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d914      	bls.n	800554a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00d      	beq.n	800554a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005532:	f043 0210 	orr.w	r2, r3, #16
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800553e:	f043 0201 	orr.w	r2, r3, #1
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e007      	b.n	800555a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1dc      	bne.n	8005512 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800556e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005574:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005578:	2b00      	cmp	r3, #0
 800557a:	d14b      	bne.n	8005614 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005580:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d021      	beq.n	80055da <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f7fe ff34 	bl	8004408 <LL_ADC_REG_IsTriggerSourceSWStart>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d032      	beq.n	800560c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d12b      	bne.n	800560c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d11f      	bne.n	800560c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d0:	f043 0201 	orr.w	r2, r3, #1
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80055d8:	e018      	b.n	800560c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d111      	bne.n	800560c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d105      	bne.n	800560c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005604:	f043 0201 	orr.w	r2, r3, #1
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f7fc fc63 	bl	8001ed8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005612:	e00e      	b.n	8005632 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005618:	f003 0310 	and.w	r3, r3, #16
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff faa5 	bl	8004b70 <HAL_ADC_ErrorCallback>
}
 8005626:	e004      	b.n	8005632 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800562c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	4798      	blx	r3
}
 8005632:	bf00      	nop
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005646:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f7ff fa87 	bl	8004b5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800564e:	bf00      	nop
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005662:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005668:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005674:	f043 0204 	orr.w	r2, r3, #4
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f7ff fa77 	bl	8004b70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005682:	bf00      	nop
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <LL_ADC_StartCalibration>:
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800569c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	609a      	str	r2, [r3, #8]
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <LL_ADC_IsCalibrationOnGoing>:
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056d0:	d101      	bne.n	80056d6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_ADCEx_Calibration_Start+0x1c>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e04d      	b.n	800579c <HAL_ADCEx_Calibration_Start+0xb8>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff fecb 	bl	80054a4 <ADC_Disable>
 800570e:	4603      	mov	r3, r0
 8005710:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005712:	7bfb      	ldrb	r3, [r7, #15]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d136      	bne.n	8005786 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005720:	f023 0302 	bic.w	r3, r3, #2
 8005724:	f043 0202 	orr.w	r2, r3, #2
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6839      	ldr	r1, [r7, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff ffa9 	bl	800568a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005738:	e014      	b.n	8005764 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	3301      	adds	r3, #1
 800573e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4a18      	ldr	r2, [pc, #96]	@ (80057a4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d30d      	bcc.n	8005764 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574c:	f023 0312 	bic.w	r3, r3, #18
 8005750:	f043 0210 	orr.w	r2, r3, #16
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e01b      	b.n	800579c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4618      	mov	r0, r3
 800576a:	f7ff ffa7 	bl	80056bc <LL_ADC_IsCalibrationOnGoing>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e2      	bne.n	800573a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005778:	f023 0303 	bic.w	r3, r3, #3
 800577c:	f043 0201 	orr.w	r2, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	659a      	str	r2, [r3, #88]	@ 0x58
 8005784:	e005      	b.n	8005792 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800578a:	f043 0210 	orr.w	r2, r3, #16
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800579a:	7bfb      	ldrb	r3, [r7, #15]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	25c3f800 	.word	0x25c3f800

080057a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057b8:	4b0c      	ldr	r3, [pc, #48]	@ (80057ec <__NVIC_SetPriorityGrouping+0x44>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80057c4:	4013      	ands	r3, r2
 80057c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80057d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057da:	4a04      	ldr	r2, [pc, #16]	@ (80057ec <__NVIC_SetPriorityGrouping+0x44>)
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	60d3      	str	r3, [r2, #12]
}
 80057e0:	bf00      	nop
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	e000ed00 	.word	0xe000ed00

080057f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057f4:	4b04      	ldr	r3, [pc, #16]	@ (8005808 <__NVIC_GetPriorityGrouping+0x18>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	0a1b      	lsrs	r3, r3, #8
 80057fa:	f003 0307 	and.w	r3, r3, #7
}
 80057fe:	4618      	mov	r0, r3
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	e000ed00 	.word	0xe000ed00

0800580c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	4603      	mov	r3, r0
 8005814:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800581a:	2b00      	cmp	r3, #0
 800581c:	db0b      	blt.n	8005836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800581e:	88fb      	ldrh	r3, [r7, #6]
 8005820:	f003 021f 	and.w	r2, r3, #31
 8005824:	4907      	ldr	r1, [pc, #28]	@ (8005844 <__NVIC_EnableIRQ+0x38>)
 8005826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	2001      	movs	r0, #1
 800582e:	fa00 f202 	lsl.w	r2, r0, r2
 8005832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	e000e100 	.word	0xe000e100

08005848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	6039      	str	r1, [r7, #0]
 8005852:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005854:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005858:	2b00      	cmp	r3, #0
 800585a:	db0a      	blt.n	8005872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	b2da      	uxtb	r2, r3
 8005860:	490c      	ldr	r1, [pc, #48]	@ (8005894 <__NVIC_SetPriority+0x4c>)
 8005862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005866:	0112      	lsls	r2, r2, #4
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	440b      	add	r3, r1
 800586c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005870:	e00a      	b.n	8005888 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	b2da      	uxtb	r2, r3
 8005876:	4908      	ldr	r1, [pc, #32]	@ (8005898 <__NVIC_SetPriority+0x50>)
 8005878:	88fb      	ldrh	r3, [r7, #6]
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	3b04      	subs	r3, #4
 8005880:	0112      	lsls	r2, r2, #4
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	440b      	add	r3, r1
 8005886:	761a      	strb	r2, [r3, #24]
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	e000e100 	.word	0xe000e100
 8005898:	e000ed00 	.word	0xe000ed00

0800589c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800589c:	b480      	push	{r7}
 800589e:	b089      	sub	sp, #36	@ 0x24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	f1c3 0307 	rsb	r3, r3, #7
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	bf28      	it	cs
 80058ba:	2304      	movcs	r3, #4
 80058bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	3304      	adds	r3, #4
 80058c2:	2b06      	cmp	r3, #6
 80058c4:	d902      	bls.n	80058cc <NVIC_EncodePriority+0x30>
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	3b03      	subs	r3, #3
 80058ca:	e000      	b.n	80058ce <NVIC_EncodePriority+0x32>
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058d0:	f04f 32ff 	mov.w	r2, #4294967295
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	fa02 f303 	lsl.w	r3, r2, r3
 80058da:	43da      	mvns	r2, r3
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	401a      	ands	r2, r3
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058e4:	f04f 31ff 	mov.w	r1, #4294967295
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	fa01 f303 	lsl.w	r3, r1, r3
 80058ee:	43d9      	mvns	r1, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058f4:	4313      	orrs	r3, r2
         );
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3724      	adds	r7, #36	@ 0x24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b082      	sub	sp, #8
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7ff ff4c 	bl	80057a8 <__NVIC_SetPriorityGrouping>
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	4603      	mov	r3, r0
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005926:	f7ff ff63 	bl	80057f0 <__NVIC_GetPriorityGrouping>
 800592a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	68b9      	ldr	r1, [r7, #8]
 8005930:	6978      	ldr	r0, [r7, #20]
 8005932:	f7ff ffb3 	bl	800589c <NVIC_EncodePriority>
 8005936:	4602      	mov	r2, r0
 8005938:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800593c:	4611      	mov	r1, r2
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff ff82 	bl	8005848 <__NVIC_SetPriority>
}
 8005944:	bf00      	nop
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff ff56 	bl	800580c <__NVIC_EnableIRQ>
}
 8005960:	bf00      	nop
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3b01      	subs	r3, #1
 8005974:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005978:	d301      	bcc.n	800597e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800597a:	2301      	movs	r3, #1
 800597c:	e00d      	b.n	800599a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800597e:	4a0a      	ldr	r2, [pc, #40]	@ (80059a8 <HAL_SYSTICK_Config+0x40>)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3b01      	subs	r3, #1
 8005984:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8005986:	4b08      	ldr	r3, [pc, #32]	@ (80059a8 <HAL_SYSTICK_Config+0x40>)
 8005988:	2200      	movs	r2, #0
 800598a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800598c:	4b06      	ldr	r3, [pc, #24]	@ (80059a8 <HAL_SYSTICK_Config+0x40>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a05      	ldr	r2, [pc, #20]	@ (80059a8 <HAL_SYSTICK_Config+0x40>)
 8005992:	f043 0303 	orr.w	r3, r3, #3
 8005996:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	e000e010 	.word	0xe000e010

080059ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d844      	bhi.n	8005a44 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80059ba:	a201      	add	r2, pc, #4	@ (adr r2, 80059c0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80059bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c0:	080059e3 	.word	0x080059e3
 80059c4:	08005a01 	.word	0x08005a01
 80059c8:	08005a23 	.word	0x08005a23
 80059cc:	08005a45 	.word	0x08005a45
 80059d0:	080059d5 	.word	0x080059d5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80059d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059da:	f043 0304 	orr.w	r3, r3, #4
 80059de:	6013      	str	r3, [r2, #0]
      break;
 80059e0:	e031      	b.n	8005a46 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80059e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059e8:	f023 0304 	bic.w	r3, r3, #4
 80059ec:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80059ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005a58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80059f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059f4:	4a18      	ldr	r2, [pc, #96]	@ (8005a58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80059f6:	f023 030c 	bic.w	r3, r3, #12
 80059fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80059fe:	e022      	b.n	8005a46 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005a00:	4b14      	ldr	r3, [pc, #80]	@ (8005a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a13      	ldr	r2, [pc, #76]	@ (8005a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005a06:	f023 0304 	bic.w	r3, r3, #4
 8005a0a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8005a0c:	4b12      	ldr	r3, [pc, #72]	@ (8005a58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005a0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a12:	f023 030c 	bic.w	r3, r3, #12
 8005a16:	4a10      	ldr	r2, [pc, #64]	@ (8005a58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005a18:	f043 0304 	orr.w	r3, r3, #4
 8005a1c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8005a20:	e011      	b.n	8005a46 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005a22:	4b0c      	ldr	r3, [pc, #48]	@ (8005a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a0b      	ldr	r2, [pc, #44]	@ (8005a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005a28:	f023 0304 	bic.w	r3, r3, #4
 8005a2c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8005a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005a30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a34:	f023 030c 	bic.w	r3, r3, #12
 8005a38:	4a07      	ldr	r2, [pc, #28]	@ (8005a58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005a3a:	f043 0308 	orr.w	r3, r3, #8
 8005a3e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8005a42:	e000      	b.n	8005a46 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005a44:	bf00      	nop
  }
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	e000e010 	.word	0xe000e010
 8005a58:	44020c00 	.word	0x44020c00

08005a5c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8005a62:	4b17      	ldr	r3, [pc, #92]	@ (8005ac0 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8005a6e:	2304      	movs	r3, #4
 8005a70:	607b      	str	r3, [r7, #4]
 8005a72:	e01e      	b.n	8005ab2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8005a74:	4b13      	ldr	r3, [pc, #76]	@ (8005ac4 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8005a76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a7a:	f003 030c 	and.w	r3, r3, #12
 8005a7e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b08      	cmp	r3, #8
 8005a84:	d00f      	beq.n	8005aa6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d80f      	bhi.n	8005aac <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b04      	cmp	r3, #4
 8005a96:	d003      	beq.n	8005aa0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8005a98:	e008      	b.n	8005aac <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	607b      	str	r3, [r7, #4]
        break;
 8005a9e:	e008      	b.n	8005ab2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	607b      	str	r3, [r7, #4]
        break;
 8005aa4:	e005      	b.n	8005ab2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	607b      	str	r3, [r7, #4]
        break;
 8005aaa:	e002      	b.n	8005ab2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005aac:	2300      	movs	r3, #0
 8005aae:	607b      	str	r3, [r7, #4]
        break;
 8005ab0:	bf00      	nop
    }
  }
  return systick_source;
 8005ab2:	687b      	ldr	r3, [r7, #4]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	e000e010 	.word	0xe000e010
 8005ac4:	44020c00 	.word	0x44020c00

08005ac8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e014      	b.n	8005b04 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	791b      	ldrb	r3, [r3, #4]
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d105      	bne.n	8005af0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fd ff0a 	bl	8003904 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e056      	b.n	8005bce <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	795b      	ldrb	r3, [r3, #5]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_DAC_Start+0x20>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e050      	b.n	8005bce <HAL_DAC_Start+0xc2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2202      	movs	r2, #2
 8005b36:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6819      	ldr	r1, [r3, #0]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	2201      	movs	r2, #1
 8005b46:	409a      	lsls	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b50:	4b22      	ldr	r3, [pc, #136]	@ (8005bdc <HAL_DAC_Start+0xd0>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	099b      	lsrs	r3, r3, #6
 8005b56:	4a22      	ldr	r2, [pc, #136]	@ (8005be0 <HAL_DAC_Start+0xd4>)
 8005b58:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5c:	099b      	lsrs	r3, r3, #6
 8005b5e:	3301      	adds	r3, #1
 8005b60:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005b62:	e002      	b.n	8005b6a <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1f9      	bne.n	8005b64 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10f      	bne.n	8005b96 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d11d      	bne.n	8005bc0 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	605a      	str	r2, [r3, #4]
 8005b94:	e014      	b.n	8005bc0 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	2102      	movs	r1, #2
 8005ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d107      	bne.n	8005bc0 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0202 	orr.w	r2, r2, #2
 8005bbe:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	20000004 	.word	0x20000004
 8005be0:	053e2d63 	.word	0x053e2d63

08005be4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e018      	b.n	8005c32 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d105      	bne.n	8005c1e <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4413      	add	r3, r2
 8005c18:	3308      	adds	r3, #8
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	e004      	b.n	8005c28 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4413      	add	r3, r2
 8005c24:	3314      	adds	r3, #20
 8005c26:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
	...

08005c40 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08c      	sub	sp, #48	@ 0x30
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <HAL_DAC_ConfigChannel+0x1e>
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e19d      	b.n	8005f9e <HAL_DAC_ConfigChannel+0x35e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	795b      	ldrb	r3, [r3, #5]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d101      	bne.n	8005c74 <HAL_DAC_ConfigChannel+0x34>
 8005c70:	2302      	movs	r3, #2
 8005c72:	e194      	b.n	8005f9e <HAL_DAC_ConfigChannel+0x35e>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2201      	movs	r2, #1
 8005c78:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d17a      	bne.n	8005d7e <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005c88:	f7fe faba 	bl	8004200 <HAL_GetTick>
 8005c8c:	6238      	str	r0, [r7, #32]

    if (Channel == DAC_CHANNEL_1)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d13d      	bne.n	8005d10 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005c94:	e018      	b.n	8005cc8 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005c96:	f7fe fab3 	bl	8004200 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d911      	bls.n	8005cc8 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005caa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f043 0208 	orr.w	r2, r3, #8
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2203      	movs	r2, #3
 8005cc2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e16a      	b.n	8005f9e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1df      	bne.n	8005c96 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	6a12      	ldr	r2, [r2, #32]
 8005cde:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ce0:	e020      	b.n	8005d24 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005ce2:	f7fe fa8d 	bl	8004200 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d90f      	bls.n	8005d10 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	da0a      	bge.n	8005d10 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	f043 0208 	orr.w	r2, r3, #8
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2203      	movs	r2, #3
 8005d0a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e146      	b.n	8005f9e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	dbe3      	blt.n	8005ce2 <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	6a12      	ldr	r2, [r2, #32]
 8005d22:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f003 0310 	and.w	r3, r3, #16
 8005d30:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005d34:	fa01 f303 	lsl.w	r3, r1, r3
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	ea02 0103 	and.w	r1, r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f003 0310 	and.w	r3, r3, #16
 8005d48:	409a      	lsls	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f003 0310 	and.w	r3, r3, #16
 8005d5e:	21ff      	movs	r1, #255	@ 0xff
 8005d60:	fa01 f303 	lsl.w	r3, r1, r3
 8005d64:	43db      	mvns	r3, r3
 8005d66:	ea02 0103 	and.w	r1, r2, r3
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f003 0310 	and.w	r3, r3, #16
 8005d74:	409a      	lsls	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d11d      	bne.n	8005dc2 <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f003 0310 	and.w	r3, r3, #16
 8005d94:	221f      	movs	r2, #31
 8005d96:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9a:	43db      	mvns	r3, r3
 8005d9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d9e:	4013      	ands	r3, r2
 8005da0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	61fb      	str	r3, [r7, #28]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f003 0310 	and.w	r3, r3, #16
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	fa02 f303 	lsl.w	r3, r2, r3
 8005db4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005db6:	4313      	orrs	r3, r2
 8005db8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dc0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f003 0310 	and.w	r3, r3, #16
 8005dd0:	2207      	movs	r2, #7
 8005dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd6:	43db      	mvns	r3, r3
 8005dd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dda:	4013      	ands	r3, r2
 8005ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
#if !defined(TIM8)
  /* Devices STM32H503xx */
  /* On STM32H503EB (package WLCSP25) DAC channel 1 connection to GPIO is not available and should not be configured.
     Package information is stored at the address PACKAGE_BASE, WLCSP25 correspond to the value 0xF (For more
     information, please refer to the Reference Manual) */
  const __IO uint16_t *tmp_package = (uint16_t *)PACKAGE_BASE;
 8005dde:	4b72      	ldr	r3, [pc, #456]	@ (8005fa8 <HAL_DAC_ConfigChannel+0x368>)
 8005de0:	61bb      	str	r3, [r7, #24]
  if ((*(tmp_package) & 0x1FUL) == 0x0FUL)
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f003 031f 	and.w	r3, r3, #31
 8005dec:	2b0f      	cmp	r3, #15
 8005dee:	d116      	bne.n	8005e1e <HAL_DAC_ConfigChannel+0x1de>
  {
    if ((Channel == DAC_CHANNEL_1)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d113      	bne.n	8005e1e <HAL_DAC_ConfigChannel+0x1de>
        && ((sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d003      	beq.n	8005e06 <HAL_DAC_ConfigChannel+0x1c6>
            || (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH)))
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d10b      	bne.n	8005e1e <HAL_DAC_ConfigChannel+0x1de>
    {
      /* Update return status */
      status = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

      /* Change the DAC state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2204      	movs	r2, #4
 8005e10:	711a      	strb	r2, [r3, #4]

      /* Update error code */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_INVALID_CONFIG);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f043 0220 	orr.w	r2, r3, #32
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	611a      	str	r2, [r3, #16]
    }
  }
#endif /* Devices STM32H503xx */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d102      	bne.n	8005e2c <HAL_DAC_ConfigChannel+0x1ec>
  {
    connectOnChip = 0x00000000UL;
 8005e26:	2300      	movs	r3, #0
 8005e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e2a:	e00f      	b.n	8005e4c <HAL_DAC_ConfigChannel+0x20c>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d102      	bne.n	8005e3a <HAL_DAC_ConfigChannel+0x1fa>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005e34:	2301      	movs	r3, #1
 8005e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e38:	e008      	b.n	8005e4c <HAL_DAC_ConfigChannel+0x20c>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d102      	bne.n	8005e48 <HAL_DAC_ConfigChannel+0x208>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005e42:	2301      	movs	r3, #1
 8005e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e46:	e001      	b.n	8005e4c <HAL_DAC_ConfigChannel+0x20c>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f003 0310 	and.w	r3, r3, #16
 8005e62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e66:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6a:	43db      	mvns	r3, r3
 8005e6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e6e:	4013      	ands	r3, r2
 8005e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	791b      	ldrb	r3, [r3, #4]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d102      	bne.n	8005e80 <HAL_DAC_ConfigChannel+0x240>
 8005e7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005e7e:	e000      	b.n	8005e82 <HAL_DAC_ConfigChannel+0x242>
 8005e80:	2300      	movs	r3, #0
 8005e82:	69fa      	ldr	r2, [r7, #28]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f003 0310 	and.w	r3, r3, #16
 8005e8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	43db      	mvns	r3, r3
 8005e98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	795b      	ldrb	r3, [r3, #5]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d102      	bne.n	8005eac <HAL_DAC_ConfigChannel+0x26c>
 8005ea6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005eaa:	e000      	b.n	8005eae <HAL_DAC_ConfigChannel+0x26e>
 8005eac:	2300      	movs	r3, #0
 8005eae:	69fa      	ldr	r2, [r7, #28]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d114      	bne.n	8005eee <HAL_DAC_ConfigChannel+0x2ae>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005ec4:	f002 f86a 	bl	8007f9c <HAL_RCC_GetHCLKFreq>
 8005ec8:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	4a37      	ldr	r2, [pc, #220]	@ (8005fac <HAL_DAC_ConfigChannel+0x36c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d904      	bls.n	8005edc <HAL_DAC_ConfigChannel+0x29c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eda:	e00f      	b.n	8005efc <HAL_DAC_ConfigChannel+0x2bc>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	4a34      	ldr	r2, [pc, #208]	@ (8005fb0 <HAL_DAC_ConfigChannel+0x370>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d90a      	bls.n	8005efa <HAL_DAC_ConfigChannel+0x2ba>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eec:	e006      	b.n	8005efc <HAL_DAC_ConfigChannel+0x2bc>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ef8:	e000      	b.n	8005efc <HAL_DAC_ConfigChannel+0x2bc>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005efa:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f003 0310 	and.w	r3, r3, #16
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	fa02 f303 	lsl.w	r3, r2, r3
 8005f08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6819      	ldr	r1, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f003 0310 	and.w	r3, r3, #16
 8005f22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005f26:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2a:	43da      	mvns	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	400a      	ands	r2, r1
 8005f32:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f003 0310 	and.w	r3, r3, #16
 8005f42:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005f46:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4a:	43db      	mvns	r3, r3
 8005f4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f4e:	4013      	ands	r3, r2
 8005f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	61fb      	str	r3, [r7, #28]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f003 0310 	and.w	r3, r3, #16
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	fa02 f303 	lsl.w	r3, r2, r3
 8005f64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f66:	4313      	orrs	r3, r2
 8005f68:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f70:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6819      	ldr	r1, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f003 0310 	and.w	r3, r3, #16
 8005f7e:	22c0      	movs	r2, #192	@ 0xc0
 8005f80:	fa02 f303 	lsl.w	r3, r2, r3
 8005f84:	43da      	mvns	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	400a      	ands	r2, r1
 8005f8c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3730      	adds	r7, #48	@ 0x30
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	08fff80e 	.word	0x08fff80e
 8005fac:	09896800 	.word	0x09896800
 8005fb0:	04c4b400 	.word	0x04c4b400

08005fb4 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005fbc:	f7fe f920 	bl	8004200 <HAL_GetTick>
 8005fc0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e085      	b.n	80060d8 <HAL_DMA_Init+0x124>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a43      	ldr	r2, [pc, #268]	@ (80060e0 <HAL_DMA_Init+0x12c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d049      	beq.n	800606a <HAL_DMA_Init+0xb6>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a42      	ldr	r2, [pc, #264]	@ (80060e4 <HAL_DMA_Init+0x130>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d044      	beq.n	800606a <HAL_DMA_Init+0xb6>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a40      	ldr	r2, [pc, #256]	@ (80060e8 <HAL_DMA_Init+0x134>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d03f      	beq.n	800606a <HAL_DMA_Init+0xb6>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a3f      	ldr	r2, [pc, #252]	@ (80060ec <HAL_DMA_Init+0x138>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d03a      	beq.n	800606a <HAL_DMA_Init+0xb6>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a3d      	ldr	r2, [pc, #244]	@ (80060f0 <HAL_DMA_Init+0x13c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d035      	beq.n	800606a <HAL_DMA_Init+0xb6>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a3c      	ldr	r2, [pc, #240]	@ (80060f4 <HAL_DMA_Init+0x140>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d030      	beq.n	800606a <HAL_DMA_Init+0xb6>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a3a      	ldr	r2, [pc, #232]	@ (80060f8 <HAL_DMA_Init+0x144>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d02b      	beq.n	800606a <HAL_DMA_Init+0xb6>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a39      	ldr	r2, [pc, #228]	@ (80060fc <HAL_DMA_Init+0x148>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d026      	beq.n	800606a <HAL_DMA_Init+0xb6>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a37      	ldr	r2, [pc, #220]	@ (8006100 <HAL_DMA_Init+0x14c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d021      	beq.n	800606a <HAL_DMA_Init+0xb6>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a36      	ldr	r2, [pc, #216]	@ (8006104 <HAL_DMA_Init+0x150>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d01c      	beq.n	800606a <HAL_DMA_Init+0xb6>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a34      	ldr	r2, [pc, #208]	@ (8006108 <HAL_DMA_Init+0x154>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d017      	beq.n	800606a <HAL_DMA_Init+0xb6>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a33      	ldr	r2, [pc, #204]	@ (800610c <HAL_DMA_Init+0x158>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d012      	beq.n	800606a <HAL_DMA_Init+0xb6>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a31      	ldr	r2, [pc, #196]	@ (8006110 <HAL_DMA_Init+0x15c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00d      	beq.n	800606a <HAL_DMA_Init+0xb6>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a30      	ldr	r2, [pc, #192]	@ (8006114 <HAL_DMA_Init+0x160>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d008      	beq.n	800606a <HAL_DMA_Init+0xb6>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a2e      	ldr	r2, [pc, #184]	@ (8006118 <HAL_DMA_Init+0x164>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d003      	beq.n	800606a <HAL_DMA_Init+0xb6>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a2d      	ldr	r2, [pc, #180]	@ (800611c <HAL_DMA_Init+0x168>)
 8006068:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2202      	movs	r2, #2
 8006076:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695a      	ldr	r2, [r3, #20]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f042 0206 	orr.w	r2, r2, #6
 8006088:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800608a:	e00f      	b.n	80060ac <HAL_DMA_Init+0xf8>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800608c:	f7fe f8b8 	bl	8004200 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b05      	cmp	r3, #5
 8006098:	d908      	bls.n	80060ac <HAL_DMA_Init+0xf8>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2210      	movs	r2, #16
 800609e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2203      	movs	r2, #3
 80060a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e015      	b.n	80060d8 <HAL_DMA_Init+0x124>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e8      	bne.n	800608c <HAL_DMA_Init+0xd8>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fa52 	bl	8006564 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40020050 	.word	0x40020050
 80060e4:	400200d0 	.word	0x400200d0
 80060e8:	40020150 	.word	0x40020150
 80060ec:	400201d0 	.word	0x400201d0
 80060f0:	40020250 	.word	0x40020250
 80060f4:	400202d0 	.word	0x400202d0
 80060f8:	40020350 	.word	0x40020350
 80060fc:	400203d0 	.word	0x400203d0
 8006100:	40021050 	.word	0x40021050
 8006104:	400210d0 	.word	0x400210d0
 8006108:	40021150 	.word	0x40021150
 800610c:	400211d0 	.word	0x400211d0
 8006110:	40021250 	.word	0x40021250
 8006114:	400212d0 	.word	0x400212d0
 8006118:	40021350 	.word	0x40021350
 800611c:	400213d0 	.word	0x400213d0

08006120 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e04f      	b.n	80061d8 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <HAL_DMA_Start_IT+0x26>
 8006142:	2302      	movs	r3, #2
 8006144:	e048      	b.n	80061d8 <HAL_DMA_Start_IT+0xb8>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b01      	cmp	r3, #1
 8006158:	d136      	bne.n	80061c8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2202      	movs	r2, #2
 800615e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	68b9      	ldr	r1, [r7, #8]
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 f9d3 	bl	800651a <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695a      	ldr	r2, [r3, #20]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8006182:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006188:	2b00      	cmp	r3, #0
 800618a:	d007      	beq.n	800619c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695a      	ldr	r2, [r3, #20]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800619a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d007      	beq.n	80061b4 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	695a      	ldr	r2, [r3, #20]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061b2:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	695a      	ldr	r2, [r3, #20]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0201 	orr.w	r2, r2, #1
 80061c2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
 80061c6:	e007      	b.n	80061d8 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2240      	movs	r2, #64	@ 0x40
 80061cc:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80061f0:	f023 030f 	bic.w	r3, r3, #15
 80061f4:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061fe:	3b50      	subs	r3, #80	@ 0x50
 8006200:	09db      	lsrs	r3, r3, #7
 8006202:	f003 031f 	and.w	r3, r3, #31
 8006206:	2201      	movs	r2, #1
 8006208:	fa02 f303 	lsl.w	r3, r2, r3
 800620c:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	4013      	ands	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 813b 	beq.w	8006496 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800622a:	2b00      	cmp	r3, #0
 800622c:	d011      	beq.n	8006252 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00a      	beq.n	8006252 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006244:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800624a:	f043 0201 	orr.w	r2, r3, #1
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800625c:	2b00      	cmp	r3, #0
 800625e:	d011      	beq.n	8006284 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00a      	beq.n	8006284 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006276:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800627c:	f043 0202 	orr.w	r2, r3, #2
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d011      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80062a8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ae:	f043 0204 	orr.w	r2, r3, #4
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d011      	beq.n	80062e8 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80062da:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e0:	f043 0208 	orr.w	r2, r3, #8
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d013      	beq.n	800631e <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00c      	beq.n	800631e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800630c:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d04c      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d045      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006342:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b04      	cmp	r3, #4
 800634e:	d12e      	bne.n	80063ae <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695a      	ldr	r2, [r3, #20]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800635e:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	695a      	ldr	r2, [r3, #20]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0202 	orr.w	r2, r2, #2
 800636e:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800637c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006380:	2b00      	cmp	r3, #0
 8006382:	d007      	beq.n	8006394 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006388:	2201      	movs	r2, #1
 800638a:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2200      	movs	r2, #0
 8006392:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d07a      	beq.n	800649a <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	4798      	blx	r3
        }

        return;
 80063ac:	e075      	b.n	800649a <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2205      	movs	r2, #5
 80063b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d039      	beq.n	8006448 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d032      	beq.n	8006448 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d012      	beq.n	8006414 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d116      	bne.n	8006426 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d111      	bne.n	8006426 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800640e:	2201      	movs	r2, #1
 8006410:	731a      	strb	r2, [r3, #12]
 8006412:	e008      	b.n	8006426 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800641a:	2b00      	cmp	r3, #0
 800641c:	d103      	bne.n	8006426 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800642e:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800644c:	2b00      	cmp	r3, #0
 800644e:	d025      	beq.n	800649c <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695a      	ldr	r2, [r3, #20]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0202 	orr.w	r2, r2, #2
 800645e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800646c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006478:	2201      	movs	r2, #1
 800647a:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006488:	2b00      	cmp	r3, #0
 800648a:	d007      	beq.n	800649c <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	4798      	blx	r3
 8006494:	e002      	b.n	800649c <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8006496:	bf00      	nop
 8006498:	e000      	b.n	800649c <HAL_DMA_IRQHandler+0x2bc>
        return;
 800649a:	bf00      	nop
    }
  }
}
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b085      	sub	sp, #20
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e02b      	b.n	800650e <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80064be:	f023 030f 	bic.w	r3, r3, #15
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064cc:	3b50      	subs	r3, #80	@ 0x50
 80064ce:	09db      	lsrs	r3, r3, #7
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	2201      	movs	r2, #1
 80064d6:	fa02 f303 	lsl.w	r3, r2, r3
 80064da:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	f003 0310 	and.w	r3, r3, #16
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d012      	beq.n	800650c <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	f003 0311 	and.w	r3, r3, #17
 80064ec:	2b11      	cmp	r3, #17
 80064ee:	d106      	bne.n	80064fe <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	431a      	orrs	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	605a      	str	r2, [r3, #4]
 80064fc:	e006      	b.n	800650c <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	43db      	mvns	r3, r3
 8006506:	401a      	ands	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 800651a:	b480      	push	{r7}
 800651c:	b085      	sub	sp, #20
 800651e:	af00      	add	r7, sp, #0
 8006520:	60f8      	str	r0, [r7, #12]
 8006522:	60b9      	str	r1, [r7, #8]
 8006524:	607a      	str	r2, [r7, #4]
 8006526:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800652e:	0c1b      	lsrs	r3, r3, #16
 8006530:	041b      	lsls	r3, r3, #16
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	b291      	uxth	r1, r2
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	430b      	orrs	r3, r1
 800653c:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8006546:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006558:	bf00      	nop
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	430a      	orrs	r2, r1
 8006584:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	695a      	ldr	r2, [r3, #20]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a82      	ldr	r2, [pc, #520]	@ (80067ac <DMA_Init+0x248>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d04a      	beq.n	800663e <DMA_Init+0xda>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a80      	ldr	r2, [pc, #512]	@ (80067b0 <DMA_Init+0x24c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d045      	beq.n	800663e <DMA_Init+0xda>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a7f      	ldr	r2, [pc, #508]	@ (80067b4 <DMA_Init+0x250>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d040      	beq.n	800663e <DMA_Init+0xda>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a7d      	ldr	r2, [pc, #500]	@ (80067b8 <DMA_Init+0x254>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d03b      	beq.n	800663e <DMA_Init+0xda>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a7c      	ldr	r2, [pc, #496]	@ (80067bc <DMA_Init+0x258>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d036      	beq.n	800663e <DMA_Init+0xda>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a7a      	ldr	r2, [pc, #488]	@ (80067c0 <DMA_Init+0x25c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d031      	beq.n	800663e <DMA_Init+0xda>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a79      	ldr	r2, [pc, #484]	@ (80067c4 <DMA_Init+0x260>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d02c      	beq.n	800663e <DMA_Init+0xda>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a77      	ldr	r2, [pc, #476]	@ (80067c8 <DMA_Init+0x264>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d027      	beq.n	800663e <DMA_Init+0xda>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a76      	ldr	r2, [pc, #472]	@ (80067cc <DMA_Init+0x268>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d022      	beq.n	800663e <DMA_Init+0xda>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a74      	ldr	r2, [pc, #464]	@ (80067d0 <DMA_Init+0x26c>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d01d      	beq.n	800663e <DMA_Init+0xda>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a73      	ldr	r2, [pc, #460]	@ (80067d4 <DMA_Init+0x270>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d018      	beq.n	800663e <DMA_Init+0xda>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a71      	ldr	r2, [pc, #452]	@ (80067d8 <DMA_Init+0x274>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d013      	beq.n	800663e <DMA_Init+0xda>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a70      	ldr	r2, [pc, #448]	@ (80067dc <DMA_Init+0x278>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d00e      	beq.n	800663e <DMA_Init+0xda>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a6e      	ldr	r2, [pc, #440]	@ (80067e0 <DMA_Init+0x27c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d009      	beq.n	800663e <DMA_Init+0xda>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a6d      	ldr	r2, [pc, #436]	@ (80067e4 <DMA_Init+0x280>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d004      	beq.n	800663e <DMA_Init+0xda>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a6b      	ldr	r2, [pc, #428]	@ (80067e8 <DMA_Init+0x284>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d101      	bne.n	8006642 <DMA_Init+0xde>
 800663e:	2301      	movs	r3, #1
 8006640:	e000      	b.n	8006644 <DMA_Init+0xe0>
 8006642:	2300      	movs	r3, #0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d012      	beq.n	800666e <DMA_Init+0x10a>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006650:	3b01      	subs	r3, #1
 8006652:	051b      	lsls	r3, r3, #20
 8006654:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006658:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665e:	3b01      	subs	r3, #1
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8006666:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4313      	orrs	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689a      	ldr	r2, [r3, #8]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	b2db      	uxtb	r3, r3
 8006680:	431a      	orrs	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006692:	d159      	bne.n	8006748 <DMA_Init+0x1e4>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a44      	ldr	r2, [pc, #272]	@ (80067ac <DMA_Init+0x248>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d04a      	beq.n	8006734 <DMA_Init+0x1d0>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a43      	ldr	r2, [pc, #268]	@ (80067b0 <DMA_Init+0x24c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d045      	beq.n	8006734 <DMA_Init+0x1d0>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a41      	ldr	r2, [pc, #260]	@ (80067b4 <DMA_Init+0x250>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d040      	beq.n	8006734 <DMA_Init+0x1d0>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a40      	ldr	r2, [pc, #256]	@ (80067b8 <DMA_Init+0x254>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d03b      	beq.n	8006734 <DMA_Init+0x1d0>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a3e      	ldr	r2, [pc, #248]	@ (80067bc <DMA_Init+0x258>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d036      	beq.n	8006734 <DMA_Init+0x1d0>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a3d      	ldr	r2, [pc, #244]	@ (80067c0 <DMA_Init+0x25c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d031      	beq.n	8006734 <DMA_Init+0x1d0>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a3b      	ldr	r2, [pc, #236]	@ (80067c4 <DMA_Init+0x260>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d02c      	beq.n	8006734 <DMA_Init+0x1d0>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a3a      	ldr	r2, [pc, #232]	@ (80067c8 <DMA_Init+0x264>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d027      	beq.n	8006734 <DMA_Init+0x1d0>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a38      	ldr	r2, [pc, #224]	@ (80067cc <DMA_Init+0x268>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d022      	beq.n	8006734 <DMA_Init+0x1d0>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a37      	ldr	r2, [pc, #220]	@ (80067d0 <DMA_Init+0x26c>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d01d      	beq.n	8006734 <DMA_Init+0x1d0>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a35      	ldr	r2, [pc, #212]	@ (80067d4 <DMA_Init+0x270>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d018      	beq.n	8006734 <DMA_Init+0x1d0>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a34      	ldr	r2, [pc, #208]	@ (80067d8 <DMA_Init+0x274>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d013      	beq.n	8006734 <DMA_Init+0x1d0>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a32      	ldr	r2, [pc, #200]	@ (80067dc <DMA_Init+0x278>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00e      	beq.n	8006734 <DMA_Init+0x1d0>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a31      	ldr	r2, [pc, #196]	@ (80067e0 <DMA_Init+0x27c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d009      	beq.n	8006734 <DMA_Init+0x1d0>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a2f      	ldr	r2, [pc, #188]	@ (80067e4 <DMA_Init+0x280>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d004      	beq.n	8006734 <DMA_Init+0x1d0>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a2e      	ldr	r2, [pc, #184]	@ (80067e8 <DMA_Init+0x284>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d101      	bne.n	8006738 <DMA_Init+0x1d4>
 8006734:	2301      	movs	r3, #1
 8006736:	e000      	b.n	800673a <DMA_Init+0x1d6>
 8006738:	2300      	movs	r3, #0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00d      	beq.n	800675a <DMA_Init+0x1f6>
    {
      tmpreg |= DMA_CTR2_DREQ;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	e008      	b.n	800675a <DMA_Init+0x1f6>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006750:	d103      	bne.n	800675a <DMA_Init+0x1f6>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006758:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	4313      	orrs	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800676a:	4b20      	ldr	r3, [pc, #128]	@ (80067ec <DMA_Init+0x288>)
 800676c:	4013      	ands	r3, r2
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6812      	ldr	r2, [r2, #0]
 8006772:	68f9      	ldr	r1, [r7, #12]
 8006774:	430b      	orrs	r3, r1
 8006776:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2200      	movs	r2, #0
 800677e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a0f      	ldr	r2, [pc, #60]	@ (80067c4 <DMA_Init+0x260>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00e      	beq.n	80067a8 <DMA_Init+0x244>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a0e      	ldr	r2, [pc, #56]	@ (80067c8 <DMA_Init+0x264>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d009      	beq.n	80067a8 <DMA_Init+0x244>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a12      	ldr	r2, [pc, #72]	@ (80067e4 <DMA_Init+0x280>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d004      	beq.n	80067a8 <DMA_Init+0x244>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a11      	ldr	r2, [pc, #68]	@ (80067e8 <DMA_Init+0x284>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d123      	bne.n	80067f0 <DMA_Init+0x28c>
 80067a8:	2301      	movs	r3, #1
 80067aa:	e022      	b.n	80067f2 <DMA_Init+0x28e>
 80067ac:	40020050 	.word	0x40020050
 80067b0:	400200d0 	.word	0x400200d0
 80067b4:	40020150 	.word	0x40020150
 80067b8:	400201d0 	.word	0x400201d0
 80067bc:	40020250 	.word	0x40020250
 80067c0:	400202d0 	.word	0x400202d0
 80067c4:	40020350 	.word	0x40020350
 80067c8:	400203d0 	.word	0x400203d0
 80067cc:	40021050 	.word	0x40021050
 80067d0:	400210d0 	.word	0x400210d0
 80067d4:	40021150 	.word	0x40021150
 80067d8:	400211d0 	.word	0x400211d0
 80067dc:	40021250 	.word	0x40021250
 80067e0:	400212d0 	.word	0x400212d0
 80067e4:	40021350 	.word	0x40021350
 80067e8:	400213d0 	.word	0x400213d0
 80067ec:	3cc02100 	.word	0x3cc02100
 80067f0:	2300      	movs	r3, #0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d007      	beq.n	8006806 <DMA_Init+0x2a2>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2200      	movs	r2, #0
 80067fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2200      	movs	r2, #0
 8006804:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2200      	movs	r2, #0
 800680c:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800680e:	bf00      	nop
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop

0800681c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_DMAEx_List_Start_IT+0x16>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e082      	b.n	800693c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800683c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006848:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800684a:	7dfb      	ldrb	r3, [r7, #23]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d005      	beq.n	800685c <HAL_DMAEx_List_Start_IT+0x40>
 8006850:	7dfb      	ldrb	r3, [r7, #23]
 8006852:	2b02      	cmp	r3, #2
 8006854:	d16a      	bne.n	800692c <HAL_DMAEx_List_Start_IT+0x110>
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d067      	beq.n	800692c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b01      	cmp	r3, #1
 8006866:	d157      	bne.n	8006918 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_DMAEx_List_Start_IT+0x5a>
 8006872:	2302      	movs	r3, #2
 8006874:	e062      	b.n	800693c <HAL_DMAEx_List_Start_IT+0x120>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2202      	movs	r2, #2
 8006882:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800688a:	2202      	movs	r2, #2
 800688c:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006898:	2200      	movs	r2, #0
 800689a:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	695a      	ldr	r2, [r3, #20]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80068aa:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d007      	beq.n	80068c4 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	695a      	ldr	r2, [r3, #20]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068c2:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d007      	beq.n	80068dc <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	695a      	ldr	r2, [r3, #20]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80068da:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f107 010c 	add.w	r1, r7, #12
 80068e6:	2200      	movs	r2, #0
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 f94b 	bl	8006b84 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4619      	mov	r1, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	0c0b      	lsrs	r3, r1, #16
 80068fc:	041b      	lsls	r3, r3, #16
 80068fe:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800690c:	4013      	ands	r3, r2
 800690e:	68f9      	ldr	r1, [r7, #12]
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	6812      	ldr	r2, [r2, #0]
 8006914:	430b      	orrs	r3, r1
 8006916:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	695a      	ldr	r2, [r3, #20]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0201 	orr.w	r2, r2, #1
 8006926:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	e007      	b.n	800693c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2240      	movs	r2, #64	@ 0x40
 8006930:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
}
 800693c:	4618      	mov	r0, r3
 800693e:	3718      	adds	r7, #24
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <HAL_DMAEx_List_GetNodeConfig+0x16>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e004      	b.n	8006968 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f805 	bl	8006970 <DMA_List_GetNodeConfig>

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	b2da      	uxtb	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0208 	and.w	r2, r3, #8
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0203 	and.w	r2, r3, #3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 80069b8:	091b      	lsrs	r3, r3, #4
 80069ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069be:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 80069c8:	0d1b      	lsrs	r3, r3, #20
 80069ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069ce:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	4b66      	ldr	r3, [pc, #408]	@ (8006b80 <DMA_List_GetNodeConfig+0x210>)
 80069e6:	4013      	ands	r3, r2
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d008      	beq.n	8006a16 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a0a:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a12:	60da      	str	r2, [r3, #12]
 8006a14:	e012      	b.n	8006a3c <DMA_List_GetNodeConfig+0xcc>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d004      	beq.n	8006a36 <DMA_List_GetNodeConfig+0xc6>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006a32:	60da      	str	r2, [r3, #12]
 8006a34:	e002      	b.n	8006a3c <DMA_List_GetNodeConfig+0xcc>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8006a64:	0c1b      	lsrs	r3, r3, #16
 8006a66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d008      	beq.n	8006aa2 <DMA_List_GetNodeConfig+0x132>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	0c1b      	lsrs	r3, r3, #16
 8006a96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a9a:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006aa0:	e002      	b.n	8006aa8 <DMA_List_GetNodeConfig+0x138>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d04a      	beq.n	8006b5a <DMA_List_GetNodeConfig+0x1ea>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ace:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8006ad0:	89fa      	ldrh	r2, [r7, #14]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	0c1b      	lsrs	r3, r3, #16
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ae2:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8006ae4:	89fa      	ldrh	r2, [r7, #14]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d004      	beq.n	8006b00 <DMA_List_GetNodeConfig+0x190>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006afa:	425a      	negs	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d004      	beq.n	8006b16 <DMA_List_GetNodeConfig+0x1a6>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b10:	425a      	negs	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8006b1c:	89fa      	ldrh	r2, [r7, #14]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	0c1b      	lsrs	r3, r3, #16
 8006b28:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8006b2a:	89fa      	ldrh	r2, [r7, #14]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d004      	beq.n	8006b46 <DMA_List_GetNodeConfig+0x1d6>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b40:	425a      	negs	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	da11      	bge.n	8006b72 <DMA_List_GetNodeConfig+0x202>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b52:	425a      	negs	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8006b58:	e00b      	b.n	8006b72 <DMA_List_GetNodeConfig+0x202>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006b72:	bf00      	nop
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	0c002000 	.word	0x0c002000

08006b84 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00c      	beq.n	8006bb6 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8006bdc <DMA_List_GetCLLRNodeInfo+0x58>)
 8006ba6:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00f      	beq.n	8006bce <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2207      	movs	r2, #7
 8006bb2:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8006bb4:	e00b      	b.n	8006bce <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d002      	beq.n	8006bc2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	4a08      	ldr	r2, [pc, #32]	@ (8006be0 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8006bc0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2205      	movs	r2, #5
 8006bcc:	601a      	str	r2, [r3, #0]
}
 8006bce:	bf00      	nop
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	fe010000 	.word	0xfe010000
 8006be0:	f8010000 	.word	0xf8010000

08006be4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006bf2:	e136      	b.n	8006e62 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8006c00:	4013      	ands	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f000 8128 	beq.w	8006e5c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d003      	beq.n	8006c1c <HAL_GPIO_Init+0x38>
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	2b12      	cmp	r3, #18
 8006c1a:	d125      	bne.n	8006c68 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	08da      	lsrs	r2, r3, #3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3208      	adds	r2, #8
 8006c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c28:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f003 0307 	and.w	r3, r3, #7
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	220f      	movs	r2, #15
 8006c34:	fa02 f303 	lsl.w	r3, r2, r3
 8006c38:	43db      	mvns	r3, r3
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	f003 020f 	and.w	r2, r3, #15
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f003 0307 	and.w	r3, r3, #7
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	fa02 f303 	lsl.w	r3, r2, r3
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	08da      	lsrs	r2, r3, #3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	3208      	adds	r2, #8
 8006c62:	6979      	ldr	r1, [r7, #20]
 8006c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	2203      	movs	r2, #3
 8006c74:	fa02 f303 	lsl.w	r3, r2, r3
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f003 0203 	and.w	r2, r3, #3
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d00b      	beq.n	8006cbc <HAL_GPIO_Init+0xd8>
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d007      	beq.n	8006cbc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006cb0:	2b11      	cmp	r3, #17
 8006cb2:	d003      	beq.n	8006cbc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	2b12      	cmp	r3, #18
 8006cba:	d130      	bne.n	8006d1e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	2203      	movs	r2, #3
 8006cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ccc:	43db      	mvns	r3, r3
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfa:	43db      	mvns	r3, r3
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	4013      	ands	r3, r2
 8006d00:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	091b      	lsrs	r3, r3, #4
 8006d08:	f003 0201 	and.w	r2, r3, #1
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	d017      	beq.n	8006d56 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	005b      	lsls	r3, r3, #1
 8006d30:	2203      	movs	r2, #3
 8006d32:	fa02 f303 	lsl.w	r3, r2, r3
 8006d36:	43db      	mvns	r3, r3
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d07c      	beq.n	8006e5c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8006d62:	4a47      	ldr	r2, [pc, #284]	@ (8006e80 <HAL_GPIO_Init+0x29c>)
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	089b      	lsrs	r3, r3, #2
 8006d68:	3318      	adds	r3, #24
 8006d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d6e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f003 0303 	and.w	r3, r3, #3
 8006d76:	00db      	lsls	r3, r3, #3
 8006d78:	220f      	movs	r2, #15
 8006d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7e:	43db      	mvns	r3, r3
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4013      	ands	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	0a9a      	lsrs	r2, r3, #10
 8006d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8006e84 <HAL_GPIO_Init+0x2a0>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	f002 0203 	and.w	r2, r2, #3
 8006d94:	00d2      	lsls	r2, r2, #3
 8006d96:	4093      	lsls	r3, r2
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8006d9e:	4938      	ldr	r1, [pc, #224]	@ (8006e80 <HAL_GPIO_Init+0x29c>)
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	089b      	lsrs	r3, r3, #2
 8006da4:	3318      	adds	r3, #24
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8006dac:	4b34      	ldr	r3, [pc, #208]	@ (8006e80 <HAL_GPIO_Init+0x29c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	43db      	mvns	r3, r3
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4013      	ands	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8006dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8006e80 <HAL_GPIO_Init+0x29c>)
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8006dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8006e80 <HAL_GPIO_Init+0x29c>)
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	43db      	mvns	r3, r3
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	4013      	ands	r3, r2
 8006de4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8006dfa:	4a21      	ldr	r2, [pc, #132]	@ (8006e80 <HAL_GPIO_Init+0x29c>)
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8006e00:	4b1f      	ldr	r3, [pc, #124]	@ (8006e80 <HAL_GPIO_Init+0x29c>)
 8006e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e06:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	43db      	mvns	r3, r3
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	4013      	ands	r3, r2
 8006e10:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8006e26:	4a16      	ldr	r2, [pc, #88]	@ (8006e80 <HAL_GPIO_Init+0x29c>)
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8006e2e:	4b14      	ldr	r3, [pc, #80]	@ (8006e80 <HAL_GPIO_Init+0x29c>)
 8006e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e34:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	43db      	mvns	r3, r3
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8006e54:	4a0a      	ldr	r2, [pc, #40]	@ (8006e80 <HAL_GPIO_Init+0x29c>)
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f47f aec1 	bne.w	8006bf4 <HAL_GPIO_Init+0x10>
  }
}
 8006e72:	bf00      	nop
 8006e74:	bf00      	nop
 8006e76:	371c      	adds	r7, #28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	44022000 	.word	0x44022000
 8006e84:	002f7f7f 	.word	0x002f7f7f

08006e88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691a      	ldr	r2, [r3, #16]
 8006e98:	887b      	ldrh	r3, [r7, #2]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
 8006ea4:	e001      	b.n	8006eaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	807b      	strh	r3, [r7, #2]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ec8:	787b      	ldrb	r3, [r7, #1]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006ece:	887a      	ldrh	r2, [r7, #2]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006ed4:	e002      	b.n	8006edc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006ed6:	887a      	ldrh	r2, [r7, #2]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006efa:	887a      	ldrh	r2, [r7, #2]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4013      	ands	r3, r2
 8006f00:	041a      	lsls	r2, r3, #16
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	43d9      	mvns	r1, r3
 8006f06:	887b      	ldrh	r3, [r7, #2]
 8006f08:	400b      	ands	r3, r1
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	619a      	str	r2, [r3, #24]
}
 8006f10:	bf00      	nop
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af02      	add	r7, sp, #8
 8006f22:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e0f3      	b.n	8007116 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d106      	bne.n	8006f48 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7fc fec0 	bl	8003cc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2203      	movs	r2, #3
 8006f4c:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f005 fb06 	bl	800c566 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6818      	ldr	r0, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	7c1a      	ldrb	r2, [r3, #16]
 8006f62:	f88d 2000 	strb.w	r2, [sp]
 8006f66:	3304      	adds	r3, #4
 8006f68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f6a:	f005 fade 	bl	800c52a <USB_CoreInit>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d005      	beq.n	8006f80 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e0ca      	b.n	8007116 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2100      	movs	r1, #0
 8006f86:	4618      	mov	r0, r3
 8006f88:	f005 fb02 	bl	800c590 <USB_SetCurrentMode>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d005      	beq.n	8006f9e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2202      	movs	r2, #2
 8006f96:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e0bb      	b.n	8007116 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	73fb      	strb	r3, [r7, #15]
 8006fa2:	e03f      	b.n	8007024 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006fa4:	7bfa      	ldrb	r2, [r7, #15]
 8006fa6:	6879      	ldr	r1, [r7, #4]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	440b      	add	r3, r1
 8006fb2:	3315      	adds	r3, #21
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006fb8:	7bfa      	ldrb	r2, [r7, #15]
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	440b      	add	r3, r1
 8006fc6:	3314      	adds	r3, #20
 8006fc8:	7bfa      	ldrb	r2, [r7, #15]
 8006fca:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006fcc:	7bfa      	ldrb	r2, [r7, #15]
 8006fce:	6879      	ldr	r1, [r7, #4]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	440b      	add	r3, r1
 8006fda:	3317      	adds	r3, #23
 8006fdc:	2200      	movs	r2, #0
 8006fde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006fe0:	7bfa      	ldrb	r2, [r7, #15]
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	440b      	add	r3, r1
 8006fee:	3324      	adds	r3, #36	@ 0x24
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006ff4:	7bfa      	ldrb	r2, [r7, #15]
 8006ff6:	6879      	ldr	r1, [r7, #4]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4413      	add	r3, r2
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	440b      	add	r3, r1
 8007002:	3328      	adds	r3, #40	@ 0x28
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007008:	7bfb      	ldrb	r3, [r7, #15]
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	4613      	mov	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	440b      	add	r3, r1
 8007018:	3304      	adds	r3, #4
 800701a:	2200      	movs	r2, #0
 800701c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	3301      	adds	r3, #1
 8007022:	73fb      	strb	r3, [r7, #15]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	791b      	ldrb	r3, [r3, #4]
 8007028:	7bfa      	ldrb	r2, [r7, #15]
 800702a:	429a      	cmp	r2, r3
 800702c:	d3ba      	bcc.n	8006fa4 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800702e:	2300      	movs	r3, #0
 8007030:	73fb      	strb	r3, [r7, #15]
 8007032:	e044      	b.n	80070be <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007034:	7bfa      	ldrb	r2, [r7, #15]
 8007036:	6879      	ldr	r1, [r7, #4]
 8007038:	4613      	mov	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	00db      	lsls	r3, r3, #3
 8007040:	440b      	add	r3, r1
 8007042:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8007046:	2200      	movs	r2, #0
 8007048:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800704a:	7bfa      	ldrb	r2, [r7, #15]
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	4613      	mov	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	440b      	add	r3, r1
 8007058:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800705c:	7bfa      	ldrb	r2, [r7, #15]
 800705e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007060:	7bfa      	ldrb	r2, [r7, #15]
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	4613      	mov	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	440b      	add	r3, r1
 800706e:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8007072:	2200      	movs	r2, #0
 8007074:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007076:	7bfa      	ldrb	r2, [r7, #15]
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	00db      	lsls	r3, r3, #3
 8007082:	440b      	add	r3, r1
 8007084:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800708c:	7bfa      	ldrb	r2, [r7, #15]
 800708e:	6879      	ldr	r1, [r7, #4]
 8007090:	4613      	mov	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	440b      	add	r3, r1
 800709a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800709e:	2200      	movs	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80070a2:	7bfa      	ldrb	r2, [r7, #15]
 80070a4:	6879      	ldr	r1, [r7, #4]
 80070a6:	4613      	mov	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	00db      	lsls	r3, r3, #3
 80070ae:	440b      	add	r3, r1
 80070b0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
 80070ba:	3301      	adds	r3, #1
 80070bc:	73fb      	strb	r3, [r7, #15]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	791b      	ldrb	r3, [r3, #4]
 80070c2:	7bfa      	ldrb	r2, [r7, #15]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d3b5      	bcc.n	8007034 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6818      	ldr	r0, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	7c1a      	ldrb	r2, [r3, #16]
 80070d0:	f88d 2000 	strb.w	r2, [sp]
 80070d4:	3304      	adds	r3, #4
 80070d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070d8:	f005 fa7d 	bl	800c5d6 <USB_DevInit>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d005      	beq.n	80070ee <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2202      	movs	r2, #2
 80070e6:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e013      	b.n	8007116 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	7b1b      	ldrb	r3, [r3, #12]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d102      	bne.n	800710a <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f80a 	bl	800711e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4618      	mov	r0, r3
 8007110:	f005 fa84 	bl	800c61c <USB_DevDisconnect>

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800711e:	b480      	push	{r7}
 8007120:	b085      	sub	sp, #20
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007140:	f043 0201 	orr.w	r2, r3, #1
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800714c:	f043 0202 	orr.w	r2, r3, #2
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
	...

08007164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b088      	sub	sp, #32
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d102      	bne.n	8007178 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	f000 bc28 	b.w	80079c8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007178:	4b94      	ldr	r3, [pc, #592]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	f003 0318 	and.w	r3, r3, #24
 8007180:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8007182:	4b92      	ldr	r3, [pc, #584]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 8007184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0310 	and.w	r3, r3, #16
 8007194:	2b00      	cmp	r3, #0
 8007196:	d05b      	beq.n	8007250 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	2b08      	cmp	r3, #8
 800719c:	d005      	beq.n	80071aa <HAL_RCC_OscConfig+0x46>
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	2b18      	cmp	r3, #24
 80071a2:	d114      	bne.n	80071ce <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d111      	bne.n	80071ce <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d102      	bne.n	80071b8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	f000 bc08 	b.w	80079c8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80071b8:	4b84      	ldr	r3, [pc, #528]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	041b      	lsls	r3, r3, #16
 80071c6:	4981      	ldr	r1, [pc, #516]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80071cc:	e040      	b.n	8007250 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d023      	beq.n	800721e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80071d6:	4b7d      	ldr	r3, [pc, #500]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a7c      	ldr	r2, [pc, #496]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 80071dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e2:	f7fd f80d 	bl	8004200 <HAL_GetTick>
 80071e6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80071e8:	e008      	b.n	80071fc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80071ea:	f7fd f809 	bl	8004200 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d901      	bls.n	80071fc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e3e5      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80071fc:	4b73      	ldr	r3, [pc, #460]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007204:	2b00      	cmp	r3, #0
 8007206:	d0f0      	beq.n	80071ea <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8007208:	4b70      	ldr	r3, [pc, #448]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	041b      	lsls	r3, r3, #16
 8007216:	496d      	ldr	r1, [pc, #436]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 8007218:	4313      	orrs	r3, r2
 800721a:	618b      	str	r3, [r1, #24]
 800721c:	e018      	b.n	8007250 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800721e:	4b6b      	ldr	r3, [pc, #428]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a6a      	ldr	r2, [pc, #424]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 8007224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800722a:	f7fc ffe9 	bl	8004200 <HAL_GetTick>
 800722e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8007230:	e008      	b.n	8007244 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8007232:	f7fc ffe5 	bl	8004200 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d901      	bls.n	8007244 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e3c1      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8007244:	4b61      	ldr	r3, [pc, #388]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1f0      	bne.n	8007232 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 80a0 	beq.w	800739e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	2b10      	cmp	r3, #16
 8007262:	d005      	beq.n	8007270 <HAL_RCC_OscConfig+0x10c>
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	2b18      	cmp	r3, #24
 8007268:	d109      	bne.n	800727e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	2b03      	cmp	r3, #3
 800726e:	d106      	bne.n	800727e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	f040 8092 	bne.w	800739e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e3a4      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007286:	d106      	bne.n	8007296 <HAL_RCC_OscConfig+0x132>
 8007288:	4b50      	ldr	r3, [pc, #320]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a4f      	ldr	r2, [pc, #316]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 800728e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007292:	6013      	str	r3, [r2, #0]
 8007294:	e058      	b.n	8007348 <HAL_RCC_OscConfig+0x1e4>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d112      	bne.n	80072c4 <HAL_RCC_OscConfig+0x160>
 800729e:	4b4b      	ldr	r3, [pc, #300]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a4a      	ldr	r2, [pc, #296]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 80072a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072a8:	6013      	str	r3, [r2, #0]
 80072aa:	4b48      	ldr	r3, [pc, #288]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a47      	ldr	r2, [pc, #284]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 80072b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80072b4:	6013      	str	r3, [r2, #0]
 80072b6:	4b45      	ldr	r3, [pc, #276]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a44      	ldr	r2, [pc, #272]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 80072bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072c0:	6013      	str	r3, [r2, #0]
 80072c2:	e041      	b.n	8007348 <HAL_RCC_OscConfig+0x1e4>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072cc:	d112      	bne.n	80072f4 <HAL_RCC_OscConfig+0x190>
 80072ce:	4b3f      	ldr	r3, [pc, #252]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a3e      	ldr	r2, [pc, #248]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 80072d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80072d8:	6013      	str	r3, [r2, #0]
 80072da:	4b3c      	ldr	r3, [pc, #240]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a3b      	ldr	r2, [pc, #236]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 80072e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	4b39      	ldr	r3, [pc, #228]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a38      	ldr	r2, [pc, #224]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 80072ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	e029      	b.n	8007348 <HAL_RCC_OscConfig+0x1e4>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80072fc:	d112      	bne.n	8007324 <HAL_RCC_OscConfig+0x1c0>
 80072fe:	4b33      	ldr	r3, [pc, #204]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a32      	ldr	r2, [pc, #200]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 8007304:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007308:	6013      	str	r3, [r2, #0]
 800730a:	4b30      	ldr	r3, [pc, #192]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a2f      	ldr	r2, [pc, #188]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 8007310:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	4b2d      	ldr	r3, [pc, #180]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a2c      	ldr	r2, [pc, #176]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 800731c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	e011      	b.n	8007348 <HAL_RCC_OscConfig+0x1e4>
 8007324:	4b29      	ldr	r3, [pc, #164]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a28      	ldr	r2, [pc, #160]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 800732a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	4b26      	ldr	r3, [pc, #152]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a25      	ldr	r2, [pc, #148]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 8007336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800733a:	6013      	str	r3, [r2, #0]
 800733c:	4b23      	ldr	r3, [pc, #140]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a22      	ldr	r2, [pc, #136]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 8007342:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d013      	beq.n	8007378 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007350:	f7fc ff56 	bl	8004200 <HAL_GetTick>
 8007354:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007356:	e008      	b.n	800736a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007358:	f7fc ff52 	bl	8004200 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	2b64      	cmp	r3, #100	@ 0x64
 8007364:	d901      	bls.n	800736a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e32e      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800736a:	4b18      	ldr	r3, [pc, #96]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0f0      	beq.n	8007358 <HAL_RCC_OscConfig+0x1f4>
 8007376:	e012      	b.n	800739e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007378:	f7fc ff42 	bl	8004200 <HAL_GetTick>
 800737c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800737e:	e008      	b.n	8007392 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007380:	f7fc ff3e 	bl	8004200 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	2b64      	cmp	r3, #100	@ 0x64
 800738c:	d901      	bls.n	8007392 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e31a      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007392:	4b0e      	ldr	r3, [pc, #56]	@ (80073cc <HAL_RCC_OscConfig+0x268>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1f0      	bne.n	8007380 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 809a 	beq.w	80074e0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d005      	beq.n	80073be <HAL_RCC_OscConfig+0x25a>
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	2b18      	cmp	r3, #24
 80073b6:	d149      	bne.n	800744c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d146      	bne.n	800744c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d104      	bne.n	80073d0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e2fe      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
 80073ca:	bf00      	nop
 80073cc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d11c      	bne.n	8007410 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80073d6:	4b9a      	ldr	r3, [pc, #616]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0218 	and.w	r2, r3, #24
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d014      	beq.n	8007410 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80073e6:	4b96      	ldr	r3, [pc, #600]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f023 0218 	bic.w	r2, r3, #24
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	4993      	ldr	r1, [pc, #588]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80073f8:	f000 fdd0 	bl	8007f9c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80073fc:	4b91      	ldr	r3, [pc, #580]	@ (8007644 <HAL_RCC_OscConfig+0x4e0>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4618      	mov	r0, r3
 8007402:	f7fc fe73 	bl	80040ec <HAL_InitTick>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e2db      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007410:	f7fc fef6 	bl	8004200 <HAL_GetTick>
 8007414:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007416:	e008      	b.n	800742a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007418:	f7fc fef2 	bl	8004200 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b02      	cmp	r3, #2
 8007424:	d901      	bls.n	800742a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e2ce      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800742a:	4b85      	ldr	r3, [pc, #532]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d0f0      	beq.n	8007418 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8007436:	4b82      	ldr	r3, [pc, #520]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	041b      	lsls	r3, r3, #16
 8007444:	497e      	ldr	r1, [pc, #504]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 8007446:	4313      	orrs	r3, r2
 8007448:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800744a:	e049      	b.n	80074e0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d02c      	beq.n	80074ae <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8007454:	4b7a      	ldr	r3, [pc, #488]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f023 0218 	bic.w	r2, r3, #24
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	4977      	ldr	r1, [pc, #476]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 8007462:	4313      	orrs	r3, r2
 8007464:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8007466:	4b76      	ldr	r3, [pc, #472]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a75      	ldr	r2, [pc, #468]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 800746c:	f043 0301 	orr.w	r3, r3, #1
 8007470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007472:	f7fc fec5 	bl	8004200 <HAL_GetTick>
 8007476:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007478:	e008      	b.n	800748c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800747a:	f7fc fec1 	bl	8004200 <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b02      	cmp	r3, #2
 8007486:	d901      	bls.n	800748c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e29d      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800748c:	4b6c      	ldr	r3, [pc, #432]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0f0      	beq.n	800747a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8007498:	4b69      	ldr	r3, [pc, #420]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	041b      	lsls	r3, r3, #16
 80074a6:	4966      	ldr	r1, [pc, #408]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	610b      	str	r3, [r1, #16]
 80074ac:	e018      	b.n	80074e0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074ae:	4b64      	ldr	r3, [pc, #400]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a63      	ldr	r2, [pc, #396]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 80074b4:	f023 0301 	bic.w	r3, r3, #1
 80074b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ba:	f7fc fea1 	bl	8004200 <HAL_GetTick>
 80074be:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80074c0:	e008      	b.n	80074d4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80074c2:	f7fc fe9d 	bl	8004200 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d901      	bls.n	80074d4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e279      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80074d4:	4b5a      	ldr	r3, [pc, #360]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1f0      	bne.n	80074c2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0308 	and.w	r3, r3, #8
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d03c      	beq.n	8007566 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d01c      	beq.n	800752e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074f4:	4b52      	ldr	r3, [pc, #328]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 80074f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074fa:	4a51      	ldr	r2, [pc, #324]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 80074fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007500:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007504:	f7fc fe7c 	bl	8004200 <HAL_GetTick>
 8007508:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800750a:	e008      	b.n	800751e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800750c:	f7fc fe78 	bl	8004200 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e254      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800751e:	4b48      	ldr	r3, [pc, #288]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 8007520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007524:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d0ef      	beq.n	800750c <HAL_RCC_OscConfig+0x3a8>
 800752c:	e01b      	b.n	8007566 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800752e:	4b44      	ldr	r3, [pc, #272]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 8007530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007534:	4a42      	ldr	r2, [pc, #264]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 8007536:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800753a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800753e:	f7fc fe5f 	bl	8004200 <HAL_GetTick>
 8007542:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007544:	e008      	b.n	8007558 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8007546:	f7fc fe5b 	bl	8004200 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	2b02      	cmp	r3, #2
 8007552:	d901      	bls.n	8007558 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e237      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007558:	4b39      	ldr	r3, [pc, #228]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 800755a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800755e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1ef      	bne.n	8007546 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0304 	and.w	r3, r3, #4
 800756e:	2b00      	cmp	r3, #0
 8007570:	f000 80d2 	beq.w	8007718 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007574:	4b34      	ldr	r3, [pc, #208]	@ (8007648 <HAL_RCC_OscConfig+0x4e4>)
 8007576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	2b00      	cmp	r3, #0
 800757e:	d118      	bne.n	80075b2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8007580:	4b31      	ldr	r3, [pc, #196]	@ (8007648 <HAL_RCC_OscConfig+0x4e4>)
 8007582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007584:	4a30      	ldr	r2, [pc, #192]	@ (8007648 <HAL_RCC_OscConfig+0x4e4>)
 8007586:	f043 0301 	orr.w	r3, r3, #1
 800758a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800758c:	f7fc fe38 	bl	8004200 <HAL_GetTick>
 8007590:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007592:	e008      	b.n	80075a6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007594:	f7fc fe34 	bl	8004200 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d901      	bls.n	80075a6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e210      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80075a6:	4b28      	ldr	r3, [pc, #160]	@ (8007648 <HAL_RCC_OscConfig+0x4e4>)
 80075a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d0f0      	beq.n	8007594 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d108      	bne.n	80075cc <HAL_RCC_OscConfig+0x468>
 80075ba:	4b21      	ldr	r3, [pc, #132]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 80075bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075c0:	4a1f      	ldr	r2, [pc, #124]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 80075c2:	f043 0301 	orr.w	r3, r3, #1
 80075c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80075ca:	e074      	b.n	80076b6 <HAL_RCC_OscConfig+0x552>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d118      	bne.n	8007606 <HAL_RCC_OscConfig+0x4a2>
 80075d4:	4b1a      	ldr	r3, [pc, #104]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 80075d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075da:	4a19      	ldr	r2, [pc, #100]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 80075dc:	f023 0301 	bic.w	r3, r3, #1
 80075e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80075e4:	4b16      	ldr	r3, [pc, #88]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 80075e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075ea:	4a15      	ldr	r2, [pc, #84]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 80075ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80075f4:	4b12      	ldr	r3, [pc, #72]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 80075f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075fa:	4a11      	ldr	r2, [pc, #68]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 80075fc:	f023 0304 	bic.w	r3, r3, #4
 8007600:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007604:	e057      	b.n	80076b6 <HAL_RCC_OscConfig+0x552>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	2b05      	cmp	r3, #5
 800760c:	d11e      	bne.n	800764c <HAL_RCC_OscConfig+0x4e8>
 800760e:	4b0c      	ldr	r3, [pc, #48]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 8007610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007614:	4a0a      	ldr	r2, [pc, #40]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 8007616:	f043 0304 	orr.w	r3, r3, #4
 800761a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800761e:	4b08      	ldr	r3, [pc, #32]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 8007620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007624:	4a06      	ldr	r2, [pc, #24]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 8007626:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800762a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800762e:	4b04      	ldr	r3, [pc, #16]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 8007630:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007634:	4a02      	ldr	r2, [pc, #8]	@ (8007640 <HAL_RCC_OscConfig+0x4dc>)
 8007636:	f043 0301 	orr.w	r3, r3, #1
 800763a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800763e:	e03a      	b.n	80076b6 <HAL_RCC_OscConfig+0x552>
 8007640:	44020c00 	.word	0x44020c00
 8007644:	20000008 	.word	0x20000008
 8007648:	44020800 	.word	0x44020800
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	2b85      	cmp	r3, #133	@ 0x85
 8007652:	d118      	bne.n	8007686 <HAL_RCC_OscConfig+0x522>
 8007654:	4ba2      	ldr	r3, [pc, #648]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 8007656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800765a:	4aa1      	ldr	r2, [pc, #644]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 800765c:	f043 0304 	orr.w	r3, r3, #4
 8007660:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007664:	4b9e      	ldr	r3, [pc, #632]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 8007666:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800766a:	4a9d      	ldr	r2, [pc, #628]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 800766c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007670:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007674:	4b9a      	ldr	r3, [pc, #616]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 8007676:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800767a:	4a99      	ldr	r2, [pc, #612]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 800767c:	f043 0301 	orr.w	r3, r3, #1
 8007680:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007684:	e017      	b.n	80076b6 <HAL_RCC_OscConfig+0x552>
 8007686:	4b96      	ldr	r3, [pc, #600]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 8007688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800768c:	4a94      	ldr	r2, [pc, #592]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 800768e:	f023 0301 	bic.w	r3, r3, #1
 8007692:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007696:	4b92      	ldr	r3, [pc, #584]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 8007698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800769c:	4a90      	ldr	r2, [pc, #576]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 800769e:	f023 0304 	bic.w	r3, r3, #4
 80076a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80076a6:	4b8e      	ldr	r3, [pc, #568]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 80076a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076ac:	4a8c      	ldr	r2, [pc, #560]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 80076ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d016      	beq.n	80076ec <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076be:	f7fc fd9f 	bl	8004200 <HAL_GetTick>
 80076c2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076c4:	e00a      	b.n	80076dc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076c6:	f7fc fd9b 	bl	8004200 <HAL_GetTick>
 80076ca:	4602      	mov	r2, r0
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d901      	bls.n	80076dc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e175      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076dc:	4b80      	ldr	r3, [pc, #512]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 80076de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0ed      	beq.n	80076c6 <HAL_RCC_OscConfig+0x562>
 80076ea:	e015      	b.n	8007718 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076ec:	f7fc fd88 	bl	8004200 <HAL_GetTick>
 80076f0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80076f2:	e00a      	b.n	800770a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076f4:	f7fc fd84 	bl	8004200 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007702:	4293      	cmp	r3, r2
 8007704:	d901      	bls.n	800770a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e15e      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800770a:	4b75      	ldr	r3, [pc, #468]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 800770c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1ed      	bne.n	80076f4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0320 	and.w	r3, r3, #32
 8007720:	2b00      	cmp	r3, #0
 8007722:	d036      	beq.n	8007792 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007728:	2b00      	cmp	r3, #0
 800772a:	d019      	beq.n	8007760 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800772c:	4b6c      	ldr	r3, [pc, #432]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a6b      	ldr	r2, [pc, #428]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 8007732:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007736:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007738:	f7fc fd62 	bl	8004200 <HAL_GetTick>
 800773c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800773e:	e008      	b.n	8007752 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8007740:	f7fc fd5e 	bl	8004200 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	2b02      	cmp	r3, #2
 800774c:	d901      	bls.n	8007752 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e13a      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007752:	4b63      	ldr	r3, [pc, #396]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0f0      	beq.n	8007740 <HAL_RCC_OscConfig+0x5dc>
 800775e:	e018      	b.n	8007792 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007760:	4b5f      	ldr	r3, [pc, #380]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a5e      	ldr	r2, [pc, #376]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 8007766:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800776a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800776c:	f7fc fd48 	bl	8004200 <HAL_GetTick>
 8007770:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007772:	e008      	b.n	8007786 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8007774:	f7fc fd44 	bl	8004200 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	2b02      	cmp	r3, #2
 8007780:	d901      	bls.n	8007786 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e120      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007786:	4b56      	ldr	r3, [pc, #344]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1f0      	bne.n	8007774 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 8115 	beq.w	80079c6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	2b18      	cmp	r3, #24
 80077a0:	f000 80af 	beq.w	8007902 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	f040 8086 	bne.w	80078ba <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80077ae:	4b4c      	ldr	r3, [pc, #304]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a4b      	ldr	r2, [pc, #300]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 80077b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ba:	f7fc fd21 	bl	8004200 <HAL_GetTick>
 80077be:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80077c0:	e008      	b.n	80077d4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80077c2:	f7fc fd1d 	bl	8004200 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d901      	bls.n	80077d4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e0f9      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80077d4:	4b42      	ldr	r3, [pc, #264]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1f0      	bne.n	80077c2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80077e0:	4b3f      	ldr	r3, [pc, #252]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 80077e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80077e8:	f023 0303 	bic.w	r3, r3, #3
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80077f4:	0212      	lsls	r2, r2, #8
 80077f6:	430a      	orrs	r2, r1
 80077f8:	4939      	ldr	r1, [pc, #228]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	628b      	str	r3, [r1, #40]	@ 0x28
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007802:	3b01      	subs	r3, #1
 8007804:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800780c:	3b01      	subs	r3, #1
 800780e:	025b      	lsls	r3, r3, #9
 8007810:	b29b      	uxth	r3, r3
 8007812:	431a      	orrs	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007818:	3b01      	subs	r3, #1
 800781a:	041b      	lsls	r3, r3, #16
 800781c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007820:	431a      	orrs	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007826:	3b01      	subs	r3, #1
 8007828:	061b      	lsls	r3, r3, #24
 800782a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800782e:	492c      	ldr	r1, [pc, #176]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 8007830:	4313      	orrs	r3, r2
 8007832:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8007834:	4b2a      	ldr	r3, [pc, #168]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 8007836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007838:	4a29      	ldr	r2, [pc, #164]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 800783a:	f023 0310 	bic.w	r3, r3, #16
 800783e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007844:	4a26      	ldr	r2, [pc, #152]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 8007846:	00db      	lsls	r3, r3, #3
 8007848:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800784a:	4b25      	ldr	r3, [pc, #148]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 800784c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800784e:	4a24      	ldr	r2, [pc, #144]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 8007850:	f043 0310 	orr.w	r3, r3, #16
 8007854:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8007856:	4b22      	ldr	r3, [pc, #136]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 8007858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785a:	f023 020c 	bic.w	r2, r3, #12
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007862:	491f      	ldr	r1, [pc, #124]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 8007864:	4313      	orrs	r3, r2
 8007866:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8007868:	4b1d      	ldr	r3, [pc, #116]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 800786a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786c:	f023 0220 	bic.w	r2, r3, #32
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007874:	491a      	ldr	r1, [pc, #104]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 8007876:	4313      	orrs	r3, r2
 8007878:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800787a:	4b19      	ldr	r3, [pc, #100]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 800787c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787e:	4a18      	ldr	r2, [pc, #96]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 8007880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007884:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8007886:	4b16      	ldr	r3, [pc, #88]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a15      	ldr	r2, [pc, #84]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 800788c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007892:	f7fc fcb5 	bl	8004200 <HAL_GetTick>
 8007896:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007898:	e008      	b.n	80078ac <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800789a:	f7fc fcb1 	bl	8004200 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d901      	bls.n	80078ac <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e08d      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80078ac:	4b0c      	ldr	r3, [pc, #48]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0f0      	beq.n	800789a <HAL_RCC_OscConfig+0x736>
 80078b8:	e085      	b.n	80079c6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80078ba:	4b09      	ldr	r3, [pc, #36]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a08      	ldr	r2, [pc, #32]	@ (80078e0 <HAL_RCC_OscConfig+0x77c>)
 80078c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c6:	f7fc fc9b 	bl	8004200 <HAL_GetTick>
 80078ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80078cc:	e00a      	b.n	80078e4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80078ce:	f7fc fc97 	bl	8004200 <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d903      	bls.n	80078e4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e073      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
 80078e0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80078e4:	4b3a      	ldr	r3, [pc, #232]	@ (80079d0 <HAL_RCC_OscConfig+0x86c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1ee      	bne.n	80078ce <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80078f0:	4b37      	ldr	r3, [pc, #220]	@ (80079d0 <HAL_RCC_OscConfig+0x86c>)
 80078f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f4:	4a36      	ldr	r2, [pc, #216]	@ (80079d0 <HAL_RCC_OscConfig+0x86c>)
 80078f6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80078fa:	f023 0303 	bic.w	r3, r3, #3
 80078fe:	6293      	str	r3, [r2, #40]	@ 0x28
 8007900:	e061      	b.n	80079c6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007902:	4b33      	ldr	r3, [pc, #204]	@ (80079d0 <HAL_RCC_OscConfig+0x86c>)
 8007904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007906:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007908:	4b31      	ldr	r3, [pc, #196]	@ (80079d0 <HAL_RCC_OscConfig+0x86c>)
 800790a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800790c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007912:	2b01      	cmp	r3, #1
 8007914:	d031      	beq.n	800797a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f003 0203 	and.w	r2, r3, #3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007920:	429a      	cmp	r2, r3
 8007922:	d12a      	bne.n	800797a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	0a1b      	lsrs	r3, r3, #8
 8007928:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8007930:	429a      	cmp	r2, r3
 8007932:	d122      	bne.n	800797a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800793e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8007940:	429a      	cmp	r2, r3
 8007942:	d11a      	bne.n	800797a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	0a5b      	lsrs	r3, r3, #9
 8007948:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007950:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8007952:	429a      	cmp	r2, r3
 8007954:	d111      	bne.n	800797a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	0c1b      	lsrs	r3, r3, #16
 800795a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007962:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8007964:	429a      	cmp	r2, r3
 8007966:	d108      	bne.n	800797a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	0e1b      	lsrs	r3, r3, #24
 800796c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007974:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8007976:	429a      	cmp	r2, r3
 8007978:	d001      	beq.n	800797e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e024      	b.n	80079c8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800797e:	4b14      	ldr	r3, [pc, #80]	@ (80079d0 <HAL_RCC_OscConfig+0x86c>)
 8007980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007982:	08db      	lsrs	r3, r3, #3
 8007984:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800798c:	429a      	cmp	r2, r3
 800798e:	d01a      	beq.n	80079c6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8007990:	4b0f      	ldr	r3, [pc, #60]	@ (80079d0 <HAL_RCC_OscConfig+0x86c>)
 8007992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007994:	4a0e      	ldr	r2, [pc, #56]	@ (80079d0 <HAL_RCC_OscConfig+0x86c>)
 8007996:	f023 0310 	bic.w	r3, r3, #16
 800799a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800799c:	f7fc fc30 	bl	8004200 <HAL_GetTick>
 80079a0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80079a2:	bf00      	nop
 80079a4:	f7fc fc2c 	bl	8004200 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d0f9      	beq.n	80079a4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079b4:	4a06      	ldr	r2, [pc, #24]	@ (80079d0 <HAL_RCC_OscConfig+0x86c>)
 80079b6:	00db      	lsls	r3, r3, #3
 80079b8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80079ba:	4b05      	ldr	r3, [pc, #20]	@ (80079d0 <HAL_RCC_OscConfig+0x86c>)
 80079bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079be:	4a04      	ldr	r2, [pc, #16]	@ (80079d0 <HAL_RCC_OscConfig+0x86c>)
 80079c0:	f043 0310 	orr.w	r3, r3, #16
 80079c4:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3720      	adds	r7, #32
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	44020c00 	.word	0x44020c00

080079d4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e19e      	b.n	8007d26 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079e8:	4b83      	ldr	r3, [pc, #524]	@ (8007bf8 <HAL_RCC_ClockConfig+0x224>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 030f 	and.w	r3, r3, #15
 80079f0:	683a      	ldr	r2, [r7, #0]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d910      	bls.n	8007a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079f6:	4b80      	ldr	r3, [pc, #512]	@ (8007bf8 <HAL_RCC_ClockConfig+0x224>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f023 020f 	bic.w	r2, r3, #15
 80079fe:	497e      	ldr	r1, [pc, #504]	@ (8007bf8 <HAL_RCC_ClockConfig+0x224>)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a06:	4b7c      	ldr	r3, [pc, #496]	@ (8007bf8 <HAL_RCC_ClockConfig+0x224>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 030f 	and.w	r3, r3, #15
 8007a0e:	683a      	ldr	r2, [r7, #0]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d001      	beq.n	8007a18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e186      	b.n	8007d26 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0310 	and.w	r3, r3, #16
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d012      	beq.n	8007a4a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	695a      	ldr	r2, [r3, #20]
 8007a28:	4b74      	ldr	r3, [pc, #464]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007a2a:	6a1b      	ldr	r3, [r3, #32]
 8007a2c:	0a1b      	lsrs	r3, r3, #8
 8007a2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d909      	bls.n	8007a4a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8007a36:	4b71      	ldr	r3, [pc, #452]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	021b      	lsls	r3, r3, #8
 8007a44:	496d      	ldr	r1, [pc, #436]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0308 	and.w	r3, r3, #8
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d012      	beq.n	8007a7c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	691a      	ldr	r2, [r3, #16]
 8007a5a:	4b68      	ldr	r3, [pc, #416]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	091b      	lsrs	r3, r3, #4
 8007a60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d909      	bls.n	8007a7c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8007a68:	4b64      	ldr	r3, [pc, #400]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	011b      	lsls	r3, r3, #4
 8007a76:	4961      	ldr	r1, [pc, #388]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0304 	and.w	r3, r3, #4
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d010      	beq.n	8007aaa <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68da      	ldr	r2, [r3, #12]
 8007a8c:	4b5b      	ldr	r3, [pc, #364]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d908      	bls.n	8007aaa <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8007a98:	4b58      	ldr	r3, [pc, #352]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007a9a:	6a1b      	ldr	r3, [r3, #32]
 8007a9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	4955      	ldr	r1, [pc, #340]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0302 	and.w	r3, r3, #2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d010      	beq.n	8007ad8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689a      	ldr	r2, [r3, #8]
 8007aba:	4b50      	ldr	r3, [pc, #320]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	f003 030f 	and.w	r3, r3, #15
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d908      	bls.n	8007ad8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8007ac6:	4b4d      	ldr	r3, [pc, #308]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	f023 020f 	bic.w	r2, r3, #15
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	494a      	ldr	r1, [pc, #296]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 8093 	beq.w	8007c0c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	d107      	bne.n	8007afe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007aee:	4b43      	ldr	r3, [pc, #268]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d121      	bne.n	8007b3e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e113      	b.n	8007d26 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d107      	bne.n	8007b16 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b06:	4b3d      	ldr	r3, [pc, #244]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d115      	bne.n	8007b3e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e107      	b.n	8007d26 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d107      	bne.n	8007b2e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007b1e:	4b37      	ldr	r3, [pc, #220]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d109      	bne.n	8007b3e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e0fb      	b.n	8007d26 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b2e:	4b33      	ldr	r3, [pc, #204]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e0f3      	b.n	8007d26 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8007b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	f023 0203 	bic.w	r2, r3, #3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	492c      	ldr	r1, [pc, #176]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b50:	f7fc fb56 	bl	8004200 <HAL_GetTick>
 8007b54:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d112      	bne.n	8007b84 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b5e:	e00a      	b.n	8007b76 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007b60:	f7fc fb4e 	bl	8004200 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d901      	bls.n	8007b76 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e0d7      	b.n	8007d26 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b76:	4b21      	ldr	r3, [pc, #132]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	f003 0318 	and.w	r3, r3, #24
 8007b7e:	2b18      	cmp	r3, #24
 8007b80:	d1ee      	bne.n	8007b60 <HAL_RCC_ClockConfig+0x18c>
 8007b82:	e043      	b.n	8007c0c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d112      	bne.n	8007bb2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b8c:	e00a      	b.n	8007ba4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007b8e:	f7fc fb37 	bl	8004200 <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d901      	bls.n	8007ba4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e0c0      	b.n	8007d26 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007ba4:	4b15      	ldr	r3, [pc, #84]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	f003 0318 	and.w	r3, r3, #24
 8007bac:	2b10      	cmp	r3, #16
 8007bae:	d1ee      	bne.n	8007b8e <HAL_RCC_ClockConfig+0x1ba>
 8007bb0:	e02c      	b.n	8007c0c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d122      	bne.n	8007c00 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8007bba:	e00a      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007bbc:	f7fc fb20 	bl	8004200 <HAL_GetTick>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d901      	bls.n	8007bd2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e0a9      	b.n	8007d26 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8007bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8007bfc <HAL_RCC_ClockConfig+0x228>)
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	f003 0318 	and.w	r3, r3, #24
 8007bda:	2b08      	cmp	r3, #8
 8007bdc:	d1ee      	bne.n	8007bbc <HAL_RCC_ClockConfig+0x1e8>
 8007bde:	e015      	b.n	8007c0c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007be0:	f7fc fb0e 	bl	8004200 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d906      	bls.n	8007c00 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e097      	b.n	8007d26 <HAL_RCC_ClockConfig+0x352>
 8007bf6:	bf00      	nop
 8007bf8:	40022000 	.word	0x40022000
 8007bfc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c00:	4b4b      	ldr	r3, [pc, #300]	@ (8007d30 <HAL_RCC_ClockConfig+0x35c>)
 8007c02:	69db      	ldr	r3, [r3, #28]
 8007c04:	f003 0318 	and.w	r3, r3, #24
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e9      	bne.n	8007be0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0302 	and.w	r3, r3, #2
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d010      	beq.n	8007c3a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	4b44      	ldr	r3, [pc, #272]	@ (8007d30 <HAL_RCC_ClockConfig+0x35c>)
 8007c1e:	6a1b      	ldr	r3, [r3, #32]
 8007c20:	f003 030f 	and.w	r3, r3, #15
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d208      	bcs.n	8007c3a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8007c28:	4b41      	ldr	r3, [pc, #260]	@ (8007d30 <HAL_RCC_ClockConfig+0x35c>)
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	f023 020f 	bic.w	r2, r3, #15
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	493e      	ldr	r1, [pc, #248]	@ (8007d30 <HAL_RCC_ClockConfig+0x35c>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8007d34 <HAL_RCC_ClockConfig+0x360>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 030f 	and.w	r3, r3, #15
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d210      	bcs.n	8007c6a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c48:	4b3a      	ldr	r3, [pc, #232]	@ (8007d34 <HAL_RCC_ClockConfig+0x360>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f023 020f 	bic.w	r2, r3, #15
 8007c50:	4938      	ldr	r1, [pc, #224]	@ (8007d34 <HAL_RCC_ClockConfig+0x360>)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c58:	4b36      	ldr	r3, [pc, #216]	@ (8007d34 <HAL_RCC_ClockConfig+0x360>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 030f 	and.w	r3, r3, #15
 8007c60:	683a      	ldr	r2, [r7, #0]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d001      	beq.n	8007c6a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e05d      	b.n	8007d26 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0304 	and.w	r3, r3, #4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d010      	beq.n	8007c98 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8007d30 <HAL_RCC_ClockConfig+0x35c>)
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d208      	bcs.n	8007c98 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8007c86:	4b2a      	ldr	r3, [pc, #168]	@ (8007d30 <HAL_RCC_ClockConfig+0x35c>)
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	4927      	ldr	r1, [pc, #156]	@ (8007d30 <HAL_RCC_ClockConfig+0x35c>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0308 	and.w	r3, r3, #8
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d012      	beq.n	8007cca <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	691a      	ldr	r2, [r3, #16]
 8007ca8:	4b21      	ldr	r3, [pc, #132]	@ (8007d30 <HAL_RCC_ClockConfig+0x35c>)
 8007caa:	6a1b      	ldr	r3, [r3, #32]
 8007cac:	091b      	lsrs	r3, r3, #4
 8007cae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d209      	bcs.n	8007cca <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8007cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8007d30 <HAL_RCC_ClockConfig+0x35c>)
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	011b      	lsls	r3, r3, #4
 8007cc4:	491a      	ldr	r1, [pc, #104]	@ (8007d30 <HAL_RCC_ClockConfig+0x35c>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0310 	and.w	r3, r3, #16
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d012      	beq.n	8007cfc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	695a      	ldr	r2, [r3, #20]
 8007cda:	4b15      	ldr	r3, [pc, #84]	@ (8007d30 <HAL_RCC_ClockConfig+0x35c>)
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	0a1b      	lsrs	r3, r3, #8
 8007ce0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d209      	bcs.n	8007cfc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8007ce8:	4b11      	ldr	r3, [pc, #68]	@ (8007d30 <HAL_RCC_ClockConfig+0x35c>)
 8007cea:	6a1b      	ldr	r3, [r3, #32]
 8007cec:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	021b      	lsls	r3, r3, #8
 8007cf6:	490e      	ldr	r1, [pc, #56]	@ (8007d30 <HAL_RCC_ClockConfig+0x35c>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007cfc:	f000 f822 	bl	8007d44 <HAL_RCC_GetSysClockFreq>
 8007d00:	4602      	mov	r2, r0
 8007d02:	4b0b      	ldr	r3, [pc, #44]	@ (8007d30 <HAL_RCC_ClockConfig+0x35c>)
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	f003 030f 	and.w	r3, r3, #15
 8007d0a:	490b      	ldr	r1, [pc, #44]	@ (8007d38 <HAL_RCC_ClockConfig+0x364>)
 8007d0c:	5ccb      	ldrb	r3, [r1, r3]
 8007d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d12:	4a0a      	ldr	r2, [pc, #40]	@ (8007d3c <HAL_RCC_ClockConfig+0x368>)
 8007d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007d16:	4b0a      	ldr	r3, [pc, #40]	@ (8007d40 <HAL_RCC_ClockConfig+0x36c>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fc f9e6 	bl	80040ec <HAL_InitTick>
 8007d20:	4603      	mov	r3, r0
 8007d22:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8007d24:	7afb      	ldrb	r3, [r7, #11]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	44020c00 	.word	0x44020c00
 8007d34:	40022000 	.word	0x40022000
 8007d38:	080106e0 	.word	0x080106e0
 8007d3c:	20000004 	.word	0x20000004
 8007d40:	20000008 	.word	0x20000008

08007d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b089      	sub	sp, #36	@ 0x24
 8007d48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8007d4a:	4b8c      	ldr	r3, [pc, #560]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x238>)
 8007d4c:	69db      	ldr	r3, [r3, #28]
 8007d4e:	f003 0318 	and.w	r3, r3, #24
 8007d52:	2b08      	cmp	r3, #8
 8007d54:	d102      	bne.n	8007d5c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007d56:	4b8a      	ldr	r3, [pc, #552]	@ (8007f80 <HAL_RCC_GetSysClockFreq+0x23c>)
 8007d58:	61fb      	str	r3, [r7, #28]
 8007d5a:	e107      	b.n	8007f6c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d5c:	4b87      	ldr	r3, [pc, #540]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x238>)
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	f003 0318 	and.w	r3, r3, #24
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d112      	bne.n	8007d8e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8007d68:	4b84      	ldr	r3, [pc, #528]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x238>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0320 	and.w	r3, r3, #32
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d009      	beq.n	8007d88 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d74:	4b81      	ldr	r3, [pc, #516]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x238>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	08db      	lsrs	r3, r3, #3
 8007d7a:	f003 0303 	and.w	r3, r3, #3
 8007d7e:	4a81      	ldr	r2, [pc, #516]	@ (8007f84 <HAL_RCC_GetSysClockFreq+0x240>)
 8007d80:	fa22 f303 	lsr.w	r3, r2, r3
 8007d84:	61fb      	str	r3, [r7, #28]
 8007d86:	e0f1      	b.n	8007f6c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8007d88:	4b7e      	ldr	r3, [pc, #504]	@ (8007f84 <HAL_RCC_GetSysClockFreq+0x240>)
 8007d8a:	61fb      	str	r3, [r7, #28]
 8007d8c:	e0ee      	b.n	8007f6c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d8e:	4b7b      	ldr	r3, [pc, #492]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x238>)
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	f003 0318 	and.w	r3, r3, #24
 8007d96:	2b10      	cmp	r3, #16
 8007d98:	d102      	bne.n	8007da0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007d9a:	4b7b      	ldr	r3, [pc, #492]	@ (8007f88 <HAL_RCC_GetSysClockFreq+0x244>)
 8007d9c:	61fb      	str	r3, [r7, #28]
 8007d9e:	e0e5      	b.n	8007f6c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007da0:	4b76      	ldr	r3, [pc, #472]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x238>)
 8007da2:	69db      	ldr	r3, [r3, #28]
 8007da4:	f003 0318 	and.w	r3, r3, #24
 8007da8:	2b18      	cmp	r3, #24
 8007daa:	f040 80dd 	bne.w	8007f68 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007dae:	4b73      	ldr	r3, [pc, #460]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x238>)
 8007db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db2:	f003 0303 	and.w	r3, r3, #3
 8007db6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007db8:	4b70      	ldr	r3, [pc, #448]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x238>)
 8007dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dbc:	0a1b      	lsrs	r3, r3, #8
 8007dbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dc2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007dc4:	4b6d      	ldr	r3, [pc, #436]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x238>)
 8007dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dc8:	091b      	lsrs	r3, r3, #4
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8007dd0:	4b6a      	ldr	r3, [pc, #424]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x238>)
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8007dd4:	08db      	lsrs	r3, r3, #3
 8007dd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	fb02 f303 	mul.w	r3, r2, r3
 8007de0:	ee07 3a90 	vmov	s15, r3
 8007de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 80b7 	beq.w	8007f62 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d003      	beq.n	8007e02 <HAL_RCC_GetSysClockFreq+0xbe>
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2b03      	cmp	r3, #3
 8007dfe:	d056      	beq.n	8007eae <HAL_RCC_GetSysClockFreq+0x16a>
 8007e00:	e077      	b.n	8007ef2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8007e02:	4b5e      	ldr	r3, [pc, #376]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x238>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0320 	and.w	r3, r3, #32
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d02d      	beq.n	8007e6a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x238>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	08db      	lsrs	r3, r3, #3
 8007e14:	f003 0303 	and.w	r3, r3, #3
 8007e18:	4a5a      	ldr	r2, [pc, #360]	@ (8007f84 <HAL_RCC_GetSysClockFreq+0x240>)
 8007e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e1e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	ee07 3a90 	vmov	s15, r3
 8007e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	ee07 3a90 	vmov	s15, r3
 8007e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e38:	4b50      	ldr	r3, [pc, #320]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x238>)
 8007e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e40:	ee07 3a90 	vmov	s15, r3
 8007e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e48:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e4c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8007f8c <HAL_RCC_GetSysClockFreq+0x248>
 8007e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e64:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8007e68:	e065      	b.n	8007f36 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	ee07 3a90 	vmov	s15, r3
 8007e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e74:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8007f90 <HAL_RCC_GetSysClockFreq+0x24c>
 8007e78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e7c:	4b3f      	ldr	r3, [pc, #252]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x238>)
 8007e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e84:	ee07 3a90 	vmov	s15, r3
 8007e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e90:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007f8c <HAL_RCC_GetSysClockFreq+0x248>
 8007e94:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e98:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ea8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8007eac:	e043      	b.n	8007f36 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	ee07 3a90 	vmov	s15, r3
 8007eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8007f94 <HAL_RCC_GetSysClockFreq+0x250>
 8007ebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x238>)
 8007ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec8:	ee07 3a90 	vmov	s15, r3
 8007ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ed0:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ed4:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8007f8c <HAL_RCC_GetSysClockFreq+0x248>
 8007ed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ee0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eec:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8007ef0:	e021      	b.n	8007f36 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	ee07 3a90 	vmov	s15, r3
 8007ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007efc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007f98 <HAL_RCC_GetSysClockFreq+0x254>
 8007f00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f04:	4b1d      	ldr	r3, [pc, #116]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x238>)
 8007f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f0c:	ee07 3a90 	vmov	s15, r3
 8007f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f14:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f18:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8007f8c <HAL_RCC_GetSysClockFreq+0x248>
 8007f1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f20:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f28:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f30:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8007f34:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8007f36:	4b11      	ldr	r3, [pc, #68]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x238>)
 8007f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f3a:	0a5b      	lsrs	r3, r3, #9
 8007f3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f40:	3301      	adds	r3, #1
 8007f42:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	ee07 3a90 	vmov	s15, r3
 8007f4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f4e:	edd7 6a06 	vldr	s13, [r7, #24]
 8007f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f5a:	ee17 3a90 	vmov	r3, s15
 8007f5e:	61fb      	str	r3, [r7, #28]
 8007f60:	e004      	b.n	8007f6c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8007f62:	2300      	movs	r3, #0
 8007f64:	61fb      	str	r3, [r7, #28]
 8007f66:	e001      	b.n	8007f6c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8007f68:	4b06      	ldr	r3, [pc, #24]	@ (8007f84 <HAL_RCC_GetSysClockFreq+0x240>)
 8007f6a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8007f6c:	69fb      	ldr	r3, [r7, #28]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3724      	adds	r7, #36	@ 0x24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	44020c00 	.word	0x44020c00
 8007f80:	003d0900 	.word	0x003d0900
 8007f84:	03d09000 	.word	0x03d09000
 8007f88:	017d7840 	.word	0x017d7840
 8007f8c:	46000000 	.word	0x46000000
 8007f90:	4c742400 	.word	0x4c742400
 8007f94:	4bbebc20 	.word	0x4bbebc20
 8007f98:	4a742400 	.word	0x4a742400

08007f9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007fa0:	f7ff fed0 	bl	8007d44 <HAL_RCC_GetSysClockFreq>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	4b08      	ldr	r3, [pc, #32]	@ (8007fc8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8007faa:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007fae:	4907      	ldr	r1, [pc, #28]	@ (8007fcc <HAL_RCC_GetHCLKFreq+0x30>)
 8007fb0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8007fb2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fba:	4a05      	ldr	r2, [pc, #20]	@ (8007fd0 <HAL_RCC_GetHCLKFreq+0x34>)
 8007fbc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8007fbe:	4b04      	ldr	r3, [pc, #16]	@ (8007fd0 <HAL_RCC_GetHCLKFreq+0x34>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	44020c00 	.word	0x44020c00
 8007fcc:	080106e0 	.word	0x080106e0
 8007fd0:	20000004 	.word	0x20000004

08007fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8007fd8:	f7ff ffe0 	bl	8007f9c <HAL_RCC_GetHCLKFreq>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	4b06      	ldr	r3, [pc, #24]	@ (8007ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	091b      	lsrs	r3, r3, #4
 8007fe4:	f003 0307 	and.w	r3, r3, #7
 8007fe8:	4904      	ldr	r1, [pc, #16]	@ (8007ffc <HAL_RCC_GetPCLK1Freq+0x28>)
 8007fea:	5ccb      	ldrb	r3, [r1, r3]
 8007fec:	f003 031f 	and.w	r3, r3, #31
 8007ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	44020c00 	.word	0x44020c00
 8007ffc:	080106f0 	.word	0x080106f0

08008000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8008004:	f7ff ffca 	bl	8007f9c <HAL_RCC_GetHCLKFreq>
 8008008:	4602      	mov	r2, r0
 800800a:	4b06      	ldr	r3, [pc, #24]	@ (8008024 <HAL_RCC_GetPCLK2Freq+0x24>)
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	0a1b      	lsrs	r3, r3, #8
 8008010:	f003 0307 	and.w	r3, r3, #7
 8008014:	4904      	ldr	r1, [pc, #16]	@ (8008028 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008016:	5ccb      	ldrb	r3, [r1, r3]
 8008018:	f003 031f 	and.w	r3, r3, #31
 800801c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008020:	4618      	mov	r0, r3
 8008022:	bd80      	pop	{r7, pc}
 8008024:	44020c00 	.word	0x44020c00
 8008028:	080106f0 	.word	0x080106f0

0800802c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8008030:	f7ff ffb4 	bl	8007f9c <HAL_RCC_GetHCLKFreq>
 8008034:	4602      	mov	r2, r0
 8008036:	4b06      	ldr	r3, [pc, #24]	@ (8008050 <HAL_RCC_GetPCLK3Freq+0x24>)
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	0b1b      	lsrs	r3, r3, #12
 800803c:	f003 0307 	and.w	r3, r3, #7
 8008040:	4904      	ldr	r1, [pc, #16]	@ (8008054 <HAL_RCC_GetPCLK3Freq+0x28>)
 8008042:	5ccb      	ldrb	r3, [r1, r3]
 8008044:	f003 031f 	and.w	r3, r3, #31
 8008048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800804c:	4618      	mov	r0, r3
 800804e:	bd80      	pop	{r7, pc}
 8008050:	44020c00 	.word	0x44020c00
 8008054:	080106f0 	.word	0x080106f0

08008058 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800805c:	b0aa      	sub	sp, #168	@ 0xa8
 800805e:	af00      	add	r7, sp, #0
 8008060:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008064:	2300      	movs	r3, #0
 8008066:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800806a:	2300      	movs	r3, #0
 800806c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008070:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008078:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 800807c:	2500      	movs	r5, #0
 800807e:	ea54 0305 	orrs.w	r3, r4, r5
 8008082:	d00b      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8008084:	4bb8      	ldr	r3, [pc, #736]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8008086:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800808a:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800808e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008094:	4ab4      	ldr	r2, [pc, #720]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8008096:	430b      	orrs	r3, r1
 8008098:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800809c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	f002 0801 	and.w	r8, r2, #1
 80080a8:	f04f 0900 	mov.w	r9, #0
 80080ac:	ea58 0309 	orrs.w	r3, r8, r9
 80080b0:	d038      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80080b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080b8:	2b05      	cmp	r3, #5
 80080ba:	d819      	bhi.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80080bc:	a201      	add	r2, pc, #4	@ (adr r2, 80080c4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80080be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c2:	bf00      	nop
 80080c4:	080080f9 	.word	0x080080f9
 80080c8:	080080dd 	.word	0x080080dd
 80080cc:	080080f1 	.word	0x080080f1
 80080d0:	080080f9 	.word	0x080080f9
 80080d4:	080080f9 	.word	0x080080f9
 80080d8:	080080f9 	.word	0x080080f9
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80080dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080e0:	3308      	adds	r3, #8
 80080e2:	4618      	mov	r0, r3
 80080e4:	f001 fff2 	bl	800a0cc <RCCEx_PLL2_Config>
 80080e8:	4603      	mov	r3, r0
 80080ea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 80080ee:	e004      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80080f6:	e000      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 80080f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080fa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10c      	bne.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8008102:	4b99      	ldr	r3, [pc, #612]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8008104:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008108:	f023 0107 	bic.w	r1, r3, #7
 800810c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008112:	4a95      	ldr	r2, [pc, #596]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8008114:	430b      	orrs	r3, r1
 8008116:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800811a:	e003      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008120:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008124:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	f002 0a02 	and.w	sl, r2, #2
 8008130:	f04f 0b00 	mov.w	fp, #0
 8008134:	ea5a 030b 	orrs.w	r3, sl, fp
 8008138:	d03c      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800813a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800813e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008140:	2b28      	cmp	r3, #40	@ 0x28
 8008142:	d01b      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x124>
 8008144:	2b28      	cmp	r3, #40	@ 0x28
 8008146:	d815      	bhi.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8008148:	2b20      	cmp	r3, #32
 800814a:	d019      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800814c:	2b20      	cmp	r3, #32
 800814e:	d811      	bhi.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8008150:	2b18      	cmp	r3, #24
 8008152:	d017      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8008154:	2b18      	cmp	r3, #24
 8008156:	d80d      	bhi.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8008158:	2b00      	cmp	r3, #0
 800815a:	d015      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800815c:	2b08      	cmp	r3, #8
 800815e:	d109      	bne.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008160:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008164:	3308      	adds	r3, #8
 8008166:	4618      	mov	r0, r3
 8008168:	f001 ffb0 	bl	800a0cc <RCCEx_PLL2_Config>
 800816c:	4603      	mov	r3, r0
 800816e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8008172:	e00a      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800817a:	e006      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800817c:	bf00      	nop
 800817e:	e004      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8008180:	bf00      	nop
 8008182:	e002      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8008184:	bf00      	nop
 8008186:	e000      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8008188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800818a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10c      	bne.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8008192:	4b75      	ldr	r3, [pc, #468]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8008194:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008198:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800819c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a2:	4a71      	ldr	r2, [pc, #452]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80081a4:	430b      	orrs	r3, r1
 80081a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80081aa:	e003      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ac:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80081b0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80081b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081bc:	f002 0304 	and.w	r3, r2, #4
 80081c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081c4:	2300      	movs	r3, #0
 80081c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80081ca:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80081ce:	460b      	mov	r3, r1
 80081d0:	4313      	orrs	r3, r2
 80081d2:	d040      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80081d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081da:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80081de:	d01e      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80081e0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80081e4:	d817      	bhi.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80081e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081ea:	d01a      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80081ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081f0:	d811      	bhi.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80081f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80081f4:	d017      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80081f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80081f8:	d80d      	bhi.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d015      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80081fe:	2b40      	cmp	r3, #64	@ 0x40
 8008200:	d109      	bne.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008202:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008206:	3308      	adds	r3, #8
 8008208:	4618      	mov	r0, r3
 800820a:	f001 ff5f 	bl	800a0cc <RCCEx_PLL2_Config>
 800820e:	4603      	mov	r3, r0
 8008210:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8008214:	e00a      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800821c:	e006      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800821e:	bf00      	nop
 8008220:	e004      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8008222:	bf00      	nop
 8008224:	e002      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8008226:	bf00      	nop
 8008228:	e000      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800822a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800822c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10c      	bne.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8008234:	4b4c      	ldr	r3, [pc, #304]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8008236:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800823a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800823e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008244:	4a48      	ldr	r2, [pc, #288]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8008246:	430b      	orrs	r3, r1
 8008248:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800824c:	e003      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800824e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008252:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008256:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800825a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008262:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008266:	2300      	movs	r3, #0
 8008268:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800826c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008270:	460b      	mov	r3, r1
 8008272:	4313      	orrs	r3, r2
 8008274:	d043      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8008276:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800827a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800827c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008280:	d021      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008282:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008286:	d81a      	bhi.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x266>
 8008288:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800828c:	d01d      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x272>
 800828e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008292:	d814      	bhi.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x266>
 8008294:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008298:	d019      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x276>
 800829a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800829e:	d80e      	bhi.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x266>
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d016      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80082a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082a8:	d109      	bne.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80082aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80082ae:	3308      	adds	r3, #8
 80082b0:	4618      	mov	r0, r3
 80082b2:	f001 ff0b 	bl	800a0cc <RCCEx_PLL2_Config>
 80082b6:	4603      	mov	r3, r0
 80082b8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80082bc:	e00a      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80082c4:	e006      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80082c6:	bf00      	nop
 80082c8:	e004      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80082ca:	bf00      	nop
 80082cc:	e002      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80082ce:	bf00      	nop
 80082d0:	e000      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80082d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082d4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10c      	bne.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80082dc:	4b22      	ldr	r3, [pc, #136]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80082de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082e2:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80082e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80082ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ec:	4a1e      	ldr	r2, [pc, #120]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80082ee:	430b      	orrs	r3, r1
 80082f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80082f4:	e003      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80082fa:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80082fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800830a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800830c:	2300      	movs	r3, #0
 800830e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008310:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008314:	460b      	mov	r3, r1
 8008316:	4313      	orrs	r3, r2
 8008318:	d03e      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800831a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800831e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008320:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008324:	d01b      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x306>
 8008326:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800832a:	d814      	bhi.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800832c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008330:	d017      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8008332:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008336:	d80e      	bhi.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8008338:	2b00      	cmp	r3, #0
 800833a:	d017      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x314>
 800833c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008340:	d109      	bne.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008342:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008346:	3308      	adds	r3, #8
 8008348:	4618      	mov	r0, r3
 800834a:	f001 febf 	bl	800a0cc <RCCEx_PLL2_Config>
 800834e:	4603      	mov	r3, r0
 8008350:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8008354:	e00b      	b.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800835c:	e007      	b.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800835e:	bf00      	nop
 8008360:	e005      	b.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8008362:	bf00      	nop
 8008364:	e003      	b.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x316>
 8008366:	bf00      	nop
 8008368:	44020c00 	.word	0x44020c00
        break;
 800836c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800836e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10c      	bne.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8008376:	4ba5      	ldr	r3, [pc, #660]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8008378:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800837c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008380:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008386:	4aa1      	ldr	r2, [pc, #644]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8008388:	430b      	orrs	r3, r1
 800838a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800838e:	e003      	b.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008390:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008394:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008398:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800839c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80083a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80083a6:	2300      	movs	r3, #0
 80083a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80083aa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80083ae:	460b      	mov	r3, r1
 80083b0:	4313      	orrs	r3, r2
 80083b2:	d03b      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80083b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80083b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083ba:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80083be:	d01b      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80083c0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80083c4:	d814      	bhi.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80083c6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80083ca:	d017      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80083cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80083d0:	d80e      	bhi.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d014      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80083d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083da:	d109      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80083dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80083e0:	3308      	adds	r3, #8
 80083e2:	4618      	mov	r0, r3
 80083e4:	f001 fe72 	bl	800a0cc <RCCEx_PLL2_Config>
 80083e8:	4603      	mov	r3, r0
 80083ea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80083ee:	e008      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80083f6:	e004      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80083f8:	bf00      	nop
 80083fa:	e002      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80083fc:	bf00      	nop
 80083fe:	e000      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8008400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008402:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10c      	bne.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800840a:	4b80      	ldr	r3, [pc, #512]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800840c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008410:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8008414:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800841a:	4a7c      	ldr	r2, [pc, #496]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800841c:	430b      	orrs	r3, r1
 800841e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008422:	e003      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008424:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008428:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800842c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008434:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008438:	66bb      	str	r3, [r7, #104]	@ 0x68
 800843a:	2300      	movs	r3, #0
 800843c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800843e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008442:	460b      	mov	r3, r1
 8008444:	4313      	orrs	r3, r2
 8008446:	d033      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8008448:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800844c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800844e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008452:	d015      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8008454:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008458:	d80e      	bhi.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800845a:	2b00      	cmp	r3, #0
 800845c:	d012      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800845e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008462:	d109      	bne.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008464:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008468:	3308      	adds	r3, #8
 800846a:	4618      	mov	r0, r3
 800846c:	f001 fe2e 	bl	800a0cc <RCCEx_PLL2_Config>
 8008470:	4603      	mov	r3, r0
 8008472:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8008476:	e006      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800847e:	e002      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8008480:	bf00      	nop
 8008482:	e000      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8008484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008486:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10c      	bne.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800848e:	4b5f      	ldr	r3, [pc, #380]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8008490:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008494:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8008498:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800849c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800849e:	4a5b      	ldr	r2, [pc, #364]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80084a0:	430b      	orrs	r3, r1
 80084a2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80084a6:	e003      	b.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80084ac:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80084b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	2100      	movs	r1, #0
 80084ba:	6639      	str	r1, [r7, #96]	@ 0x60
 80084bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80084c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80084c2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80084c6:	460b      	mov	r3, r1
 80084c8:	4313      	orrs	r3, r2
 80084ca:	d033      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80084cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80084d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084d6:	d015      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80084d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084dc:	d80e      	bhi.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d012      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80084e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80084e6:	d109      	bne.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80084e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80084ec:	3308      	adds	r3, #8
 80084ee:	4618      	mov	r0, r3
 80084f0:	f001 fdec 	bl	800a0cc <RCCEx_PLL2_Config>
 80084f4:	4603      	mov	r3, r0
 80084f6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 80084fa:	e006      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008502:	e002      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8008504:	bf00      	nop
 8008506:	e000      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8008508:	bf00      	nop
    }
    if (ret == HAL_OK)
 800850a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10c      	bne.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8008512:	4b3e      	ldr	r3, [pc, #248]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8008514:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008518:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800851c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008522:	4a3a      	ldr	r2, [pc, #232]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8008524:	430b      	orrs	r3, r1
 8008526:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800852a:	e003      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800852c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008530:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008534:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	2100      	movs	r1, #0
 800853e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008540:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008544:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008546:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800854a:	460b      	mov	r3, r1
 800854c:	4313      	orrs	r3, r2
 800854e:	d00e      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8008550:	4b2e      	ldr	r3, [pc, #184]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8008552:	69db      	ldr	r3, [r3, #28]
 8008554:	4a2d      	ldr	r2, [pc, #180]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8008556:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800855a:	61d3      	str	r3, [r2, #28]
 800855c:	4b2b      	ldr	r3, [pc, #172]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800855e:	69d9      	ldr	r1, [r3, #28]
 8008560:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008564:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008568:	4a28      	ldr	r2, [pc, #160]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800856a:	430b      	orrs	r3, r1
 800856c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800856e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008576:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800857a:	653b      	str	r3, [r7, #80]	@ 0x50
 800857c:	2300      	movs	r3, #0
 800857e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008580:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008584:	460b      	mov	r3, r1
 8008586:	4313      	orrs	r3, r2
 8008588:	d046      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800858a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800858e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008590:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008594:	d021      	beq.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008596:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800859a:	d81a      	bhi.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800859c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085a0:	d01d      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x586>
 80085a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085a6:	d814      	bhi.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80085a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085ac:	d019      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80085ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085b2:	d80e      	bhi.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d016      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80085b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085bc:	d109      	bne.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80085be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80085c2:	3308      	adds	r3, #8
 80085c4:	4618      	mov	r0, r3
 80085c6:	f001 fd81 	bl	800a0cc <RCCEx_PLL2_Config>
 80085ca:	4603      	mov	r3, r0
 80085cc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80085d0:	e00a      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80085d8:	e006      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80085da:	bf00      	nop
 80085dc:	e004      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80085de:	bf00      	nop
 80085e0:	e002      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80085e2:	bf00      	nop
 80085e4:	e000      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80085e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085e8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10f      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80085f0:	4b06      	ldr	r3, [pc, #24]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80085f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80085f6:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80085fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80085fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008600:	4a02      	ldr	r2, [pc, #8]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8008602:	430b      	orrs	r3, r1
 8008604:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008608:	e006      	b.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800860a:	bf00      	nop
 800860c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008610:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008614:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008618:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800861c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008620:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008624:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008626:	2300      	movs	r3, #0
 8008628:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800862a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800862e:	460b      	mov	r3, r1
 8008630:	4313      	orrs	r3, r2
 8008632:	d043      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8008634:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800863a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800863e:	d021      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8008640:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008644:	d81a      	bhi.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x624>
 8008646:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800864a:	d01d      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x630>
 800864c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008650:	d814      	bhi.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x624>
 8008652:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008656:	d019      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x634>
 8008658:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800865c:	d80e      	bhi.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x624>
 800865e:	2b00      	cmp	r3, #0
 8008660:	d016      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8008662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008666:	d109      	bne.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008668:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800866c:	3308      	adds	r3, #8
 800866e:	4618      	mov	r0, r3
 8008670:	f001 fd2c 	bl	800a0cc <RCCEx_PLL2_Config>
 8008674:	4603      	mov	r3, r0
 8008676:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800867a:	e00a      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008682:	e006      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8008684:	bf00      	nop
 8008686:	e004      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8008688:	bf00      	nop
 800868a:	e002      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800868c:	bf00      	nop
 800868e:	e000      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8008690:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008692:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10c      	bne.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800869a:	4bb6      	ldr	r3, [pc, #728]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800869c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80086a0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80086a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80086a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086aa:	4ab2      	ldr	r2, [pc, #712]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80086ac:	430b      	orrs	r3, r1
 80086ae:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80086b2:	e003      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086b4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80086b8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80086bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80086c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80086c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80086ca:	2300      	movs	r3, #0
 80086cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80086ce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80086d2:	460b      	mov	r3, r1
 80086d4:	4313      	orrs	r3, r2
 80086d6:	d030      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80086d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80086dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086de:	2b05      	cmp	r3, #5
 80086e0:	d80f      	bhi.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	d211      	bcs.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d911      	bls.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d109      	bne.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80086ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80086f2:	3308      	adds	r3, #8
 80086f4:	4618      	mov	r0, r3
 80086f6:	f001 fce9 	bl	800a0cc <RCCEx_PLL2_Config>
 80086fa:	4603      	mov	r3, r0
 80086fc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008700:	e006      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008708:	e002      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800870a:	bf00      	nop
 800870c:	e000      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800870e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008710:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10c      	bne.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8008718:	4b96      	ldr	r3, [pc, #600]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800871a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800871e:	f023 0107 	bic.w	r1, r3, #7
 8008722:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008726:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008728:	4a92      	ldr	r2, [pc, #584]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800872a:	430b      	orrs	r3, r1
 800872c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008730:	e003      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008732:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008736:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800873a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800873e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008742:	2100      	movs	r1, #0
 8008744:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008746:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800874a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800874c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008750:	460b      	mov	r3, r1
 8008752:	4313      	orrs	r3, r2
 8008754:	d022      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8008756:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800875a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800875c:	2b00      	cmp	r3, #0
 800875e:	d005      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x714>
 8008760:	2b08      	cmp	r3, #8
 8008762:	d005      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800876a:	e002      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 800876c:	bf00      	nop
 800876e:	e000      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8008770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008772:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10c      	bne.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800877a:	4b7e      	ldr	r3, [pc, #504]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800877c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008780:	f023 0108 	bic.w	r1, r3, #8
 8008784:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008788:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800878a:	4a7a      	ldr	r2, [pc, #488]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800878c:	430b      	orrs	r3, r1
 800878e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008792:	e003      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008794:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008798:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800879c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80087a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80087aa:	2300      	movs	r3, #0
 80087ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80087b2:	460b      	mov	r3, r1
 80087b4:	4313      	orrs	r3, r2
 80087b6:	f000 80b0 	beq.w	800891a <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80087ba:	4b6f      	ldr	r3, [pc, #444]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80087bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087be:	4a6e      	ldr	r2, [pc, #440]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80087c0:	f043 0301 	orr.w	r3, r3, #1
 80087c4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80087c6:	f7fb fd1b 	bl	8004200 <HAL_GetTick>
 80087ca:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80087ce:	e00b      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087d0:	f7fb fd16 	bl	8004200 <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d903      	bls.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80087e6:	e005      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80087e8:	4b63      	ldr	r3, [pc, #396]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80087ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d0ed      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 80087f4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f040 808a 	bne.w	8008912 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80087fe:	4b5d      	ldr	r3, [pc, #372]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8008800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008804:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008808:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800880c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008810:	2b00      	cmp	r3, #0
 8008812:	d022      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x802>
 8008814:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008818:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800881a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800881e:	429a      	cmp	r2, r3
 8008820:	d01b      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008822:	4b54      	ldr	r3, [pc, #336]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8008824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800882c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008830:	4b50      	ldr	r3, [pc, #320]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8008832:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008836:	4a4f      	ldr	r2, [pc, #316]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8008838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800883c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008840:	4b4c      	ldr	r3, [pc, #304]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8008842:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008846:	4a4b      	ldr	r2, [pc, #300]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8008848:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800884c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008850:	4a48      	ldr	r2, [pc, #288]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8008852:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008856:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800885a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d019      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008866:	f7fb fccb 	bl	8004200 <HAL_GetTick>
 800886a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800886e:	e00d      	b.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008870:	f7fb fcc6 	bl	8004200 <HAL_GetTick>
 8008874:	4602      	mov	r2, r0
 8008876:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008880:	4293      	cmp	r3, r2
 8008882:	d903      	bls.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 800888a:	e006      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800888c:	4b39      	ldr	r3, [pc, #228]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800888e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b00      	cmp	r3, #0
 8008898:	d0ea      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 800889a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d132      	bne.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80088a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80088a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088b0:	d10f      	bne.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80088b2:	4b30      	ldr	r3, [pc, #192]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80088b4:	69db      	ldr	r3, [r3, #28]
 80088b6:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80088ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80088be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088c0:	091b      	lsrs	r3, r3, #4
 80088c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80088c6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80088ca:	4a2a      	ldr	r2, [pc, #168]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80088cc:	430b      	orrs	r3, r1
 80088ce:	61d3      	str	r3, [r2, #28]
 80088d0:	e005      	b.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x886>
 80088d2:	4b28      	ldr	r3, [pc, #160]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80088d4:	69db      	ldr	r3, [r3, #28]
 80088d6:	4a27      	ldr	r2, [pc, #156]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80088d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80088dc:	61d3      	str	r3, [r2, #28]
 80088de:	4b25      	ldr	r3, [pc, #148]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80088e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088e4:	4a23      	ldr	r2, [pc, #140]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80088e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80088ee:	4b21      	ldr	r3, [pc, #132]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80088f0:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80088f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80088f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088fe:	4a1d      	ldr	r2, [pc, #116]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8008900:	430b      	orrs	r3, r1
 8008902:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008906:	e008      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008908:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800890c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8008910:	e003      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008912:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008916:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800891a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008922:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8008926:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008928:	2300      	movs	r3, #0
 800892a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800892c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008930:	460b      	mov	r3, r1
 8008932:	4313      	orrs	r3, r2
 8008934:	d038      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8008936:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800893a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800893c:	2b30      	cmp	r3, #48	@ 0x30
 800893e:	d014      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x912>
 8008940:	2b30      	cmp	r3, #48	@ 0x30
 8008942:	d80e      	bhi.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8008944:	2b20      	cmp	r3, #32
 8008946:	d012      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x916>
 8008948:	2b20      	cmp	r3, #32
 800894a:	d80a      	bhi.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800894c:	2b00      	cmp	r3, #0
 800894e:	d015      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008950:	2b10      	cmp	r3, #16
 8008952:	d106      	bne.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008954:	4b07      	ldr	r3, [pc, #28]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8008956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008958:	4a06      	ldr	r2, [pc, #24]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800895a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800895e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8008960:	e00d      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008968:	e009      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800896a:	bf00      	nop
 800896c:	e007      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800896e:	bf00      	nop
 8008970:	e005      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x926>
 8008972:	bf00      	nop
 8008974:	44020c00 	.word	0x44020c00
 8008978:	44020800 	.word	0x44020800
        break;
 800897c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800897e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10c      	bne.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008986:	4bb5      	ldr	r3, [pc, #724]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008988:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800898c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008990:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008996:	49b1      	ldr	r1, [pc, #708]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008998:	4313      	orrs	r3, r2
 800899a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800899e:	e003      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089a0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80089a4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80089a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80089ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80089b4:	623b      	str	r3, [r7, #32]
 80089b6:	2300      	movs	r3, #0
 80089b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80089ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80089be:	460b      	mov	r3, r1
 80089c0:	4313      	orrs	r3, r2
 80089c2:	d03c      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80089c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80089c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089ca:	2b04      	cmp	r3, #4
 80089cc:	d81d      	bhi.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 80089ce:	a201      	add	r2, pc, #4	@ (adr r2, 80089d4 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80089d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d4:	080089e9 	.word	0x080089e9
 80089d8:	080089f7 	.word	0x080089f7
 80089dc:	08008a0b 	.word	0x08008a0b
 80089e0:	08008a13 	.word	0x08008a13
 80089e4:	08008a13 	.word	0x08008a13
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089e8:	4b9c      	ldr	r3, [pc, #624]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80089ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ec:	4a9b      	ldr	r2, [pc, #620]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80089ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089f2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80089f4:	e00e      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80089f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80089fa:	3308      	adds	r3, #8
 80089fc:	4618      	mov	r0, r3
 80089fe:	f001 fb65 	bl	800a0cc <RCCEx_PLL2_Config>
 8008a02:	4603      	mov	r3, r0
 8008a04:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008a08:	e004      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008a10:	e000      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8008a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a14:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10c      	bne.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008a1c:	4b8f      	ldr	r3, [pc, #572]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a22:	f023 0207 	bic.w	r2, r3, #7
 8008a26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a2c:	498b      	ldr	r1, [pc, #556]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008a34:	e003      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a36:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008a3a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008a3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a46:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008a4a:	61bb      	str	r3, [r7, #24]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	61fb      	str	r3, [r7, #28]
 8008a50:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008a54:	460b      	mov	r3, r1
 8008a56:	4313      	orrs	r3, r2
 8008a58:	d03c      	beq.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8008a5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a60:	2b20      	cmp	r3, #32
 8008a62:	d01f      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8008a64:	2b20      	cmp	r3, #32
 8008a66:	d819      	bhi.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8008a68:	2b18      	cmp	r3, #24
 8008a6a:	d01d      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8008a6c:	2b18      	cmp	r3, #24
 8008a6e:	d815      	bhi.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8008a74:	2b08      	cmp	r3, #8
 8008a76:	d007      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008a78:	e010      	b.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a7a:	4b78      	ldr	r3, [pc, #480]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a7e:	4a77      	ldr	r2, [pc, #476]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a84:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008a86:	e010      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008a88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f001 fb1c 	bl	800a0cc <RCCEx_PLL2_Config>
 8008a94:	4603      	mov	r3, r0
 8008a96:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008a9a:	e006      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008aa2:	e002      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8008aa4:	bf00      	nop
 8008aa6:	e000      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8008aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aaa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10c      	bne.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008ab2:	4b6a      	ldr	r3, [pc, #424]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ab8:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8008abc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ac2:	4966      	ldr	r1, [pc, #408]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008aca:	e003      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008acc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008ad0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008ad4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008adc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008ae0:	613b      	str	r3, [r7, #16]
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	617b      	str	r3, [r7, #20]
 8008ae6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008aea:	460b      	mov	r3, r1
 8008aec:	4313      	orrs	r3, r2
 8008aee:	d03e      	beq.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8008af0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008af6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008afa:	d020      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8008afc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b00:	d819      	bhi.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8008b02:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b04:	d01d      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8008b06:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b08:	d815      	bhi.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d002      	beq.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8008b0e:	2b40      	cmp	r3, #64	@ 0x40
 8008b10:	d007      	beq.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8008b12:	e010      	b.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b14:	4b51      	ldr	r3, [pc, #324]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b18:	4a50      	ldr	r2, [pc, #320]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b1e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008b20:	e010      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008b22:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008b26:	3308      	adds	r3, #8
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f001 facf 	bl	800a0cc <RCCEx_PLL2_Config>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008b34:	e006      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008b3c:	e002      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8008b3e:	bf00      	nop
 8008b40:	e000      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8008b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b44:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10c      	bne.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008b4c:	4b43      	ldr	r3, [pc, #268]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b52:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8008b56:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008b5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b5c:	493f      	ldr	r1, [pc, #252]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008b64:	e003      	b.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b66:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008b6a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008b6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b76:	2100      	movs	r1, #0
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	f003 0304 	and.w	r3, r3, #4
 8008b7e:	60fb      	str	r3, [r7, #12]
 8008b80:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008b84:	460b      	mov	r3, r1
 8008b86:	4313      	orrs	r3, r2
 8008b88:	d038      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8008b8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b94:	d00e      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8008b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b9a:	d815      	bhi.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d017      	beq.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8008ba0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ba4:	d110      	bne.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008baa:	4a2c      	ldr	r2, [pc, #176]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bb0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008bb2:	e00e      	b.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008bb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008bb8:	3308      	adds	r3, #8
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f001 fa86 	bl	800a0cc <RCCEx_PLL2_Config>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008bc6:	e004      	b.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008bce:	e000      	b.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8008bd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bd2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10c      	bne.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8008bda:	4b20      	ldr	r3, [pc, #128]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008be0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008be4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bea:	491c      	ldr	r1, [pc, #112]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008bec:	4313      	orrs	r3, r2
 8008bee:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8008bf2:	e003      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008bf8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008bfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c04:	2100      	movs	r1, #0
 8008c06:	6039      	str	r1, [r7, #0]
 8008c08:	f003 0310 	and.w	r3, r3, #16
 8008c0c:	607b      	str	r3, [r7, #4]
 8008c0e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008c12:	460b      	mov	r3, r1
 8008c14:	4313      	orrs	r3, r2
 8008c16:	d039      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8008c18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c1e:	2b30      	cmp	r3, #48	@ 0x30
 8008c20:	d01e      	beq.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008c22:	2b30      	cmp	r3, #48	@ 0x30
 8008c24:	d815      	bhi.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8008c26:	2b10      	cmp	r3, #16
 8008c28:	d002      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8008c2a:	2b20      	cmp	r3, #32
 8008c2c:	d007      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8008c2e:	e010      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c30:	4b0a      	ldr	r3, [pc, #40]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c34:	4a09      	ldr	r2, [pc, #36]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008c36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c3a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8008c3c:	e011      	b.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c42:	3308      	adds	r3, #8
 8008c44:	4618      	mov	r0, r3
 8008c46:	f001 fa41 	bl	800a0cc <RCCEx_PLL2_Config>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8008c50:	e007      	b.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008c58:	e003      	b.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8008c5a:	bf00      	nop
 8008c5c:	44020c00 	.word	0x44020c00
        break;
 8008c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c62:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d10c      	bne.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8008c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008c6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c70:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008c74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c7a:	4908      	ldr	r1, [pc, #32]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008c82:	e003      	b.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c84:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008c88:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8008c8c:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	37a8      	adds	r7, #168	@ 0xa8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c9a:	bf00      	nop
 8008c9c:	44020c00 	.word	0x44020c00

08008ca0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b08b      	sub	sp, #44	@ 0x2c
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008ca8:	4bae      	ldr	r3, [pc, #696]	@ (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb0:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008cb2:	4bac      	ldr	r3, [pc, #688]	@ (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb6:	f003 0303 	and.w	r3, r3, #3
 8008cba:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008cbc:	4ba9      	ldr	r3, [pc, #676]	@ (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc0:	0a1b      	lsrs	r3, r3, #8
 8008cc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cc6:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008cc8:	4ba6      	ldr	r3, [pc, #664]	@ (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ccc:	091b      	lsrs	r3, r3, #4
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008cd4:	4ba3      	ldr	r3, [pc, #652]	@ (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd8:	08db      	lsrs	r3, r3, #3
 8008cda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	fb02 f303 	mul.w	r3, r2, r3
 8008ce4:	ee07 3a90 	vmov	s15, r3
 8008ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cec:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 8126 	beq.w	8008f44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	2b03      	cmp	r3, #3
 8008cfc:	d053      	beq.n	8008da6 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d86f      	bhi.n	8008de4 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d003      	beq.n	8008d12 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d02b      	beq.n	8008d68 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8008d10:	e068      	b.n	8008de4 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d12:	4b94      	ldr	r3, [pc, #592]	@ (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	08db      	lsrs	r3, r3, #3
 8008d18:	f003 0303 	and.w	r3, r3, #3
 8008d1c:	4a92      	ldr	r2, [pc, #584]	@ (8008f68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8008d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d22:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	ee07 3a90 	vmov	s15, r3
 8008d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d46:	ed97 6a04 	vldr	s12, [r7, #16]
 8008d4a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8008f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d62:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008d66:	e068      	b.n	8008e3a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d72:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8008f70 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8008d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	ee07 3a90 	vmov	s15, r3
 8008d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d84:	ed97 6a04 	vldr	s12, [r7, #16]
 8008d88:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008da4:	e049      	b.n	8008e3a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	ee07 3a90 	vmov	s15, r3
 8008dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008f74 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8008db4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db8:	6a3b      	ldr	r3, [r7, #32]
 8008dba:	ee07 3a90 	vmov	s15, r3
 8008dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc2:	ed97 6a04 	vldr	s12, [r7, #16]
 8008dc6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8008f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dde:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008de2:	e02a      	b.n	8008e3a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008de4:	4b5f      	ldr	r3, [pc, #380]	@ (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	08db      	lsrs	r3, r3, #3
 8008dea:	f003 0303 	and.w	r3, r3, #3
 8008dee:	4a5e      	ldr	r2, [pc, #376]	@ (8008f68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8008df0:	fa22 f303 	lsr.w	r3, r2, r3
 8008df4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	ee07 3a90 	vmov	s15, r3
 8008dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	ee07 3a90 	vmov	s15, r3
 8008e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e0e:	6a3b      	ldr	r3, [r7, #32]
 8008e10:	ee07 3a90 	vmov	s15, r3
 8008e14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e18:	ed97 6a04 	vldr	s12, [r7, #16]
 8008e1c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008e20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e34:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008e38:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e46:	d121      	bne.n	8008e8c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008e48:	4b46      	ldr	r3, [pc, #280]	@ (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d017      	beq.n	8008e84 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008e54:	4b43      	ldr	r3, [pc, #268]	@ (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e58:	0a5b      	lsrs	r3, r3, #9
 8008e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e5e:	ee07 3a90 	vmov	s15, r3
 8008e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8008e66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e6a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008e6e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e7a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	e006      	b.n	8008e92 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	601a      	str	r2, [r3, #0]
 8008e8a:	e002      	b.n	8008e92 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e92:	4b34      	ldr	r3, [pc, #208]	@ (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e9e:	d121      	bne.n	8008ee4 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008ea0:	4b30      	ldr	r3, [pc, #192]	@ (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d017      	beq.n	8008edc <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008eac:	4b2d      	ldr	r3, [pc, #180]	@ (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eb0:	0c1b      	lsrs	r3, r3, #16
 8008eb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eb6:	ee07 3a90 	vmov	s15, r3
 8008eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008ebe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ec2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008ec6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ed2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	605a      	str	r2, [r3, #4]
 8008eda:	e006      	b.n	8008eea <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	605a      	str	r2, [r3, #4]
 8008ee2:	e002      	b.n	8008eea <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008eea:	4b1e      	ldr	r3, [pc, #120]	@ (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ef2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ef6:	d121      	bne.n	8008f3c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008efc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d017      	beq.n	8008f34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008f04:	4b17      	ldr	r3, [pc, #92]	@ (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f08:	0e1b      	lsrs	r3, r3, #24
 8008f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f0e:	ee07 3a90 	vmov	s15, r3
 8008f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8008f16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f1a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008f1e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f2a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008f32:	e010      	b.n	8008f56 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	609a      	str	r2, [r3, #8]
}
 8008f3a:	e00c      	b.n	8008f56 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	609a      	str	r2, [r3, #8]
}
 8008f42:	e008      	b.n	8008f56 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	609a      	str	r2, [r3, #8]
}
 8008f56:	bf00      	nop
 8008f58:	372c      	adds	r7, #44	@ 0x2c
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	44020c00 	.word	0x44020c00
 8008f68:	03d09000 	.word	0x03d09000
 8008f6c:	46000000 	.word	0x46000000
 8008f70:	4a742400 	.word	0x4a742400
 8008f74:	4bbebc20 	.word	0x4bbebc20

08008f78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b08b      	sub	sp, #44	@ 0x2c
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008f80:	4bae      	ldr	r3, [pc, #696]	@ (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f88:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008f8a:	4bac      	ldr	r3, [pc, #688]	@ (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f8e:	f003 0303 	and.w	r3, r3, #3
 8008f92:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8008f94:	4ba9      	ldr	r3, [pc, #676]	@ (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f98:	0a1b      	lsrs	r3, r3, #8
 8008f9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f9e:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8008fa0:	4ba6      	ldr	r3, [pc, #664]	@ (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa4:	091b      	lsrs	r3, r3, #4
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008fac:	4ba3      	ldr	r3, [pc, #652]	@ (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fb0:	08db      	lsrs	r3, r3, #3
 8008fb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	fb02 f303 	mul.w	r3, r2, r3
 8008fbc:	ee07 3a90 	vmov	s15, r3
 8008fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 8126 	beq.w	800921c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	2b03      	cmp	r3, #3
 8008fd4:	d053      	beq.n	800907e <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d86f      	bhi.n	80090bc <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d003      	beq.n	8008fea <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d02b      	beq.n	8009040 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008fe8:	e068      	b.n	80090bc <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008fea:	4b94      	ldr	r3, [pc, #592]	@ (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	08db      	lsrs	r3, r3, #3
 8008ff0:	f003 0303 	and.w	r3, r3, #3
 8008ff4:	4a92      	ldr	r2, [pc, #584]	@ (8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8008ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8008ffa:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	ee07 3a90 	vmov	s15, r3
 8009002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	ee07 3a90 	vmov	s15, r3
 800900c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	ee07 3a90 	vmov	s15, r3
 800901a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800901e:	ed97 6a04 	vldr	s12, [r7, #16]
 8009022:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8009244 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8009026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800902a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800902e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800903a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800903e:	e068      	b.n	8009112 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	ee07 3a90 	vmov	s15, r3
 8009046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800904e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009052:	6a3b      	ldr	r3, [r7, #32]
 8009054:	ee07 3a90 	vmov	s15, r3
 8009058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800905c:	ed97 6a04 	vldr	s12, [r7, #16]
 8009060:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009244 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8009064:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009068:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800906c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009078:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800907c:	e049      	b.n	8009112 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	ee07 3a90 	vmov	s15, r3
 8009084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009088:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800924c <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 800908c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009090:	6a3b      	ldr	r3, [r7, #32]
 8009092:	ee07 3a90 	vmov	s15, r3
 8009096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800909a:	ed97 6a04 	vldr	s12, [r7, #16]
 800909e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8009244 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80090a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090b6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80090ba:	e02a      	b.n	8009112 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090bc:	4b5f      	ldr	r3, [pc, #380]	@ (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	08db      	lsrs	r3, r3, #3
 80090c2:	f003 0303 	and.w	r3, r3, #3
 80090c6:	4a5e      	ldr	r2, [pc, #376]	@ (8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80090c8:	fa22 f303 	lsr.w	r3, r2, r3
 80090cc:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	ee07 3a90 	vmov	s15, r3
 80090d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	ee07 3a90 	vmov	s15, r3
 80090de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090e6:	6a3b      	ldr	r3, [r7, #32]
 80090e8:	ee07 3a90 	vmov	s15, r3
 80090ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090f0:	ed97 6a04 	vldr	s12, [r7, #16]
 80090f4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8009244 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80090f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009100:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009104:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800910c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009110:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009112:	4b4a      	ldr	r3, [pc, #296]	@ (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800911a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800911e:	d121      	bne.n	8009164 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8009120:	4b46      	ldr	r3, [pc, #280]	@ (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d017      	beq.n	800915c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800912c:	4b43      	ldr	r3, [pc, #268]	@ (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800912e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009130:	0a5b      	lsrs	r3, r3, #9
 8009132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009136:	ee07 3a90 	vmov	s15, r3
 800913a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800913e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009142:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8009146:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800914a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800914e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009152:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	601a      	str	r2, [r3, #0]
 800915a:	e006      	b.n	800916a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	601a      	str	r2, [r3, #0]
 8009162:	e002      	b.n	800916a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800916a:	4b34      	ldr	r3, [pc, #208]	@ (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009172:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009176:	d121      	bne.n	80091bc <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009178:	4b30      	ldr	r3, [pc, #192]	@ (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800917a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800917c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d017      	beq.n	80091b4 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009184:	4b2d      	ldr	r3, [pc, #180]	@ (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009188:	0c1b      	lsrs	r3, r3, #16
 800918a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800918e:	ee07 3a90 	vmov	s15, r3
 8009192:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009196:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800919a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800919e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80091a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091aa:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	605a      	str	r2, [r3, #4]
 80091b2:	e006      	b.n	80091c2 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	605a      	str	r2, [r3, #4]
 80091ba:	e002      	b.n	80091c2 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091c2:	4b1e      	ldr	r3, [pc, #120]	@ (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091ce:	d121      	bne.n	8009214 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80091d0:	4b1a      	ldr	r3, [pc, #104]	@ (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80091d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d017      	beq.n	800920c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80091dc:	4b17      	ldr	r3, [pc, #92]	@ (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80091de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091e0:	0e1b      	lsrs	r3, r3, #24
 80091e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091e6:	ee07 3a90 	vmov	s15, r3
 80091ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80091ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091f2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80091f6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80091fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009202:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800920a:	e010      	b.n	800922e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	609a      	str	r2, [r3, #8]
}
 8009212:	e00c      	b.n	800922e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	609a      	str	r2, [r3, #8]
}
 800921a:	e008      	b.n	800922e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	609a      	str	r2, [r3, #8]
}
 800922e:	bf00      	nop
 8009230:	372c      	adds	r7, #44	@ 0x2c
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	44020c00 	.word	0x44020c00
 8009240:	03d09000 	.word	0x03d09000
 8009244:	46000000 	.word	0x46000000
 8009248:	4a742400 	.word	0x4a742400
 800924c:	4bbebc20 	.word	0x4bbebc20

08009250 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b08c      	sub	sp, #48	@ 0x30
 8009254:	af00      	add	r7, sp, #0
 8009256:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800925a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800925e:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8009262:	430b      	orrs	r3, r1
 8009264:	d14b      	bne.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009266:	4bc4      	ldr	r3, [pc, #784]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8009268:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800926c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009270:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8009272:	4bc1      	ldr	r3, [pc, #772]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8009274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009278:	f003 0302 	and.w	r3, r3, #2
 800927c:	2b02      	cmp	r3, #2
 800927e:	d108      	bne.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009286:	d104      	bne.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009288:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800928c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800928e:	f000 bf14 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8009292:	4bb9      	ldr	r3, [pc, #740]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8009294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800929c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092a0:	d108      	bne.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80092a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092a8:	d104      	bne.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80092aa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80092ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092b0:	f000 bf03 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80092b4:	4bb0      	ldr	r3, [pc, #704]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092c0:	d119      	bne.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80092c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092c8:	d115      	bne.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80092ca:	4bab      	ldr	r3, [pc, #684]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80092d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092d6:	d30a      	bcc.n	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80092d8:	4ba7      	ldr	r3, [pc, #668]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80092da:	69db      	ldr	r3, [r3, #28]
 80092dc:	0a1b      	lsrs	r3, r3, #8
 80092de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092e2:	4aa6      	ldr	r2, [pc, #664]	@ (800957c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80092e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80092ea:	f000 bee6 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 80092ee:	2300      	movs	r3, #0
 80092f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80092f2:	f000 bee2 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80092f6:	2300      	movs	r3, #0
 80092f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092fa:	f000 bede 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80092fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009302:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8009306:	ea52 0301 	orrs.w	r3, r2, r1
 800930a:	f000 838e 	beq.w	8009a2a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800930e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009312:	2a01      	cmp	r2, #1
 8009314:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8009318:	f080 86cc 	bcs.w	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800931c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009320:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8009324:	ea52 0301 	orrs.w	r3, r2, r1
 8009328:	f000 82aa 	beq.w	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800932c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009330:	2a01      	cmp	r2, #1
 8009332:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8009336:	f080 86bd 	bcs.w	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800933a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800933e:	f1a3 0110 	sub.w	r1, r3, #16
 8009342:	ea52 0301 	orrs.w	r3, r2, r1
 8009346:	f000 8681 	beq.w	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 800934a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800934e:	2a01      	cmp	r2, #1
 8009350:	f173 0310 	sbcs.w	r3, r3, #16
 8009354:	f080 86ae 	bcs.w	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800935c:	1f19      	subs	r1, r3, #4
 800935e:	ea52 0301 	orrs.w	r3, r2, r1
 8009362:	f000 84b1 	beq.w	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8009366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800936a:	2a01      	cmp	r2, #1
 800936c:	f173 0304 	sbcs.w	r3, r3, #4
 8009370:	f080 86a0 	bcs.w	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009378:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800937c:	430b      	orrs	r3, r1
 800937e:	f000 85aa 	beq.w	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8009382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009386:	497e      	ldr	r1, [pc, #504]	@ (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8009388:	428a      	cmp	r2, r1
 800938a:	f173 0300 	sbcs.w	r3, r3, #0
 800938e:	f080 8691 	bcs.w	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009392:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009396:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800939a:	430b      	orrs	r3, r1
 800939c:	f000 8532 	beq.w	8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 80093a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093a4:	4977      	ldr	r1, [pc, #476]	@ (8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80093a6:	428a      	cmp	r2, r1
 80093a8:	f173 0300 	sbcs.w	r3, r3, #0
 80093ac:	f080 8682 	bcs.w	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80093b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093b4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80093b8:	430b      	orrs	r3, r1
 80093ba:	f000 84bc 	beq.w	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 80093be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093c2:	4971      	ldr	r1, [pc, #452]	@ (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80093c4:	428a      	cmp	r2, r1
 80093c6:	f173 0300 	sbcs.w	r3, r3, #0
 80093ca:	f080 8673 	bcs.w	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80093ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093d2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80093d6:	430b      	orrs	r3, r1
 80093d8:	f000 85f2 	beq.w	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 80093dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093e0:	496a      	ldr	r1, [pc, #424]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 80093e2:	428a      	cmp	r2, r1
 80093e4:	f173 0300 	sbcs.w	r3, r3, #0
 80093e8:	f080 8664 	bcs.w	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80093ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093f0:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80093f4:	430b      	orrs	r3, r1
 80093f6:	f000 81e5 	beq.w	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80093fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093fe:	4964      	ldr	r1, [pc, #400]	@ (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8009400:	428a      	cmp	r2, r1
 8009402:	f173 0300 	sbcs.w	r3, r3, #0
 8009406:	f080 8655 	bcs.w	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800940a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800940e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8009412:	430b      	orrs	r3, r1
 8009414:	f000 83cc 	beq.w	8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8009418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800941c:	495d      	ldr	r1, [pc, #372]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800941e:	428a      	cmp	r2, r1
 8009420:	f173 0300 	sbcs.w	r3, r3, #0
 8009424:	f080 8646 	bcs.w	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800942c:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8009430:	430b      	orrs	r3, r1
 8009432:	f000 8331 	beq.w	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8009436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800943a:	4957      	ldr	r1, [pc, #348]	@ (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 800943c:	428a      	cmp	r2, r1
 800943e:	f173 0300 	sbcs.w	r3, r3, #0
 8009442:	f080 8637 	bcs.w	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800944a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800944e:	430b      	orrs	r3, r1
 8009450:	f000 82bb 	beq.w	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8009454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009458:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 800945c:	f173 0300 	sbcs.w	r3, r3, #0
 8009460:	f080 8628 	bcs.w	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009468:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800946c:	430b      	orrs	r3, r1
 800946e:	f000 826d 	beq.w	800994c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8009472:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009476:	f244 0101 	movw	r1, #16385	@ 0x4001
 800947a:	428a      	cmp	r2, r1
 800947c:	f173 0300 	sbcs.w	r3, r3, #0
 8009480:	f080 8618 	bcs.w	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009488:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800948c:	430b      	orrs	r3, r1
 800948e:	f000 821e 	beq.w	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8009492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009496:	f242 0101 	movw	r1, #8193	@ 0x2001
 800949a:	428a      	cmp	r2, r1
 800949c:	f173 0300 	sbcs.w	r3, r3, #0
 80094a0:	f080 8608 	bcs.w	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80094a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094a8:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80094ac:	430b      	orrs	r3, r1
 80094ae:	f000 8137 	beq.w	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80094b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094b6:	f241 0101 	movw	r1, #4097	@ 0x1001
 80094ba:	428a      	cmp	r2, r1
 80094bc:	f173 0300 	sbcs.w	r3, r3, #0
 80094c0:	f080 85f8 	bcs.w	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80094c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094c8:	1f11      	subs	r1, r2, #4
 80094ca:	430b      	orrs	r3, r1
 80094cc:	f000 80d2 	beq.w	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 80094d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094d4:	2a05      	cmp	r2, #5
 80094d6:	f173 0300 	sbcs.w	r3, r3, #0
 80094da:	f080 85eb 	bcs.w	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80094de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094e2:	1e51      	subs	r1, r2, #1
 80094e4:	430b      	orrs	r3, r1
 80094e6:	d006      	beq.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80094e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094ec:	1e91      	subs	r1, r2, #2
 80094ee:	430b      	orrs	r3, r1
 80094f0:	d06c      	beq.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80094f2:	f000 bddf 	b.w	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80094f6:	4b20      	ldr	r3, [pc, #128]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80094f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80094fc:	f003 0307 	and.w	r3, r3, #7
 8009500:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009504:	2b00      	cmp	r3, #0
 8009506:	d104      	bne.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009508:	f7fe fd7a 	bl	8008000 <HAL_RCC_GetPCLK2Freq>
 800950c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800950e:	f000 bdd4 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8009512:	4b19      	ldr	r3, [pc, #100]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800951a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800951e:	d10a      	bne.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8009520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009522:	2b01      	cmp	r3, #1
 8009524:	d107      	bne.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009526:	f107 030c 	add.w	r3, r7, #12
 800952a:	4618      	mov	r0, r3
 800952c:	f7ff fd24 	bl	8008f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009534:	e048      	b.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8009536:	4b10      	ldr	r3, [pc, #64]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 0302 	and.w	r3, r3, #2
 800953e:	2b02      	cmp	r3, #2
 8009540:	d10c      	bne.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8009542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009544:	2b03      	cmp	r3, #3
 8009546:	d109      	bne.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009548:	4b0b      	ldr	r3, [pc, #44]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	08db      	lsrs	r3, r3, #3
 800954e:	f003 0303 	and.w	r3, r3, #3
 8009552:	4a12      	ldr	r2, [pc, #72]	@ (800959c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8009554:	fa22 f303 	lsr.w	r3, r2, r3
 8009558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800955a:	e035      	b.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800955c:	4b06      	ldr	r3, [pc, #24]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009568:	d11c      	bne.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800956a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800956c:	2b04      	cmp	r3, #4
 800956e:	d119      	bne.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8009570:	4b0b      	ldr	r3, [pc, #44]	@ (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8009572:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009574:	e028      	b.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8009576:	bf00      	nop
 8009578:	44020c00 	.word	0x44020c00
 800957c:	017d7840 	.word	0x017d7840
 8009580:	20000001 	.word	0x20000001
 8009584:	10000001 	.word	0x10000001
 8009588:	08000001 	.word	0x08000001
 800958c:	04000001 	.word	0x04000001
 8009590:	00200001 	.word	0x00200001
 8009594:	00040001 	.word	0x00040001
 8009598:	00020001 	.word	0x00020001
 800959c:	03d09000 	.word	0x03d09000
 80095a0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80095a4:	4b9f      	ldr	r3, [pc, #636]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80095a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095aa:	f003 0302 	and.w	r3, r3, #2
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	d106      	bne.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80095b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b4:	2b05      	cmp	r3, #5
 80095b6:	d103      	bne.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 80095b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095be:	e003      	b.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 80095c0:	2300      	movs	r3, #0
 80095c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80095c4:	f000 bd79 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80095c8:	f000 bd77 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80095cc:	4b95      	ldr	r3, [pc, #596]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80095ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80095d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80095d6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80095d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d104      	bne.n	80095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80095de:	f7fe fcf9 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 80095e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80095e4:	f000 bd69 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80095e8:	4b8e      	ldr	r3, [pc, #568]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095f4:	d10a      	bne.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80095f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f8:	2b08      	cmp	r3, #8
 80095fa:	d107      	bne.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095fc:	f107 030c 	add.w	r3, r7, #12
 8009600:	4618      	mov	r0, r3
 8009602:	f7ff fcb9 	bl	8008f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800960a:	e031      	b.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800960c:	4b85      	ldr	r3, [pc, #532]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 0302 	and.w	r3, r3, #2
 8009614:	2b02      	cmp	r3, #2
 8009616:	d10c      	bne.n	8009632 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961a:	2b18      	cmp	r3, #24
 800961c:	d109      	bne.n	8009632 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800961e:	4b81      	ldr	r3, [pc, #516]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	08db      	lsrs	r3, r3, #3
 8009624:	f003 0303 	and.w	r3, r3, #3
 8009628:	4a7f      	ldr	r2, [pc, #508]	@ (8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800962a:	fa22 f303 	lsr.w	r3, r2, r3
 800962e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009630:	e01e      	b.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8009632:	4b7c      	ldr	r3, [pc, #496]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800963a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800963e:	d105      	bne.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8009640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009642:	2b20      	cmp	r3, #32
 8009644:	d102      	bne.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8009646:	4b79      	ldr	r3, [pc, #484]	@ (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8009648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800964a:	e011      	b.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800964c:	4b75      	ldr	r3, [pc, #468]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800964e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009652:	f003 0302 	and.w	r3, r3, #2
 8009656:	2b02      	cmp	r3, #2
 8009658:	d106      	bne.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800965a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800965c:	2b28      	cmp	r3, #40	@ 0x28
 800965e:	d103      	bne.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8009660:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009666:	e003      	b.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8009668:	2300      	movs	r3, #0
 800966a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800966c:	f000 bd25 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009670:	f000 bd23 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009674:	4b6b      	ldr	r3, [pc, #428]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8009676:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800967a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800967e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009682:	2b00      	cmp	r3, #0
 8009684:	d104      	bne.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009686:	f7fe fca5 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 800968a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800968c:	f000 bd15 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8009690:	4b64      	ldr	r3, [pc, #400]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009698:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800969c:	d10a      	bne.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 800969e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a0:	2b40      	cmp	r3, #64	@ 0x40
 80096a2:	d107      	bne.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096a4:	f107 030c 	add.w	r3, r7, #12
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7ff fc65 	bl	8008f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096b2:	e033      	b.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80096b4:	4b5b      	ldr	r3, [pc, #364]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0302 	and.w	r3, r3, #2
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d10c      	bne.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80096c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80096c4:	d109      	bne.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096c6:	4b57      	ldr	r3, [pc, #348]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	08db      	lsrs	r3, r3, #3
 80096cc:	f003 0303 	and.w	r3, r3, #3
 80096d0:	4a55      	ldr	r2, [pc, #340]	@ (8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80096d2:	fa22 f303 	lsr.w	r3, r2, r3
 80096d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096d8:	e020      	b.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80096da:	4b52      	ldr	r3, [pc, #328]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096e6:	d106      	bne.n	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 80096e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096ee:	d102      	bne.n	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 80096f0:	4b4e      	ldr	r3, [pc, #312]	@ (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80096f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096f4:	e012      	b.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80096f6:	4b4b      	ldr	r3, [pc, #300]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80096f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096fc:	f003 0302 	and.w	r3, r3, #2
 8009700:	2b02      	cmp	r3, #2
 8009702:	d107      	bne.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8009704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009706:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800970a:	d103      	bne.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 800970c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009712:	e003      	b.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8009714:	2300      	movs	r3, #0
 8009716:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009718:	f000 bccf 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800971c:	f000 bccd 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009720:	4b40      	ldr	r3, [pc, #256]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8009722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009726:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800972a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800972c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800972e:	2b00      	cmp	r3, #0
 8009730:	d104      	bne.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009732:	f7fe fc7b 	bl	800802c <HAL_RCC_GetPCLK3Freq>
 8009736:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009738:	f000 bcbf 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800973c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800973e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009742:	d108      	bne.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009744:	f107 030c 	add.w	r3, r7, #12
 8009748:	4618      	mov	r0, r3
 800974a:	f7ff fc15 	bl	8008f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009752:	f000 bcb2 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009756:	4b33      	ldr	r3, [pc, #204]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 0302 	and.w	r3, r3, #2
 800975e:	2b02      	cmp	r3, #2
 8009760:	d10d      	bne.n	800977e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8009762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009764:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009768:	d109      	bne.n	800977e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800976a:	4b2e      	ldr	r3, [pc, #184]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	08db      	lsrs	r3, r3, #3
 8009770:	f003 0303 	and.w	r3, r3, #3
 8009774:	4a2c      	ldr	r2, [pc, #176]	@ (8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8009776:	fa22 f303 	lsr.w	r3, r2, r3
 800977a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800977c:	e020      	b.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800977e:	4b29      	ldr	r3, [pc, #164]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009786:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800978a:	d106      	bne.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 800978c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800978e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009792:	d102      	bne.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8009794:	4b25      	ldr	r3, [pc, #148]	@ (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8009796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009798:	e012      	b.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800979a:	4b22      	ldr	r3, [pc, #136]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800979c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097a0:	f003 0302 	and.w	r3, r3, #2
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d107      	bne.n	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 80097a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097aa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80097ae:	d103      	bne.n	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 80097b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097b6:	e003      	b.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 80097b8:	2300      	movs	r3, #0
 80097ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80097bc:	f000 bc7d 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80097c0:	f000 bc7b 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80097c4:	4b17      	ldr	r3, [pc, #92]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80097c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097ca:	f003 0307 	and.w	r3, r3, #7
 80097ce:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80097d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d104      	bne.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80097d6:	f7fe fbe1 	bl	8007f9c <HAL_RCC_GetHCLKFreq>
 80097da:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80097dc:	f000 bc6d 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80097e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d104      	bne.n	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80097e6:	f7fe faad 	bl	8007d44 <HAL_RCC_GetSysClockFreq>
 80097ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 80097ec:	f000 bc65 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80097f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d108      	bne.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097f6:	f107 030c 	add.w	r3, r7, #12
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7ff fbbc 	bl	8008f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009804:	f000 bc59 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009808:	4b06      	ldr	r3, [pc, #24]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009810:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009814:	d10e      	bne.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8009816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009818:	2b03      	cmp	r3, #3
 800981a:	d10b      	bne.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 800981c:	4b04      	ldr	r3, [pc, #16]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800981e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009820:	e02c      	b.n	800987c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8009822:	bf00      	nop
 8009824:	44020c00 	.word	0x44020c00
 8009828:	03d09000 	.word	0x03d09000
 800982c:	003d0900 	.word	0x003d0900
 8009830:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009834:	4b95      	ldr	r3, [pc, #596]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 0302 	and.w	r3, r3, #2
 800983c:	2b02      	cmp	r3, #2
 800983e:	d10c      	bne.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8009840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009842:	2b04      	cmp	r3, #4
 8009844:	d109      	bne.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009846:	4b91      	ldr	r3, [pc, #580]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	08db      	lsrs	r3, r3, #3
 800984c:	f003 0303 	and.w	r3, r3, #3
 8009850:	4a8f      	ldr	r2, [pc, #572]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009852:	fa22 f303 	lsr.w	r3, r2, r3
 8009856:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009858:	e010      	b.n	800987c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800985a:	4b8c      	ldr	r3, [pc, #560]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009862:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009866:	d105      	bne.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8009868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986a:	2b05      	cmp	r3, #5
 800986c:	d102      	bne.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 800986e:	4b89      	ldr	r3, [pc, #548]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009872:	e003      	b.n	800987c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8009874:	2300      	movs	r3, #0
 8009876:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009878:	f000 bc1f 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800987c:	f000 bc1d 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8009880:	4b82      	ldr	r3, [pc, #520]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009882:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009886:	f003 0308 	and.w	r3, r3, #8
 800988a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800988c:	4b7f      	ldr	r3, [pc, #508]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800988e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009892:	f003 0302 	and.w	r3, r3, #2
 8009896:	2b02      	cmp	r3, #2
 8009898:	d106      	bne.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800989a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800989c:	2b00      	cmp	r3, #0
 800989e:	d103      	bne.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 80098a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098a6:	e011      	b.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80098a8:	4b78      	ldr	r3, [pc, #480]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80098aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098b6:	d106      	bne.n	80098c6 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 80098b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ba:	2b08      	cmp	r3, #8
 80098bc:	d103      	bne.n	80098c6 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 80098be:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80098c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098c4:	e002      	b.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80098c6:	2300      	movs	r3, #0
 80098c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80098ca:	e3f6      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80098cc:	e3f5      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80098ce:	4b6f      	ldr	r3, [pc, #444]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80098d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80098d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80098d8:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80098da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d103      	bne.n	80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80098e0:	f7fe fb78 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 80098e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80098e6:	e3e8      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 80098e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098ee:	d107      	bne.n	8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098f0:	f107 030c 	add.w	r3, r7, #12
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7ff fb3f 	bl	8008f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80098fe:	e3dc      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009900:	4b62      	ldr	r3, [pc, #392]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 0302 	and.w	r3, r3, #2
 8009908:	2b02      	cmp	r3, #2
 800990a:	d10d      	bne.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800990c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800990e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009912:	d109      	bne.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009914:	4b5d      	ldr	r3, [pc, #372]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	08db      	lsrs	r3, r3, #3
 800991a:	f003 0303 	and.w	r3, r3, #3
 800991e:	4a5c      	ldr	r2, [pc, #368]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009920:	fa22 f303 	lsr.w	r3, r2, r3
 8009924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009926:	e010      	b.n	800994a <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8009928:	4b58      	ldr	r3, [pc, #352]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009934:	d106      	bne.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8009936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009938:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800993c:	d102      	bne.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 800993e:	4b55      	ldr	r3, [pc, #340]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009942:	e002      	b.n	800994a <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8009944:	2300      	movs	r3, #0
 8009946:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009948:	e3b7      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800994a:	e3b6      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800994c:	4b4f      	ldr	r3, [pc, #316]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800994e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009952:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009956:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995a:	2b00      	cmp	r3, #0
 800995c:	d103      	bne.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800995e:	f7fe fb39 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 8009962:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8009964:	e3a9      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8009966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009968:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800996c:	d107      	bne.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800996e:	f107 030c 	add.w	r3, r7, #12
 8009972:	4618      	mov	r0, r3
 8009974:	f7ff fb00 	bl	8008f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800997c:	e39d      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800997e:	4b43      	ldr	r3, [pc, #268]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 0302 	and.w	r3, r3, #2
 8009986:	2b02      	cmp	r3, #2
 8009988:	d10d      	bne.n	80099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 800998a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009990:	d109      	bne.n	80099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009992:	4b3e      	ldr	r3, [pc, #248]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	08db      	lsrs	r3, r3, #3
 8009998:	f003 0303 	and.w	r3, r3, #3
 800999c:	4a3c      	ldr	r2, [pc, #240]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800999e:	fa22 f303 	lsr.w	r3, r2, r3
 80099a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099a4:	e010      	b.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80099a6:	4b39      	ldr	r3, [pc, #228]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80099ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099b2:	d106      	bne.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80099b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80099ba:	d102      	bne.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 80099bc:	4b35      	ldr	r3, [pc, #212]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80099be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099c0:	e002      	b.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 80099c2:	2300      	movs	r3, #0
 80099c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80099c6:	e378      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80099c8:	e377      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80099ca:	4b30      	ldr	r3, [pc, #192]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80099cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80099d0:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80099d4:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80099d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d103      	bne.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80099dc:	f7fe fafa 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 80099e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80099e2:	e36a      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 80099e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80099ea:	d107      	bne.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099ec:	f107 030c 	add.w	r3, r7, #12
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7ff fac1 	bl	8008f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80099fa:	e35e      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80099fc:	4b23      	ldr	r3, [pc, #140]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 0302 	and.w	r3, r3, #2
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d10d      	bne.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8009a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a0e:	d109      	bne.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a10:	4b1e      	ldr	r3, [pc, #120]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	08db      	lsrs	r3, r3, #3
 8009a16:	f003 0303 	and.w	r3, r3, #3
 8009a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009a22:	e34a      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8009a24:	2300      	movs	r3, #0
 8009a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009a28:	e347      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8009a2a:	4b18      	ldr	r3, [pc, #96]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009a2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009a30:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009a34:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8009a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d103      	bne.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009a3c:	f7fe faf6 	bl	800802c <HAL_RCC_GetPCLK3Freq>
 8009a40:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8009a42:	e33a      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8009a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a4a:	d107      	bne.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a4c:	f107 030c 	add.w	r3, r7, #12
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7ff fa91 	bl	8008f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009a5a:	e32e      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8009a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f003 0302 	and.w	r3, r3, #2
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d10d      	bne.n	8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8009a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a6e:	d109      	bne.n	8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a70:	4b06      	ldr	r3, [pc, #24]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	08db      	lsrs	r3, r3, #3
 8009a76:	f003 0303 	and.w	r3, r3, #3
 8009a7a:	4a05      	ldr	r2, [pc, #20]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009a82:	e31a      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8009a84:	2300      	movs	r3, #0
 8009a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009a88:	e317      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009a8a:	bf00      	nop
 8009a8c:	44020c00 	.word	0x44020c00
 8009a90:	03d09000 	.word	0x03d09000
 8009a94:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009a98:	4b9b      	ldr	r3, [pc, #620]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009a9a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009a9e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009aaa:	d044      	beq.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aae:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009ab2:	d879      	bhi.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8009ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aba:	d02d      	beq.n	8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8009abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ac2:	d871      	bhi.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8009ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009aca:	d017      	beq.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8009acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ace:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ad2:	d869      	bhi.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8009ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d004      	beq.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8009ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ae0:	d004      	beq.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8009ae2:	e061      	b.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009ae4:	f7fe faa2 	bl	800802c <HAL_RCC_GetPCLK3Freq>
 8009ae8:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8009aea:	e060      	b.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aec:	f107 030c 	add.w	r3, r7, #12
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7ff fa41 	bl	8008f78 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009afa:	e058      	b.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009afc:	4b82      	ldr	r3, [pc, #520]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009afe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b02:	f003 0302 	and.w	r3, r3, #2
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d103      	bne.n	8009b12 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8009b0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8009b10:	e04d      	b.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8009b12:	2300      	movs	r3, #0
 8009b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009b16:	e04a      	b.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009b18:	4b7b      	ldr	r3, [pc, #492]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b26:	d103      	bne.n	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8009b28:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8009b2e:	e03e      	b.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8009b30:	2300      	movs	r3, #0
 8009b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009b34:	e03b      	b.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b36:	4b74      	ldr	r3, [pc, #464]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009b38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b3c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009b40:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b42:	4b71      	ldr	r3, [pc, #452]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 0302 	and.w	r3, r3, #2
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d10c      	bne.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d109      	bne.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b54:	4b6c      	ldr	r3, [pc, #432]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	08db      	lsrs	r3, r3, #3
 8009b5a:	f003 0303 	and.w	r3, r3, #3
 8009b5e:	4a6b      	ldr	r2, [pc, #428]	@ (8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8009b60:	fa22 f303 	lsr.w	r3, r2, r3
 8009b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b66:	e01e      	b.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b68:	4b67      	ldr	r3, [pc, #412]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b74:	d106      	bne.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8009b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b7c:	d102      	bne.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009b7e:	4b64      	ldr	r3, [pc, #400]	@ (8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8009b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b82:	e010      	b.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b84:	4b60      	ldr	r3, [pc, #384]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b90:	d106      	bne.n	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8009b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b98:	d102      	bne.n	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009b9a:	4b5e      	ldr	r3, [pc, #376]	@ (8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8009b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b9e:	e002      	b.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8009ba4:	e003      	b.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8009ba6:	e002      	b.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009bac:	bf00      	nop
          }
        }
        break;
 8009bae:	e284      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009bb0:	4b55      	ldr	r3, [pc, #340]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009bb2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009bb6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009bba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bbe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009bc2:	d044      	beq.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8009bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009bca:	d879      	bhi.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8009bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009bd2:	d02d      	beq.n	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8009bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009bda:	d871      	bhi.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8009bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bde:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009be2:	d017      	beq.n	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8009be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009bea:	d869      	bhi.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8009bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d004      	beq.n	8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8009bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bf8:	d004      	beq.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8009bfa:	e061      	b.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8009bfc:	f7fe f9ea 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 8009c00:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8009c02:	e060      	b.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c04:	f107 030c 	add.w	r3, r7, #12
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7ff f9b5 	bl	8008f78 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009c12:	e058      	b.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009c14:	4b3c      	ldr	r3, [pc, #240]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009c16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c1a:	f003 0302 	and.w	r3, r3, #2
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d103      	bne.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8009c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8009c28:	e04d      	b.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009c2e:	e04a      	b.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009c30:	4b35      	ldr	r3, [pc, #212]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009c32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c3e:	d103      	bne.n	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8009c40:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8009c46:	e03e      	b.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009c4c:	e03b      	b.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c4e:	4b2e      	ldr	r3, [pc, #184]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009c50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c54:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009c58:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c5a:	4b2b      	ldr	r3, [pc, #172]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 0302 	and.w	r3, r3, #2
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d10c      	bne.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8009c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d109      	bne.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c6c:	4b26      	ldr	r3, [pc, #152]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	08db      	lsrs	r3, r3, #3
 8009c72:	f003 0303 	and.w	r3, r3, #3
 8009c76:	4a25      	ldr	r2, [pc, #148]	@ (8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8009c78:	fa22 f303 	lsr.w	r3, r2, r3
 8009c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c7e:	e01e      	b.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c80:	4b21      	ldr	r3, [pc, #132]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c8c:	d106      	bne.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c94:	d102      	bne.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009c96:	4b1e      	ldr	r3, [pc, #120]	@ (8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8009c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c9a:	e010      	b.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ca4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ca8:	d106      	bne.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8009caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009cb0:	d102      	bne.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009cb2:	4b18      	ldr	r3, [pc, #96]	@ (8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8009cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cb6:	e002      	b.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8009cbc:	e003      	b.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8009cbe:	e002      	b.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009cc4:	bf00      	nop
          }
        }
        break;
 8009cc6:	e1f8      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009cca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009cce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009cd2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ce0:	d105      	bne.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8009ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d102      	bne.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8009ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8009cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8009cec:	e1e5      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cf4:	d110      	bne.n	8009d18 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cf6:	f107 0318 	add.w	r3, r7, #24
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fe ffd0 	bl	8008ca0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009d04:	e1d9      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009d06:	bf00      	nop
 8009d08:	44020c00 	.word	0x44020c00
 8009d0c:	03d09000 	.word	0x03d09000
 8009d10:	003d0900 	.word	0x003d0900
 8009d14:	017d7840 	.word	0x017d7840
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d1e:	d107      	bne.n	8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d20:	f107 030c 	add.w	r3, r7, #12
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7ff f927 	bl	8008f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009d2e:	e1c4      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8009d30:	2300      	movs	r3, #0
 8009d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009d34:	e1c1      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009d36:	4b9d      	ldr	r3, [pc, #628]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d3c:	f003 0307 	and.w	r3, r3, #7
 8009d40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d44:	2b04      	cmp	r3, #4
 8009d46:	d859      	bhi.n	8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8009d48:	a201      	add	r2, pc, #4	@ (adr r2, 8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4e:	bf00      	nop
 8009d50:	08009d65 	.word	0x08009d65
 8009d54:	08009d75 	.word	0x08009d75
 8009d58:	08009dfd 	.word	0x08009dfd
 8009d5c:	08009d85 	.word	0x08009d85
 8009d60:	08009d8b 	.word	0x08009d8b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d64:	f107 0318 	add.w	r3, r7, #24
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7fe ff99 	bl	8008ca0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009d72:	e046      	b.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d74:	f107 030c 	add.w	r3, r7, #12
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7ff f8fd 	bl	8008f78 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009d82:	e03e      	b.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009d84:	4b8a      	ldr	r3, [pc, #552]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009d88:	e03b      	b.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d8a:	4b88      	ldr	r3, [pc, #544]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d90:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009d94:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d96:	4b85      	ldr	r3, [pc, #532]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f003 0302 	and.w	r3, r3, #2
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d10c      	bne.n	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8009da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d109      	bne.n	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009da8:	4b80      	ldr	r3, [pc, #512]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	08db      	lsrs	r3, r3, #3
 8009dae:	f003 0303 	and.w	r3, r3, #3
 8009db2:	4a80      	ldr	r2, [pc, #512]	@ (8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009db4:	fa22 f303 	lsr.w	r3, r2, r3
 8009db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009dba:	e01e      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009dbc:	4b7b      	ldr	r3, [pc, #492]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dc8:	d106      	bne.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8009dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dd0:	d102      	bne.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009dd2:	4b79      	ldr	r3, [pc, #484]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8009dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009dd6:	e010      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009dd8:	4b74      	ldr	r3, [pc, #464]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009de0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009de4:	d106      	bne.n	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8009de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009dec:	d102      	bne.n	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009dee:	4b73      	ldr	r3, [pc, #460]	@ (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8009df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009df2:	e002      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009df4:	2300      	movs	r3, #0
 8009df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8009df8:	e003      	b.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8009dfa:	e002      	b.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009e00:	bf00      	nop
          }
        }
        break;
 8009e02:	e15a      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009e04:	4b69      	ldr	r3, [pc, #420]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e12:	2b20      	cmp	r3, #32
 8009e14:	d022      	beq.n	8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8009e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e18:	2b20      	cmp	r3, #32
 8009e1a:	d858      	bhi.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8009e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1e:	2b18      	cmp	r3, #24
 8009e20:	d019      	beq.n	8009e56 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8009e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e24:	2b18      	cmp	r3, #24
 8009e26:	d852      	bhi.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8009e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d003      	beq.n	8009e36 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8009e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e30:	2b08      	cmp	r3, #8
 8009e32:	d008      	beq.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8009e34:	e04b      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e36:	f107 0318 	add.w	r3, r7, #24
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fe ff30 	bl	8008ca0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009e44:	e046      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e46:	f107 030c 	add.w	r3, r7, #12
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7ff f894 	bl	8008f78 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009e54:	e03e      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009e56:	4b56      	ldr	r3, [pc, #344]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009e5a:	e03b      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e5c:	4b53      	ldr	r3, [pc, #332]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e62:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009e66:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e68:	4b50      	ldr	r3, [pc, #320]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 0302 	and.w	r3, r3, #2
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	d10c      	bne.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8009e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d109      	bne.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e7a:	4b4c      	ldr	r3, [pc, #304]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	08db      	lsrs	r3, r3, #3
 8009e80:	f003 0303 	and.w	r3, r3, #3
 8009e84:	4a4b      	ldr	r2, [pc, #300]	@ (8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009e86:	fa22 f303 	lsr.w	r3, r2, r3
 8009e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e8c:	e01e      	b.n	8009ecc <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e8e:	4b47      	ldr	r3, [pc, #284]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e9a:	d106      	bne.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ea2:	d102      	bne.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009ea4:	4b44      	ldr	r3, [pc, #272]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8009ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ea8:	e010      	b.n	8009ecc <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009eaa:	4b40      	ldr	r3, [pc, #256]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009eb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009eb6:	d106      	bne.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ebe:	d102      	bne.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009ec0:	4b3e      	ldr	r3, [pc, #248]	@ (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8009ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ec4:	e002      	b.n	8009ecc <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8009eca:	e003      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8009ecc:	e002      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009ed2:	bf00      	nop
          }
        }
        break;
 8009ed4:	e0f1      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009ed6:	4b35      	ldr	r3, [pc, #212]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009edc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ee8:	d023      	beq.n	8009f32 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8009eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ef0:	d858      	bhi.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8009ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef4:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ef6:	d019      	beq.n	8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8009ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efa:	2bc0      	cmp	r3, #192	@ 0xc0
 8009efc:	d852      	bhi.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8009efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d003      	beq.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8009f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f06:	2b40      	cmp	r3, #64	@ 0x40
 8009f08:	d008      	beq.n	8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8009f0a:	e04b      	b.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f0c:	f107 0318 	add.w	r3, r7, #24
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fe fec5 	bl	8008ca0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009f1a:	e046      	b.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f1c:	f107 030c 	add.w	r3, r7, #12
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7ff f829 	bl	8008f78 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009f2a:	e03e      	b.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009f2c:	4b20      	ldr	r3, [pc, #128]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009f30:	e03b      	b.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f32:	4b1e      	ldr	r3, [pc, #120]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009f38:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009f3c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 0302 	and.w	r3, r3, #2
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d10c      	bne.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d109      	bne.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f50:	4b16      	ldr	r3, [pc, #88]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	08db      	lsrs	r3, r3, #3
 8009f56:	f003 0303 	and.w	r3, r3, #3
 8009f5a:	4a16      	ldr	r2, [pc, #88]	@ (8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f62:	e01e      	b.n	8009fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f64:	4b11      	ldr	r3, [pc, #68]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f70:	d106      	bne.n	8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8009f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f78:	d102      	bne.n	8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8009f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f7e:	e010      	b.n	8009fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f80:	4b0a      	ldr	r3, [pc, #40]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f8c:	d106      	bne.n	8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8009f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f94:	d102      	bne.n	8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009f96:	4b09      	ldr	r3, [pc, #36]	@ (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8009f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f9a:	e002      	b.n	8009fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8009fa0:	e003      	b.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8009fa2:	e002      	b.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009fa8:	bf00      	nop
          }
        }
        break;
 8009faa:	e086      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009fac:	44020c00 	.word	0x44020c00
 8009fb0:	00bb8000 	.word	0x00bb8000
 8009fb4:	03d09000 	.word	0x03d09000
 8009fb8:	003d0900 	.word	0x003d0900
 8009fbc:	017d7840 	.word	0x017d7840
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009fc0:	4b40      	ldr	r3, [pc, #256]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8009fc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009fc6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009fca:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009fcc:	4b3d      	ldr	r3, [pc, #244]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fd8:	d105      	bne.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8009fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d102      	bne.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8009fe0:	4b39      	ldr	r3, [pc, #228]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8009fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fe4:	e031      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009fe6:	4b37      	ldr	r3, [pc, #220]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ff2:	d10a      	bne.n	800a00a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8009ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff6:	2b10      	cmp	r3, #16
 8009ff8:	d107      	bne.n	800a00a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ffa:	f107 0318 	add.w	r3, r7, #24
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fe fe4e 	bl	8008ca0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a008:	e01f      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800a00a:	4b2e      	ldr	r3, [pc, #184]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800a00c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a010:	f003 0302 	and.w	r3, r3, #2
 800a014:	2b02      	cmp	r3, #2
 800a016:	d106      	bne.n	800a026 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 800a018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a01a:	2b20      	cmp	r3, #32
 800a01c:	d103      	bne.n	800a026 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 800a01e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a022:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a024:	e011      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800a026:	4b27      	ldr	r3, [pc, #156]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800a028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a02c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a030:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a034:	d106      	bne.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 800a036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a038:	2b30      	cmp	r3, #48	@ 0x30
 800a03a:	d103      	bne.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 800a03c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a040:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a042:	e002      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800a044:	2300      	movs	r3, #0
 800a046:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 800a048:	e037      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800a04a:	e036      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800a04c:	4b1d      	ldr	r3, [pc, #116]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800a04e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a052:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a056:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800a058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a05a:	2b10      	cmp	r3, #16
 800a05c:	d107      	bne.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a05e:	f107 0318 	add.w	r3, r7, #24
 800a062:	4618      	mov	r0, r3
 800a064:	f7fe fe1c 	bl	8008ca0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 800a06c:	e025      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 800a06e:	4b15      	ldr	r3, [pc, #84]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a076:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a07a:	d10a      	bne.n	800a092 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 800a07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07e:	2b20      	cmp	r3, #32
 800a080:	d107      	bne.n	800a092 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a082:	f107 030c 	add.w	r3, r7, #12
 800a086:	4618      	mov	r0, r3
 800a088:	f7fe ff76 	bl	8008f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a090:	e00f      	b.n	800a0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800a092:	4b0c      	ldr	r3, [pc, #48]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a09a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a09e:	d105      	bne.n	800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 800a0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a2:	2b30      	cmp	r3, #48	@ 0x30
 800a0a4:	d102      	bne.n	800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 800a0a6:	4b08      	ldr	r3, [pc, #32]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 800a0a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0aa:	e002      	b.n	800a0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 800a0b0:	e003      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800a0b2:	e002      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800a0b8:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800a0ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3730      	adds	r7, #48	@ 0x30
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	44020c00 	.word	0x44020c00
 800a0c8:	02dc6c00 	.word	0x02dc6c00

0800a0cc <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800a0d4:	4b48      	ldr	r3, [pc, #288]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a47      	ldr	r2, [pc, #284]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a0da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a0de:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a0e0:	f7fa f88e 	bl	8004200 <HAL_GetTick>
 800a0e4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0e6:	e008      	b.n	800a0fa <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a0e8:	f7fa f88a 	bl	8004200 <HAL_GetTick>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	2b02      	cmp	r3, #2
 800a0f4:	d901      	bls.n	800a0fa <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e07a      	b.n	800a1f0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0fa:	4b3f      	ldr	r3, [pc, #252]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1f0      	bne.n	800a0e8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a106:	4b3c      	ldr	r3, [pc, #240]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a10a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a10e:	f023 0303 	bic.w	r3, r3, #3
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	6811      	ldr	r1, [r2, #0]
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	6852      	ldr	r2, [r2, #4]
 800a11a:	0212      	lsls	r2, r2, #8
 800a11c:	430a      	orrs	r2, r1
 800a11e:	4936      	ldr	r1, [pc, #216]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a120:	4313      	orrs	r3, r2
 800a122:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	3b01      	subs	r3, #1
 800a12a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	3b01      	subs	r3, #1
 800a134:	025b      	lsls	r3, r3, #9
 800a136:	b29b      	uxth	r3, r3
 800a138:	431a      	orrs	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	3b01      	subs	r3, #1
 800a140:	041b      	lsls	r3, r3, #16
 800a142:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a146:	431a      	orrs	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	695b      	ldr	r3, [r3, #20]
 800a14c:	3b01      	subs	r3, #1
 800a14e:	061b      	lsls	r3, r3, #24
 800a150:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a154:	4928      	ldr	r1, [pc, #160]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a156:	4313      	orrs	r3, r2
 800a158:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a15a:	4b27      	ldr	r3, [pc, #156]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a15c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a15e:	f023 020c 	bic.w	r2, r3, #12
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	4924      	ldr	r1, [pc, #144]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a168:	4313      	orrs	r3, r2
 800a16a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800a16c:	4b22      	ldr	r3, [pc, #136]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a170:	f023 0220 	bic.w	r2, r3, #32
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	69db      	ldr	r3, [r3, #28]
 800a178:	491f      	ldr	r1, [pc, #124]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a17a:	4313      	orrs	r3, r2
 800a17c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a17e:	4b1e      	ldr	r3, [pc, #120]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a186:	491c      	ldr	r1, [pc, #112]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a188:	4313      	orrs	r3, r2
 800a18a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800a18c:	4b1a      	ldr	r3, [pc, #104]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a18e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a190:	4a19      	ldr	r2, [pc, #100]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a192:	f023 0310 	bic.w	r3, r3, #16
 800a196:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800a198:	4b17      	ldr	r3, [pc, #92]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a19a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a19c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a1a0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	6a12      	ldr	r2, [r2, #32]
 800a1a8:	00d2      	lsls	r2, r2, #3
 800a1aa:	4913      	ldr	r1, [pc, #76]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800a1b0:	4b11      	ldr	r3, [pc, #68]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a1b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1b4:	4a10      	ldr	r2, [pc, #64]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a1b6:	f043 0310 	orr.w	r3, r3, #16
 800a1ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800a1bc:	4b0e      	ldr	r3, [pc, #56]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a0d      	ldr	r2, [pc, #52]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a1c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a1c6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a1c8:	f7fa f81a 	bl	8004200 <HAL_GetTick>
 800a1cc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1ce:	e008      	b.n	800a1e2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a1d0:	f7fa f816 	bl	8004200 <HAL_GetTick>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	d901      	bls.n	800a1e2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	e006      	b.n	800a1f0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1e2:	4b05      	ldr	r3, [pc, #20]	@ (800a1f8 <RCCEx_PLL2_Config+0x12c>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d0f0      	beq.n	800a1d0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800a1ee:	2300      	movs	r3, #0

}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	44020c00 	.word	0x44020c00

0800a1fc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d101      	bne.n	800a20e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e0e9      	b.n	800a3e2 <HAL_SPI_Init+0x1e6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a74      	ldr	r2, [pc, #464]	@ (800a3ec <HAL_SPI_Init+0x1f0>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d105      	bne.n	800a22a <HAL_SPI_Init+0x2e>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	2b0f      	cmp	r3, #15
 800a224:	d901      	bls.n	800a22a <HAL_SPI_Init+0x2e>
  {
    return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e0db      	b.n	800a3e2 <HAL_SPI_Init+0x1e6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 fbb6 	bl	800a99c <SPI_GetPacketSize>
 800a230:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a6d      	ldr	r2, [pc, #436]	@ (800a3ec <HAL_SPI_Init+0x1f0>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d102      	bne.n	800a242 <HAL_SPI_Init+0x46>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2b08      	cmp	r3, #8
 800a240:	d811      	bhi.n	800a266 <HAL_SPI_Init+0x6a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a246:	4a6a      	ldr	r2, [pc, #424]	@ (800a3f0 <HAL_SPI_Init+0x1f4>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d009      	beq.n	800a260 <HAL_SPI_Init+0x64>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a68      	ldr	r2, [pc, #416]	@ (800a3f4 <HAL_SPI_Init+0x1f8>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d004      	beq.n	800a260 <HAL_SPI_Init+0x64>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a67      	ldr	r2, [pc, #412]	@ (800a3f8 <HAL_SPI_Init+0x1fc>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d104      	bne.n	800a26a <HAL_SPI_Init+0x6e>
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2b10      	cmp	r3, #16
 800a264:	d901      	bls.n	800a26a <HAL_SPI_Init+0x6e>
  {
    return HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	e0bb      	b.n	800a3e2 <HAL_SPI_Init+0x1e6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a270:	b2db      	uxtb	r3, r3
 800a272:	2b00      	cmp	r3, #0
 800a274:	d106      	bne.n	800a284 <HAL_SPI_Init+0x88>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f7f9 fb86 	bl	8003990 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2202      	movs	r2, #2
 800a288:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f022 0201 	bic.w	r2, r2, #1
 800a29a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a2a6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2b0:	d119      	bne.n	800a2e6 <HAL_SPI_Init+0xea>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a2ba:	d103      	bne.n	800a2c4 <HAL_SPI_Init+0xc8>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d008      	beq.n	800a2d6 <HAL_SPI_Init+0xda>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d10c      	bne.n	800a2e6 <HAL_SPI_Init+0xea>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a2d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2d4:	d107      	bne.n	800a2e6 <HAL_SPI_Init+0xea>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a2e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00f      	beq.n	800a312 <HAL_SPI_Init+0x116>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	2b06      	cmp	r3, #6
 800a2f8:	d90b      	bls.n	800a312 <HAL_SPI_Init+0x116>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	430a      	orrs	r2, r1
 800a30e:	601a      	str	r2, [r3, #0]
 800a310:	e007      	b.n	800a322 <HAL_SPI_Init+0x126>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a320:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	69da      	ldr	r2, [r3, #28]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a32a:	431a      	orrs	r2, r3
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	431a      	orrs	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a334:	ea42 0103 	orr.w	r1, r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	68da      	ldr	r2, [r3, #12]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	430a      	orrs	r2, r1
 800a342:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a34c:	431a      	orrs	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a352:	431a      	orrs	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	699b      	ldr	r3, [r3, #24]
 800a358:	431a      	orrs	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	431a      	orrs	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	431a      	orrs	r2, r3
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	431a      	orrs	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	431a      	orrs	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a376:	431a      	orrs	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	431a      	orrs	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a382:	431a      	orrs	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a388:	431a      	orrs	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a38e:	ea42 0103 	orr.w	r1, r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	430a      	orrs	r2, r1
 800a39c:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f022 0201 	bic.w	r2, r2, #1
 800a3ac:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00a      	beq.n	800a3d0 <HAL_SPI_Init+0x1d4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	430a      	orrs	r2, r1
 800a3ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	deaddead 	.word	0xdeaddead
 800a3f0:	40013000 	.word	0x40013000
 800a3f4:	40003800 	.word	0x40003800
 800a3f8:	40003c00 	.word	0x40003c00

0800a3fc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b088      	sub	sp, #32
 800a400:	af02      	add	r7, sp, #8
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	603b      	str	r3, [r7, #0]
 800a408:	4613      	mov	r3, r2
 800a40a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3320      	adds	r3, #32
 800a412:	617b      	str	r3, [r7, #20]
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a414:	f7f9 fef4 	bl	8004200 <HAL_GetTick>
 800a418:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a420:	b2db      	uxtb	r3, r3
 800a422:	2b01      	cmp	r3, #1
 800a424:	d001      	beq.n	800a42a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a426:	2302      	movs	r3, #2
 800a428:	e1e5      	b.n	800a7f6 <HAL_SPI_Transmit+0x3fa>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <HAL_SPI_Transmit+0x3a>
 800a430:	88fb      	ldrh	r3, [r7, #6]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d101      	bne.n	800a43a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a436:	2301      	movs	r3, #1
 800a438:	e1dd      	b.n	800a7f6 <HAL_SPI_Transmit+0x3fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a440:	2b01      	cmp	r3, #1
 800a442:	d101      	bne.n	800a448 <HAL_SPI_Transmit+0x4c>
 800a444:	2302      	movs	r3, #2
 800a446:	e1d6      	b.n	800a7f6 <HAL_SPI_Transmit+0x3fa>
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2203      	movs	r2, #3
 800a454:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	68ba      	ldr	r2, [r7, #8]
 800a464:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	88fa      	ldrh	r2, [r7, #6]
 800a46a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	88fa      	ldrh	r2, [r7, #6]
 800a472:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a4a0:	d108      	bne.n	800a4b4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a4b0:	601a      	str	r2, [r3, #0]
 800a4b2:	e009      	b.n	800a4c8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a4c6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	0c1b      	lsrs	r3, r3, #16
 800a4d0:	041b      	lsls	r3, r3, #16
 800a4d2:	88f9      	ldrh	r1, [r7, #6]
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	6812      	ldr	r2, [r2, #0]
 800a4d8:	430b      	orrs	r3, r1
 800a4da:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f042 0201 	orr.w	r2, r2, #1
 800a4ea:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a4f4:	d107      	bne.n	800a506 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a504:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	2b0f      	cmp	r3, #15
 800a50c:	d956      	bls.n	800a5bc <HAL_SPI_Transmit+0x1c0>
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a8d      	ldr	r2, [pc, #564]	@ (800a748 <HAL_SPI_Transmit+0x34c>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d04a      	beq.n	800a5ae <HAL_SPI_Transmit+0x1b2>
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a8b      	ldr	r2, [pc, #556]	@ (800a74c <HAL_SPI_Transmit+0x350>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d045      	beq.n	800a5ae <HAL_SPI_Transmit+0x1b2>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a8a      	ldr	r2, [pc, #552]	@ (800a750 <HAL_SPI_Transmit+0x354>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d147      	bne.n	800a5bc <HAL_SPI_Transmit+0x1c0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a52c:	e03f      	b.n	800a5ae <HAL_SPI_Transmit+0x1b2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	695b      	ldr	r3, [r3, #20]
 800a534:	f003 0302 	and.w	r3, r3, #2
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d114      	bne.n	800a566 <HAL_SPI_Transmit+0x16a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	6812      	ldr	r2, [r2, #0]
 800a546:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a54c:	1d1a      	adds	r2, r3, #4
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a558:	b29b      	uxth	r3, r3
 800a55a:	3b01      	subs	r3, #1
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a564:	e023      	b.n	800a5ae <HAL_SPI_Transmit+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a566:	f7f9 fe4b 	bl	8004200 <HAL_GetTick>
 800a56a:	4602      	mov	r2, r0
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	683a      	ldr	r2, [r7, #0]
 800a572:	429a      	cmp	r2, r3
 800a574:	d803      	bhi.n	800a57e <HAL_SPI_Transmit+0x182>
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57c:	d102      	bne.n	800a584 <HAL_SPI_Transmit+0x188>
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d114      	bne.n	800a5ae <HAL_SPI_Transmit+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f000 f93b 	bl	800a800 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a590:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2201      	movs	r2, #1
 800a59e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	e123      	b.n	800a7f6 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1b9      	bne.n	800a52e <HAL_SPI_Transmit+0x132>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a5ba:	e0f6      	b.n	800a7aa <HAL_SPI_Transmit+0x3ae>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	2b07      	cmp	r3, #7
 800a5c2:	f240 80eb 	bls.w	800a79c <HAL_SPI_Transmit+0x3a0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a5c6:	e05d      	b.n	800a684 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	695b      	ldr	r3, [r3, #20]
 800a5ce:	f003 0302 	and.w	r3, r3, #2
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d132      	bne.n	800a63c <HAL_SPI_Transmit+0x240>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d918      	bls.n	800a614 <HAL_SPI_Transmit+0x218>
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d014      	beq.n	800a614 <HAL_SPI_Transmit+0x218>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	6812      	ldr	r2, [r2, #0]
 800a5f4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5fa:	1d1a      	adds	r2, r3, #4
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a606:	b29b      	uxth	r3, r3
 800a608:	3b02      	subs	r3, #2
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a612:	e037      	b.n	800a684 <HAL_SPI_Transmit+0x288>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a618:	881a      	ldrh	r2, [r3, #0]
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a622:	1c9a      	adds	r2, r3, #2
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a62e:	b29b      	uxth	r3, r3
 800a630:	3b01      	subs	r3, #1
 800a632:	b29a      	uxth	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a63a:	e023      	b.n	800a684 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a63c:	f7f9 fde0 	bl	8004200 <HAL_GetTick>
 800a640:	4602      	mov	r2, r0
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	1ad3      	subs	r3, r2, r3
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d803      	bhi.n	800a654 <HAL_SPI_Transmit+0x258>
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a652:	d102      	bne.n	800a65a <HAL_SPI_Transmit+0x25e>
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d114      	bne.n	800a684 <HAL_SPI_Transmit+0x288>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f000 f8d0 	bl	800a800 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a666:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a680:	2303      	movs	r3, #3
 800a682:	e0b8      	b.n	800a7f6 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d19b      	bne.n	800a5c8 <HAL_SPI_Transmit+0x1cc>
 800a690:	e08b      	b.n	800a7aa <HAL_SPI_Transmit+0x3ae>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	695b      	ldr	r3, [r3, #20]
 800a698:	f003 0302 	and.w	r3, r3, #2
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d159      	bne.n	800a754 <HAL_SPI_Transmit+0x358>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	2b03      	cmp	r3, #3
 800a6aa:	d918      	bls.n	800a6de <HAL_SPI_Transmit+0x2e2>
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6b0:	2b40      	cmp	r3, #64	@ 0x40
 800a6b2:	d914      	bls.n	800a6de <HAL_SPI_Transmit+0x2e2>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	6812      	ldr	r2, [r2, #0]
 800a6be:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6c4:	1d1a      	adds	r2, r3, #4
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	3b04      	subs	r3, #4
 800a6d4:	b29a      	uxth	r2, r3
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a6dc:	e05e      	b.n	800a79c <HAL_SPI_Transmit+0x3a0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d917      	bls.n	800a71a <HAL_SPI_Transmit+0x31e>
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d013      	beq.n	800a71a <HAL_SPI_Transmit+0x31e>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6f6:	881a      	ldrh	r2, [r3, #0]
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a700:	1c9a      	adds	r2, r3, #2
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	3b02      	subs	r3, #2
 800a710:	b29a      	uxth	r2, r3
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a718:	e040      	b.n	800a79c <HAL_SPI_Transmit+0x3a0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	3320      	adds	r3, #32
 800a724:	7812      	ldrb	r2, [r2, #0]
 800a726:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a72c:	1c5a      	adds	r2, r3, #1
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a738:	b29b      	uxth	r3, r3
 800a73a:	3b01      	subs	r3, #1
 800a73c:	b29a      	uxth	r2, r3
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a744:	e02a      	b.n	800a79c <HAL_SPI_Transmit+0x3a0>
 800a746:	bf00      	nop
 800a748:	40013000 	.word	0x40013000
 800a74c:	40003800 	.word	0x40003800
 800a750:	40003c00 	.word	0x40003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a754:	f7f9 fd54 	bl	8004200 <HAL_GetTick>
 800a758:	4602      	mov	r2, r0
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	1ad3      	subs	r3, r2, r3
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	429a      	cmp	r2, r3
 800a762:	d803      	bhi.n	800a76c <HAL_SPI_Transmit+0x370>
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76a:	d102      	bne.n	800a772 <HAL_SPI_Transmit+0x376>
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d114      	bne.n	800a79c <HAL_SPI_Transmit+0x3a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f000 f844 	bl	800a800 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a77e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a798:	2303      	movs	r3, #3
 800a79a:	e02c      	b.n	800a7f6 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f47f af74 	bne.w	800a692 <HAL_SPI_Transmit+0x296>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	2108      	movs	r1, #8
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f000 f8c3 	bl	800a940 <SPI_WaitOnFlagUntilTimeout>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d007      	beq.n	800a7d0 <HAL_SPI_Transmit+0x3d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7c6:	f043 0220 	orr.w	r2, r3, #32
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f000 f815 	bl	800a800 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d001      	beq.n	800a7f4 <HAL_SPI_Transmit+0x3f8>
  {
    return HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e000      	b.n	800a7f6 <HAL_SPI_Transmit+0x3fa>
  }
  else
  {
    return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
  }
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3718      	adds	r7, #24
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop

0800a800 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	699a      	ldr	r2, [r3, #24]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f042 0208 	orr.w	r2, r2, #8
 800a81e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	699a      	ldr	r2, [r3, #24]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f042 0210 	orr.w	r2, r2, #16
 800a82e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f022 0201 	bic.w	r2, r2, #1
 800a83e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	6812      	ldr	r2, [r2, #0]
 800a84a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800a84e:	f023 0303 	bic.w	r3, r3, #3
 800a852:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	689a      	ldr	r2, [r3, #8]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a862:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	2b04      	cmp	r3, #4
 800a86e:	d014      	beq.n	800a89a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f003 0320 	and.w	r3, r3, #32
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00f      	beq.n	800a89a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a880:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	699a      	ldr	r2, [r3, #24]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f042 0220 	orr.w	r2, r2, #32
 800a898:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	2b03      	cmp	r3, #3
 800a8a4:	d014      	beq.n	800a8d0 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d00f      	beq.n	800a8d0 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8b6:	f043 0204 	orr.w	r2, r3, #4
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	699a      	ldr	r2, [r3, #24]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a8ce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00f      	beq.n	800a8fa <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8e0:	f043 0201 	orr.w	r2, r3, #1
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	699a      	ldr	r2, [r3, #24]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a8f8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00f      	beq.n	800a924 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a90a:	f043 0208 	orr.w	r2, r3, #8
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	699a      	ldr	r2, [r3, #24]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a922:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800a934:	bf00      	nop
 800a936:	3714      	adds	r7, #20
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	603b      	str	r3, [r7, #0]
 800a94c:	4613      	mov	r3, r2
 800a94e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a950:	e010      	b.n	800a974 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a952:	f7f9 fc55 	bl	8004200 <HAL_GetTick>
 800a956:	4602      	mov	r2, r0
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	683a      	ldr	r2, [r7, #0]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d803      	bhi.n	800a96a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a968:	d102      	bne.n	800a970 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d101      	bne.n	800a974 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a970:	2303      	movs	r3, #3
 800a972:	e00f      	b.n	800a994 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	695a      	ldr	r2, [r3, #20]
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	4013      	ands	r3, r2
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	429a      	cmp	r2, r3
 800a982:	bf0c      	ite	eq
 800a984:	2301      	moveq	r3, #1
 800a986:	2300      	movne	r3, #0
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	461a      	mov	r2, r3
 800a98c:	79fb      	ldrb	r3, [r7, #7]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d0df      	beq.n	800a952 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9a8:	095b      	lsrs	r3, r3, #5
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	3307      	adds	r3, #7
 800a9ba:	08db      	lsrs	r3, r3, #3
 800a9bc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	fb02 f303 	mul.w	r3, r2, r3
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b082      	sub	sp, #8
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e049      	b.n	800aa78 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d106      	bne.n	800a9fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f7f9 f847 	bl	8003a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2202      	movs	r2, #2
 800aa02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	3304      	adds	r3, #4
 800aa0e:	4619      	mov	r1, r3
 800aa10:	4610      	mov	r0, r2
 800aa12:	f000 fc89 	bl	800b328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2201      	movs	r2, #1
 800aa22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2201      	movs	r2, #1
 800aa32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2201      	movs	r2, #1
 800aa52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2201      	movs	r2, #1
 800aa5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2201      	movs	r2, #1
 800aa62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2201      	movs	r2, #1
 800aa72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa76:	2300      	movs	r3, #0
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3708      	adds	r7, #8
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d001      	beq.n	800aa98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	e03b      	b.n	800ab10 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2202      	movs	r2, #2
 800aa9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	68da      	ldr	r2, [r3, #12]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f042 0201 	orr.w	r2, r2, #1
 800aaae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a19      	ldr	r2, [pc, #100]	@ (800ab1c <HAL_TIM_Base_Start_IT+0x9c>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d009      	beq.n	800aace <HAL_TIM_Base_Start_IT+0x4e>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aac2:	d004      	beq.n	800aace <HAL_TIM_Base_Start_IT+0x4e>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a15      	ldr	r2, [pc, #84]	@ (800ab20 <HAL_TIM_Base_Start_IT+0xa0>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d115      	bne.n	800aafa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	689a      	ldr	r2, [r3, #8]
 800aad4:	4b13      	ldr	r3, [pc, #76]	@ (800ab24 <HAL_TIM_Base_Start_IT+0xa4>)
 800aad6:	4013      	ands	r3, r2
 800aad8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2b06      	cmp	r3, #6
 800aade:	d015      	beq.n	800ab0c <HAL_TIM_Base_Start_IT+0x8c>
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aae6:	d011      	beq.n	800ab0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f042 0201 	orr.w	r2, r2, #1
 800aaf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaf8:	e008      	b.n	800ab0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f042 0201 	orr.w	r2, r2, #1
 800ab08:	601a      	str	r2, [r3, #0]
 800ab0a:	e000      	b.n	800ab0e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3714      	adds	r7, #20
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr
 800ab1c:	40012c00 	.word	0x40012c00
 800ab20:	40000400 	.word	0x40000400
 800ab24:	00010007 	.word	0x00010007

0800ab28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d101      	bne.n	800ab3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab36:	2301      	movs	r3, #1
 800ab38:	e049      	b.n	800abce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d106      	bne.n	800ab54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f7f8 ffe4 	bl	8003b1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2202      	movs	r2, #2
 800ab58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	3304      	adds	r3, #4
 800ab64:	4619      	mov	r1, r3
 800ab66:	4610      	mov	r0, r2
 800ab68:	f000 fbde 	bl	800b328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3708      	adds	r7, #8
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b084      	sub	sp, #16
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	691b      	ldr	r3, [r3, #16]
 800abec:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	f003 0302 	and.w	r3, r3, #2
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d020      	beq.n	800ac3a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f003 0302 	and.w	r3, r3, #2
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d01b      	beq.n	800ac3a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f06f 0202 	mvn.w	r2, #2
 800ac0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	699b      	ldr	r3, [r3, #24]
 800ac18:	f003 0303 	and.w	r3, r3, #3
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d003      	beq.n	800ac28 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 fb63 	bl	800b2ec <HAL_TIM_IC_CaptureCallback>
 800ac26:	e005      	b.n	800ac34 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 fb55 	bl	800b2d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 fb66 	bl	800b300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	f003 0304 	and.w	r3, r3, #4
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d020      	beq.n	800ac86 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f003 0304 	and.w	r3, r3, #4
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d01b      	beq.n	800ac86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f06f 0204 	mvn.w	r2, #4
 800ac56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	699b      	ldr	r3, [r3, #24]
 800ac64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d003      	beq.n	800ac74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 fb3d 	bl	800b2ec <HAL_TIM_IC_CaptureCallback>
 800ac72:	e005      	b.n	800ac80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 fb2f 	bl	800b2d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 fb40 	bl	800b300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	f003 0308 	and.w	r3, r3, #8
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d020      	beq.n	800acd2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f003 0308 	and.w	r3, r3, #8
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d01b      	beq.n	800acd2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f06f 0208 	mvn.w	r2, #8
 800aca2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2204      	movs	r2, #4
 800aca8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	69db      	ldr	r3, [r3, #28]
 800acb0:	f003 0303 	and.w	r3, r3, #3
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d003      	beq.n	800acc0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 fb17 	bl	800b2ec <HAL_TIM_IC_CaptureCallback>
 800acbe:	e005      	b.n	800accc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fb09 	bl	800b2d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fb1a 	bl	800b300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	f003 0310 	and.w	r3, r3, #16
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d020      	beq.n	800ad1e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f003 0310 	and.w	r3, r3, #16
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d01b      	beq.n	800ad1e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f06f 0210 	mvn.w	r2, #16
 800acee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2208      	movs	r2, #8
 800acf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	69db      	ldr	r3, [r3, #28]
 800acfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d003      	beq.n	800ad0c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 faf1 	bl	800b2ec <HAL_TIM_IC_CaptureCallback>
 800ad0a:	e005      	b.n	800ad18 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 fae3 	bl	800b2d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 faf4 	bl	800b300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	f003 0301 	and.w	r3, r3, #1
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00c      	beq.n	800ad42 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f003 0301 	and.w	r3, r3, #1
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d007      	beq.n	800ad42 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f06f 0201 	mvn.w	r2, #1
 800ad3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7f7 f8a7 	bl	8001e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d104      	bne.n	800ad56 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00c      	beq.n	800ad70 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d007      	beq.n	800ad70 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ad68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fe9a 	bl	800baa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00c      	beq.n	800ad94 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d007      	beq.n	800ad94 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ad8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 fe92 	bl	800bab8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00c      	beq.n	800adb8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d007      	beq.n	800adb8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800adb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 faae 	bl	800b314 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	f003 0320 	and.w	r3, r3, #32
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00c      	beq.n	800addc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f003 0320 	and.w	r3, r3, #32
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d007      	beq.n	800addc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f06f 0220 	mvn.w	r2, #32
 800add4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 fe5a 	bl	800ba90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00c      	beq.n	800ae00 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800adec:	2b00      	cmp	r3, #0
 800adee:	d007      	beq.n	800ae00 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800adf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 fe66 	bl	800bacc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00c      	beq.n	800ae24 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d007      	beq.n	800ae24 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800ae1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 fe5e 	bl	800bae0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00c      	beq.n	800ae48 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d007      	beq.n	800ae48 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800ae40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fe56 	bl	800baf4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d00c      	beq.n	800ae6c <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d007      	beq.n	800ae6c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800ae64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 fe4e 	bl	800bb08 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae6c:	bf00      	nop
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae80:	2300      	movs	r3, #0
 800ae82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d101      	bne.n	800ae92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ae8e:	2302      	movs	r3, #2
 800ae90:	e0ff      	b.n	800b092 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2201      	movs	r2, #1
 800ae96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2b14      	cmp	r3, #20
 800ae9e:	f200 80f0 	bhi.w	800b082 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aea2:	a201      	add	r2, pc, #4	@ (adr r2, 800aea8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea8:	0800aefd 	.word	0x0800aefd
 800aeac:	0800b083 	.word	0x0800b083
 800aeb0:	0800b083 	.word	0x0800b083
 800aeb4:	0800b083 	.word	0x0800b083
 800aeb8:	0800af3d 	.word	0x0800af3d
 800aebc:	0800b083 	.word	0x0800b083
 800aec0:	0800b083 	.word	0x0800b083
 800aec4:	0800b083 	.word	0x0800b083
 800aec8:	0800af7f 	.word	0x0800af7f
 800aecc:	0800b083 	.word	0x0800b083
 800aed0:	0800b083 	.word	0x0800b083
 800aed4:	0800b083 	.word	0x0800b083
 800aed8:	0800afbf 	.word	0x0800afbf
 800aedc:	0800b083 	.word	0x0800b083
 800aee0:	0800b083 	.word	0x0800b083
 800aee4:	0800b083 	.word	0x0800b083
 800aee8:	0800b001 	.word	0x0800b001
 800aeec:	0800b083 	.word	0x0800b083
 800aef0:	0800b083 	.word	0x0800b083
 800aef4:	0800b083 	.word	0x0800b083
 800aef8:	0800b041 	.word	0x0800b041
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68b9      	ldr	r1, [r7, #8]
 800af02:	4618      	mov	r0, r3
 800af04:	f000 fa76 	bl	800b3f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	699a      	ldr	r2, [r3, #24]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f042 0208 	orr.w	r2, r2, #8
 800af16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	699a      	ldr	r2, [r3, #24]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f022 0204 	bic.w	r2, r2, #4
 800af26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	6999      	ldr	r1, [r3, #24]
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	691a      	ldr	r2, [r3, #16]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	430a      	orrs	r2, r1
 800af38:	619a      	str	r2, [r3, #24]
      break;
 800af3a:	e0a5      	b.n	800b088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68b9      	ldr	r1, [r7, #8]
 800af42:	4618      	mov	r0, r3
 800af44:	f000 fabe 	bl	800b4c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	699a      	ldr	r2, [r3, #24]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	699a      	ldr	r2, [r3, #24]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	6999      	ldr	r1, [r3, #24]
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	691b      	ldr	r3, [r3, #16]
 800af72:	021a      	lsls	r2, r3, #8
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	430a      	orrs	r2, r1
 800af7a:	619a      	str	r2, [r3, #24]
      break;
 800af7c:	e084      	b.n	800b088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68b9      	ldr	r1, [r7, #8]
 800af84:	4618      	mov	r0, r3
 800af86:	f000 fb0b 	bl	800b5a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	69da      	ldr	r2, [r3, #28]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f042 0208 	orr.w	r2, r2, #8
 800af98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	69da      	ldr	r2, [r3, #28]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f022 0204 	bic.w	r2, r2, #4
 800afa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	69d9      	ldr	r1, [r3, #28]
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	691a      	ldr	r2, [r3, #16]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	430a      	orrs	r2, r1
 800afba:	61da      	str	r2, [r3, #28]
      break;
 800afbc:	e064      	b.n	800b088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68b9      	ldr	r1, [r7, #8]
 800afc4:	4618      	mov	r0, r3
 800afc6:	f000 fb57 	bl	800b678 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	69da      	ldr	r2, [r3, #28]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800afd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	69da      	ldr	r2, [r3, #28]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800afe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	69d9      	ldr	r1, [r3, #28]
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	691b      	ldr	r3, [r3, #16]
 800aff4:	021a      	lsls	r2, r3, #8
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	430a      	orrs	r2, r1
 800affc:	61da      	str	r2, [r3, #28]
      break;
 800affe:	e043      	b.n	800b088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	68b9      	ldr	r1, [r7, #8]
 800b006:	4618      	mov	r0, r3
 800b008:	f000 fba4 	bl	800b754 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f042 0208 	orr.w	r2, r2, #8
 800b01a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f022 0204 	bic.w	r2, r2, #4
 800b02a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	691a      	ldr	r2, [r3, #16]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	430a      	orrs	r2, r1
 800b03c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b03e:	e023      	b.n	800b088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	68b9      	ldr	r1, [r7, #8]
 800b046:	4618      	mov	r0, r3
 800b048:	f000 fbd0 	bl	800b7ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b05a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b06a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	021a      	lsls	r2, r3, #8
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	430a      	orrs	r2, r1
 800b07e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b080:	e002      	b.n	800b088 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b082:	2301      	movs	r3, #1
 800b084:	75fb      	strb	r3, [r7, #23]
      break;
 800b086:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b090:	7dfb      	ldrb	r3, [r7, #23]
}
 800b092:	4618      	mov	r0, r3
 800b094:	3718      	adds	r7, #24
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop

0800b09c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d101      	bne.n	800b0b8 <HAL_TIM_ConfigClockSource+0x1c>
 800b0b4:	2302      	movs	r3, #2
 800b0b6:	e0fe      	b.n	800b2b6 <HAL_TIM_ConfigClockSource+0x21a>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2202      	movs	r2, #2
 800b0c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b0d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b0da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b0e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	68ba      	ldr	r2, [r7, #8]
 800b0ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b0f4:	f000 80c9 	beq.w	800b28a <HAL_TIM_ConfigClockSource+0x1ee>
 800b0f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b0fc:	f200 80ce 	bhi.w	800b29c <HAL_TIM_ConfigClockSource+0x200>
 800b100:	4a6f      	ldr	r2, [pc, #444]	@ (800b2c0 <HAL_TIM_ConfigClockSource+0x224>)
 800b102:	4293      	cmp	r3, r2
 800b104:	f000 80c1 	beq.w	800b28a <HAL_TIM_ConfigClockSource+0x1ee>
 800b108:	4a6d      	ldr	r2, [pc, #436]	@ (800b2c0 <HAL_TIM_ConfigClockSource+0x224>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	f200 80c6 	bhi.w	800b29c <HAL_TIM_ConfigClockSource+0x200>
 800b110:	4a6c      	ldr	r2, [pc, #432]	@ (800b2c4 <HAL_TIM_ConfigClockSource+0x228>)
 800b112:	4293      	cmp	r3, r2
 800b114:	f000 80b9 	beq.w	800b28a <HAL_TIM_ConfigClockSource+0x1ee>
 800b118:	4a6a      	ldr	r2, [pc, #424]	@ (800b2c4 <HAL_TIM_ConfigClockSource+0x228>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	f200 80be 	bhi.w	800b29c <HAL_TIM_ConfigClockSource+0x200>
 800b120:	4a69      	ldr	r2, [pc, #420]	@ (800b2c8 <HAL_TIM_ConfigClockSource+0x22c>)
 800b122:	4293      	cmp	r3, r2
 800b124:	f000 80b1 	beq.w	800b28a <HAL_TIM_ConfigClockSource+0x1ee>
 800b128:	4a67      	ldr	r2, [pc, #412]	@ (800b2c8 <HAL_TIM_ConfigClockSource+0x22c>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	f200 80b6 	bhi.w	800b29c <HAL_TIM_ConfigClockSource+0x200>
 800b130:	4a66      	ldr	r2, [pc, #408]	@ (800b2cc <HAL_TIM_ConfigClockSource+0x230>)
 800b132:	4293      	cmp	r3, r2
 800b134:	f000 80a9 	beq.w	800b28a <HAL_TIM_ConfigClockSource+0x1ee>
 800b138:	4a64      	ldr	r2, [pc, #400]	@ (800b2cc <HAL_TIM_ConfigClockSource+0x230>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	f200 80ae 	bhi.w	800b29c <HAL_TIM_ConfigClockSource+0x200>
 800b140:	4a63      	ldr	r2, [pc, #396]	@ (800b2d0 <HAL_TIM_ConfigClockSource+0x234>)
 800b142:	4293      	cmp	r3, r2
 800b144:	f000 80a1 	beq.w	800b28a <HAL_TIM_ConfigClockSource+0x1ee>
 800b148:	4a61      	ldr	r2, [pc, #388]	@ (800b2d0 <HAL_TIM_ConfigClockSource+0x234>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	f200 80a6 	bhi.w	800b29c <HAL_TIM_ConfigClockSource+0x200>
 800b150:	4a60      	ldr	r2, [pc, #384]	@ (800b2d4 <HAL_TIM_ConfigClockSource+0x238>)
 800b152:	4293      	cmp	r3, r2
 800b154:	f000 8099 	beq.w	800b28a <HAL_TIM_ConfigClockSource+0x1ee>
 800b158:	4a5e      	ldr	r2, [pc, #376]	@ (800b2d4 <HAL_TIM_ConfigClockSource+0x238>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	f200 809e 	bhi.w	800b29c <HAL_TIM_ConfigClockSource+0x200>
 800b160:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b164:	f000 8091 	beq.w	800b28a <HAL_TIM_ConfigClockSource+0x1ee>
 800b168:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b16c:	f200 8096 	bhi.w	800b29c <HAL_TIM_ConfigClockSource+0x200>
 800b170:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b174:	f000 8089 	beq.w	800b28a <HAL_TIM_ConfigClockSource+0x1ee>
 800b178:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b17c:	f200 808e 	bhi.w	800b29c <HAL_TIM_ConfigClockSource+0x200>
 800b180:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b184:	d03e      	beq.n	800b204 <HAL_TIM_ConfigClockSource+0x168>
 800b186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b18a:	f200 8087 	bhi.w	800b29c <HAL_TIM_ConfigClockSource+0x200>
 800b18e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b192:	f000 8086 	beq.w	800b2a2 <HAL_TIM_ConfigClockSource+0x206>
 800b196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b19a:	d87f      	bhi.n	800b29c <HAL_TIM_ConfigClockSource+0x200>
 800b19c:	2b70      	cmp	r3, #112	@ 0x70
 800b19e:	d01a      	beq.n	800b1d6 <HAL_TIM_ConfigClockSource+0x13a>
 800b1a0:	2b70      	cmp	r3, #112	@ 0x70
 800b1a2:	d87b      	bhi.n	800b29c <HAL_TIM_ConfigClockSource+0x200>
 800b1a4:	2b60      	cmp	r3, #96	@ 0x60
 800b1a6:	d050      	beq.n	800b24a <HAL_TIM_ConfigClockSource+0x1ae>
 800b1a8:	2b60      	cmp	r3, #96	@ 0x60
 800b1aa:	d877      	bhi.n	800b29c <HAL_TIM_ConfigClockSource+0x200>
 800b1ac:	2b50      	cmp	r3, #80	@ 0x50
 800b1ae:	d03c      	beq.n	800b22a <HAL_TIM_ConfigClockSource+0x18e>
 800b1b0:	2b50      	cmp	r3, #80	@ 0x50
 800b1b2:	d873      	bhi.n	800b29c <HAL_TIM_ConfigClockSource+0x200>
 800b1b4:	2b40      	cmp	r3, #64	@ 0x40
 800b1b6:	d058      	beq.n	800b26a <HAL_TIM_ConfigClockSource+0x1ce>
 800b1b8:	2b40      	cmp	r3, #64	@ 0x40
 800b1ba:	d86f      	bhi.n	800b29c <HAL_TIM_ConfigClockSource+0x200>
 800b1bc:	2b30      	cmp	r3, #48	@ 0x30
 800b1be:	d064      	beq.n	800b28a <HAL_TIM_ConfigClockSource+0x1ee>
 800b1c0:	2b30      	cmp	r3, #48	@ 0x30
 800b1c2:	d86b      	bhi.n	800b29c <HAL_TIM_ConfigClockSource+0x200>
 800b1c4:	2b20      	cmp	r3, #32
 800b1c6:	d060      	beq.n	800b28a <HAL_TIM_ConfigClockSource+0x1ee>
 800b1c8:	2b20      	cmp	r3, #32
 800b1ca:	d867      	bhi.n	800b29c <HAL_TIM_ConfigClockSource+0x200>
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d05c      	beq.n	800b28a <HAL_TIM_ConfigClockSource+0x1ee>
 800b1d0:	2b10      	cmp	r3, #16
 800b1d2:	d05a      	beq.n	800b28a <HAL_TIM_ConfigClockSource+0x1ee>
 800b1d4:	e062      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b1e6:	f000 fbcb 	bl	800b980 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b1f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	609a      	str	r2, [r3, #8]
      break;
 800b202:	e04f      	b.n	800b2a4 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b214:	f000 fbb4 	bl	800b980 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	689a      	ldr	r2, [r3, #8]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b226:	609a      	str	r2, [r3, #8]
      break;
 800b228:	e03c      	b.n	800b2a4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b236:	461a      	mov	r2, r3
 800b238:	f000 fb26 	bl	800b888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2150      	movs	r1, #80	@ 0x50
 800b242:	4618      	mov	r0, r3
 800b244:	f000 fb7f 	bl	800b946 <TIM_ITRx_SetConfig>
      break;
 800b248:	e02c      	b.n	800b2a4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b256:	461a      	mov	r2, r3
 800b258:	f000 fb45 	bl	800b8e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2160      	movs	r1, #96	@ 0x60
 800b262:	4618      	mov	r0, r3
 800b264:	f000 fb6f 	bl	800b946 <TIM_ITRx_SetConfig>
      break;
 800b268:	e01c      	b.n	800b2a4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b276:	461a      	mov	r2, r3
 800b278:	f000 fb06 	bl	800b888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2140      	movs	r1, #64	@ 0x40
 800b282:	4618      	mov	r0, r3
 800b284:	f000 fb5f 	bl	800b946 <TIM_ITRx_SetConfig>
      break;
 800b288:	e00c      	b.n	800b2a4 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4619      	mov	r1, r3
 800b294:	4610      	mov	r0, r2
 800b296:	f000 fb56 	bl	800b946 <TIM_ITRx_SetConfig>
      break;
 800b29a:	e003      	b.n	800b2a4 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	73fb      	strb	r3, [r7, #15]
      break;
 800b2a0:	e000      	b.n	800b2a4 <HAL_TIM_ConfigClockSource+0x208>
      break;
 800b2a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	00100070 	.word	0x00100070
 800b2c4:	00100060 	.word	0x00100060
 800b2c8:	00100050 	.word	0x00100050
 800b2cc:	00100040 	.word	0x00100040
 800b2d0:	00100030 	.word	0x00100030
 800b2d4:	00100020 	.word	0x00100020

0800b2d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b2e0:	bf00      	nop
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b2f4:	bf00      	nop
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b308:	bf00      	nop
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b31c:	bf00      	nop
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b328:	b480      	push	{r7}
 800b32a:	b085      	sub	sp, #20
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	4a2c      	ldr	r2, [pc, #176]	@ (800b3ec <TIM_Base_SetConfig+0xc4>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d007      	beq.n	800b350 <TIM_Base_SetConfig+0x28>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b346:	d003      	beq.n	800b350 <TIM_Base_SetConfig+0x28>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4a29      	ldr	r2, [pc, #164]	@ (800b3f0 <TIM_Base_SetConfig+0xc8>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d108      	bne.n	800b362 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	4313      	orrs	r3, r2
 800b360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a21      	ldr	r2, [pc, #132]	@ (800b3ec <TIM_Base_SetConfig+0xc4>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d007      	beq.n	800b37a <TIM_Base_SetConfig+0x52>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b370:	d003      	beq.n	800b37a <TIM_Base_SetConfig+0x52>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4a1e      	ldr	r2, [pc, #120]	@ (800b3f0 <TIM_Base_SetConfig+0xc8>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d108      	bne.n	800b38c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	68fa      	ldr	r2, [r7, #12]
 800b388:	4313      	orrs	r3, r2
 800b38a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	695b      	ldr	r3, [r3, #20]
 800b396:	4313      	orrs	r3, r2
 800b398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	689a      	ldr	r2, [r3, #8]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a0e      	ldr	r2, [pc, #56]	@ (800b3ec <TIM_Base_SetConfig+0xc4>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d103      	bne.n	800b3c0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	691a      	ldr	r2, [r3, #16]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	f003 0301 	and.w	r3, r3, #1
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d105      	bne.n	800b3de <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	f023 0201 	bic.w	r2, r3, #1
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	611a      	str	r2, [r3, #16]
  }
}
 800b3de:	bf00      	nop
 800b3e0:	3714      	adds	r7, #20
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	40012c00 	.word	0x40012c00
 800b3f0:	40000400 	.word	0x40000400

0800b3f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b087      	sub	sp, #28
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a1b      	ldr	r3, [r3, #32]
 800b402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6a1b      	ldr	r3, [r3, #32]
 800b408:	f023 0201 	bic.w	r2, r3, #1
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	699b      	ldr	r3, [r3, #24]
 800b41a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f023 0303 	bic.w	r3, r3, #3
 800b42e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	4313      	orrs	r3, r2
 800b438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	f023 0302 	bic.w	r3, r3, #2
 800b440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	697a      	ldr	r2, [r7, #20]
 800b448:	4313      	orrs	r3, r2
 800b44a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a1c      	ldr	r2, [pc, #112]	@ (800b4c0 <TIM_OC1_SetConfig+0xcc>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d10c      	bne.n	800b46e <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	f023 0308 	bic.w	r3, r3, #8
 800b45a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	697a      	ldr	r2, [r7, #20]
 800b462:	4313      	orrs	r3, r2
 800b464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	f023 0304 	bic.w	r3, r3, #4
 800b46c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4a13      	ldr	r2, [pc, #76]	@ (800b4c0 <TIM_OC1_SetConfig+0xcc>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d111      	bne.n	800b49a <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b47c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	693a      	ldr	r2, [r7, #16]
 800b48c:	4313      	orrs	r3, r2
 800b48e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	699b      	ldr	r3, [r3, #24]
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	4313      	orrs	r3, r2
 800b498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	685a      	ldr	r2, [r3, #4]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	697a      	ldr	r2, [r7, #20]
 800b4b2:	621a      	str	r2, [r3, #32]
}
 800b4b4:	bf00      	nop
 800b4b6:	371c      	adds	r7, #28
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr
 800b4c0:	40012c00 	.word	0x40012c00

0800b4c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b087      	sub	sp, #28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a1b      	ldr	r3, [r3, #32]
 800b4d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6a1b      	ldr	r3, [r3, #32]
 800b4d8:	f023 0210 	bic.w	r2, r3, #16
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	699b      	ldr	r3, [r3, #24]
 800b4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b4f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b4fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	021b      	lsls	r3, r3, #8
 800b506:	68fa      	ldr	r2, [r7, #12]
 800b508:	4313      	orrs	r3, r2
 800b50a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	f023 0320 	bic.w	r3, r3, #32
 800b512:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	011b      	lsls	r3, r3, #4
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4a1e      	ldr	r2, [pc, #120]	@ (800b59c <TIM_OC2_SetConfig+0xd8>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d10d      	bne.n	800b544 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b52e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	011b      	lsls	r3, r3, #4
 800b536:	697a      	ldr	r2, [r7, #20]
 800b538:	4313      	orrs	r3, r2
 800b53a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b542:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	4a15      	ldr	r2, [pc, #84]	@ (800b59c <TIM_OC2_SetConfig+0xd8>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d113      	bne.n	800b574 <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b55a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	695b      	ldr	r3, [r3, #20]
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	693a      	ldr	r2, [r7, #16]
 800b564:	4313      	orrs	r3, r2
 800b566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	699b      	ldr	r3, [r3, #24]
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	693a      	ldr	r2, [r7, #16]
 800b570:	4313      	orrs	r3, r2
 800b572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	693a      	ldr	r2, [r7, #16]
 800b578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	685a      	ldr	r2, [r3, #4]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	697a      	ldr	r2, [r7, #20]
 800b58c:	621a      	str	r2, [r3, #32]
}
 800b58e:	bf00      	nop
 800b590:	371c      	adds	r7, #28
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	40012c00 	.word	0x40012c00

0800b5a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b087      	sub	sp, #28
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6a1b      	ldr	r3, [r3, #32]
 800b5ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6a1b      	ldr	r3, [r3, #32]
 800b5b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	69db      	ldr	r3, [r3, #28]
 800b5c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b5ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f023 0303 	bic.w	r3, r3, #3
 800b5da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b5ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	021b      	lsls	r3, r3, #8
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a1d      	ldr	r2, [pc, #116]	@ (800b674 <TIM_OC3_SetConfig+0xd4>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d10d      	bne.n	800b61e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	021b      	lsls	r3, r3, #8
 800b610:	697a      	ldr	r2, [r7, #20]
 800b612:	4313      	orrs	r3, r2
 800b614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b61c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4a14      	ldr	r2, [pc, #80]	@ (800b674 <TIM_OC3_SetConfig+0xd4>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d113      	bne.n	800b64e <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b62c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	695b      	ldr	r3, [r3, #20]
 800b63a:	011b      	lsls	r3, r3, #4
 800b63c:	693a      	ldr	r2, [r7, #16]
 800b63e:	4313      	orrs	r3, r2
 800b640:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	699b      	ldr	r3, [r3, #24]
 800b646:	011b      	lsls	r3, r3, #4
 800b648:	693a      	ldr	r2, [r7, #16]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	693a      	ldr	r2, [r7, #16]
 800b652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	68fa      	ldr	r2, [r7, #12]
 800b658:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	685a      	ldr	r2, [r3, #4]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	697a      	ldr	r2, [r7, #20]
 800b666:	621a      	str	r2, [r3, #32]
}
 800b668:	bf00      	nop
 800b66a:	371c      	adds	r7, #28
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr
 800b674:	40012c00 	.word	0x40012c00

0800b678 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b678:	b480      	push	{r7}
 800b67a:	b087      	sub	sp, #28
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a1b      	ldr	r3, [r3, #32]
 800b686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6a1b      	ldr	r3, [r3, #32]
 800b68c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	69db      	ldr	r3, [r3, #28]
 800b69e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b6a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	021b      	lsls	r3, r3, #8
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b6c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	031b      	lsls	r3, r3, #12
 800b6ce:	697a      	ldr	r2, [r7, #20]
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4a1e      	ldr	r2, [pc, #120]	@ (800b750 <TIM_OC4_SetConfig+0xd8>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d10d      	bne.n	800b6f8 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b6e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	031b      	lsls	r3, r3, #12
 800b6ea:	697a      	ldr	r2, [r7, #20]
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b6f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4a15      	ldr	r2, [pc, #84]	@ (800b750 <TIM_OC4_SetConfig+0xd8>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d113      	bne.n	800b728 <TIM_OC4_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b706:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b70e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	695b      	ldr	r3, [r3, #20]
 800b714:	019b      	lsls	r3, r3, #6
 800b716:	693a      	ldr	r2, [r7, #16]
 800b718:	4313      	orrs	r3, r2
 800b71a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	019b      	lsls	r3, r3, #6
 800b722:	693a      	ldr	r2, [r7, #16]
 800b724:	4313      	orrs	r3, r2
 800b726:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	693a      	ldr	r2, [r7, #16]
 800b72c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	685a      	ldr	r2, [r3, #4]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	697a      	ldr	r2, [r7, #20]
 800b740:	621a      	str	r2, [r3, #32]
}
 800b742:	bf00      	nop
 800b744:	371c      	adds	r7, #28
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	40012c00 	.word	0x40012c00

0800b754 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b754:	b480      	push	{r7}
 800b756:	b087      	sub	sp, #28
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a1b      	ldr	r3, [r3, #32]
 800b762:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6a1b      	ldr	r3, [r3, #32]
 800b768:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b77a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	4313      	orrs	r3, r2
 800b790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b798:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	041b      	lsls	r3, r3, #16
 800b7a0:	693a      	ldr	r2, [r7, #16]
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4a0f      	ldr	r2, [pc, #60]	@ (800b7e8 <TIM_OC5_SetConfig+0x94>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d109      	bne.n	800b7c2 <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b7b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	695b      	ldr	r3, [r3, #20]
 800b7ba:	021b      	lsls	r3, r3, #8
 800b7bc:	697a      	ldr	r2, [r7, #20]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	697a      	ldr	r2, [r7, #20]
 800b7c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	685a      	ldr	r2, [r3, #4]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	693a      	ldr	r2, [r7, #16]
 800b7da:	621a      	str	r2, [r3, #32]
}
 800b7dc:	bf00      	nop
 800b7de:	371c      	adds	r7, #28
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr
 800b7e8:	40012c00 	.word	0x40012c00

0800b7ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b087      	sub	sp, #28
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6a1b      	ldr	r3, [r3, #32]
 800b7fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6a1b      	ldr	r3, [r3, #32]
 800b800:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b81a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b81e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	021b      	lsls	r3, r3, #8
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	4313      	orrs	r3, r2
 800b82a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	051b      	lsls	r3, r3, #20
 800b83a:	693a      	ldr	r2, [r7, #16]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4a10      	ldr	r2, [pc, #64]	@ (800b884 <TIM_OC6_SetConfig+0x98>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d109      	bne.n	800b85c <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b84e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	695b      	ldr	r3, [r3, #20]
 800b854:	029b      	lsls	r3, r3, #10
 800b856:	697a      	ldr	r2, [r7, #20]
 800b858:	4313      	orrs	r3, r2
 800b85a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	621a      	str	r2, [r3, #32]
}
 800b876:	bf00      	nop
 800b878:	371c      	adds	r7, #28
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	40012c00 	.word	0x40012c00

0800b888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b888:	b480      	push	{r7}
 800b88a:	b087      	sub	sp, #28
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6a1b      	ldr	r3, [r3, #32]
 800b898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	6a1b      	ldr	r3, [r3, #32]
 800b89e:	f023 0201 	bic.w	r2, r3, #1
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	699b      	ldr	r3, [r3, #24]
 800b8aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b8b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	011b      	lsls	r3, r3, #4
 800b8b8:	693a      	ldr	r2, [r7, #16]
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	f023 030a 	bic.w	r3, r3, #10
 800b8c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b8c6:	697a      	ldr	r2, [r7, #20]
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	693a      	ldr	r2, [r7, #16]
 800b8d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	697a      	ldr	r2, [r7, #20]
 800b8d8:	621a      	str	r2, [r3, #32]
}
 800b8da:	bf00      	nop
 800b8dc:	371c      	adds	r7, #28
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr

0800b8e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8e6:	b480      	push	{r7}
 800b8e8:	b087      	sub	sp, #28
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	60f8      	str	r0, [r7, #12]
 800b8ee:	60b9      	str	r1, [r7, #8]
 800b8f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6a1b      	ldr	r3, [r3, #32]
 800b8f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6a1b      	ldr	r3, [r3, #32]
 800b8fc:	f023 0210 	bic.w	r2, r3, #16
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	699b      	ldr	r3, [r3, #24]
 800b908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b910:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	031b      	lsls	r3, r3, #12
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	4313      	orrs	r3, r2
 800b91a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b922:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	011b      	lsls	r3, r3, #4
 800b928:	697a      	ldr	r2, [r7, #20]
 800b92a:	4313      	orrs	r3, r2
 800b92c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	693a      	ldr	r2, [r7, #16]
 800b932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	697a      	ldr	r2, [r7, #20]
 800b938:	621a      	str	r2, [r3, #32]
}
 800b93a:	bf00      	nop
 800b93c:	371c      	adds	r7, #28
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b946:	b480      	push	{r7}
 800b948:	b085      	sub	sp, #20
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
 800b94e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	689b      	ldr	r3, [r3, #8]
 800b954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b95c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b960:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b962:	683a      	ldr	r2, [r7, #0]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	4313      	orrs	r3, r2
 800b968:	f043 0307 	orr.w	r3, r3, #7
 800b96c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	609a      	str	r2, [r3, #8]
}
 800b974:	bf00      	nop
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b980:	b480      	push	{r7}
 800b982:	b087      	sub	sp, #28
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
 800b98c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	689b      	ldr	r3, [r3, #8]
 800b992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b99a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	021a      	lsls	r2, r3, #8
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	431a      	orrs	r2, r3
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	697a      	ldr	r2, [r7, #20]
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	697a      	ldr	r2, [r7, #20]
 800b9b2:	609a      	str	r2, [r3, #8]
}
 800b9b4:	bf00      	nop
 800b9b6:	371c      	adds	r7, #28
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d101      	bne.n	800b9d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	e051      	b.n	800ba7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2202      	movs	r2, #2
 800b9e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a22      	ldr	r2, [pc, #136]	@ (800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d108      	bne.n	800ba14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ba08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	68fa      	ldr	r2, [r7, #12]
 800ba10:	4313      	orrs	r3, r2
 800ba12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ba1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	4313      	orrs	r3, r2
 800ba28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a14      	ldr	r2, [pc, #80]	@ (800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d009      	beq.n	800ba50 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba44:	d004      	beq.n	800ba50 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a10      	ldr	r2, [pc, #64]	@ (800ba8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d10c      	bne.n	800ba6a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	68ba      	ldr	r2, [r7, #8]
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68ba      	ldr	r2, [r7, #8]
 800ba68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3714      	adds	r7, #20
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr
 800ba88:	40012c00 	.word	0x40012c00
 800ba8c:	40000400 	.word	0x40000400

0800ba90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba98:	bf00      	nop
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800baac:	bf00      	nop
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bac0:	bf00      	nop
 800bac2:	370c      	adds	r7, #12
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bad4:	bf00      	nop
 800bad6:	370c      	adds	r7, #12
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bae8:	bf00      	nop
 800baea:	370c      	adds	r7, #12
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bafc:	bf00      	nop
 800bafe:	370c      	adds	r7, #12
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b083      	sub	sp, #12
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bb10:	bf00      	nop
 800bb12:	370c      	adds	r7, #12
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d101      	bne.n	800bb2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e042      	b.n	800bbb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d106      	bne.n	800bb46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f7f8 f843 	bl	8003bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2224      	movs	r2, #36	@ 0x24
 800bb4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f022 0201 	bic.w	r2, r2, #1
 800bb5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d002      	beq.n	800bb6c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 f9a6 	bl	800beb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 f825 	bl	800bbbc <UART_SetConfig>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d101      	bne.n	800bb7c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e01b      	b.n	800bbb4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	685a      	ldr	r2, [r3, #4]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bb8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	689a      	ldr	r2, [r3, #8]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bb9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f042 0201 	orr.w	r2, r2, #1
 800bbaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 fa25 	bl	800bffc <UART_CheckIdleState>
 800bbb2:	4603      	mov	r3, r0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bbbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bbc0:	b094      	sub	sp, #80	@ 0x50
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bbcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbce:	689a      	ldr	r2, [r3, #8]
 800bbd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbd2:	691b      	ldr	r3, [r3, #16]
 800bbd4:	431a      	orrs	r2, r3
 800bbd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbd8:	695b      	ldr	r3, [r3, #20]
 800bbda:	431a      	orrs	r2, r3
 800bbdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbde:	69db      	ldr	r3, [r3, #28]
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bbe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	498a      	ldr	r1, [pc, #552]	@ (800be14 <UART_SetConfig+0x258>)
 800bbec:	4019      	ands	r1, r3
 800bbee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbf4:	430b      	orrs	r3, r1
 800bbf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bc02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc04:	68d9      	ldr	r1, [r3, #12]
 800bc06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	ea40 0301 	orr.w	r3, r0, r1
 800bc0e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	4b7f      	ldr	r3, [pc, #508]	@ (800be18 <UART_SetConfig+0x25c>)
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d004      	beq.n	800bc2a <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc22:	6a1a      	ldr	r2, [r3, #32]
 800bc24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc26:	4313      	orrs	r3, r2
 800bc28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800bc34:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800bc38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc3e:	430b      	orrs	r3, r1
 800bc40:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bc42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc48:	f023 000f 	bic.w	r0, r3, #15
 800bc4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc4e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bc50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	ea40 0301 	orr.w	r3, r0, r1
 800bc58:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	4b6f      	ldr	r3, [pc, #444]	@ (800be1c <UART_SetConfig+0x260>)
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d102      	bne.n	800bc6a <UART_SetConfig+0xae>
 800bc64:	2301      	movs	r3, #1
 800bc66:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc68:	e01a      	b.n	800bca0 <UART_SetConfig+0xe4>
 800bc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	4b6c      	ldr	r3, [pc, #432]	@ (800be20 <UART_SetConfig+0x264>)
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d102      	bne.n	800bc7a <UART_SetConfig+0xbe>
 800bc74:	2302      	movs	r3, #2
 800bc76:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc78:	e012      	b.n	800bca0 <UART_SetConfig+0xe4>
 800bc7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	4b69      	ldr	r3, [pc, #420]	@ (800be24 <UART_SetConfig+0x268>)
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d102      	bne.n	800bc8a <UART_SetConfig+0xce>
 800bc84:	2304      	movs	r3, #4
 800bc86:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc88:	e00a      	b.n	800bca0 <UART_SetConfig+0xe4>
 800bc8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	4b62      	ldr	r3, [pc, #392]	@ (800be18 <UART_SetConfig+0x25c>)
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d103      	bne.n	800bc9c <UART_SetConfig+0xe0>
 800bc94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc98:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc9a:	e001      	b.n	800bca0 <UART_SetConfig+0xe4>
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	4b5c      	ldr	r3, [pc, #368]	@ (800be18 <UART_SetConfig+0x25c>)
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d171      	bne.n	800bd8e <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bcaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcac:	2200      	movs	r2, #0
 800bcae:	623b      	str	r3, [r7, #32]
 800bcb0:	627a      	str	r2, [r7, #36]	@ 0x24
 800bcb2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bcb6:	f7fd facb 	bl	8009250 <HAL_RCCEx_GetPeriphCLKFreq>
 800bcba:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800bcbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	f000 80e2 	beq.w	800be88 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bcc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcc8:	4a57      	ldr	r2, [pc, #348]	@ (800be28 <UART_SetConfig+0x26c>)
 800bcca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcce:	461a      	mov	r2, r3
 800bcd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcd2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcd6:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bcd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcda:	685a      	ldr	r2, [r3, #4]
 800bcdc:	4613      	mov	r3, r2
 800bcde:	005b      	lsls	r3, r3, #1
 800bce0:	4413      	add	r3, r2
 800bce2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d305      	bcc.n	800bcf4 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bcee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d903      	bls.n	800bcfc <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bcfa:	e0c5      	b.n	800be88 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcfe:	2200      	movs	r2, #0
 800bd00:	61bb      	str	r3, [r7, #24]
 800bd02:	61fa      	str	r2, [r7, #28]
 800bd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd08:	4a47      	ldr	r2, [pc, #284]	@ (800be28 <UART_SetConfig+0x26c>)
 800bd0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	2200      	movs	r2, #0
 800bd12:	613b      	str	r3, [r7, #16]
 800bd14:	617a      	str	r2, [r7, #20]
 800bd16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bd1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bd1e:	f7f4 ffc7 	bl	8000cb0 <__aeabi_uldivmod>
 800bd22:	4602      	mov	r2, r0
 800bd24:	460b      	mov	r3, r1
 800bd26:	4610      	mov	r0, r2
 800bd28:	4619      	mov	r1, r3
 800bd2a:	f04f 0200 	mov.w	r2, #0
 800bd2e:	f04f 0300 	mov.w	r3, #0
 800bd32:	020b      	lsls	r3, r1, #8
 800bd34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bd38:	0202      	lsls	r2, r0, #8
 800bd3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd3c:	6849      	ldr	r1, [r1, #4]
 800bd3e:	0849      	lsrs	r1, r1, #1
 800bd40:	2000      	movs	r0, #0
 800bd42:	460c      	mov	r4, r1
 800bd44:	4605      	mov	r5, r0
 800bd46:	eb12 0804 	adds.w	r8, r2, r4
 800bd4a:	eb43 0905 	adc.w	r9, r3, r5
 800bd4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	60bb      	str	r3, [r7, #8]
 800bd56:	60fa      	str	r2, [r7, #12]
 800bd58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd5c:	4640      	mov	r0, r8
 800bd5e:	4649      	mov	r1, r9
 800bd60:	f7f4 ffa6 	bl	8000cb0 <__aeabi_uldivmod>
 800bd64:	4602      	mov	r2, r0
 800bd66:	460b      	mov	r3, r1
 800bd68:	4613      	mov	r3, r2
 800bd6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bd6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bd72:	d308      	bcc.n	800bd86 <UART_SetConfig+0x1ca>
 800bd74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd7a:	d204      	bcs.n	800bd86 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 800bd7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bd82:	60da      	str	r2, [r3, #12]
 800bd84:	e080      	b.n	800be88 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 800bd86:	2301      	movs	r3, #1
 800bd88:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bd8c:	e07c      	b.n	800be88 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd90:	69db      	ldr	r3, [r3, #28]
 800bd92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd96:	d149      	bne.n	800be2c <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bd98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	603b      	str	r3, [r7, #0]
 800bd9e:	607a      	str	r2, [r7, #4]
 800bda0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bda4:	f7fd fa54 	bl	8009250 <HAL_RCCEx_GetPeriphCLKFreq>
 800bda8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bdaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d06b      	beq.n	800be88 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdb4:	4a1c      	ldr	r2, [pc, #112]	@ (800be28 <UART_SetConfig+0x26c>)
 800bdb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdba:	461a      	mov	r2, r3
 800bdbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdbe:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdc2:	005a      	lsls	r2, r3, #1
 800bdc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	085b      	lsrs	r3, r3, #1
 800bdca:	441a      	add	r2, r3
 800bdcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdd8:	2b0f      	cmp	r3, #15
 800bdda:	d916      	bls.n	800be0a <UART_SetConfig+0x24e>
 800bddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bde2:	d212      	bcs.n	800be0a <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bde4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	f023 030f 	bic.w	r3, r3, #15
 800bdec:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bdee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdf0:	085b      	lsrs	r3, r3, #1
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	f003 0307 	and.w	r3, r3, #7
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800be00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800be06:	60da      	str	r2, [r3, #12]
 800be08:	e03e      	b.n	800be88 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800be0a:	2301      	movs	r3, #1
 800be0c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800be10:	e03a      	b.n	800be88 <UART_SetConfig+0x2cc>
 800be12:	bf00      	nop
 800be14:	cfff69f3 	.word	0xcfff69f3
 800be18:	44002400 	.word	0x44002400
 800be1c:	40013800 	.word	0x40013800
 800be20:	40004400 	.word	0x40004400
 800be24:	40004800 	.word	0x40004800
 800be28:	080106f8 	.word	0x080106f8
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800be2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be2e:	2200      	movs	r2, #0
 800be30:	469a      	mov	sl, r3
 800be32:	4693      	mov	fp, r2
 800be34:	4650      	mov	r0, sl
 800be36:	4659      	mov	r1, fp
 800be38:	f7fd fa0a 	bl	8009250 <HAL_RCCEx_GetPeriphCLKFreq>
 800be3c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800be3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be40:	2b00      	cmp	r3, #0
 800be42:	d021      	beq.n	800be88 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be48:	4a1a      	ldr	r2, [pc, #104]	@ (800beb4 <UART_SetConfig+0x2f8>)
 800be4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be4e:	461a      	mov	r2, r3
 800be50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be52:	fbb3 f2f2 	udiv	r2, r3, r2
 800be56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	085b      	lsrs	r3, r3, #1
 800be5c:	441a      	add	r2, r3
 800be5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	fbb2 f3f3 	udiv	r3, r2, r3
 800be66:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be6a:	2b0f      	cmp	r3, #15
 800be6c:	d909      	bls.n	800be82 <UART_SetConfig+0x2c6>
 800be6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be74:	d205      	bcs.n	800be82 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be78:	b29a      	uxth	r2, r3
 800be7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	60da      	str	r2, [r3, #12]
 800be80:	e002      	b.n	800be88 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be8a:	2201      	movs	r2, #1
 800be8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800be90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be92:	2201      	movs	r2, #1
 800be94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be9a:	2200      	movs	r2, #0
 800be9c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800be9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bea0:	2200      	movs	r2, #0
 800bea2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bea4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3750      	adds	r7, #80	@ 0x50
 800beac:	46bd      	mov	sp, r7
 800beae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800beb2:	bf00      	nop
 800beb4:	080106f8 	.word	0x080106f8

0800beb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bec4:	f003 0308 	and.w	r3, r3, #8
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00a      	beq.n	800bee2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	430a      	orrs	r2, r1
 800bee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bee6:	f003 0301 	and.w	r3, r3, #1
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00a      	beq.n	800bf04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	430a      	orrs	r2, r1
 800bf02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf08:	f003 0302 	and.w	r3, r3, #2
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d00a      	beq.n	800bf26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	430a      	orrs	r2, r1
 800bf24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf2a:	f003 0304 	and.w	r3, r3, #4
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00a      	beq.n	800bf48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	430a      	orrs	r2, r1
 800bf46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf4c:	f003 0310 	and.w	r3, r3, #16
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00a      	beq.n	800bf6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	430a      	orrs	r2, r1
 800bf68:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf6e:	f003 0320 	and.w	r3, r3, #32
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00a      	beq.n	800bf8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	430a      	orrs	r2, r1
 800bf8a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d01a      	beq.n	800bfce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	430a      	orrs	r2, r1
 800bfac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bfb6:	d10a      	bne.n	800bfce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	430a      	orrs	r2, r1
 800bfcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d00a      	beq.n	800bff0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	430a      	orrs	r2, r1
 800bfee:	605a      	str	r2, [r3, #4]
  }
}
 800bff0:	bf00      	nop
 800bff2:	370c      	adds	r7, #12
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b098      	sub	sp, #96	@ 0x60
 800c000:	af02      	add	r7, sp, #8
 800c002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c00c:	f7f8 f8f8 	bl	8004200 <HAL_GetTick>
 800c010:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f003 0308 	and.w	r3, r3, #8
 800c01c:	2b08      	cmp	r3, #8
 800c01e:	d12f      	bne.n	800c080 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c020:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c024:	9300      	str	r3, [sp, #0]
 800c026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c028:	2200      	movs	r2, #0
 800c02a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 f88e 	bl	800c150 <UART_WaitOnFlagUntilTimeout>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d022      	beq.n	800c080 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c042:	e853 3f00 	ldrex	r3, [r3]
 800c046:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c04a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c04e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	461a      	mov	r2, r3
 800c056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c058:	647b      	str	r3, [r7, #68]	@ 0x44
 800c05a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c05c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c05e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c060:	e841 2300 	strex	r3, r2, [r1]
 800c064:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d1e6      	bne.n	800c03a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2220      	movs	r2, #32
 800c070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2200      	movs	r2, #0
 800c078:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c07c:	2303      	movs	r3, #3
 800c07e:	e063      	b.n	800c148 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f003 0304 	and.w	r3, r3, #4
 800c08a:	2b04      	cmp	r3, #4
 800c08c:	d149      	bne.n	800c122 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c08e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c096:	2200      	movs	r2, #0
 800c098:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 f857 	bl	800c150 <UART_WaitOnFlagUntilTimeout>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d03c      	beq.n	800c122 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b0:	e853 3f00 	ldrex	r3, [r3]
 800c0b4:	623b      	str	r3, [r7, #32]
   return(result);
 800c0b6:	6a3b      	ldr	r3, [r7, #32]
 800c0b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c0cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0ce:	e841 2300 	strex	r3, r2, [r1]
 800c0d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1e6      	bne.n	800c0a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	3308      	adds	r3, #8
 800c0e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	e853 3f00 	ldrex	r3, [r3]
 800c0e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f023 0301 	bic.w	r3, r3, #1
 800c0f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	3308      	adds	r3, #8
 800c0f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0fa:	61fa      	str	r2, [r7, #28]
 800c0fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fe:	69b9      	ldr	r1, [r7, #24]
 800c100:	69fa      	ldr	r2, [r7, #28]
 800c102:	e841 2300 	strex	r3, r2, [r1]
 800c106:	617b      	str	r3, [r7, #20]
   return(result);
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1e5      	bne.n	800c0da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2220      	movs	r2, #32
 800c112:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c11e:	2303      	movs	r3, #3
 800c120:	e012      	b.n	800c148 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2220      	movs	r2, #32
 800c126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2220      	movs	r2, #32
 800c12e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2200      	movs	r2, #0
 800c142:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3758      	adds	r7, #88	@ 0x58
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	603b      	str	r3, [r7, #0]
 800c15c:	4613      	mov	r3, r2
 800c15e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c160:	e04f      	b.n	800c202 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c168:	d04b      	beq.n	800c202 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c16a:	f7f8 f849 	bl	8004200 <HAL_GetTick>
 800c16e:	4602      	mov	r2, r0
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	1ad3      	subs	r3, r2, r3
 800c174:	69ba      	ldr	r2, [r7, #24]
 800c176:	429a      	cmp	r2, r3
 800c178:	d302      	bcc.n	800c180 <UART_WaitOnFlagUntilTimeout+0x30>
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d101      	bne.n	800c184 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c180:	2303      	movs	r3, #3
 800c182:	e04e      	b.n	800c222 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f003 0304 	and.w	r3, r3, #4
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d037      	beq.n	800c202 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	2b80      	cmp	r3, #128	@ 0x80
 800c196:	d034      	beq.n	800c202 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	2b40      	cmp	r3, #64	@ 0x40
 800c19c:	d031      	beq.n	800c202 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	69db      	ldr	r3, [r3, #28]
 800c1a4:	f003 0308 	and.w	r3, r3, #8
 800c1a8:	2b08      	cmp	r3, #8
 800c1aa:	d110      	bne.n	800c1ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2208      	movs	r2, #8
 800c1b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f000 f838 	bl	800c22a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2208      	movs	r2, #8
 800c1be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e029      	b.n	800c222 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	69db      	ldr	r3, [r3, #28]
 800c1d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c1d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1dc:	d111      	bne.n	800c202 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c1e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1e8:	68f8      	ldr	r0, [r7, #12]
 800c1ea:	f000 f81e 	bl	800c22a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2220      	movs	r2, #32
 800c1f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c1fe:	2303      	movs	r3, #3
 800c200:	e00f      	b.n	800c222 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	69da      	ldr	r2, [r3, #28]
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	4013      	ands	r3, r2
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	429a      	cmp	r2, r3
 800c210:	bf0c      	ite	eq
 800c212:	2301      	moveq	r3, #1
 800c214:	2300      	movne	r3, #0
 800c216:	b2db      	uxtb	r3, r3
 800c218:	461a      	mov	r2, r3
 800c21a:	79fb      	ldrb	r3, [r7, #7]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d0a0      	beq.n	800c162 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c220:	2300      	movs	r3, #0
}
 800c222:	4618      	mov	r0, r3
 800c224:	3710      	adds	r7, #16
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}

0800c22a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c22a:	b480      	push	{r7}
 800c22c:	b095      	sub	sp, #84	@ 0x54
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c23a:	e853 3f00 	ldrex	r3, [r3]
 800c23e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c242:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	461a      	mov	r2, r3
 800c24e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c250:	643b      	str	r3, [r7, #64]	@ 0x40
 800c252:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c254:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c256:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c258:	e841 2300 	strex	r3, r2, [r1]
 800c25c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c260:	2b00      	cmp	r3, #0
 800c262:	d1e6      	bne.n	800c232 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	3308      	adds	r3, #8
 800c26a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26c:	6a3b      	ldr	r3, [r7, #32]
 800c26e:	e853 3f00 	ldrex	r3, [r3]
 800c272:	61fb      	str	r3, [r7, #28]
   return(result);
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c27a:	f023 0301 	bic.w	r3, r3, #1
 800c27e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	3308      	adds	r3, #8
 800c286:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c288:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c28a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c28e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c290:	e841 2300 	strex	r3, r2, [r1]
 800c294:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1e3      	bne.n	800c264 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d118      	bne.n	800c2d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	e853 3f00 	ldrex	r3, [r3]
 800c2b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	f023 0310 	bic.w	r3, r3, #16
 800c2b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	461a      	mov	r2, r3
 800c2c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2c2:	61bb      	str	r3, [r7, #24]
 800c2c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c6:	6979      	ldr	r1, [r7, #20]
 800c2c8:	69ba      	ldr	r2, [r7, #24]
 800c2ca:	e841 2300 	strex	r3, r2, [r1]
 800c2ce:	613b      	str	r3, [r7, #16]
   return(result);
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d1e6      	bne.n	800c2a4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2220      	movs	r2, #32
 800c2da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c2ea:	bf00      	nop
 800c2ec:	3754      	adds	r7, #84	@ 0x54
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr

0800c2f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c2f6:	b480      	push	{r7}
 800c2f8:	b085      	sub	sp, #20
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c304:	2b01      	cmp	r3, #1
 800c306:	d101      	bne.n	800c30c <HAL_UARTEx_DisableFifoMode+0x16>
 800c308:	2302      	movs	r3, #2
 800c30a:	e027      	b.n	800c35c <HAL_UARTEx_DisableFifoMode+0x66>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2224      	movs	r2, #36	@ 0x24
 800c318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f022 0201 	bic.w	r2, r2, #1
 800c332:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c33a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2200      	movs	r2, #0
 800c340:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2220      	movs	r2, #32
 800c34e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2200      	movs	r2, #0
 800c356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3714      	adds	r7, #20
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d101      	bne.n	800c380 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c37c:	2302      	movs	r3, #2
 800c37e:	e02d      	b.n	800c3dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2201      	movs	r2, #1
 800c384:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2224      	movs	r2, #36	@ 0x24
 800c38c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	681a      	ldr	r2, [r3, #0]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f022 0201 	bic.w	r2, r2, #1
 800c3a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	689b      	ldr	r3, [r3, #8]
 800c3ae:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	683a      	ldr	r2, [r7, #0]
 800c3b8:	430a      	orrs	r2, r1
 800c3ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 f84f 	bl	800c460 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	68fa      	ldr	r2, [r7, #12]
 800c3c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2220      	movs	r2, #32
 800c3ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3da:	2300      	movs	r3, #0
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d101      	bne.n	800c3fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	e02d      	b.n	800c458 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2201      	movs	r2, #1
 800c400:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2224      	movs	r2, #36	@ 0x24
 800c408:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f022 0201 	bic.w	r2, r2, #1
 800c422:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	683a      	ldr	r2, [r7, #0]
 800c434:	430a      	orrs	r2, r1
 800c436:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 f811 	bl	800c460 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	68fa      	ldr	r2, [r7, #12]
 800c444:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2220      	movs	r2, #32
 800c44a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c456:	2300      	movs	r3, #0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c460:	b480      	push	{r7}
 800c462:	b085      	sub	sp, #20
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d108      	bne.n	800c482 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2201      	movs	r2, #1
 800c474:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c480:	e031      	b.n	800c4e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c482:	2308      	movs	r3, #8
 800c484:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c486:	2308      	movs	r3, #8
 800c488:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	0e5b      	lsrs	r3, r3, #25
 800c492:	b2db      	uxtb	r3, r3
 800c494:	f003 0307 	and.w	r3, r3, #7
 800c498:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	0f5b      	lsrs	r3, r3, #29
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	f003 0307 	and.w	r3, r3, #7
 800c4a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4aa:	7bbb      	ldrb	r3, [r7, #14]
 800c4ac:	7b3a      	ldrb	r2, [r7, #12]
 800c4ae:	4911      	ldr	r1, [pc, #68]	@ (800c4f4 <UARTEx_SetNbDataToProcess+0x94>)
 800c4b0:	5c8a      	ldrb	r2, [r1, r2]
 800c4b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c4b6:	7b3a      	ldrb	r2, [r7, #12]
 800c4b8:	490f      	ldr	r1, [pc, #60]	@ (800c4f8 <UARTEx_SetNbDataToProcess+0x98>)
 800c4ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4c0:	b29a      	uxth	r2, r3
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4c8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ca:	7b7a      	ldrb	r2, [r7, #13]
 800c4cc:	4909      	ldr	r1, [pc, #36]	@ (800c4f4 <UARTEx_SetNbDataToProcess+0x94>)
 800c4ce:	5c8a      	ldrb	r2, [r1, r2]
 800c4d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c4d4:	7b7a      	ldrb	r2, [r7, #13]
 800c4d6:	4908      	ldr	r1, [pc, #32]	@ (800c4f8 <UARTEx_SetNbDataToProcess+0x98>)
 800c4d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4da:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4de:	b29a      	uxth	r2, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c4e6:	bf00      	nop
 800c4e8:	3714      	adds	r7, #20
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	08010710 	.word	0x08010710
 800c4f8:	08010718 	.word	0x08010718

0800c4fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c508:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c514:	f043 0201 	orr.w	r2, r3, #1
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	370c      	adds	r7, #12
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr

0800c52a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800c52a:	b084      	sub	sp, #16
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	f107 001c 	add.w	r0, r7, #28
 800c538:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d101      	bne.n	800c546 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800c542:	2301      	movs	r3, #1
 800c544:	e008      	b.n	800c558 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f7ff ffd8 	bl	800c4fc <USB_CoreReset>
 800c54c:	4603      	mov	r3, r0
 800c54e:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2200      	movs	r2, #0
 800c554:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800c556:	7bfb      	ldrb	r3, [r7, #15]
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3710      	adds	r7, #16
 800c55c:	46bd      	mov	sp, r7
 800c55e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c562:	b004      	add	sp, #16
 800c564:	4770      	bx	lr

0800c566 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800c566:	b480      	push	{r7}
 800c568:	b085      	sub	sp, #20
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c56e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c572:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	43db      	mvns	r3, r3
 800c57c:	401a      	ands	r2, r3
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c582:	2300      	movs	r3, #0
}
 800c584:	4618      	mov	r0, r3
 800c586:	3714      	adds	r7, #20
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr

0800c590 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	460b      	mov	r3, r1
 800c59a:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800c59c:	78fb      	ldrb	r3, [r7, #3]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d106      	bne.n	800c5b0 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	641a      	str	r2, [r3, #64]	@ 0x40
 800c5ae:	e00b      	b.n	800c5c8 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800c5b0:	78fb      	ldrb	r3, [r7, #3]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d106      	bne.n	800c5c4 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5ba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	641a      	str	r2, [r3, #64]	@ 0x40
 800c5c2:	e001      	b.n	800c5c8 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	e000      	b.n	800c5ca <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	370c      	adds	r7, #12
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr

0800c5d6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	f107 001c 	add.w	r0, r7, #28
 800c5e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5f2:	f023 0201 	bic.w	r2, r3, #1
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f7ff ffc7 	bl	800c590 <USB_SetCurrentMode>
 800c602:	4603      	mov	r3, r0
 800c604:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2200      	movs	r2, #0
 800c60a:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800c60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3710      	adds	r7, #16
 800c612:	46bd      	mov	sp, r7
 800c614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c618:	b004      	add	sp, #16
 800c61a:	4770      	bx	lr

0800c61c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c628:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c630:	2300      	movs	r3, #0
}
 800c632:	4618      	mov	r0, r3
 800c634:	370c      	adds	r7, #12
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr

0800c63e <__cvt>:
 800c63e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c642:	ec57 6b10 	vmov	r6, r7, d0
 800c646:	2f00      	cmp	r7, #0
 800c648:	460c      	mov	r4, r1
 800c64a:	4619      	mov	r1, r3
 800c64c:	463b      	mov	r3, r7
 800c64e:	bfb4      	ite	lt
 800c650:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c654:	2300      	movge	r3, #0
 800c656:	4691      	mov	r9, r2
 800c658:	bfbf      	itttt	lt
 800c65a:	4632      	movlt	r2, r6
 800c65c:	461f      	movlt	r7, r3
 800c65e:	232d      	movlt	r3, #45	@ 0x2d
 800c660:	4616      	movlt	r6, r2
 800c662:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c666:	700b      	strb	r3, [r1, #0]
 800c668:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c66a:	f023 0820 	bic.w	r8, r3, #32
 800c66e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c672:	d005      	beq.n	800c680 <__cvt+0x42>
 800c674:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c678:	d100      	bne.n	800c67c <__cvt+0x3e>
 800c67a:	3401      	adds	r4, #1
 800c67c:	2102      	movs	r1, #2
 800c67e:	e000      	b.n	800c682 <__cvt+0x44>
 800c680:	2103      	movs	r1, #3
 800c682:	ab03      	add	r3, sp, #12
 800c684:	4622      	mov	r2, r4
 800c686:	9301      	str	r3, [sp, #4]
 800c688:	ab02      	add	r3, sp, #8
 800c68a:	ec47 6b10 	vmov	d0, r6, r7
 800c68e:	9300      	str	r3, [sp, #0]
 800c690:	4653      	mov	r3, sl
 800c692:	f000 fe7d 	bl	800d390 <_dtoa_r>
 800c696:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c69a:	4605      	mov	r5, r0
 800c69c:	d119      	bne.n	800c6d2 <__cvt+0x94>
 800c69e:	f019 0f01 	tst.w	r9, #1
 800c6a2:	d00e      	beq.n	800c6c2 <__cvt+0x84>
 800c6a4:	eb00 0904 	add.w	r9, r0, r4
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	4630      	mov	r0, r6
 800c6ae:	4639      	mov	r1, r7
 800c6b0:	f7f4 fa1e 	bl	8000af0 <__aeabi_dcmpeq>
 800c6b4:	b108      	cbz	r0, 800c6ba <__cvt+0x7c>
 800c6b6:	f8cd 900c 	str.w	r9, [sp, #12]
 800c6ba:	2230      	movs	r2, #48	@ 0x30
 800c6bc:	9b03      	ldr	r3, [sp, #12]
 800c6be:	454b      	cmp	r3, r9
 800c6c0:	d31e      	bcc.n	800c700 <__cvt+0xc2>
 800c6c2:	9b03      	ldr	r3, [sp, #12]
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6c8:	1b5b      	subs	r3, r3, r5
 800c6ca:	6013      	str	r3, [r2, #0]
 800c6cc:	b004      	add	sp, #16
 800c6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6d2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c6d6:	eb00 0904 	add.w	r9, r0, r4
 800c6da:	d1e5      	bne.n	800c6a8 <__cvt+0x6a>
 800c6dc:	7803      	ldrb	r3, [r0, #0]
 800c6de:	2b30      	cmp	r3, #48	@ 0x30
 800c6e0:	d10a      	bne.n	800c6f8 <__cvt+0xba>
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	4639      	mov	r1, r7
 800c6ea:	f7f4 fa01 	bl	8000af0 <__aeabi_dcmpeq>
 800c6ee:	b918      	cbnz	r0, 800c6f8 <__cvt+0xba>
 800c6f0:	f1c4 0401 	rsb	r4, r4, #1
 800c6f4:	f8ca 4000 	str.w	r4, [sl]
 800c6f8:	f8da 3000 	ldr.w	r3, [sl]
 800c6fc:	4499      	add	r9, r3
 800c6fe:	e7d3      	b.n	800c6a8 <__cvt+0x6a>
 800c700:	1c59      	adds	r1, r3, #1
 800c702:	9103      	str	r1, [sp, #12]
 800c704:	701a      	strb	r2, [r3, #0]
 800c706:	e7d9      	b.n	800c6bc <__cvt+0x7e>

0800c708 <__exponent>:
 800c708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c70a:	2900      	cmp	r1, #0
 800c70c:	7002      	strb	r2, [r0, #0]
 800c70e:	bfba      	itte	lt
 800c710:	4249      	neglt	r1, r1
 800c712:	232d      	movlt	r3, #45	@ 0x2d
 800c714:	232b      	movge	r3, #43	@ 0x2b
 800c716:	2909      	cmp	r1, #9
 800c718:	7043      	strb	r3, [r0, #1]
 800c71a:	dd28      	ble.n	800c76e <__exponent+0x66>
 800c71c:	f10d 0307 	add.w	r3, sp, #7
 800c720:	270a      	movs	r7, #10
 800c722:	461d      	mov	r5, r3
 800c724:	461a      	mov	r2, r3
 800c726:	3b01      	subs	r3, #1
 800c728:	fbb1 f6f7 	udiv	r6, r1, r7
 800c72c:	fb07 1416 	mls	r4, r7, r6, r1
 800c730:	3430      	adds	r4, #48	@ 0x30
 800c732:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c736:	460c      	mov	r4, r1
 800c738:	4631      	mov	r1, r6
 800c73a:	2c63      	cmp	r4, #99	@ 0x63
 800c73c:	dcf2      	bgt.n	800c724 <__exponent+0x1c>
 800c73e:	3130      	adds	r1, #48	@ 0x30
 800c740:	1e94      	subs	r4, r2, #2
 800c742:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c746:	1c41      	adds	r1, r0, #1
 800c748:	4623      	mov	r3, r4
 800c74a:	42ab      	cmp	r3, r5
 800c74c:	d30a      	bcc.n	800c764 <__exponent+0x5c>
 800c74e:	f10d 0309 	add.w	r3, sp, #9
 800c752:	1a9b      	subs	r3, r3, r2
 800c754:	42ac      	cmp	r4, r5
 800c756:	bf88      	it	hi
 800c758:	2300      	movhi	r3, #0
 800c75a:	3302      	adds	r3, #2
 800c75c:	4403      	add	r3, r0
 800c75e:	1a18      	subs	r0, r3, r0
 800c760:	b003      	add	sp, #12
 800c762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c764:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c768:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c76c:	e7ed      	b.n	800c74a <__exponent+0x42>
 800c76e:	2330      	movs	r3, #48	@ 0x30
 800c770:	3130      	adds	r1, #48	@ 0x30
 800c772:	7083      	strb	r3, [r0, #2]
 800c774:	1d03      	adds	r3, r0, #4
 800c776:	70c1      	strb	r1, [r0, #3]
 800c778:	e7f1      	b.n	800c75e <__exponent+0x56>
	...

0800c77c <_printf_float>:
 800c77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c780:	b08d      	sub	sp, #52	@ 0x34
 800c782:	460c      	mov	r4, r1
 800c784:	4616      	mov	r6, r2
 800c786:	461f      	mov	r7, r3
 800c788:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c78c:	4605      	mov	r5, r0
 800c78e:	f000 fcdf 	bl	800d150 <_localeconv_r>
 800c792:	6803      	ldr	r3, [r0, #0]
 800c794:	4618      	mov	r0, r3
 800c796:	9304      	str	r3, [sp, #16]
 800c798:	f7f3 fd7e 	bl	8000298 <strlen>
 800c79c:	2300      	movs	r3, #0
 800c79e:	9005      	str	r0, [sp, #20]
 800c7a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7a2:	f8d8 3000 	ldr.w	r3, [r8]
 800c7a6:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c7aa:	3307      	adds	r3, #7
 800c7ac:	f8d4 b000 	ldr.w	fp, [r4]
 800c7b0:	f023 0307 	bic.w	r3, r3, #7
 800c7b4:	f103 0208 	add.w	r2, r3, #8
 800c7b8:	f8c8 2000 	str.w	r2, [r8]
 800c7bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c7c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c7c8:	f8cd 8018 	str.w	r8, [sp, #24]
 800c7cc:	9307      	str	r3, [sp, #28]
 800c7ce:	4b9d      	ldr	r3, [pc, #628]	@ (800ca44 <_printf_float+0x2c8>)
 800c7d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7d4:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c7d8:	f7f4 f9bc 	bl	8000b54 <__aeabi_dcmpun>
 800c7dc:	bb70      	cbnz	r0, 800c83c <_printf_float+0xc0>
 800c7de:	f04f 32ff 	mov.w	r2, #4294967295
 800c7e2:	4b98      	ldr	r3, [pc, #608]	@ (800ca44 <_printf_float+0x2c8>)
 800c7e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7e8:	f7f4 f996 	bl	8000b18 <__aeabi_dcmple>
 800c7ec:	bb30      	cbnz	r0, 800c83c <_printf_float+0xc0>
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	4640      	mov	r0, r8
 800c7f4:	4649      	mov	r1, r9
 800c7f6:	f7f4 f985 	bl	8000b04 <__aeabi_dcmplt>
 800c7fa:	b110      	cbz	r0, 800c802 <_printf_float+0x86>
 800c7fc:	232d      	movs	r3, #45	@ 0x2d
 800c7fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c802:	4a91      	ldr	r2, [pc, #580]	@ (800ca48 <_printf_float+0x2cc>)
 800c804:	4b91      	ldr	r3, [pc, #580]	@ (800ca4c <_printf_float+0x2d0>)
 800c806:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c80a:	bf94      	ite	ls
 800c80c:	4690      	movls	r8, r2
 800c80e:	4698      	movhi	r8, r3
 800c810:	2303      	movs	r3, #3
 800c812:	f04f 0900 	mov.w	r9, #0
 800c816:	6123      	str	r3, [r4, #16]
 800c818:	f02b 0304 	bic.w	r3, fp, #4
 800c81c:	6023      	str	r3, [r4, #0]
 800c81e:	4633      	mov	r3, r6
 800c820:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c822:	4621      	mov	r1, r4
 800c824:	4628      	mov	r0, r5
 800c826:	9700      	str	r7, [sp, #0]
 800c828:	f000 f9d2 	bl	800cbd0 <_printf_common>
 800c82c:	3001      	adds	r0, #1
 800c82e:	f040 808d 	bne.w	800c94c <_printf_float+0x1d0>
 800c832:	f04f 30ff 	mov.w	r0, #4294967295
 800c836:	b00d      	add	sp, #52	@ 0x34
 800c838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c83c:	4642      	mov	r2, r8
 800c83e:	464b      	mov	r3, r9
 800c840:	4640      	mov	r0, r8
 800c842:	4649      	mov	r1, r9
 800c844:	f7f4 f986 	bl	8000b54 <__aeabi_dcmpun>
 800c848:	b140      	cbz	r0, 800c85c <_printf_float+0xe0>
 800c84a:	464b      	mov	r3, r9
 800c84c:	4a80      	ldr	r2, [pc, #512]	@ (800ca50 <_printf_float+0x2d4>)
 800c84e:	2b00      	cmp	r3, #0
 800c850:	bfbc      	itt	lt
 800c852:	232d      	movlt	r3, #45	@ 0x2d
 800c854:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c858:	4b7e      	ldr	r3, [pc, #504]	@ (800ca54 <_printf_float+0x2d8>)
 800c85a:	e7d4      	b.n	800c806 <_printf_float+0x8a>
 800c85c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c860:	6863      	ldr	r3, [r4, #4]
 800c862:	9206      	str	r2, [sp, #24]
 800c864:	1c5a      	adds	r2, r3, #1
 800c866:	d13b      	bne.n	800c8e0 <_printf_float+0x164>
 800c868:	2306      	movs	r3, #6
 800c86a:	6063      	str	r3, [r4, #4]
 800c86c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c870:	2300      	movs	r3, #0
 800c872:	4628      	mov	r0, r5
 800c874:	6022      	str	r2, [r4, #0]
 800c876:	9303      	str	r3, [sp, #12]
 800c878:	ab0a      	add	r3, sp, #40	@ 0x28
 800c87a:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c87e:	ab09      	add	r3, sp, #36	@ 0x24
 800c880:	ec49 8b10 	vmov	d0, r8, r9
 800c884:	9300      	str	r3, [sp, #0]
 800c886:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c88a:	6861      	ldr	r1, [r4, #4]
 800c88c:	f7ff fed7 	bl	800c63e <__cvt>
 800c890:	9b06      	ldr	r3, [sp, #24]
 800c892:	4680      	mov	r8, r0
 800c894:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c896:	2b47      	cmp	r3, #71	@ 0x47
 800c898:	d129      	bne.n	800c8ee <_printf_float+0x172>
 800c89a:	1cc8      	adds	r0, r1, #3
 800c89c:	db02      	blt.n	800c8a4 <_printf_float+0x128>
 800c89e:	6863      	ldr	r3, [r4, #4]
 800c8a0:	4299      	cmp	r1, r3
 800c8a2:	dd41      	ble.n	800c928 <_printf_float+0x1ac>
 800c8a4:	f1aa 0a02 	sub.w	sl, sl, #2
 800c8a8:	fa5f fa8a 	uxtb.w	sl, sl
 800c8ac:	3901      	subs	r1, #1
 800c8ae:	4652      	mov	r2, sl
 800c8b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c8b4:	9109      	str	r1, [sp, #36]	@ 0x24
 800c8b6:	f7ff ff27 	bl	800c708 <__exponent>
 800c8ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c8bc:	4681      	mov	r9, r0
 800c8be:	1813      	adds	r3, r2, r0
 800c8c0:	2a01      	cmp	r2, #1
 800c8c2:	6123      	str	r3, [r4, #16]
 800c8c4:	dc02      	bgt.n	800c8cc <_printf_float+0x150>
 800c8c6:	6822      	ldr	r2, [r4, #0]
 800c8c8:	07d2      	lsls	r2, r2, #31
 800c8ca:	d501      	bpl.n	800c8d0 <_printf_float+0x154>
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	6123      	str	r3, [r4, #16]
 800c8d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d0a2      	beq.n	800c81e <_printf_float+0xa2>
 800c8d8:	232d      	movs	r3, #45	@ 0x2d
 800c8da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c8de:	e79e      	b.n	800c81e <_printf_float+0xa2>
 800c8e0:	9a06      	ldr	r2, [sp, #24]
 800c8e2:	2a47      	cmp	r2, #71	@ 0x47
 800c8e4:	d1c2      	bne.n	800c86c <_printf_float+0xf0>
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1c0      	bne.n	800c86c <_printf_float+0xf0>
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e7bd      	b.n	800c86a <_printf_float+0xee>
 800c8ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c8f2:	d9db      	bls.n	800c8ac <_printf_float+0x130>
 800c8f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c8f8:	d118      	bne.n	800c92c <_printf_float+0x1b0>
 800c8fa:	2900      	cmp	r1, #0
 800c8fc:	6863      	ldr	r3, [r4, #4]
 800c8fe:	dd0b      	ble.n	800c918 <_printf_float+0x19c>
 800c900:	6121      	str	r1, [r4, #16]
 800c902:	b913      	cbnz	r3, 800c90a <_printf_float+0x18e>
 800c904:	6822      	ldr	r2, [r4, #0]
 800c906:	07d0      	lsls	r0, r2, #31
 800c908:	d502      	bpl.n	800c910 <_printf_float+0x194>
 800c90a:	3301      	adds	r3, #1
 800c90c:	440b      	add	r3, r1
 800c90e:	6123      	str	r3, [r4, #16]
 800c910:	f04f 0900 	mov.w	r9, #0
 800c914:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c916:	e7db      	b.n	800c8d0 <_printf_float+0x154>
 800c918:	b913      	cbnz	r3, 800c920 <_printf_float+0x1a4>
 800c91a:	6822      	ldr	r2, [r4, #0]
 800c91c:	07d2      	lsls	r2, r2, #31
 800c91e:	d501      	bpl.n	800c924 <_printf_float+0x1a8>
 800c920:	3302      	adds	r3, #2
 800c922:	e7f4      	b.n	800c90e <_printf_float+0x192>
 800c924:	2301      	movs	r3, #1
 800c926:	e7f2      	b.n	800c90e <_printf_float+0x192>
 800c928:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c92c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c92e:	4299      	cmp	r1, r3
 800c930:	db05      	blt.n	800c93e <_printf_float+0x1c2>
 800c932:	6823      	ldr	r3, [r4, #0]
 800c934:	6121      	str	r1, [r4, #16]
 800c936:	07d8      	lsls	r0, r3, #31
 800c938:	d5ea      	bpl.n	800c910 <_printf_float+0x194>
 800c93a:	1c4b      	adds	r3, r1, #1
 800c93c:	e7e7      	b.n	800c90e <_printf_float+0x192>
 800c93e:	2900      	cmp	r1, #0
 800c940:	bfd4      	ite	le
 800c942:	f1c1 0202 	rsble	r2, r1, #2
 800c946:	2201      	movgt	r2, #1
 800c948:	4413      	add	r3, r2
 800c94a:	e7e0      	b.n	800c90e <_printf_float+0x192>
 800c94c:	6823      	ldr	r3, [r4, #0]
 800c94e:	055a      	lsls	r2, r3, #21
 800c950:	d407      	bmi.n	800c962 <_printf_float+0x1e6>
 800c952:	6923      	ldr	r3, [r4, #16]
 800c954:	4642      	mov	r2, r8
 800c956:	4631      	mov	r1, r6
 800c958:	4628      	mov	r0, r5
 800c95a:	47b8      	blx	r7
 800c95c:	3001      	adds	r0, #1
 800c95e:	d12b      	bne.n	800c9b8 <_printf_float+0x23c>
 800c960:	e767      	b.n	800c832 <_printf_float+0xb6>
 800c962:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c966:	f240 80dd 	bls.w	800cb24 <_printf_float+0x3a8>
 800c96a:	2200      	movs	r2, #0
 800c96c:	2300      	movs	r3, #0
 800c96e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c972:	f7f4 f8bd 	bl	8000af0 <__aeabi_dcmpeq>
 800c976:	2800      	cmp	r0, #0
 800c978:	d033      	beq.n	800c9e2 <_printf_float+0x266>
 800c97a:	2301      	movs	r3, #1
 800c97c:	4a36      	ldr	r2, [pc, #216]	@ (800ca58 <_printf_float+0x2dc>)
 800c97e:	4631      	mov	r1, r6
 800c980:	4628      	mov	r0, r5
 800c982:	47b8      	blx	r7
 800c984:	3001      	adds	r0, #1
 800c986:	f43f af54 	beq.w	800c832 <_printf_float+0xb6>
 800c98a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c98e:	4543      	cmp	r3, r8
 800c990:	db02      	blt.n	800c998 <_printf_float+0x21c>
 800c992:	6823      	ldr	r3, [r4, #0]
 800c994:	07d8      	lsls	r0, r3, #31
 800c996:	d50f      	bpl.n	800c9b8 <_printf_float+0x23c>
 800c998:	4631      	mov	r1, r6
 800c99a:	4628      	mov	r0, r5
 800c99c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9a0:	47b8      	blx	r7
 800c9a2:	3001      	adds	r0, #1
 800c9a4:	f43f af45 	beq.w	800c832 <_printf_float+0xb6>
 800c9a8:	f04f 0900 	mov.w	r9, #0
 800c9ac:	f108 38ff 	add.w	r8, r8, #4294967295
 800c9b0:	f104 0a1a 	add.w	sl, r4, #26
 800c9b4:	45c8      	cmp	r8, r9
 800c9b6:	dc09      	bgt.n	800c9cc <_printf_float+0x250>
 800c9b8:	6823      	ldr	r3, [r4, #0]
 800c9ba:	079b      	lsls	r3, r3, #30
 800c9bc:	f100 8103 	bmi.w	800cbc6 <_printf_float+0x44a>
 800c9c0:	68e0      	ldr	r0, [r4, #12]
 800c9c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9c4:	4298      	cmp	r0, r3
 800c9c6:	bfb8      	it	lt
 800c9c8:	4618      	movlt	r0, r3
 800c9ca:	e734      	b.n	800c836 <_printf_float+0xba>
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	4652      	mov	r2, sl
 800c9d0:	4631      	mov	r1, r6
 800c9d2:	4628      	mov	r0, r5
 800c9d4:	47b8      	blx	r7
 800c9d6:	3001      	adds	r0, #1
 800c9d8:	f43f af2b 	beq.w	800c832 <_printf_float+0xb6>
 800c9dc:	f109 0901 	add.w	r9, r9, #1
 800c9e0:	e7e8      	b.n	800c9b4 <_printf_float+0x238>
 800c9e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	dc39      	bgt.n	800ca5c <_printf_float+0x2e0>
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	4a1b      	ldr	r2, [pc, #108]	@ (800ca58 <_printf_float+0x2dc>)
 800c9ec:	4631      	mov	r1, r6
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	47b8      	blx	r7
 800c9f2:	3001      	adds	r0, #1
 800c9f4:	f43f af1d 	beq.w	800c832 <_printf_float+0xb6>
 800c9f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c9fc:	ea59 0303 	orrs.w	r3, r9, r3
 800ca00:	d102      	bne.n	800ca08 <_printf_float+0x28c>
 800ca02:	6823      	ldr	r3, [r4, #0]
 800ca04:	07d9      	lsls	r1, r3, #31
 800ca06:	d5d7      	bpl.n	800c9b8 <_printf_float+0x23c>
 800ca08:	4631      	mov	r1, r6
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca10:	47b8      	blx	r7
 800ca12:	3001      	adds	r0, #1
 800ca14:	f43f af0d 	beq.w	800c832 <_printf_float+0xb6>
 800ca18:	f04f 0a00 	mov.w	sl, #0
 800ca1c:	f104 0b1a 	add.w	fp, r4, #26
 800ca20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca22:	425b      	negs	r3, r3
 800ca24:	4553      	cmp	r3, sl
 800ca26:	dc01      	bgt.n	800ca2c <_printf_float+0x2b0>
 800ca28:	464b      	mov	r3, r9
 800ca2a:	e793      	b.n	800c954 <_printf_float+0x1d8>
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	465a      	mov	r2, fp
 800ca30:	4631      	mov	r1, r6
 800ca32:	4628      	mov	r0, r5
 800ca34:	47b8      	blx	r7
 800ca36:	3001      	adds	r0, #1
 800ca38:	f43f aefb 	beq.w	800c832 <_printf_float+0xb6>
 800ca3c:	f10a 0a01 	add.w	sl, sl, #1
 800ca40:	e7ee      	b.n	800ca20 <_printf_float+0x2a4>
 800ca42:	bf00      	nop
 800ca44:	7fefffff 	.word	0x7fefffff
 800ca48:	08010720 	.word	0x08010720
 800ca4c:	08010724 	.word	0x08010724
 800ca50:	08010728 	.word	0x08010728
 800ca54:	0801072c 	.word	0x0801072c
 800ca58:	08010730 	.word	0x08010730
 800ca5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ca5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ca62:	4553      	cmp	r3, sl
 800ca64:	bfa8      	it	ge
 800ca66:	4653      	movge	r3, sl
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	4699      	mov	r9, r3
 800ca6c:	dc36      	bgt.n	800cadc <_printf_float+0x360>
 800ca6e:	f04f 0b00 	mov.w	fp, #0
 800ca72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca76:	f104 021a 	add.w	r2, r4, #26
 800ca7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ca7c:	9306      	str	r3, [sp, #24]
 800ca7e:	eba3 0309 	sub.w	r3, r3, r9
 800ca82:	455b      	cmp	r3, fp
 800ca84:	dc31      	bgt.n	800caea <_printf_float+0x36e>
 800ca86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca88:	459a      	cmp	sl, r3
 800ca8a:	dc3a      	bgt.n	800cb02 <_printf_float+0x386>
 800ca8c:	6823      	ldr	r3, [r4, #0]
 800ca8e:	07da      	lsls	r2, r3, #31
 800ca90:	d437      	bmi.n	800cb02 <_printf_float+0x386>
 800ca92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca94:	ebaa 0903 	sub.w	r9, sl, r3
 800ca98:	9b06      	ldr	r3, [sp, #24]
 800ca9a:	ebaa 0303 	sub.w	r3, sl, r3
 800ca9e:	4599      	cmp	r9, r3
 800caa0:	bfa8      	it	ge
 800caa2:	4699      	movge	r9, r3
 800caa4:	f1b9 0f00 	cmp.w	r9, #0
 800caa8:	dc33      	bgt.n	800cb12 <_printf_float+0x396>
 800caaa:	f04f 0800 	mov.w	r8, #0
 800caae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cab2:	f104 0b1a 	add.w	fp, r4, #26
 800cab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cab8:	ebaa 0303 	sub.w	r3, sl, r3
 800cabc:	eba3 0309 	sub.w	r3, r3, r9
 800cac0:	4543      	cmp	r3, r8
 800cac2:	f77f af79 	ble.w	800c9b8 <_printf_float+0x23c>
 800cac6:	2301      	movs	r3, #1
 800cac8:	465a      	mov	r2, fp
 800caca:	4631      	mov	r1, r6
 800cacc:	4628      	mov	r0, r5
 800cace:	47b8      	blx	r7
 800cad0:	3001      	adds	r0, #1
 800cad2:	f43f aeae 	beq.w	800c832 <_printf_float+0xb6>
 800cad6:	f108 0801 	add.w	r8, r8, #1
 800cada:	e7ec      	b.n	800cab6 <_printf_float+0x33a>
 800cadc:	4642      	mov	r2, r8
 800cade:	4631      	mov	r1, r6
 800cae0:	4628      	mov	r0, r5
 800cae2:	47b8      	blx	r7
 800cae4:	3001      	adds	r0, #1
 800cae6:	d1c2      	bne.n	800ca6e <_printf_float+0x2f2>
 800cae8:	e6a3      	b.n	800c832 <_printf_float+0xb6>
 800caea:	2301      	movs	r3, #1
 800caec:	4631      	mov	r1, r6
 800caee:	4628      	mov	r0, r5
 800caf0:	9206      	str	r2, [sp, #24]
 800caf2:	47b8      	blx	r7
 800caf4:	3001      	adds	r0, #1
 800caf6:	f43f ae9c 	beq.w	800c832 <_printf_float+0xb6>
 800cafa:	f10b 0b01 	add.w	fp, fp, #1
 800cafe:	9a06      	ldr	r2, [sp, #24]
 800cb00:	e7bb      	b.n	800ca7a <_printf_float+0x2fe>
 800cb02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb06:	4631      	mov	r1, r6
 800cb08:	4628      	mov	r0, r5
 800cb0a:	47b8      	blx	r7
 800cb0c:	3001      	adds	r0, #1
 800cb0e:	d1c0      	bne.n	800ca92 <_printf_float+0x316>
 800cb10:	e68f      	b.n	800c832 <_printf_float+0xb6>
 800cb12:	9a06      	ldr	r2, [sp, #24]
 800cb14:	464b      	mov	r3, r9
 800cb16:	4631      	mov	r1, r6
 800cb18:	4628      	mov	r0, r5
 800cb1a:	4442      	add	r2, r8
 800cb1c:	47b8      	blx	r7
 800cb1e:	3001      	adds	r0, #1
 800cb20:	d1c3      	bne.n	800caaa <_printf_float+0x32e>
 800cb22:	e686      	b.n	800c832 <_printf_float+0xb6>
 800cb24:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cb28:	f1ba 0f01 	cmp.w	sl, #1
 800cb2c:	dc01      	bgt.n	800cb32 <_printf_float+0x3b6>
 800cb2e:	07db      	lsls	r3, r3, #31
 800cb30:	d536      	bpl.n	800cba0 <_printf_float+0x424>
 800cb32:	2301      	movs	r3, #1
 800cb34:	4642      	mov	r2, r8
 800cb36:	4631      	mov	r1, r6
 800cb38:	4628      	mov	r0, r5
 800cb3a:	47b8      	blx	r7
 800cb3c:	3001      	adds	r0, #1
 800cb3e:	f43f ae78 	beq.w	800c832 <_printf_float+0xb6>
 800cb42:	4631      	mov	r1, r6
 800cb44:	4628      	mov	r0, r5
 800cb46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb4a:	47b8      	blx	r7
 800cb4c:	3001      	adds	r0, #1
 800cb4e:	f43f ae70 	beq.w	800c832 <_printf_float+0xb6>
 800cb52:	2200      	movs	r2, #0
 800cb54:	2300      	movs	r3, #0
 800cb56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cb5e:	f7f3 ffc7 	bl	8000af0 <__aeabi_dcmpeq>
 800cb62:	b9c0      	cbnz	r0, 800cb96 <_printf_float+0x41a>
 800cb64:	4653      	mov	r3, sl
 800cb66:	f108 0201 	add.w	r2, r8, #1
 800cb6a:	4631      	mov	r1, r6
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	47b8      	blx	r7
 800cb70:	3001      	adds	r0, #1
 800cb72:	d10c      	bne.n	800cb8e <_printf_float+0x412>
 800cb74:	e65d      	b.n	800c832 <_printf_float+0xb6>
 800cb76:	2301      	movs	r3, #1
 800cb78:	465a      	mov	r2, fp
 800cb7a:	4631      	mov	r1, r6
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	47b8      	blx	r7
 800cb80:	3001      	adds	r0, #1
 800cb82:	f43f ae56 	beq.w	800c832 <_printf_float+0xb6>
 800cb86:	f108 0801 	add.w	r8, r8, #1
 800cb8a:	45d0      	cmp	r8, sl
 800cb8c:	dbf3      	blt.n	800cb76 <_printf_float+0x3fa>
 800cb8e:	464b      	mov	r3, r9
 800cb90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cb94:	e6df      	b.n	800c956 <_printf_float+0x1da>
 800cb96:	f04f 0800 	mov.w	r8, #0
 800cb9a:	f104 0b1a 	add.w	fp, r4, #26
 800cb9e:	e7f4      	b.n	800cb8a <_printf_float+0x40e>
 800cba0:	2301      	movs	r3, #1
 800cba2:	4642      	mov	r2, r8
 800cba4:	e7e1      	b.n	800cb6a <_printf_float+0x3ee>
 800cba6:	2301      	movs	r3, #1
 800cba8:	464a      	mov	r2, r9
 800cbaa:	4631      	mov	r1, r6
 800cbac:	4628      	mov	r0, r5
 800cbae:	47b8      	blx	r7
 800cbb0:	3001      	adds	r0, #1
 800cbb2:	f43f ae3e 	beq.w	800c832 <_printf_float+0xb6>
 800cbb6:	f108 0801 	add.w	r8, r8, #1
 800cbba:	68e3      	ldr	r3, [r4, #12]
 800cbbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cbbe:	1a5b      	subs	r3, r3, r1
 800cbc0:	4543      	cmp	r3, r8
 800cbc2:	dcf0      	bgt.n	800cba6 <_printf_float+0x42a>
 800cbc4:	e6fc      	b.n	800c9c0 <_printf_float+0x244>
 800cbc6:	f04f 0800 	mov.w	r8, #0
 800cbca:	f104 0919 	add.w	r9, r4, #25
 800cbce:	e7f4      	b.n	800cbba <_printf_float+0x43e>

0800cbd0 <_printf_common>:
 800cbd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbd4:	4616      	mov	r6, r2
 800cbd6:	4698      	mov	r8, r3
 800cbd8:	688a      	ldr	r2, [r1, #8]
 800cbda:	4607      	mov	r7, r0
 800cbdc:	690b      	ldr	r3, [r1, #16]
 800cbde:	460c      	mov	r4, r1
 800cbe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	bfb8      	it	lt
 800cbe8:	4613      	movlt	r3, r2
 800cbea:	6033      	str	r3, [r6, #0]
 800cbec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cbf0:	b10a      	cbz	r2, 800cbf6 <_printf_common+0x26>
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	6033      	str	r3, [r6, #0]
 800cbf6:	6823      	ldr	r3, [r4, #0]
 800cbf8:	0699      	lsls	r1, r3, #26
 800cbfa:	bf42      	ittt	mi
 800cbfc:	6833      	ldrmi	r3, [r6, #0]
 800cbfe:	3302      	addmi	r3, #2
 800cc00:	6033      	strmi	r3, [r6, #0]
 800cc02:	6825      	ldr	r5, [r4, #0]
 800cc04:	f015 0506 	ands.w	r5, r5, #6
 800cc08:	d106      	bne.n	800cc18 <_printf_common+0x48>
 800cc0a:	f104 0a19 	add.w	sl, r4, #25
 800cc0e:	68e3      	ldr	r3, [r4, #12]
 800cc10:	6832      	ldr	r2, [r6, #0]
 800cc12:	1a9b      	subs	r3, r3, r2
 800cc14:	42ab      	cmp	r3, r5
 800cc16:	dc2b      	bgt.n	800cc70 <_printf_common+0xa0>
 800cc18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cc1c:	6822      	ldr	r2, [r4, #0]
 800cc1e:	3b00      	subs	r3, #0
 800cc20:	bf18      	it	ne
 800cc22:	2301      	movne	r3, #1
 800cc24:	0692      	lsls	r2, r2, #26
 800cc26:	d430      	bmi.n	800cc8a <_printf_common+0xba>
 800cc28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cc2c:	4641      	mov	r1, r8
 800cc2e:	4638      	mov	r0, r7
 800cc30:	47c8      	blx	r9
 800cc32:	3001      	adds	r0, #1
 800cc34:	d023      	beq.n	800cc7e <_printf_common+0xae>
 800cc36:	6823      	ldr	r3, [r4, #0]
 800cc38:	341a      	adds	r4, #26
 800cc3a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800cc3e:	f003 0306 	and.w	r3, r3, #6
 800cc42:	2b04      	cmp	r3, #4
 800cc44:	bf0a      	itet	eq
 800cc46:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800cc4a:	2500      	movne	r5, #0
 800cc4c:	6833      	ldreq	r3, [r6, #0]
 800cc4e:	f04f 0600 	mov.w	r6, #0
 800cc52:	bf08      	it	eq
 800cc54:	1aed      	subeq	r5, r5, r3
 800cc56:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cc5a:	bf08      	it	eq
 800cc5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc60:	4293      	cmp	r3, r2
 800cc62:	bfc4      	itt	gt
 800cc64:	1a9b      	subgt	r3, r3, r2
 800cc66:	18ed      	addgt	r5, r5, r3
 800cc68:	42b5      	cmp	r5, r6
 800cc6a:	d11a      	bne.n	800cca2 <_printf_common+0xd2>
 800cc6c:	2000      	movs	r0, #0
 800cc6e:	e008      	b.n	800cc82 <_printf_common+0xb2>
 800cc70:	2301      	movs	r3, #1
 800cc72:	4652      	mov	r2, sl
 800cc74:	4641      	mov	r1, r8
 800cc76:	4638      	mov	r0, r7
 800cc78:	47c8      	blx	r9
 800cc7a:	3001      	adds	r0, #1
 800cc7c:	d103      	bne.n	800cc86 <_printf_common+0xb6>
 800cc7e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc86:	3501      	adds	r5, #1
 800cc88:	e7c1      	b.n	800cc0e <_printf_common+0x3e>
 800cc8a:	18e1      	adds	r1, r4, r3
 800cc8c:	1c5a      	adds	r2, r3, #1
 800cc8e:	2030      	movs	r0, #48	@ 0x30
 800cc90:	3302      	adds	r3, #2
 800cc92:	4422      	add	r2, r4
 800cc94:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cc98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cc9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cca0:	e7c2      	b.n	800cc28 <_printf_common+0x58>
 800cca2:	2301      	movs	r3, #1
 800cca4:	4622      	mov	r2, r4
 800cca6:	4641      	mov	r1, r8
 800cca8:	4638      	mov	r0, r7
 800ccaa:	47c8      	blx	r9
 800ccac:	3001      	adds	r0, #1
 800ccae:	d0e6      	beq.n	800cc7e <_printf_common+0xae>
 800ccb0:	3601      	adds	r6, #1
 800ccb2:	e7d9      	b.n	800cc68 <_printf_common+0x98>

0800ccb4 <_printf_i>:
 800ccb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ccb8:	7e0f      	ldrb	r7, [r1, #24]
 800ccba:	4691      	mov	r9, r2
 800ccbc:	4680      	mov	r8, r0
 800ccbe:	460c      	mov	r4, r1
 800ccc0:	2f78      	cmp	r7, #120	@ 0x78
 800ccc2:	469a      	mov	sl, r3
 800ccc4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ccc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ccca:	d807      	bhi.n	800ccdc <_printf_i+0x28>
 800cccc:	2f62      	cmp	r7, #98	@ 0x62
 800ccce:	d80a      	bhi.n	800cce6 <_printf_i+0x32>
 800ccd0:	2f00      	cmp	r7, #0
 800ccd2:	f000 80d2 	beq.w	800ce7a <_printf_i+0x1c6>
 800ccd6:	2f58      	cmp	r7, #88	@ 0x58
 800ccd8:	f000 80b9 	beq.w	800ce4e <_printf_i+0x19a>
 800ccdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cce0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cce4:	e03a      	b.n	800cd5c <_printf_i+0xa8>
 800cce6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ccea:	2b15      	cmp	r3, #21
 800ccec:	d8f6      	bhi.n	800ccdc <_printf_i+0x28>
 800ccee:	a101      	add	r1, pc, #4	@ (adr r1, 800ccf4 <_printf_i+0x40>)
 800ccf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ccf4:	0800cd4d 	.word	0x0800cd4d
 800ccf8:	0800cd61 	.word	0x0800cd61
 800ccfc:	0800ccdd 	.word	0x0800ccdd
 800cd00:	0800ccdd 	.word	0x0800ccdd
 800cd04:	0800ccdd 	.word	0x0800ccdd
 800cd08:	0800ccdd 	.word	0x0800ccdd
 800cd0c:	0800cd61 	.word	0x0800cd61
 800cd10:	0800ccdd 	.word	0x0800ccdd
 800cd14:	0800ccdd 	.word	0x0800ccdd
 800cd18:	0800ccdd 	.word	0x0800ccdd
 800cd1c:	0800ccdd 	.word	0x0800ccdd
 800cd20:	0800ce61 	.word	0x0800ce61
 800cd24:	0800cd8b 	.word	0x0800cd8b
 800cd28:	0800ce1b 	.word	0x0800ce1b
 800cd2c:	0800ccdd 	.word	0x0800ccdd
 800cd30:	0800ccdd 	.word	0x0800ccdd
 800cd34:	0800ce83 	.word	0x0800ce83
 800cd38:	0800ccdd 	.word	0x0800ccdd
 800cd3c:	0800cd8b 	.word	0x0800cd8b
 800cd40:	0800ccdd 	.word	0x0800ccdd
 800cd44:	0800ccdd 	.word	0x0800ccdd
 800cd48:	0800ce23 	.word	0x0800ce23
 800cd4c:	6833      	ldr	r3, [r6, #0]
 800cd4e:	1d1a      	adds	r2, r3, #4
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	6032      	str	r2, [r6, #0]
 800cd54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cd58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e09d      	b.n	800ce9c <_printf_i+0x1e8>
 800cd60:	6833      	ldr	r3, [r6, #0]
 800cd62:	6820      	ldr	r0, [r4, #0]
 800cd64:	1d19      	adds	r1, r3, #4
 800cd66:	6031      	str	r1, [r6, #0]
 800cd68:	0606      	lsls	r6, r0, #24
 800cd6a:	d501      	bpl.n	800cd70 <_printf_i+0xbc>
 800cd6c:	681d      	ldr	r5, [r3, #0]
 800cd6e:	e003      	b.n	800cd78 <_printf_i+0xc4>
 800cd70:	0645      	lsls	r5, r0, #25
 800cd72:	d5fb      	bpl.n	800cd6c <_printf_i+0xb8>
 800cd74:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cd78:	2d00      	cmp	r5, #0
 800cd7a:	da03      	bge.n	800cd84 <_printf_i+0xd0>
 800cd7c:	232d      	movs	r3, #45	@ 0x2d
 800cd7e:	426d      	negs	r5, r5
 800cd80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd84:	4859      	ldr	r0, [pc, #356]	@ (800ceec <_printf_i+0x238>)
 800cd86:	230a      	movs	r3, #10
 800cd88:	e011      	b.n	800cdae <_printf_i+0xfa>
 800cd8a:	6821      	ldr	r1, [r4, #0]
 800cd8c:	6833      	ldr	r3, [r6, #0]
 800cd8e:	0608      	lsls	r0, r1, #24
 800cd90:	f853 5b04 	ldr.w	r5, [r3], #4
 800cd94:	d402      	bmi.n	800cd9c <_printf_i+0xe8>
 800cd96:	0649      	lsls	r1, r1, #25
 800cd98:	bf48      	it	mi
 800cd9a:	b2ad      	uxthmi	r5, r5
 800cd9c:	2f6f      	cmp	r7, #111	@ 0x6f
 800cd9e:	6033      	str	r3, [r6, #0]
 800cda0:	4852      	ldr	r0, [pc, #328]	@ (800ceec <_printf_i+0x238>)
 800cda2:	bf14      	ite	ne
 800cda4:	230a      	movne	r3, #10
 800cda6:	2308      	moveq	r3, #8
 800cda8:	2100      	movs	r1, #0
 800cdaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cdae:	6866      	ldr	r6, [r4, #4]
 800cdb0:	2e00      	cmp	r6, #0
 800cdb2:	60a6      	str	r6, [r4, #8]
 800cdb4:	bfa2      	ittt	ge
 800cdb6:	6821      	ldrge	r1, [r4, #0]
 800cdb8:	f021 0104 	bicge.w	r1, r1, #4
 800cdbc:	6021      	strge	r1, [r4, #0]
 800cdbe:	b90d      	cbnz	r5, 800cdc4 <_printf_i+0x110>
 800cdc0:	2e00      	cmp	r6, #0
 800cdc2:	d04b      	beq.n	800ce5c <_printf_i+0x1a8>
 800cdc4:	4616      	mov	r6, r2
 800cdc6:	fbb5 f1f3 	udiv	r1, r5, r3
 800cdca:	fb03 5711 	mls	r7, r3, r1, r5
 800cdce:	5dc7      	ldrb	r7, [r0, r7]
 800cdd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cdd4:	462f      	mov	r7, r5
 800cdd6:	460d      	mov	r5, r1
 800cdd8:	42bb      	cmp	r3, r7
 800cdda:	d9f4      	bls.n	800cdc6 <_printf_i+0x112>
 800cddc:	2b08      	cmp	r3, #8
 800cdde:	d10b      	bne.n	800cdf8 <_printf_i+0x144>
 800cde0:	6823      	ldr	r3, [r4, #0]
 800cde2:	07df      	lsls	r7, r3, #31
 800cde4:	d508      	bpl.n	800cdf8 <_printf_i+0x144>
 800cde6:	6923      	ldr	r3, [r4, #16]
 800cde8:	6861      	ldr	r1, [r4, #4]
 800cdea:	4299      	cmp	r1, r3
 800cdec:	bfde      	ittt	le
 800cdee:	2330      	movle	r3, #48	@ 0x30
 800cdf0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cdf4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cdf8:	1b92      	subs	r2, r2, r6
 800cdfa:	6122      	str	r2, [r4, #16]
 800cdfc:	464b      	mov	r3, r9
 800cdfe:	aa03      	add	r2, sp, #12
 800ce00:	4621      	mov	r1, r4
 800ce02:	4640      	mov	r0, r8
 800ce04:	f8cd a000 	str.w	sl, [sp]
 800ce08:	f7ff fee2 	bl	800cbd0 <_printf_common>
 800ce0c:	3001      	adds	r0, #1
 800ce0e:	d14a      	bne.n	800cea6 <_printf_i+0x1f2>
 800ce10:	f04f 30ff 	mov.w	r0, #4294967295
 800ce14:	b004      	add	sp, #16
 800ce16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce1a:	6823      	ldr	r3, [r4, #0]
 800ce1c:	f043 0320 	orr.w	r3, r3, #32
 800ce20:	6023      	str	r3, [r4, #0]
 800ce22:	2778      	movs	r7, #120	@ 0x78
 800ce24:	4832      	ldr	r0, [pc, #200]	@ (800cef0 <_printf_i+0x23c>)
 800ce26:	6823      	ldr	r3, [r4, #0]
 800ce28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ce2c:	061f      	lsls	r7, r3, #24
 800ce2e:	6831      	ldr	r1, [r6, #0]
 800ce30:	f851 5b04 	ldr.w	r5, [r1], #4
 800ce34:	d402      	bmi.n	800ce3c <_printf_i+0x188>
 800ce36:	065f      	lsls	r7, r3, #25
 800ce38:	bf48      	it	mi
 800ce3a:	b2ad      	uxthmi	r5, r5
 800ce3c:	6031      	str	r1, [r6, #0]
 800ce3e:	07d9      	lsls	r1, r3, #31
 800ce40:	bf44      	itt	mi
 800ce42:	f043 0320 	orrmi.w	r3, r3, #32
 800ce46:	6023      	strmi	r3, [r4, #0]
 800ce48:	b11d      	cbz	r5, 800ce52 <_printf_i+0x19e>
 800ce4a:	2310      	movs	r3, #16
 800ce4c:	e7ac      	b.n	800cda8 <_printf_i+0xf4>
 800ce4e:	4827      	ldr	r0, [pc, #156]	@ (800ceec <_printf_i+0x238>)
 800ce50:	e7e9      	b.n	800ce26 <_printf_i+0x172>
 800ce52:	6823      	ldr	r3, [r4, #0]
 800ce54:	f023 0320 	bic.w	r3, r3, #32
 800ce58:	6023      	str	r3, [r4, #0]
 800ce5a:	e7f6      	b.n	800ce4a <_printf_i+0x196>
 800ce5c:	4616      	mov	r6, r2
 800ce5e:	e7bd      	b.n	800cddc <_printf_i+0x128>
 800ce60:	6833      	ldr	r3, [r6, #0]
 800ce62:	6825      	ldr	r5, [r4, #0]
 800ce64:	1d18      	adds	r0, r3, #4
 800ce66:	6961      	ldr	r1, [r4, #20]
 800ce68:	6030      	str	r0, [r6, #0]
 800ce6a:	062e      	lsls	r6, r5, #24
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	d501      	bpl.n	800ce74 <_printf_i+0x1c0>
 800ce70:	6019      	str	r1, [r3, #0]
 800ce72:	e002      	b.n	800ce7a <_printf_i+0x1c6>
 800ce74:	0668      	lsls	r0, r5, #25
 800ce76:	d5fb      	bpl.n	800ce70 <_printf_i+0x1bc>
 800ce78:	8019      	strh	r1, [r3, #0]
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	4616      	mov	r6, r2
 800ce7e:	6123      	str	r3, [r4, #16]
 800ce80:	e7bc      	b.n	800cdfc <_printf_i+0x148>
 800ce82:	6833      	ldr	r3, [r6, #0]
 800ce84:	2100      	movs	r1, #0
 800ce86:	1d1a      	adds	r2, r3, #4
 800ce88:	6032      	str	r2, [r6, #0]
 800ce8a:	681e      	ldr	r6, [r3, #0]
 800ce8c:	6862      	ldr	r2, [r4, #4]
 800ce8e:	4630      	mov	r0, r6
 800ce90:	f000 f9d5 	bl	800d23e <memchr>
 800ce94:	b108      	cbz	r0, 800ce9a <_printf_i+0x1e6>
 800ce96:	1b80      	subs	r0, r0, r6
 800ce98:	6060      	str	r0, [r4, #4]
 800ce9a:	6863      	ldr	r3, [r4, #4]
 800ce9c:	6123      	str	r3, [r4, #16]
 800ce9e:	2300      	movs	r3, #0
 800cea0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cea4:	e7aa      	b.n	800cdfc <_printf_i+0x148>
 800cea6:	6923      	ldr	r3, [r4, #16]
 800cea8:	4632      	mov	r2, r6
 800ceaa:	4649      	mov	r1, r9
 800ceac:	4640      	mov	r0, r8
 800ceae:	47d0      	blx	sl
 800ceb0:	3001      	adds	r0, #1
 800ceb2:	d0ad      	beq.n	800ce10 <_printf_i+0x15c>
 800ceb4:	6823      	ldr	r3, [r4, #0]
 800ceb6:	079b      	lsls	r3, r3, #30
 800ceb8:	d413      	bmi.n	800cee2 <_printf_i+0x22e>
 800ceba:	68e0      	ldr	r0, [r4, #12]
 800cebc:	9b03      	ldr	r3, [sp, #12]
 800cebe:	4298      	cmp	r0, r3
 800cec0:	bfb8      	it	lt
 800cec2:	4618      	movlt	r0, r3
 800cec4:	e7a6      	b.n	800ce14 <_printf_i+0x160>
 800cec6:	2301      	movs	r3, #1
 800cec8:	4632      	mov	r2, r6
 800ceca:	4649      	mov	r1, r9
 800cecc:	4640      	mov	r0, r8
 800cece:	47d0      	blx	sl
 800ced0:	3001      	adds	r0, #1
 800ced2:	d09d      	beq.n	800ce10 <_printf_i+0x15c>
 800ced4:	3501      	adds	r5, #1
 800ced6:	68e3      	ldr	r3, [r4, #12]
 800ced8:	9903      	ldr	r1, [sp, #12]
 800ceda:	1a5b      	subs	r3, r3, r1
 800cedc:	42ab      	cmp	r3, r5
 800cede:	dcf2      	bgt.n	800cec6 <_printf_i+0x212>
 800cee0:	e7eb      	b.n	800ceba <_printf_i+0x206>
 800cee2:	2500      	movs	r5, #0
 800cee4:	f104 0619 	add.w	r6, r4, #25
 800cee8:	e7f5      	b.n	800ced6 <_printf_i+0x222>
 800ceea:	bf00      	nop
 800ceec:	08010732 	.word	0x08010732
 800cef0:	08010743 	.word	0x08010743

0800cef4 <std>:
 800cef4:	2300      	movs	r3, #0
 800cef6:	b510      	push	{r4, lr}
 800cef8:	4604      	mov	r4, r0
 800cefa:	6083      	str	r3, [r0, #8]
 800cefc:	8181      	strh	r1, [r0, #12]
 800cefe:	4619      	mov	r1, r3
 800cf00:	6643      	str	r3, [r0, #100]	@ 0x64
 800cf02:	81c2      	strh	r2, [r0, #14]
 800cf04:	2208      	movs	r2, #8
 800cf06:	6183      	str	r3, [r0, #24]
 800cf08:	e9c0 3300 	strd	r3, r3, [r0]
 800cf0c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf10:	305c      	adds	r0, #92	@ 0x5c
 800cf12:	f000 f914 	bl	800d13e <memset>
 800cf16:	4b0d      	ldr	r3, [pc, #52]	@ (800cf4c <std+0x58>)
 800cf18:	6224      	str	r4, [r4, #32]
 800cf1a:	6263      	str	r3, [r4, #36]	@ 0x24
 800cf1c:	4b0c      	ldr	r3, [pc, #48]	@ (800cf50 <std+0x5c>)
 800cf1e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cf20:	4b0c      	ldr	r3, [pc, #48]	@ (800cf54 <std+0x60>)
 800cf22:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cf24:	4b0c      	ldr	r3, [pc, #48]	@ (800cf58 <std+0x64>)
 800cf26:	6323      	str	r3, [r4, #48]	@ 0x30
 800cf28:	4b0c      	ldr	r3, [pc, #48]	@ (800cf5c <std+0x68>)
 800cf2a:	429c      	cmp	r4, r3
 800cf2c:	d006      	beq.n	800cf3c <std+0x48>
 800cf2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cf32:	4294      	cmp	r4, r2
 800cf34:	d002      	beq.n	800cf3c <std+0x48>
 800cf36:	33d0      	adds	r3, #208	@ 0xd0
 800cf38:	429c      	cmp	r4, r3
 800cf3a:	d105      	bne.n	800cf48 <std+0x54>
 800cf3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cf40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf44:	f000 b978 	b.w	800d238 <__retarget_lock_init_recursive>
 800cf48:	bd10      	pop	{r4, pc}
 800cf4a:	bf00      	nop
 800cf4c:	0800d0b9 	.word	0x0800d0b9
 800cf50:	0800d0db 	.word	0x0800d0db
 800cf54:	0800d113 	.word	0x0800d113
 800cf58:	0800d137 	.word	0x0800d137
 800cf5c:	20003db8 	.word	0x20003db8

0800cf60 <stdio_exit_handler>:
 800cf60:	4a02      	ldr	r2, [pc, #8]	@ (800cf6c <stdio_exit_handler+0xc>)
 800cf62:	4903      	ldr	r1, [pc, #12]	@ (800cf70 <stdio_exit_handler+0x10>)
 800cf64:	4803      	ldr	r0, [pc, #12]	@ (800cf74 <stdio_exit_handler+0x14>)
 800cf66:	f000 b869 	b.w	800d03c <_fwalk_sglue>
 800cf6a:	bf00      	nop
 800cf6c:	20000010 	.word	0x20000010
 800cf70:	0800ebe1 	.word	0x0800ebe1
 800cf74:	20000020 	.word	0x20000020

0800cf78 <cleanup_stdio>:
 800cf78:	6841      	ldr	r1, [r0, #4]
 800cf7a:	4b0c      	ldr	r3, [pc, #48]	@ (800cfac <cleanup_stdio+0x34>)
 800cf7c:	4299      	cmp	r1, r3
 800cf7e:	b510      	push	{r4, lr}
 800cf80:	4604      	mov	r4, r0
 800cf82:	d001      	beq.n	800cf88 <cleanup_stdio+0x10>
 800cf84:	f001 fe2c 	bl	800ebe0 <_fflush_r>
 800cf88:	68a1      	ldr	r1, [r4, #8]
 800cf8a:	4b09      	ldr	r3, [pc, #36]	@ (800cfb0 <cleanup_stdio+0x38>)
 800cf8c:	4299      	cmp	r1, r3
 800cf8e:	d002      	beq.n	800cf96 <cleanup_stdio+0x1e>
 800cf90:	4620      	mov	r0, r4
 800cf92:	f001 fe25 	bl	800ebe0 <_fflush_r>
 800cf96:	68e1      	ldr	r1, [r4, #12]
 800cf98:	4b06      	ldr	r3, [pc, #24]	@ (800cfb4 <cleanup_stdio+0x3c>)
 800cf9a:	4299      	cmp	r1, r3
 800cf9c:	d004      	beq.n	800cfa8 <cleanup_stdio+0x30>
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfa4:	f001 be1c 	b.w	800ebe0 <_fflush_r>
 800cfa8:	bd10      	pop	{r4, pc}
 800cfaa:	bf00      	nop
 800cfac:	20003db8 	.word	0x20003db8
 800cfb0:	20003e20 	.word	0x20003e20
 800cfb4:	20003e88 	.word	0x20003e88

0800cfb8 <global_stdio_init.part.0>:
 800cfb8:	b510      	push	{r4, lr}
 800cfba:	4b0b      	ldr	r3, [pc, #44]	@ (800cfe8 <global_stdio_init.part.0+0x30>)
 800cfbc:	2104      	movs	r1, #4
 800cfbe:	4c0b      	ldr	r4, [pc, #44]	@ (800cfec <global_stdio_init.part.0+0x34>)
 800cfc0:	4a0b      	ldr	r2, [pc, #44]	@ (800cff0 <global_stdio_init.part.0+0x38>)
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	601a      	str	r2, [r3, #0]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	f7ff ff94 	bl	800cef4 <std>
 800cfcc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	2109      	movs	r1, #9
 800cfd4:	f7ff ff8e 	bl	800cef4 <std>
 800cfd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cfdc:	2202      	movs	r2, #2
 800cfde:	2112      	movs	r1, #18
 800cfe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfe4:	f7ff bf86 	b.w	800cef4 <std>
 800cfe8:	20003ef0 	.word	0x20003ef0
 800cfec:	20003db8 	.word	0x20003db8
 800cff0:	0800cf61 	.word	0x0800cf61

0800cff4 <__sfp_lock_acquire>:
 800cff4:	4801      	ldr	r0, [pc, #4]	@ (800cffc <__sfp_lock_acquire+0x8>)
 800cff6:	f000 b920 	b.w	800d23a <__retarget_lock_acquire_recursive>
 800cffa:	bf00      	nop
 800cffc:	20003ef9 	.word	0x20003ef9

0800d000 <__sfp_lock_release>:
 800d000:	4801      	ldr	r0, [pc, #4]	@ (800d008 <__sfp_lock_release+0x8>)
 800d002:	f000 b91b 	b.w	800d23c <__retarget_lock_release_recursive>
 800d006:	bf00      	nop
 800d008:	20003ef9 	.word	0x20003ef9

0800d00c <__sinit>:
 800d00c:	b510      	push	{r4, lr}
 800d00e:	4604      	mov	r4, r0
 800d010:	f7ff fff0 	bl	800cff4 <__sfp_lock_acquire>
 800d014:	6a23      	ldr	r3, [r4, #32]
 800d016:	b11b      	cbz	r3, 800d020 <__sinit+0x14>
 800d018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d01c:	f7ff bff0 	b.w	800d000 <__sfp_lock_release>
 800d020:	4b04      	ldr	r3, [pc, #16]	@ (800d034 <__sinit+0x28>)
 800d022:	6223      	str	r3, [r4, #32]
 800d024:	4b04      	ldr	r3, [pc, #16]	@ (800d038 <__sinit+0x2c>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1f5      	bne.n	800d018 <__sinit+0xc>
 800d02c:	f7ff ffc4 	bl	800cfb8 <global_stdio_init.part.0>
 800d030:	e7f2      	b.n	800d018 <__sinit+0xc>
 800d032:	bf00      	nop
 800d034:	0800cf79 	.word	0x0800cf79
 800d038:	20003ef0 	.word	0x20003ef0

0800d03c <_fwalk_sglue>:
 800d03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d040:	4607      	mov	r7, r0
 800d042:	4688      	mov	r8, r1
 800d044:	4614      	mov	r4, r2
 800d046:	2600      	movs	r6, #0
 800d048:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d04c:	f1b9 0901 	subs.w	r9, r9, #1
 800d050:	d505      	bpl.n	800d05e <_fwalk_sglue+0x22>
 800d052:	6824      	ldr	r4, [r4, #0]
 800d054:	2c00      	cmp	r4, #0
 800d056:	d1f7      	bne.n	800d048 <_fwalk_sglue+0xc>
 800d058:	4630      	mov	r0, r6
 800d05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d05e:	89ab      	ldrh	r3, [r5, #12]
 800d060:	2b01      	cmp	r3, #1
 800d062:	d907      	bls.n	800d074 <_fwalk_sglue+0x38>
 800d064:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d068:	3301      	adds	r3, #1
 800d06a:	d003      	beq.n	800d074 <_fwalk_sglue+0x38>
 800d06c:	4629      	mov	r1, r5
 800d06e:	4638      	mov	r0, r7
 800d070:	47c0      	blx	r8
 800d072:	4306      	orrs	r6, r0
 800d074:	3568      	adds	r5, #104	@ 0x68
 800d076:	e7e9      	b.n	800d04c <_fwalk_sglue+0x10>

0800d078 <siprintf>:
 800d078:	b40e      	push	{r1, r2, r3}
 800d07a:	b500      	push	{lr}
 800d07c:	b09c      	sub	sp, #112	@ 0x70
 800d07e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d082:	ab1d      	add	r3, sp, #116	@ 0x74
 800d084:	9002      	str	r0, [sp, #8]
 800d086:	9006      	str	r0, [sp, #24]
 800d088:	9107      	str	r1, [sp, #28]
 800d08a:	9104      	str	r1, [sp, #16]
 800d08c:	4808      	ldr	r0, [pc, #32]	@ (800d0b0 <siprintf+0x38>)
 800d08e:	4909      	ldr	r1, [pc, #36]	@ (800d0b4 <siprintf+0x3c>)
 800d090:	f853 2b04 	ldr.w	r2, [r3], #4
 800d094:	9105      	str	r1, [sp, #20]
 800d096:	a902      	add	r1, sp, #8
 800d098:	6800      	ldr	r0, [r0, #0]
 800d09a:	9301      	str	r3, [sp, #4]
 800d09c:	f001 fc20 	bl	800e8e0 <_svfiprintf_r>
 800d0a0:	9b02      	ldr	r3, [sp, #8]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	701a      	strb	r2, [r3, #0]
 800d0a6:	b01c      	add	sp, #112	@ 0x70
 800d0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0ac:	b003      	add	sp, #12
 800d0ae:	4770      	bx	lr
 800d0b0:	2000001c 	.word	0x2000001c
 800d0b4:	ffff0208 	.word	0xffff0208

0800d0b8 <__sread>:
 800d0b8:	b510      	push	{r4, lr}
 800d0ba:	460c      	mov	r4, r1
 800d0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0c0:	f000 f86c 	bl	800d19c <_read_r>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	bfab      	itete	ge
 800d0c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d0ca:	89a3      	ldrhlt	r3, [r4, #12]
 800d0cc:	181b      	addge	r3, r3, r0
 800d0ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d0d2:	bfac      	ite	ge
 800d0d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d0d6:	81a3      	strhlt	r3, [r4, #12]
 800d0d8:	bd10      	pop	{r4, pc}

0800d0da <__swrite>:
 800d0da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0de:	461f      	mov	r7, r3
 800d0e0:	898b      	ldrh	r3, [r1, #12]
 800d0e2:	4605      	mov	r5, r0
 800d0e4:	460c      	mov	r4, r1
 800d0e6:	05db      	lsls	r3, r3, #23
 800d0e8:	4616      	mov	r6, r2
 800d0ea:	d505      	bpl.n	800d0f8 <__swrite+0x1e>
 800d0ec:	2302      	movs	r3, #2
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0f4:	f000 f840 	bl	800d178 <_lseek_r>
 800d0f8:	89a3      	ldrh	r3, [r4, #12]
 800d0fa:	4632      	mov	r2, r6
 800d0fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d100:	4628      	mov	r0, r5
 800d102:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d106:	81a3      	strh	r3, [r4, #12]
 800d108:	463b      	mov	r3, r7
 800d10a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d10e:	f000 b857 	b.w	800d1c0 <_write_r>

0800d112 <__sseek>:
 800d112:	b510      	push	{r4, lr}
 800d114:	460c      	mov	r4, r1
 800d116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d11a:	f000 f82d 	bl	800d178 <_lseek_r>
 800d11e:	1c43      	adds	r3, r0, #1
 800d120:	89a3      	ldrh	r3, [r4, #12]
 800d122:	bf15      	itete	ne
 800d124:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d126:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d12a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d12e:	81a3      	strheq	r3, [r4, #12]
 800d130:	bf18      	it	ne
 800d132:	81a3      	strhne	r3, [r4, #12]
 800d134:	bd10      	pop	{r4, pc}

0800d136 <__sclose>:
 800d136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d13a:	f000 b80d 	b.w	800d158 <_close_r>

0800d13e <memset>:
 800d13e:	4402      	add	r2, r0
 800d140:	4603      	mov	r3, r0
 800d142:	4293      	cmp	r3, r2
 800d144:	d100      	bne.n	800d148 <memset+0xa>
 800d146:	4770      	bx	lr
 800d148:	f803 1b01 	strb.w	r1, [r3], #1
 800d14c:	e7f9      	b.n	800d142 <memset+0x4>
	...

0800d150 <_localeconv_r>:
 800d150:	4800      	ldr	r0, [pc, #0]	@ (800d154 <_localeconv_r+0x4>)
 800d152:	4770      	bx	lr
 800d154:	2000015c 	.word	0x2000015c

0800d158 <_close_r>:
 800d158:	b538      	push	{r3, r4, r5, lr}
 800d15a:	2300      	movs	r3, #0
 800d15c:	4d05      	ldr	r5, [pc, #20]	@ (800d174 <_close_r+0x1c>)
 800d15e:	4604      	mov	r4, r0
 800d160:	4608      	mov	r0, r1
 800d162:	602b      	str	r3, [r5, #0]
 800d164:	f7f6 fe94 	bl	8003e90 <_close>
 800d168:	1c43      	adds	r3, r0, #1
 800d16a:	d102      	bne.n	800d172 <_close_r+0x1a>
 800d16c:	682b      	ldr	r3, [r5, #0]
 800d16e:	b103      	cbz	r3, 800d172 <_close_r+0x1a>
 800d170:	6023      	str	r3, [r4, #0]
 800d172:	bd38      	pop	{r3, r4, r5, pc}
 800d174:	20003ef4 	.word	0x20003ef4

0800d178 <_lseek_r>:
 800d178:	b538      	push	{r3, r4, r5, lr}
 800d17a:	4604      	mov	r4, r0
 800d17c:	4d06      	ldr	r5, [pc, #24]	@ (800d198 <_lseek_r+0x20>)
 800d17e:	4608      	mov	r0, r1
 800d180:	4611      	mov	r1, r2
 800d182:	2200      	movs	r2, #0
 800d184:	602a      	str	r2, [r5, #0]
 800d186:	461a      	mov	r2, r3
 800d188:	f7f6 fea9 	bl	8003ede <_lseek>
 800d18c:	1c43      	adds	r3, r0, #1
 800d18e:	d102      	bne.n	800d196 <_lseek_r+0x1e>
 800d190:	682b      	ldr	r3, [r5, #0]
 800d192:	b103      	cbz	r3, 800d196 <_lseek_r+0x1e>
 800d194:	6023      	str	r3, [r4, #0]
 800d196:	bd38      	pop	{r3, r4, r5, pc}
 800d198:	20003ef4 	.word	0x20003ef4

0800d19c <_read_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	4604      	mov	r4, r0
 800d1a0:	4d06      	ldr	r5, [pc, #24]	@ (800d1bc <_read_r+0x20>)
 800d1a2:	4608      	mov	r0, r1
 800d1a4:	4611      	mov	r1, r2
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	602a      	str	r2, [r5, #0]
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	f7f6 fe37 	bl	8003e1e <_read>
 800d1b0:	1c43      	adds	r3, r0, #1
 800d1b2:	d102      	bne.n	800d1ba <_read_r+0x1e>
 800d1b4:	682b      	ldr	r3, [r5, #0]
 800d1b6:	b103      	cbz	r3, 800d1ba <_read_r+0x1e>
 800d1b8:	6023      	str	r3, [r4, #0]
 800d1ba:	bd38      	pop	{r3, r4, r5, pc}
 800d1bc:	20003ef4 	.word	0x20003ef4

0800d1c0 <_write_r>:
 800d1c0:	b538      	push	{r3, r4, r5, lr}
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	4d06      	ldr	r5, [pc, #24]	@ (800d1e0 <_write_r+0x20>)
 800d1c6:	4608      	mov	r0, r1
 800d1c8:	4611      	mov	r1, r2
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	602a      	str	r2, [r5, #0]
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	f7f6 fe42 	bl	8003e58 <_write>
 800d1d4:	1c43      	adds	r3, r0, #1
 800d1d6:	d102      	bne.n	800d1de <_write_r+0x1e>
 800d1d8:	682b      	ldr	r3, [r5, #0]
 800d1da:	b103      	cbz	r3, 800d1de <_write_r+0x1e>
 800d1dc:	6023      	str	r3, [r4, #0]
 800d1de:	bd38      	pop	{r3, r4, r5, pc}
 800d1e0:	20003ef4 	.word	0x20003ef4

0800d1e4 <__errno>:
 800d1e4:	4b01      	ldr	r3, [pc, #4]	@ (800d1ec <__errno+0x8>)
 800d1e6:	6818      	ldr	r0, [r3, #0]
 800d1e8:	4770      	bx	lr
 800d1ea:	bf00      	nop
 800d1ec:	2000001c 	.word	0x2000001c

0800d1f0 <__libc_init_array>:
 800d1f0:	b570      	push	{r4, r5, r6, lr}
 800d1f2:	4d0d      	ldr	r5, [pc, #52]	@ (800d228 <__libc_init_array+0x38>)
 800d1f4:	2600      	movs	r6, #0
 800d1f6:	4c0d      	ldr	r4, [pc, #52]	@ (800d22c <__libc_init_array+0x3c>)
 800d1f8:	1b64      	subs	r4, r4, r5
 800d1fa:	10a4      	asrs	r4, r4, #2
 800d1fc:	42a6      	cmp	r6, r4
 800d1fe:	d109      	bne.n	800d214 <__libc_init_array+0x24>
 800d200:	4d0b      	ldr	r5, [pc, #44]	@ (800d230 <__libc_init_array+0x40>)
 800d202:	2600      	movs	r6, #0
 800d204:	4c0b      	ldr	r4, [pc, #44]	@ (800d234 <__libc_init_array+0x44>)
 800d206:	f002 f97b 	bl	800f500 <_init>
 800d20a:	1b64      	subs	r4, r4, r5
 800d20c:	10a4      	asrs	r4, r4, #2
 800d20e:	42a6      	cmp	r6, r4
 800d210:	d105      	bne.n	800d21e <__libc_init_array+0x2e>
 800d212:	bd70      	pop	{r4, r5, r6, pc}
 800d214:	f855 3b04 	ldr.w	r3, [r5], #4
 800d218:	3601      	adds	r6, #1
 800d21a:	4798      	blx	r3
 800d21c:	e7ee      	b.n	800d1fc <__libc_init_array+0xc>
 800d21e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d222:	3601      	adds	r6, #1
 800d224:	4798      	blx	r3
 800d226:	e7f2      	b.n	800d20e <__libc_init_array+0x1e>
 800d228:	08010a98 	.word	0x08010a98
 800d22c:	08010a98 	.word	0x08010a98
 800d230:	08010a98 	.word	0x08010a98
 800d234:	08010a9c 	.word	0x08010a9c

0800d238 <__retarget_lock_init_recursive>:
 800d238:	4770      	bx	lr

0800d23a <__retarget_lock_acquire_recursive>:
 800d23a:	4770      	bx	lr

0800d23c <__retarget_lock_release_recursive>:
 800d23c:	4770      	bx	lr

0800d23e <memchr>:
 800d23e:	b2c9      	uxtb	r1, r1
 800d240:	4603      	mov	r3, r0
 800d242:	4402      	add	r2, r0
 800d244:	b510      	push	{r4, lr}
 800d246:	4293      	cmp	r3, r2
 800d248:	4618      	mov	r0, r3
 800d24a:	d101      	bne.n	800d250 <memchr+0x12>
 800d24c:	2000      	movs	r0, #0
 800d24e:	e003      	b.n	800d258 <memchr+0x1a>
 800d250:	7804      	ldrb	r4, [r0, #0]
 800d252:	3301      	adds	r3, #1
 800d254:	428c      	cmp	r4, r1
 800d256:	d1f6      	bne.n	800d246 <memchr+0x8>
 800d258:	bd10      	pop	{r4, pc}

0800d25a <memcpy>:
 800d25a:	440a      	add	r2, r1
 800d25c:	1e43      	subs	r3, r0, #1
 800d25e:	4291      	cmp	r1, r2
 800d260:	d100      	bne.n	800d264 <memcpy+0xa>
 800d262:	4770      	bx	lr
 800d264:	b510      	push	{r4, lr}
 800d266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d26a:	4291      	cmp	r1, r2
 800d26c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d270:	d1f9      	bne.n	800d266 <memcpy+0xc>
 800d272:	bd10      	pop	{r4, pc}

0800d274 <quorem>:
 800d274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d278:	6903      	ldr	r3, [r0, #16]
 800d27a:	4607      	mov	r7, r0
 800d27c:	690c      	ldr	r4, [r1, #16]
 800d27e:	42a3      	cmp	r3, r4
 800d280:	f2c0 8083 	blt.w	800d38a <quorem+0x116>
 800d284:	3c01      	subs	r4, #1
 800d286:	f100 0514 	add.w	r5, r0, #20
 800d28a:	f101 0814 	add.w	r8, r1, #20
 800d28e:	00a3      	lsls	r3, r4, #2
 800d290:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d294:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d298:	9300      	str	r3, [sp, #0]
 800d29a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d29e:	9301      	str	r3, [sp, #4]
 800d2a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	fbb2 f6f3 	udiv	r6, r2, r3
 800d2ac:	d331      	bcc.n	800d312 <quorem+0x9e>
 800d2ae:	f04f 0a00 	mov.w	sl, #0
 800d2b2:	46c4      	mov	ip, r8
 800d2b4:	46ae      	mov	lr, r5
 800d2b6:	46d3      	mov	fp, sl
 800d2b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d2bc:	b298      	uxth	r0, r3
 800d2be:	45e1      	cmp	r9, ip
 800d2c0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d2c4:	fb06 a000 	mla	r0, r6, r0, sl
 800d2c8:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800d2cc:	b280      	uxth	r0, r0
 800d2ce:	fb06 2303 	mla	r3, r6, r3, r2
 800d2d2:	f8de 2000 	ldr.w	r2, [lr]
 800d2d6:	b292      	uxth	r2, r2
 800d2d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d2dc:	eba2 0200 	sub.w	r2, r2, r0
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	f8de 0000 	ldr.w	r0, [lr]
 800d2e6:	445a      	add	r2, fp
 800d2e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d2ec:	b292      	uxth	r2, r2
 800d2ee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d2f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d2f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d2fa:	f84e 2b04 	str.w	r2, [lr], #4
 800d2fe:	d2db      	bcs.n	800d2b8 <quorem+0x44>
 800d300:	9b00      	ldr	r3, [sp, #0]
 800d302:	58eb      	ldr	r3, [r5, r3]
 800d304:	b92b      	cbnz	r3, 800d312 <quorem+0x9e>
 800d306:	9b01      	ldr	r3, [sp, #4]
 800d308:	3b04      	subs	r3, #4
 800d30a:	429d      	cmp	r5, r3
 800d30c:	461a      	mov	r2, r3
 800d30e:	d330      	bcc.n	800d372 <quorem+0xfe>
 800d310:	613c      	str	r4, [r7, #16]
 800d312:	4638      	mov	r0, r7
 800d314:	f001 f97c 	bl	800e610 <__mcmp>
 800d318:	2800      	cmp	r0, #0
 800d31a:	db26      	blt.n	800d36a <quorem+0xf6>
 800d31c:	4629      	mov	r1, r5
 800d31e:	2000      	movs	r0, #0
 800d320:	f858 2b04 	ldr.w	r2, [r8], #4
 800d324:	f8d1 c000 	ldr.w	ip, [r1]
 800d328:	fa1f fe82 	uxth.w	lr, r2
 800d32c:	45c1      	cmp	r9, r8
 800d32e:	fa1f f38c 	uxth.w	r3, ip
 800d332:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d336:	eba3 030e 	sub.w	r3, r3, lr
 800d33a:	4403      	add	r3, r0
 800d33c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d340:	b29b      	uxth	r3, r3
 800d342:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d34a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d34e:	f841 3b04 	str.w	r3, [r1], #4
 800d352:	d2e5      	bcs.n	800d320 <quorem+0xac>
 800d354:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d358:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d35c:	b922      	cbnz	r2, 800d368 <quorem+0xf4>
 800d35e:	3b04      	subs	r3, #4
 800d360:	429d      	cmp	r5, r3
 800d362:	461a      	mov	r2, r3
 800d364:	d30b      	bcc.n	800d37e <quorem+0x10a>
 800d366:	613c      	str	r4, [r7, #16]
 800d368:	3601      	adds	r6, #1
 800d36a:	4630      	mov	r0, r6
 800d36c:	b003      	add	sp, #12
 800d36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d372:	6812      	ldr	r2, [r2, #0]
 800d374:	3b04      	subs	r3, #4
 800d376:	2a00      	cmp	r2, #0
 800d378:	d1ca      	bne.n	800d310 <quorem+0x9c>
 800d37a:	3c01      	subs	r4, #1
 800d37c:	e7c5      	b.n	800d30a <quorem+0x96>
 800d37e:	6812      	ldr	r2, [r2, #0]
 800d380:	3b04      	subs	r3, #4
 800d382:	2a00      	cmp	r2, #0
 800d384:	d1ef      	bne.n	800d366 <quorem+0xf2>
 800d386:	3c01      	subs	r4, #1
 800d388:	e7ea      	b.n	800d360 <quorem+0xec>
 800d38a:	2000      	movs	r0, #0
 800d38c:	e7ee      	b.n	800d36c <quorem+0xf8>
	...

0800d390 <_dtoa_r>:
 800d390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d394:	69c7      	ldr	r7, [r0, #28]
 800d396:	b099      	sub	sp, #100	@ 0x64
 800d398:	4683      	mov	fp, r0
 800d39a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d39c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d39e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d3a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d3a2:	ec55 4b10 	vmov	r4, r5, d0
 800d3a6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d3aa:	b97f      	cbnz	r7, 800d3cc <_dtoa_r+0x3c>
 800d3ac:	2010      	movs	r0, #16
 800d3ae:	f000 fdfd 	bl	800dfac <malloc>
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800d3b8:	b920      	cbnz	r0, 800d3c4 <_dtoa_r+0x34>
 800d3ba:	4ba7      	ldr	r3, [pc, #668]	@ (800d658 <_dtoa_r+0x2c8>)
 800d3bc:	21ef      	movs	r1, #239	@ 0xef
 800d3be:	48a7      	ldr	r0, [pc, #668]	@ (800d65c <_dtoa_r+0x2cc>)
 800d3c0:	f001 fc60 	bl	800ec84 <__assert_func>
 800d3c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d3c8:	6007      	str	r7, [r0, #0]
 800d3ca:	60c7      	str	r7, [r0, #12]
 800d3cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d3d0:	6819      	ldr	r1, [r3, #0]
 800d3d2:	b159      	cbz	r1, 800d3ec <_dtoa_r+0x5c>
 800d3d4:	685a      	ldr	r2, [r3, #4]
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	4658      	mov	r0, fp
 800d3da:	4093      	lsls	r3, r2
 800d3dc:	604a      	str	r2, [r1, #4]
 800d3de:	608b      	str	r3, [r1, #8]
 800d3e0:	f000 feda 	bl	800e198 <_Bfree>
 800d3e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	601a      	str	r2, [r3, #0]
 800d3ec:	1e2b      	subs	r3, r5, #0
 800d3ee:	bfb7      	itett	lt
 800d3f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d3f4:	2300      	movge	r3, #0
 800d3f6:	2201      	movlt	r2, #1
 800d3f8:	9303      	strlt	r3, [sp, #12]
 800d3fa:	bfa8      	it	ge
 800d3fc:	6033      	strge	r3, [r6, #0]
 800d3fe:	9f03      	ldr	r7, [sp, #12]
 800d400:	4b97      	ldr	r3, [pc, #604]	@ (800d660 <_dtoa_r+0x2d0>)
 800d402:	bfb8      	it	lt
 800d404:	6032      	strlt	r2, [r6, #0]
 800d406:	43bb      	bics	r3, r7
 800d408:	d112      	bne.n	800d430 <_dtoa_r+0xa0>
 800d40a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d40e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d410:	6013      	str	r3, [r2, #0]
 800d412:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d416:	4323      	orrs	r3, r4
 800d418:	f000 854c 	beq.w	800deb4 <_dtoa_r+0xb24>
 800d41c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d41e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d674 <_dtoa_r+0x2e4>
 800d422:	2b00      	cmp	r3, #0
 800d424:	f000 854e 	beq.w	800dec4 <_dtoa_r+0xb34>
 800d428:	f10a 0303 	add.w	r3, sl, #3
 800d42c:	f000 bd48 	b.w	800dec0 <_dtoa_r+0xb30>
 800d430:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d434:	2200      	movs	r2, #0
 800d436:	2300      	movs	r3, #0
 800d438:	ec51 0b17 	vmov	r0, r1, d7
 800d43c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d440:	f7f3 fb56 	bl	8000af0 <__aeabi_dcmpeq>
 800d444:	4680      	mov	r8, r0
 800d446:	b158      	cbz	r0, 800d460 <_dtoa_r+0xd0>
 800d448:	2301      	movs	r3, #1
 800d44a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d44c:	6013      	str	r3, [r2, #0]
 800d44e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d450:	b113      	cbz	r3, 800d458 <_dtoa_r+0xc8>
 800d452:	4b84      	ldr	r3, [pc, #528]	@ (800d664 <_dtoa_r+0x2d4>)
 800d454:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d456:	6013      	str	r3, [r2, #0]
 800d458:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800d678 <_dtoa_r+0x2e8>
 800d45c:	f000 bd32 	b.w	800dec4 <_dtoa_r+0xb34>
 800d460:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d464:	aa16      	add	r2, sp, #88	@ 0x58
 800d466:	a917      	add	r1, sp, #92	@ 0x5c
 800d468:	4658      	mov	r0, fp
 800d46a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d46e:	f001 f983 	bl	800e778 <__d2b>
 800d472:	4681      	mov	r9, r0
 800d474:	2e00      	cmp	r6, #0
 800d476:	d075      	beq.n	800d564 <_dtoa_r+0x1d4>
 800d478:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d47a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d47e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d482:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d486:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d48a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d48e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d492:	4619      	mov	r1, r3
 800d494:	2200      	movs	r2, #0
 800d496:	4b74      	ldr	r3, [pc, #464]	@ (800d668 <_dtoa_r+0x2d8>)
 800d498:	f7f2 ff0a 	bl	80002b0 <__aeabi_dsub>
 800d49c:	a368      	add	r3, pc, #416	@ (adr r3, 800d640 <_dtoa_r+0x2b0>)
 800d49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a2:	f7f3 f8bd 	bl	8000620 <__aeabi_dmul>
 800d4a6:	a368      	add	r3, pc, #416	@ (adr r3, 800d648 <_dtoa_r+0x2b8>)
 800d4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ac:	f7f2 ff02 	bl	80002b4 <__adddf3>
 800d4b0:	4604      	mov	r4, r0
 800d4b2:	460d      	mov	r5, r1
 800d4b4:	4630      	mov	r0, r6
 800d4b6:	f7f3 f849 	bl	800054c <__aeabi_i2d>
 800d4ba:	a365      	add	r3, pc, #404	@ (adr r3, 800d650 <_dtoa_r+0x2c0>)
 800d4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c0:	f7f3 f8ae 	bl	8000620 <__aeabi_dmul>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	460b      	mov	r3, r1
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	4629      	mov	r1, r5
 800d4cc:	f7f2 fef2 	bl	80002b4 <__adddf3>
 800d4d0:	4604      	mov	r4, r0
 800d4d2:	460d      	mov	r5, r1
 800d4d4:	f7f3 fb54 	bl	8000b80 <__aeabi_d2iz>
 800d4d8:	2200      	movs	r2, #0
 800d4da:	4607      	mov	r7, r0
 800d4dc:	2300      	movs	r3, #0
 800d4de:	4620      	mov	r0, r4
 800d4e0:	4629      	mov	r1, r5
 800d4e2:	f7f3 fb0f 	bl	8000b04 <__aeabi_dcmplt>
 800d4e6:	b140      	cbz	r0, 800d4fa <_dtoa_r+0x16a>
 800d4e8:	4638      	mov	r0, r7
 800d4ea:	f7f3 f82f 	bl	800054c <__aeabi_i2d>
 800d4ee:	4622      	mov	r2, r4
 800d4f0:	462b      	mov	r3, r5
 800d4f2:	f7f3 fafd 	bl	8000af0 <__aeabi_dcmpeq>
 800d4f6:	b900      	cbnz	r0, 800d4fa <_dtoa_r+0x16a>
 800d4f8:	3f01      	subs	r7, #1
 800d4fa:	2f16      	cmp	r7, #22
 800d4fc:	d851      	bhi.n	800d5a2 <_dtoa_r+0x212>
 800d4fe:	4b5b      	ldr	r3, [pc, #364]	@ (800d66c <_dtoa_r+0x2dc>)
 800d500:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d504:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50c:	f7f3 fafa 	bl	8000b04 <__aeabi_dcmplt>
 800d510:	2800      	cmp	r0, #0
 800d512:	d048      	beq.n	800d5a6 <_dtoa_r+0x216>
 800d514:	3f01      	subs	r7, #1
 800d516:	2300      	movs	r3, #0
 800d518:	9312      	str	r3, [sp, #72]	@ 0x48
 800d51a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d51c:	1b9b      	subs	r3, r3, r6
 800d51e:	1e5a      	subs	r2, r3, #1
 800d520:	bf46      	itte	mi
 800d522:	f1c3 0801 	rsbmi	r8, r3, #1
 800d526:	2300      	movmi	r3, #0
 800d528:	f04f 0800 	movpl.w	r8, #0
 800d52c:	9208      	str	r2, [sp, #32]
 800d52e:	bf48      	it	mi
 800d530:	9308      	strmi	r3, [sp, #32]
 800d532:	2f00      	cmp	r7, #0
 800d534:	db39      	blt.n	800d5aa <_dtoa_r+0x21a>
 800d536:	9b08      	ldr	r3, [sp, #32]
 800d538:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d53a:	443b      	add	r3, r7
 800d53c:	9308      	str	r3, [sp, #32]
 800d53e:	2300      	movs	r3, #0
 800d540:	930a      	str	r3, [sp, #40]	@ 0x28
 800d542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d544:	2b09      	cmp	r3, #9
 800d546:	d864      	bhi.n	800d612 <_dtoa_r+0x282>
 800d548:	2b05      	cmp	r3, #5
 800d54a:	bfc5      	ittet	gt
 800d54c:	3b04      	subgt	r3, #4
 800d54e:	2400      	movgt	r4, #0
 800d550:	2401      	movle	r4, #1
 800d552:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d556:	3b02      	subs	r3, #2
 800d558:	2b03      	cmp	r3, #3
 800d55a:	d865      	bhi.n	800d628 <_dtoa_r+0x298>
 800d55c:	e8df f003 	tbb	[pc, r3]
 800d560:	5737392c 	.word	0x5737392c
 800d564:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d568:	441e      	add	r6, r3
 800d56a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d56e:	2b20      	cmp	r3, #32
 800d570:	bfc9      	itett	gt
 800d572:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d576:	f1c3 0320 	rsble	r3, r3, #32
 800d57a:	409f      	lslgt	r7, r3
 800d57c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d580:	bfd8      	it	le
 800d582:	fa04 f003 	lslle.w	r0, r4, r3
 800d586:	f106 36ff 	add.w	r6, r6, #4294967295
 800d58a:	bfc4      	itt	gt
 800d58c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d590:	ea47 0003 	orrgt.w	r0, r7, r3
 800d594:	f7f2 ffca 	bl	800052c <__aeabi_ui2d>
 800d598:	2201      	movs	r2, #1
 800d59a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d59e:	9214      	str	r2, [sp, #80]	@ 0x50
 800d5a0:	e777      	b.n	800d492 <_dtoa_r+0x102>
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	e7b8      	b.n	800d518 <_dtoa_r+0x188>
 800d5a6:	9012      	str	r0, [sp, #72]	@ 0x48
 800d5a8:	e7b7      	b.n	800d51a <_dtoa_r+0x18a>
 800d5aa:	427b      	negs	r3, r7
 800d5ac:	eba8 0807 	sub.w	r8, r8, r7
 800d5b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d5b6:	e7c4      	b.n	800d542 <_dtoa_r+0x1b2>
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	dc35      	bgt.n	800d62e <_dtoa_r+0x29e>
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	9300      	str	r3, [sp, #0]
 800d5c8:	9307      	str	r3, [sp, #28]
 800d5ca:	920e      	str	r2, [sp, #56]	@ 0x38
 800d5cc:	e00b      	b.n	800d5e6 <_dtoa_r+0x256>
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	e7f3      	b.n	800d5ba <_dtoa_r+0x22a>
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5d8:	18fb      	adds	r3, r7, r3
 800d5da:	9300      	str	r3, [sp, #0]
 800d5dc:	3301      	adds	r3, #1
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	9307      	str	r3, [sp, #28]
 800d5e2:	bfb8      	it	lt
 800d5e4:	2301      	movlt	r3, #1
 800d5e6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d5ea:	2100      	movs	r1, #0
 800d5ec:	2204      	movs	r2, #4
 800d5ee:	f102 0514 	add.w	r5, r2, #20
 800d5f2:	429d      	cmp	r5, r3
 800d5f4:	d91f      	bls.n	800d636 <_dtoa_r+0x2a6>
 800d5f6:	6041      	str	r1, [r0, #4]
 800d5f8:	4658      	mov	r0, fp
 800d5fa:	f000 fd8d 	bl	800e118 <_Balloc>
 800d5fe:	4682      	mov	sl, r0
 800d600:	2800      	cmp	r0, #0
 800d602:	d13b      	bne.n	800d67c <_dtoa_r+0x2ec>
 800d604:	4b1a      	ldr	r3, [pc, #104]	@ (800d670 <_dtoa_r+0x2e0>)
 800d606:	4602      	mov	r2, r0
 800d608:	f240 11af 	movw	r1, #431	@ 0x1af
 800d60c:	e6d7      	b.n	800d3be <_dtoa_r+0x2e>
 800d60e:	2301      	movs	r3, #1
 800d610:	e7e0      	b.n	800d5d4 <_dtoa_r+0x244>
 800d612:	2401      	movs	r4, #1
 800d614:	2300      	movs	r3, #0
 800d616:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d618:	9309      	str	r3, [sp, #36]	@ 0x24
 800d61a:	f04f 33ff 	mov.w	r3, #4294967295
 800d61e:	2200      	movs	r2, #0
 800d620:	9300      	str	r3, [sp, #0]
 800d622:	9307      	str	r3, [sp, #28]
 800d624:	2312      	movs	r3, #18
 800d626:	e7d0      	b.n	800d5ca <_dtoa_r+0x23a>
 800d628:	2301      	movs	r3, #1
 800d62a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d62c:	e7f5      	b.n	800d61a <_dtoa_r+0x28a>
 800d62e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d630:	9300      	str	r3, [sp, #0]
 800d632:	9307      	str	r3, [sp, #28]
 800d634:	e7d7      	b.n	800d5e6 <_dtoa_r+0x256>
 800d636:	3101      	adds	r1, #1
 800d638:	0052      	lsls	r2, r2, #1
 800d63a:	e7d8      	b.n	800d5ee <_dtoa_r+0x25e>
 800d63c:	f3af 8000 	nop.w
 800d640:	636f4361 	.word	0x636f4361
 800d644:	3fd287a7 	.word	0x3fd287a7
 800d648:	8b60c8b3 	.word	0x8b60c8b3
 800d64c:	3fc68a28 	.word	0x3fc68a28
 800d650:	509f79fb 	.word	0x509f79fb
 800d654:	3fd34413 	.word	0x3fd34413
 800d658:	08010761 	.word	0x08010761
 800d65c:	08010778 	.word	0x08010778
 800d660:	7ff00000 	.word	0x7ff00000
 800d664:	08010731 	.word	0x08010731
 800d668:	3ff80000 	.word	0x3ff80000
 800d66c:	08010870 	.word	0x08010870
 800d670:	080107d0 	.word	0x080107d0
 800d674:	0801075d 	.word	0x0801075d
 800d678:	08010730 	.word	0x08010730
 800d67c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d680:	6018      	str	r0, [r3, #0]
 800d682:	9b07      	ldr	r3, [sp, #28]
 800d684:	2b0e      	cmp	r3, #14
 800d686:	f200 80a4 	bhi.w	800d7d2 <_dtoa_r+0x442>
 800d68a:	2c00      	cmp	r4, #0
 800d68c:	f000 80a1 	beq.w	800d7d2 <_dtoa_r+0x442>
 800d690:	2f00      	cmp	r7, #0
 800d692:	dd33      	ble.n	800d6fc <_dtoa_r+0x36c>
 800d694:	f007 020f 	and.w	r2, r7, #15
 800d698:	4bac      	ldr	r3, [pc, #688]	@ (800d94c <_dtoa_r+0x5bc>)
 800d69a:	05f8      	lsls	r0, r7, #23
 800d69c:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d6a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6a4:	ed93 7b00 	vldr	d7, [r3]
 800d6a8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d6ac:	d516      	bpl.n	800d6dc <_dtoa_r+0x34c>
 800d6ae:	4ba8      	ldr	r3, [pc, #672]	@ (800d950 <_dtoa_r+0x5c0>)
 800d6b0:	f004 040f 	and.w	r4, r4, #15
 800d6b4:	2603      	movs	r6, #3
 800d6b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d6ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d6be:	f7f3 f8d9 	bl	8000874 <__aeabi_ddiv>
 800d6c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6c6:	4da2      	ldr	r5, [pc, #648]	@ (800d950 <_dtoa_r+0x5c0>)
 800d6c8:	b954      	cbnz	r4, 800d6e0 <_dtoa_r+0x350>
 800d6ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d6ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6d2:	f7f3 f8cf 	bl	8000874 <__aeabi_ddiv>
 800d6d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6da:	e028      	b.n	800d72e <_dtoa_r+0x39e>
 800d6dc:	2602      	movs	r6, #2
 800d6de:	e7f2      	b.n	800d6c6 <_dtoa_r+0x336>
 800d6e0:	07e1      	lsls	r1, r4, #31
 800d6e2:	d508      	bpl.n	800d6f6 <_dtoa_r+0x366>
 800d6e4:	3601      	adds	r6, #1
 800d6e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d6ee:	f7f2 ff97 	bl	8000620 <__aeabi_dmul>
 800d6f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6f6:	1064      	asrs	r4, r4, #1
 800d6f8:	3508      	adds	r5, #8
 800d6fa:	e7e5      	b.n	800d6c8 <_dtoa_r+0x338>
 800d6fc:	f000 80d2 	beq.w	800d8a4 <_dtoa_r+0x514>
 800d700:	427c      	negs	r4, r7
 800d702:	4b92      	ldr	r3, [pc, #584]	@ (800d94c <_dtoa_r+0x5bc>)
 800d704:	4d92      	ldr	r5, [pc, #584]	@ (800d950 <_dtoa_r+0x5c0>)
 800d706:	2602      	movs	r6, #2
 800d708:	f004 020f 	and.w	r2, r4, #15
 800d70c:	1124      	asrs	r4, r4, #4
 800d70e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d712:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71a:	f7f2 ff81 	bl	8000620 <__aeabi_dmul>
 800d71e:	2300      	movs	r3, #0
 800d720:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d724:	2c00      	cmp	r4, #0
 800d726:	f040 80b2 	bne.w	800d88e <_dtoa_r+0x4fe>
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d1d3      	bne.n	800d6d6 <_dtoa_r+0x346>
 800d72e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d730:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d734:	2b00      	cmp	r3, #0
 800d736:	f000 80b7 	beq.w	800d8a8 <_dtoa_r+0x518>
 800d73a:	2200      	movs	r2, #0
 800d73c:	4b85      	ldr	r3, [pc, #532]	@ (800d954 <_dtoa_r+0x5c4>)
 800d73e:	4620      	mov	r0, r4
 800d740:	4629      	mov	r1, r5
 800d742:	f7f3 f9df 	bl	8000b04 <__aeabi_dcmplt>
 800d746:	2800      	cmp	r0, #0
 800d748:	f000 80ae 	beq.w	800d8a8 <_dtoa_r+0x518>
 800d74c:	9b07      	ldr	r3, [sp, #28]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	f000 80aa 	beq.w	800d8a8 <_dtoa_r+0x518>
 800d754:	9b00      	ldr	r3, [sp, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	dd37      	ble.n	800d7ca <_dtoa_r+0x43a>
 800d75a:	1e7b      	subs	r3, r7, #1
 800d75c:	4620      	mov	r0, r4
 800d75e:	2200      	movs	r2, #0
 800d760:	4629      	mov	r1, r5
 800d762:	9304      	str	r3, [sp, #16]
 800d764:	3601      	adds	r6, #1
 800d766:	4b7c      	ldr	r3, [pc, #496]	@ (800d958 <_dtoa_r+0x5c8>)
 800d768:	f7f2 ff5a 	bl	8000620 <__aeabi_dmul>
 800d76c:	9c00      	ldr	r4, [sp, #0]
 800d76e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d772:	4630      	mov	r0, r6
 800d774:	f7f2 feea 	bl	800054c <__aeabi_i2d>
 800d778:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d77c:	f7f2 ff50 	bl	8000620 <__aeabi_dmul>
 800d780:	2200      	movs	r2, #0
 800d782:	4b76      	ldr	r3, [pc, #472]	@ (800d95c <_dtoa_r+0x5cc>)
 800d784:	f7f2 fd96 	bl	80002b4 <__adddf3>
 800d788:	4605      	mov	r5, r0
 800d78a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d78e:	2c00      	cmp	r4, #0
 800d790:	f040 808d 	bne.w	800d8ae <_dtoa_r+0x51e>
 800d794:	2200      	movs	r2, #0
 800d796:	4b72      	ldr	r3, [pc, #456]	@ (800d960 <_dtoa_r+0x5d0>)
 800d798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d79c:	f7f2 fd88 	bl	80002b0 <__aeabi_dsub>
 800d7a0:	4602      	mov	r2, r0
 800d7a2:	460b      	mov	r3, r1
 800d7a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d7a8:	462a      	mov	r2, r5
 800d7aa:	4633      	mov	r3, r6
 800d7ac:	f7f3 f9c8 	bl	8000b40 <__aeabi_dcmpgt>
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	f040 828b 	bne.w	800dccc <_dtoa_r+0x93c>
 800d7b6:	462a      	mov	r2, r5
 800d7b8:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d7bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7c0:	f7f3 f9a0 	bl	8000b04 <__aeabi_dcmplt>
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	f040 8128 	bne.w	800da1a <_dtoa_r+0x68a>
 800d7ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d7ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d7d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f2c0 815a 	blt.w	800da8e <_dtoa_r+0x6fe>
 800d7da:	2f0e      	cmp	r7, #14
 800d7dc:	f300 8157 	bgt.w	800da8e <_dtoa_r+0x6fe>
 800d7e0:	4b5a      	ldr	r3, [pc, #360]	@ (800d94c <_dtoa_r+0x5bc>)
 800d7e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d7e6:	ed93 7b00 	vldr	d7, [r3]
 800d7ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	ed8d 7b00 	vstr	d7, [sp]
 800d7f2:	da03      	bge.n	800d7fc <_dtoa_r+0x46c>
 800d7f4:	9b07      	ldr	r3, [sp, #28]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	f340 8101 	ble.w	800d9fe <_dtoa_r+0x66e>
 800d7fc:	4656      	mov	r6, sl
 800d7fe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d802:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d806:	4620      	mov	r0, r4
 800d808:	4629      	mov	r1, r5
 800d80a:	f7f3 f833 	bl	8000874 <__aeabi_ddiv>
 800d80e:	f7f3 f9b7 	bl	8000b80 <__aeabi_d2iz>
 800d812:	4680      	mov	r8, r0
 800d814:	f7f2 fe9a 	bl	800054c <__aeabi_i2d>
 800d818:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d81c:	f7f2 ff00 	bl	8000620 <__aeabi_dmul>
 800d820:	4602      	mov	r2, r0
 800d822:	4620      	mov	r0, r4
 800d824:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d828:	460b      	mov	r3, r1
 800d82a:	4629      	mov	r1, r5
 800d82c:	f7f2 fd40 	bl	80002b0 <__aeabi_dsub>
 800d830:	9d07      	ldr	r5, [sp, #28]
 800d832:	f806 4b01 	strb.w	r4, [r6], #1
 800d836:	eba6 040a 	sub.w	r4, r6, sl
 800d83a:	4602      	mov	r2, r0
 800d83c:	460b      	mov	r3, r1
 800d83e:	42a5      	cmp	r5, r4
 800d840:	f040 8117 	bne.w	800da72 <_dtoa_r+0x6e2>
 800d844:	f7f2 fd36 	bl	80002b4 <__adddf3>
 800d848:	4604      	mov	r4, r0
 800d84a:	460d      	mov	r5, r1
 800d84c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d850:	f7f3 f976 	bl	8000b40 <__aeabi_dcmpgt>
 800d854:	2800      	cmp	r0, #0
 800d856:	f040 80f9 	bne.w	800da4c <_dtoa_r+0x6bc>
 800d85a:	4620      	mov	r0, r4
 800d85c:	4629      	mov	r1, r5
 800d85e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d862:	f7f3 f945 	bl	8000af0 <__aeabi_dcmpeq>
 800d866:	b118      	cbz	r0, 800d870 <_dtoa_r+0x4e0>
 800d868:	f018 0f01 	tst.w	r8, #1
 800d86c:	f040 80ee 	bne.w	800da4c <_dtoa_r+0x6bc>
 800d870:	4649      	mov	r1, r9
 800d872:	4658      	mov	r0, fp
 800d874:	f000 fc90 	bl	800e198 <_Bfree>
 800d878:	2300      	movs	r3, #0
 800d87a:	3701      	adds	r7, #1
 800d87c:	7033      	strb	r3, [r6, #0]
 800d87e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d880:	601f      	str	r7, [r3, #0]
 800d882:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d884:	2b00      	cmp	r3, #0
 800d886:	f000 831d 	beq.w	800dec4 <_dtoa_r+0xb34>
 800d88a:	601e      	str	r6, [r3, #0]
 800d88c:	e31a      	b.n	800dec4 <_dtoa_r+0xb34>
 800d88e:	07e2      	lsls	r2, r4, #31
 800d890:	d505      	bpl.n	800d89e <_dtoa_r+0x50e>
 800d892:	3601      	adds	r6, #1
 800d894:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d898:	f7f2 fec2 	bl	8000620 <__aeabi_dmul>
 800d89c:	2301      	movs	r3, #1
 800d89e:	1064      	asrs	r4, r4, #1
 800d8a0:	3508      	adds	r5, #8
 800d8a2:	e73f      	b.n	800d724 <_dtoa_r+0x394>
 800d8a4:	2602      	movs	r6, #2
 800d8a6:	e742      	b.n	800d72e <_dtoa_r+0x39e>
 800d8a8:	9c07      	ldr	r4, [sp, #28]
 800d8aa:	9704      	str	r7, [sp, #16]
 800d8ac:	e761      	b.n	800d772 <_dtoa_r+0x3e2>
 800d8ae:	4b27      	ldr	r3, [pc, #156]	@ (800d94c <_dtoa_r+0x5bc>)
 800d8b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d8b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d8b6:	4454      	add	r4, sl
 800d8b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d8bc:	2900      	cmp	r1, #0
 800d8be:	d053      	beq.n	800d968 <_dtoa_r+0x5d8>
 800d8c0:	2000      	movs	r0, #0
 800d8c2:	4928      	ldr	r1, [pc, #160]	@ (800d964 <_dtoa_r+0x5d4>)
 800d8c4:	f7f2 ffd6 	bl	8000874 <__aeabi_ddiv>
 800d8c8:	4633      	mov	r3, r6
 800d8ca:	4656      	mov	r6, sl
 800d8cc:	462a      	mov	r2, r5
 800d8ce:	f7f2 fcef 	bl	80002b0 <__aeabi_dsub>
 800d8d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d8d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8da:	f7f3 f951 	bl	8000b80 <__aeabi_d2iz>
 800d8de:	4605      	mov	r5, r0
 800d8e0:	f7f2 fe34 	bl	800054c <__aeabi_i2d>
 800d8e4:	4602      	mov	r2, r0
 800d8e6:	460b      	mov	r3, r1
 800d8e8:	3530      	adds	r5, #48	@ 0x30
 800d8ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8ee:	f7f2 fcdf 	bl	80002b0 <__aeabi_dsub>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	f806 5b01 	strb.w	r5, [r6], #1
 800d8fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d8fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d902:	f7f3 f8ff 	bl	8000b04 <__aeabi_dcmplt>
 800d906:	2800      	cmp	r0, #0
 800d908:	d171      	bne.n	800d9ee <_dtoa_r+0x65e>
 800d90a:	2000      	movs	r0, #0
 800d90c:	4911      	ldr	r1, [pc, #68]	@ (800d954 <_dtoa_r+0x5c4>)
 800d90e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d912:	f7f2 fccd 	bl	80002b0 <__aeabi_dsub>
 800d916:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d91a:	f7f3 f8f3 	bl	8000b04 <__aeabi_dcmplt>
 800d91e:	2800      	cmp	r0, #0
 800d920:	f040 8095 	bne.w	800da4e <_dtoa_r+0x6be>
 800d924:	42a6      	cmp	r6, r4
 800d926:	f43f af50 	beq.w	800d7ca <_dtoa_r+0x43a>
 800d92a:	2200      	movs	r2, #0
 800d92c:	4b0a      	ldr	r3, [pc, #40]	@ (800d958 <_dtoa_r+0x5c8>)
 800d92e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d932:	f7f2 fe75 	bl	8000620 <__aeabi_dmul>
 800d936:	2200      	movs	r2, #0
 800d938:	4b07      	ldr	r3, [pc, #28]	@ (800d958 <_dtoa_r+0x5c8>)
 800d93a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d93e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d942:	f7f2 fe6d 	bl	8000620 <__aeabi_dmul>
 800d946:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d94a:	e7c4      	b.n	800d8d6 <_dtoa_r+0x546>
 800d94c:	08010870 	.word	0x08010870
 800d950:	08010848 	.word	0x08010848
 800d954:	3ff00000 	.word	0x3ff00000
 800d958:	40240000 	.word	0x40240000
 800d95c:	401c0000 	.word	0x401c0000
 800d960:	40140000 	.word	0x40140000
 800d964:	3fe00000 	.word	0x3fe00000
 800d968:	4631      	mov	r1, r6
 800d96a:	4656      	mov	r6, sl
 800d96c:	4628      	mov	r0, r5
 800d96e:	f7f2 fe57 	bl	8000620 <__aeabi_dmul>
 800d972:	9415      	str	r4, [sp, #84]	@ 0x54
 800d974:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d978:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d97c:	f7f3 f900 	bl	8000b80 <__aeabi_d2iz>
 800d980:	4605      	mov	r5, r0
 800d982:	f7f2 fde3 	bl	800054c <__aeabi_i2d>
 800d986:	4602      	mov	r2, r0
 800d988:	3530      	adds	r5, #48	@ 0x30
 800d98a:	460b      	mov	r3, r1
 800d98c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d990:	f7f2 fc8e 	bl	80002b0 <__aeabi_dsub>
 800d994:	f806 5b01 	strb.w	r5, [r6], #1
 800d998:	4602      	mov	r2, r0
 800d99a:	460b      	mov	r3, r1
 800d99c:	42a6      	cmp	r6, r4
 800d99e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d9a2:	f04f 0200 	mov.w	r2, #0
 800d9a6:	d124      	bne.n	800d9f2 <_dtoa_r+0x662>
 800d9a8:	4bac      	ldr	r3, [pc, #688]	@ (800dc5c <_dtoa_r+0x8cc>)
 800d9aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d9ae:	f7f2 fc81 	bl	80002b4 <__adddf3>
 800d9b2:	4602      	mov	r2, r0
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9ba:	f7f3 f8c1 	bl	8000b40 <__aeabi_dcmpgt>
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	d145      	bne.n	800da4e <_dtoa_r+0x6be>
 800d9c2:	2000      	movs	r0, #0
 800d9c4:	49a5      	ldr	r1, [pc, #660]	@ (800dc5c <_dtoa_r+0x8cc>)
 800d9c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d9ca:	f7f2 fc71 	bl	80002b0 <__aeabi_dsub>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9d6:	f7f3 f895 	bl	8000b04 <__aeabi_dcmplt>
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	f43f aef5 	beq.w	800d7ca <_dtoa_r+0x43a>
 800d9e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d9e2:	1e73      	subs	r3, r6, #1
 800d9e4:	9315      	str	r3, [sp, #84]	@ 0x54
 800d9e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d9ea:	2b30      	cmp	r3, #48	@ 0x30
 800d9ec:	d0f8      	beq.n	800d9e0 <_dtoa_r+0x650>
 800d9ee:	9f04      	ldr	r7, [sp, #16]
 800d9f0:	e73e      	b.n	800d870 <_dtoa_r+0x4e0>
 800d9f2:	4b9b      	ldr	r3, [pc, #620]	@ (800dc60 <_dtoa_r+0x8d0>)
 800d9f4:	f7f2 fe14 	bl	8000620 <__aeabi_dmul>
 800d9f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9fc:	e7bc      	b.n	800d978 <_dtoa_r+0x5e8>
 800d9fe:	d10c      	bne.n	800da1a <_dtoa_r+0x68a>
 800da00:	2200      	movs	r2, #0
 800da02:	4b98      	ldr	r3, [pc, #608]	@ (800dc64 <_dtoa_r+0x8d4>)
 800da04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da08:	f7f2 fe0a 	bl	8000620 <__aeabi_dmul>
 800da0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da10:	f7f3 f88c 	bl	8000b2c <__aeabi_dcmpge>
 800da14:	2800      	cmp	r0, #0
 800da16:	f000 8157 	beq.w	800dcc8 <_dtoa_r+0x938>
 800da1a:	2400      	movs	r4, #0
 800da1c:	4625      	mov	r5, r4
 800da1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da20:	4656      	mov	r6, sl
 800da22:	43db      	mvns	r3, r3
 800da24:	9304      	str	r3, [sp, #16]
 800da26:	2700      	movs	r7, #0
 800da28:	4621      	mov	r1, r4
 800da2a:	4658      	mov	r0, fp
 800da2c:	f000 fbb4 	bl	800e198 <_Bfree>
 800da30:	2d00      	cmp	r5, #0
 800da32:	d0dc      	beq.n	800d9ee <_dtoa_r+0x65e>
 800da34:	b12f      	cbz	r7, 800da42 <_dtoa_r+0x6b2>
 800da36:	42af      	cmp	r7, r5
 800da38:	d003      	beq.n	800da42 <_dtoa_r+0x6b2>
 800da3a:	4639      	mov	r1, r7
 800da3c:	4658      	mov	r0, fp
 800da3e:	f000 fbab 	bl	800e198 <_Bfree>
 800da42:	4629      	mov	r1, r5
 800da44:	4658      	mov	r0, fp
 800da46:	f000 fba7 	bl	800e198 <_Bfree>
 800da4a:	e7d0      	b.n	800d9ee <_dtoa_r+0x65e>
 800da4c:	9704      	str	r7, [sp, #16]
 800da4e:	4633      	mov	r3, r6
 800da50:	461e      	mov	r6, r3
 800da52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da56:	2a39      	cmp	r2, #57	@ 0x39
 800da58:	d107      	bne.n	800da6a <_dtoa_r+0x6da>
 800da5a:	459a      	cmp	sl, r3
 800da5c:	d1f8      	bne.n	800da50 <_dtoa_r+0x6c0>
 800da5e:	9a04      	ldr	r2, [sp, #16]
 800da60:	3201      	adds	r2, #1
 800da62:	9204      	str	r2, [sp, #16]
 800da64:	2230      	movs	r2, #48	@ 0x30
 800da66:	f88a 2000 	strb.w	r2, [sl]
 800da6a:	781a      	ldrb	r2, [r3, #0]
 800da6c:	3201      	adds	r2, #1
 800da6e:	701a      	strb	r2, [r3, #0]
 800da70:	e7bd      	b.n	800d9ee <_dtoa_r+0x65e>
 800da72:	2200      	movs	r2, #0
 800da74:	4b7a      	ldr	r3, [pc, #488]	@ (800dc60 <_dtoa_r+0x8d0>)
 800da76:	f7f2 fdd3 	bl	8000620 <__aeabi_dmul>
 800da7a:	2200      	movs	r2, #0
 800da7c:	2300      	movs	r3, #0
 800da7e:	4604      	mov	r4, r0
 800da80:	460d      	mov	r5, r1
 800da82:	f7f3 f835 	bl	8000af0 <__aeabi_dcmpeq>
 800da86:	2800      	cmp	r0, #0
 800da88:	f43f aebb 	beq.w	800d802 <_dtoa_r+0x472>
 800da8c:	e6f0      	b.n	800d870 <_dtoa_r+0x4e0>
 800da8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800da90:	2a00      	cmp	r2, #0
 800da92:	f000 80db 	beq.w	800dc4c <_dtoa_r+0x8bc>
 800da96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da98:	2a01      	cmp	r2, #1
 800da9a:	f300 80bf 	bgt.w	800dc1c <_dtoa_r+0x88c>
 800da9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800daa0:	2a00      	cmp	r2, #0
 800daa2:	f000 80b7 	beq.w	800dc14 <_dtoa_r+0x884>
 800daa6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800daaa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800daac:	4646      	mov	r6, r8
 800daae:	9a08      	ldr	r2, [sp, #32]
 800dab0:	2101      	movs	r1, #1
 800dab2:	4658      	mov	r0, fp
 800dab4:	4498      	add	r8, r3
 800dab6:	441a      	add	r2, r3
 800dab8:	9208      	str	r2, [sp, #32]
 800daba:	f000 fc23 	bl	800e304 <__i2b>
 800dabe:	4605      	mov	r5, r0
 800dac0:	b15e      	cbz	r6, 800dada <_dtoa_r+0x74a>
 800dac2:	9b08      	ldr	r3, [sp, #32]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	dd08      	ble.n	800dada <_dtoa_r+0x74a>
 800dac8:	42b3      	cmp	r3, r6
 800daca:	9a08      	ldr	r2, [sp, #32]
 800dacc:	bfa8      	it	ge
 800dace:	4633      	movge	r3, r6
 800dad0:	eba8 0803 	sub.w	r8, r8, r3
 800dad4:	1af6      	subs	r6, r6, r3
 800dad6:	1ad3      	subs	r3, r2, r3
 800dad8:	9308      	str	r3, [sp, #32]
 800dada:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dadc:	b1f3      	cbz	r3, 800db1c <_dtoa_r+0x78c>
 800dade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	f000 80b7 	beq.w	800dc54 <_dtoa_r+0x8c4>
 800dae6:	b18c      	cbz	r4, 800db0c <_dtoa_r+0x77c>
 800dae8:	4629      	mov	r1, r5
 800daea:	4622      	mov	r2, r4
 800daec:	4658      	mov	r0, fp
 800daee:	f000 fcc9 	bl	800e484 <__pow5mult>
 800daf2:	464a      	mov	r2, r9
 800daf4:	4601      	mov	r1, r0
 800daf6:	4605      	mov	r5, r0
 800daf8:	4658      	mov	r0, fp
 800dafa:	f000 fc19 	bl	800e330 <__multiply>
 800dafe:	4649      	mov	r1, r9
 800db00:	9004      	str	r0, [sp, #16]
 800db02:	4658      	mov	r0, fp
 800db04:	f000 fb48 	bl	800e198 <_Bfree>
 800db08:	9b04      	ldr	r3, [sp, #16]
 800db0a:	4699      	mov	r9, r3
 800db0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db0e:	1b1a      	subs	r2, r3, r4
 800db10:	d004      	beq.n	800db1c <_dtoa_r+0x78c>
 800db12:	4649      	mov	r1, r9
 800db14:	4658      	mov	r0, fp
 800db16:	f000 fcb5 	bl	800e484 <__pow5mult>
 800db1a:	4681      	mov	r9, r0
 800db1c:	2101      	movs	r1, #1
 800db1e:	4658      	mov	r0, fp
 800db20:	f000 fbf0 	bl	800e304 <__i2b>
 800db24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db26:	4604      	mov	r4, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	f000 81cf 	beq.w	800decc <_dtoa_r+0xb3c>
 800db2e:	461a      	mov	r2, r3
 800db30:	4601      	mov	r1, r0
 800db32:	4658      	mov	r0, fp
 800db34:	f000 fca6 	bl	800e484 <__pow5mult>
 800db38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db3a:	4604      	mov	r4, r0
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	f300 8095 	bgt.w	800dc6c <_dtoa_r+0x8dc>
 800db42:	9b02      	ldr	r3, [sp, #8]
 800db44:	2b00      	cmp	r3, #0
 800db46:	f040 8087 	bne.w	800dc58 <_dtoa_r+0x8c8>
 800db4a:	9b03      	ldr	r3, [sp, #12]
 800db4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db50:	2b00      	cmp	r3, #0
 800db52:	f040 8089 	bne.w	800dc68 <_dtoa_r+0x8d8>
 800db56:	9b03      	ldr	r3, [sp, #12]
 800db58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800db5c:	0d1b      	lsrs	r3, r3, #20
 800db5e:	051b      	lsls	r3, r3, #20
 800db60:	b12b      	cbz	r3, 800db6e <_dtoa_r+0x7de>
 800db62:	9b08      	ldr	r3, [sp, #32]
 800db64:	f108 0801 	add.w	r8, r8, #1
 800db68:	3301      	adds	r3, #1
 800db6a:	9308      	str	r3, [sp, #32]
 800db6c:	2301      	movs	r3, #1
 800db6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800db70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db72:	2b00      	cmp	r3, #0
 800db74:	f000 81b0 	beq.w	800ded8 <_dtoa_r+0xb48>
 800db78:	6923      	ldr	r3, [r4, #16]
 800db7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db7e:	6918      	ldr	r0, [r3, #16]
 800db80:	f000 fb74 	bl	800e26c <__hi0bits>
 800db84:	f1c0 0020 	rsb	r0, r0, #32
 800db88:	9b08      	ldr	r3, [sp, #32]
 800db8a:	4418      	add	r0, r3
 800db8c:	f010 001f 	ands.w	r0, r0, #31
 800db90:	d077      	beq.n	800dc82 <_dtoa_r+0x8f2>
 800db92:	f1c0 0320 	rsb	r3, r0, #32
 800db96:	2b04      	cmp	r3, #4
 800db98:	dd6b      	ble.n	800dc72 <_dtoa_r+0x8e2>
 800db9a:	f1c0 001c 	rsb	r0, r0, #28
 800db9e:	9b08      	ldr	r3, [sp, #32]
 800dba0:	4480      	add	r8, r0
 800dba2:	4403      	add	r3, r0
 800dba4:	4406      	add	r6, r0
 800dba6:	9308      	str	r3, [sp, #32]
 800dba8:	f1b8 0f00 	cmp.w	r8, #0
 800dbac:	dd05      	ble.n	800dbba <_dtoa_r+0x82a>
 800dbae:	4649      	mov	r1, r9
 800dbb0:	4642      	mov	r2, r8
 800dbb2:	4658      	mov	r0, fp
 800dbb4:	f000 fcc0 	bl	800e538 <__lshift>
 800dbb8:	4681      	mov	r9, r0
 800dbba:	9b08      	ldr	r3, [sp, #32]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	dd05      	ble.n	800dbcc <_dtoa_r+0x83c>
 800dbc0:	4621      	mov	r1, r4
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	4658      	mov	r0, fp
 800dbc6:	f000 fcb7 	bl	800e538 <__lshift>
 800dbca:	4604      	mov	r4, r0
 800dbcc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d059      	beq.n	800dc86 <_dtoa_r+0x8f6>
 800dbd2:	4621      	mov	r1, r4
 800dbd4:	4648      	mov	r0, r9
 800dbd6:	f000 fd1b 	bl	800e610 <__mcmp>
 800dbda:	2800      	cmp	r0, #0
 800dbdc:	da53      	bge.n	800dc86 <_dtoa_r+0x8f6>
 800dbde:	1e7b      	subs	r3, r7, #1
 800dbe0:	4649      	mov	r1, r9
 800dbe2:	220a      	movs	r2, #10
 800dbe4:	4658      	mov	r0, fp
 800dbe6:	9304      	str	r3, [sp, #16]
 800dbe8:	2300      	movs	r3, #0
 800dbea:	f000 faf7 	bl	800e1dc <__multadd>
 800dbee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbf0:	4681      	mov	r9, r0
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	f000 8172 	beq.w	800dedc <_dtoa_r+0xb4c>
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	4629      	mov	r1, r5
 800dbfc:	220a      	movs	r2, #10
 800dbfe:	4658      	mov	r0, fp
 800dc00:	f000 faec 	bl	800e1dc <__multadd>
 800dc04:	9b00      	ldr	r3, [sp, #0]
 800dc06:	4605      	mov	r5, r0
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	dc67      	bgt.n	800dcdc <_dtoa_r+0x94c>
 800dc0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	dc41      	bgt.n	800dc96 <_dtoa_r+0x906>
 800dc12:	e063      	b.n	800dcdc <_dtoa_r+0x94c>
 800dc14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dc16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dc1a:	e746      	b.n	800daaa <_dtoa_r+0x71a>
 800dc1c:	9b07      	ldr	r3, [sp, #28]
 800dc1e:	1e5c      	subs	r4, r3, #1
 800dc20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc22:	42a3      	cmp	r3, r4
 800dc24:	bfb7      	itett	lt
 800dc26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dc28:	1b1c      	subge	r4, r3, r4
 800dc2a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dc2c:	1ae3      	sublt	r3, r4, r3
 800dc2e:	bfbe      	ittt	lt
 800dc30:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dc32:	2400      	movlt	r4, #0
 800dc34:	18d2      	addlt	r2, r2, r3
 800dc36:	9b07      	ldr	r3, [sp, #28]
 800dc38:	bfb8      	it	lt
 800dc3a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	bfb5      	itete	lt
 800dc40:	eba8 0603 	sublt.w	r6, r8, r3
 800dc44:	4646      	movge	r6, r8
 800dc46:	2300      	movlt	r3, #0
 800dc48:	9b07      	ldrge	r3, [sp, #28]
 800dc4a:	e730      	b.n	800daae <_dtoa_r+0x71e>
 800dc4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dc4e:	4646      	mov	r6, r8
 800dc50:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dc52:	e735      	b.n	800dac0 <_dtoa_r+0x730>
 800dc54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dc56:	e75c      	b.n	800db12 <_dtoa_r+0x782>
 800dc58:	2300      	movs	r3, #0
 800dc5a:	e788      	b.n	800db6e <_dtoa_r+0x7de>
 800dc5c:	3fe00000 	.word	0x3fe00000
 800dc60:	40240000 	.word	0x40240000
 800dc64:	40140000 	.word	0x40140000
 800dc68:	9b02      	ldr	r3, [sp, #8]
 800dc6a:	e780      	b.n	800db6e <_dtoa_r+0x7de>
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc70:	e782      	b.n	800db78 <_dtoa_r+0x7e8>
 800dc72:	d099      	beq.n	800dba8 <_dtoa_r+0x818>
 800dc74:	331c      	adds	r3, #28
 800dc76:	9a08      	ldr	r2, [sp, #32]
 800dc78:	441a      	add	r2, r3
 800dc7a:	4498      	add	r8, r3
 800dc7c:	441e      	add	r6, r3
 800dc7e:	9208      	str	r2, [sp, #32]
 800dc80:	e792      	b.n	800dba8 <_dtoa_r+0x818>
 800dc82:	4603      	mov	r3, r0
 800dc84:	e7f6      	b.n	800dc74 <_dtoa_r+0x8e4>
 800dc86:	9b07      	ldr	r3, [sp, #28]
 800dc88:	9704      	str	r7, [sp, #16]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	dc20      	bgt.n	800dcd0 <_dtoa_r+0x940>
 800dc8e:	9300      	str	r3, [sp, #0]
 800dc90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc92:	2b02      	cmp	r3, #2
 800dc94:	dd1e      	ble.n	800dcd4 <_dtoa_r+0x944>
 800dc96:	9b00      	ldr	r3, [sp, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	f47f aec0 	bne.w	800da1e <_dtoa_r+0x68e>
 800dc9e:	4621      	mov	r1, r4
 800dca0:	2205      	movs	r2, #5
 800dca2:	4658      	mov	r0, fp
 800dca4:	f000 fa9a 	bl	800e1dc <__multadd>
 800dca8:	4601      	mov	r1, r0
 800dcaa:	4604      	mov	r4, r0
 800dcac:	4648      	mov	r0, r9
 800dcae:	f000 fcaf 	bl	800e610 <__mcmp>
 800dcb2:	2800      	cmp	r0, #0
 800dcb4:	f77f aeb3 	ble.w	800da1e <_dtoa_r+0x68e>
 800dcb8:	2331      	movs	r3, #49	@ 0x31
 800dcba:	4656      	mov	r6, sl
 800dcbc:	f806 3b01 	strb.w	r3, [r6], #1
 800dcc0:	9b04      	ldr	r3, [sp, #16]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	9304      	str	r3, [sp, #16]
 800dcc6:	e6ae      	b.n	800da26 <_dtoa_r+0x696>
 800dcc8:	9c07      	ldr	r4, [sp, #28]
 800dcca:	9704      	str	r7, [sp, #16]
 800dccc:	4625      	mov	r5, r4
 800dcce:	e7f3      	b.n	800dcb8 <_dtoa_r+0x928>
 800dcd0:	9b07      	ldr	r3, [sp, #28]
 800dcd2:	9300      	str	r3, [sp, #0]
 800dcd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	f000 8104 	beq.w	800dee4 <_dtoa_r+0xb54>
 800dcdc:	2e00      	cmp	r6, #0
 800dcde:	dd05      	ble.n	800dcec <_dtoa_r+0x95c>
 800dce0:	4629      	mov	r1, r5
 800dce2:	4632      	mov	r2, r6
 800dce4:	4658      	mov	r0, fp
 800dce6:	f000 fc27 	bl	800e538 <__lshift>
 800dcea:	4605      	mov	r5, r0
 800dcec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d05a      	beq.n	800dda8 <_dtoa_r+0xa18>
 800dcf2:	6869      	ldr	r1, [r5, #4]
 800dcf4:	4658      	mov	r0, fp
 800dcf6:	f000 fa0f 	bl	800e118 <_Balloc>
 800dcfa:	4606      	mov	r6, r0
 800dcfc:	b928      	cbnz	r0, 800dd0a <_dtoa_r+0x97a>
 800dcfe:	4b84      	ldr	r3, [pc, #528]	@ (800df10 <_dtoa_r+0xb80>)
 800dd00:	4602      	mov	r2, r0
 800dd02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dd06:	f7ff bb5a 	b.w	800d3be <_dtoa_r+0x2e>
 800dd0a:	692a      	ldr	r2, [r5, #16]
 800dd0c:	f105 010c 	add.w	r1, r5, #12
 800dd10:	300c      	adds	r0, #12
 800dd12:	3202      	adds	r2, #2
 800dd14:	0092      	lsls	r2, r2, #2
 800dd16:	f7ff faa0 	bl	800d25a <memcpy>
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	4631      	mov	r1, r6
 800dd1e:	4658      	mov	r0, fp
 800dd20:	f000 fc0a 	bl	800e538 <__lshift>
 800dd24:	f10a 0301 	add.w	r3, sl, #1
 800dd28:	462f      	mov	r7, r5
 800dd2a:	4605      	mov	r5, r0
 800dd2c:	9307      	str	r3, [sp, #28]
 800dd2e:	9b00      	ldr	r3, [sp, #0]
 800dd30:	4453      	add	r3, sl
 800dd32:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd34:	9b02      	ldr	r3, [sp, #8]
 800dd36:	f003 0301 	and.w	r3, r3, #1
 800dd3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd3c:	9b07      	ldr	r3, [sp, #28]
 800dd3e:	4621      	mov	r1, r4
 800dd40:	4648      	mov	r0, r9
 800dd42:	3b01      	subs	r3, #1
 800dd44:	9300      	str	r3, [sp, #0]
 800dd46:	f7ff fa95 	bl	800d274 <quorem>
 800dd4a:	4639      	mov	r1, r7
 800dd4c:	9002      	str	r0, [sp, #8]
 800dd4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dd52:	4648      	mov	r0, r9
 800dd54:	f000 fc5c 	bl	800e610 <__mcmp>
 800dd58:	462a      	mov	r2, r5
 800dd5a:	9008      	str	r0, [sp, #32]
 800dd5c:	4621      	mov	r1, r4
 800dd5e:	4658      	mov	r0, fp
 800dd60:	f000 fc72 	bl	800e648 <__mdiff>
 800dd64:	68c2      	ldr	r2, [r0, #12]
 800dd66:	4606      	mov	r6, r0
 800dd68:	bb02      	cbnz	r2, 800ddac <_dtoa_r+0xa1c>
 800dd6a:	4601      	mov	r1, r0
 800dd6c:	4648      	mov	r0, r9
 800dd6e:	f000 fc4f 	bl	800e610 <__mcmp>
 800dd72:	4602      	mov	r2, r0
 800dd74:	4631      	mov	r1, r6
 800dd76:	4658      	mov	r0, fp
 800dd78:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd7a:	f000 fa0d 	bl	800e198 <_Bfree>
 800dd7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd82:	9e07      	ldr	r6, [sp, #28]
 800dd84:	ea43 0102 	orr.w	r1, r3, r2
 800dd88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd8a:	4319      	orrs	r1, r3
 800dd8c:	d110      	bne.n	800ddb0 <_dtoa_r+0xa20>
 800dd8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dd92:	d029      	beq.n	800dde8 <_dtoa_r+0xa58>
 800dd94:	9b08      	ldr	r3, [sp, #32]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	dd02      	ble.n	800dda0 <_dtoa_r+0xa10>
 800dd9a:	9b02      	ldr	r3, [sp, #8]
 800dd9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dda0:	9b00      	ldr	r3, [sp, #0]
 800dda2:	f883 8000 	strb.w	r8, [r3]
 800dda6:	e63f      	b.n	800da28 <_dtoa_r+0x698>
 800dda8:	4628      	mov	r0, r5
 800ddaa:	e7bb      	b.n	800dd24 <_dtoa_r+0x994>
 800ddac:	2201      	movs	r2, #1
 800ddae:	e7e1      	b.n	800dd74 <_dtoa_r+0x9e4>
 800ddb0:	9b08      	ldr	r3, [sp, #32]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	db04      	blt.n	800ddc0 <_dtoa_r+0xa30>
 800ddb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ddb8:	430b      	orrs	r3, r1
 800ddba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ddbc:	430b      	orrs	r3, r1
 800ddbe:	d120      	bne.n	800de02 <_dtoa_r+0xa72>
 800ddc0:	2a00      	cmp	r2, #0
 800ddc2:	dded      	ble.n	800dda0 <_dtoa_r+0xa10>
 800ddc4:	4649      	mov	r1, r9
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	4658      	mov	r0, fp
 800ddca:	f000 fbb5 	bl	800e538 <__lshift>
 800ddce:	4621      	mov	r1, r4
 800ddd0:	4681      	mov	r9, r0
 800ddd2:	f000 fc1d 	bl	800e610 <__mcmp>
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	dc03      	bgt.n	800dde2 <_dtoa_r+0xa52>
 800ddda:	d1e1      	bne.n	800dda0 <_dtoa_r+0xa10>
 800dddc:	f018 0f01 	tst.w	r8, #1
 800dde0:	d0de      	beq.n	800dda0 <_dtoa_r+0xa10>
 800dde2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dde6:	d1d8      	bne.n	800dd9a <_dtoa_r+0xa0a>
 800dde8:	2339      	movs	r3, #57	@ 0x39
 800ddea:	9a00      	ldr	r2, [sp, #0]
 800ddec:	7013      	strb	r3, [r2, #0]
 800ddee:	4633      	mov	r3, r6
 800ddf0:	461e      	mov	r6, r3
 800ddf2:	3b01      	subs	r3, #1
 800ddf4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ddf8:	2a39      	cmp	r2, #57	@ 0x39
 800ddfa:	d052      	beq.n	800dea2 <_dtoa_r+0xb12>
 800ddfc:	3201      	adds	r2, #1
 800ddfe:	701a      	strb	r2, [r3, #0]
 800de00:	e612      	b.n	800da28 <_dtoa_r+0x698>
 800de02:	2a00      	cmp	r2, #0
 800de04:	dd07      	ble.n	800de16 <_dtoa_r+0xa86>
 800de06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de0a:	d0ed      	beq.n	800dde8 <_dtoa_r+0xa58>
 800de0c:	f108 0301 	add.w	r3, r8, #1
 800de10:	9a00      	ldr	r2, [sp, #0]
 800de12:	7013      	strb	r3, [r2, #0]
 800de14:	e608      	b.n	800da28 <_dtoa_r+0x698>
 800de16:	9b07      	ldr	r3, [sp, #28]
 800de18:	9a07      	ldr	r2, [sp, #28]
 800de1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800de1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de20:	4293      	cmp	r3, r2
 800de22:	d028      	beq.n	800de76 <_dtoa_r+0xae6>
 800de24:	4649      	mov	r1, r9
 800de26:	2300      	movs	r3, #0
 800de28:	220a      	movs	r2, #10
 800de2a:	4658      	mov	r0, fp
 800de2c:	f000 f9d6 	bl	800e1dc <__multadd>
 800de30:	42af      	cmp	r7, r5
 800de32:	4681      	mov	r9, r0
 800de34:	f04f 0300 	mov.w	r3, #0
 800de38:	f04f 020a 	mov.w	r2, #10
 800de3c:	4639      	mov	r1, r7
 800de3e:	4658      	mov	r0, fp
 800de40:	d107      	bne.n	800de52 <_dtoa_r+0xac2>
 800de42:	f000 f9cb 	bl	800e1dc <__multadd>
 800de46:	4607      	mov	r7, r0
 800de48:	4605      	mov	r5, r0
 800de4a:	9b07      	ldr	r3, [sp, #28]
 800de4c:	3301      	adds	r3, #1
 800de4e:	9307      	str	r3, [sp, #28]
 800de50:	e774      	b.n	800dd3c <_dtoa_r+0x9ac>
 800de52:	f000 f9c3 	bl	800e1dc <__multadd>
 800de56:	4629      	mov	r1, r5
 800de58:	4607      	mov	r7, r0
 800de5a:	2300      	movs	r3, #0
 800de5c:	220a      	movs	r2, #10
 800de5e:	4658      	mov	r0, fp
 800de60:	f000 f9bc 	bl	800e1dc <__multadd>
 800de64:	4605      	mov	r5, r0
 800de66:	e7f0      	b.n	800de4a <_dtoa_r+0xaba>
 800de68:	9b00      	ldr	r3, [sp, #0]
 800de6a:	2700      	movs	r7, #0
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	bfcc      	ite	gt
 800de70:	461e      	movgt	r6, r3
 800de72:	2601      	movle	r6, #1
 800de74:	4456      	add	r6, sl
 800de76:	4649      	mov	r1, r9
 800de78:	2201      	movs	r2, #1
 800de7a:	4658      	mov	r0, fp
 800de7c:	f000 fb5c 	bl	800e538 <__lshift>
 800de80:	4621      	mov	r1, r4
 800de82:	4681      	mov	r9, r0
 800de84:	f000 fbc4 	bl	800e610 <__mcmp>
 800de88:	2800      	cmp	r0, #0
 800de8a:	dcb0      	bgt.n	800ddee <_dtoa_r+0xa5e>
 800de8c:	d102      	bne.n	800de94 <_dtoa_r+0xb04>
 800de8e:	f018 0f01 	tst.w	r8, #1
 800de92:	d1ac      	bne.n	800ddee <_dtoa_r+0xa5e>
 800de94:	4633      	mov	r3, r6
 800de96:	461e      	mov	r6, r3
 800de98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de9c:	2a30      	cmp	r2, #48	@ 0x30
 800de9e:	d0fa      	beq.n	800de96 <_dtoa_r+0xb06>
 800dea0:	e5c2      	b.n	800da28 <_dtoa_r+0x698>
 800dea2:	459a      	cmp	sl, r3
 800dea4:	d1a4      	bne.n	800ddf0 <_dtoa_r+0xa60>
 800dea6:	9b04      	ldr	r3, [sp, #16]
 800dea8:	3301      	adds	r3, #1
 800deaa:	9304      	str	r3, [sp, #16]
 800deac:	2331      	movs	r3, #49	@ 0x31
 800deae:	f88a 3000 	strb.w	r3, [sl]
 800deb2:	e5b9      	b.n	800da28 <_dtoa_r+0x698>
 800deb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800deb6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800df14 <_dtoa_r+0xb84>
 800deba:	b11b      	cbz	r3, 800dec4 <_dtoa_r+0xb34>
 800debc:	f10a 0308 	add.w	r3, sl, #8
 800dec0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dec2:	6013      	str	r3, [r2, #0]
 800dec4:	4650      	mov	r0, sl
 800dec6:	b019      	add	sp, #100	@ 0x64
 800dec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800decc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dece:	2b01      	cmp	r3, #1
 800ded0:	f77f ae37 	ble.w	800db42 <_dtoa_r+0x7b2>
 800ded4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ded6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ded8:	2001      	movs	r0, #1
 800deda:	e655      	b.n	800db88 <_dtoa_r+0x7f8>
 800dedc:	9b00      	ldr	r3, [sp, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	f77f aed6 	ble.w	800dc90 <_dtoa_r+0x900>
 800dee4:	4656      	mov	r6, sl
 800dee6:	4621      	mov	r1, r4
 800dee8:	4648      	mov	r0, r9
 800deea:	f7ff f9c3 	bl	800d274 <quorem>
 800deee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800def2:	9b00      	ldr	r3, [sp, #0]
 800def4:	f806 8b01 	strb.w	r8, [r6], #1
 800def8:	eba6 020a 	sub.w	r2, r6, sl
 800defc:	4293      	cmp	r3, r2
 800defe:	ddb3      	ble.n	800de68 <_dtoa_r+0xad8>
 800df00:	4649      	mov	r1, r9
 800df02:	2300      	movs	r3, #0
 800df04:	220a      	movs	r2, #10
 800df06:	4658      	mov	r0, fp
 800df08:	f000 f968 	bl	800e1dc <__multadd>
 800df0c:	4681      	mov	r9, r0
 800df0e:	e7ea      	b.n	800dee6 <_dtoa_r+0xb56>
 800df10:	080107d0 	.word	0x080107d0
 800df14:	08010754 	.word	0x08010754

0800df18 <_free_r>:
 800df18:	b538      	push	{r3, r4, r5, lr}
 800df1a:	4605      	mov	r5, r0
 800df1c:	2900      	cmp	r1, #0
 800df1e:	d041      	beq.n	800dfa4 <_free_r+0x8c>
 800df20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df24:	1f0c      	subs	r4, r1, #4
 800df26:	2b00      	cmp	r3, #0
 800df28:	bfb8      	it	lt
 800df2a:	18e4      	addlt	r4, r4, r3
 800df2c:	f000 f8e8 	bl	800e100 <__malloc_lock>
 800df30:	4a1d      	ldr	r2, [pc, #116]	@ (800dfa8 <_free_r+0x90>)
 800df32:	6813      	ldr	r3, [r2, #0]
 800df34:	b933      	cbnz	r3, 800df44 <_free_r+0x2c>
 800df36:	6063      	str	r3, [r4, #4]
 800df38:	6014      	str	r4, [r2, #0]
 800df3a:	4628      	mov	r0, r5
 800df3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df40:	f000 b8e4 	b.w	800e10c <__malloc_unlock>
 800df44:	42a3      	cmp	r3, r4
 800df46:	d908      	bls.n	800df5a <_free_r+0x42>
 800df48:	6820      	ldr	r0, [r4, #0]
 800df4a:	1821      	adds	r1, r4, r0
 800df4c:	428b      	cmp	r3, r1
 800df4e:	bf01      	itttt	eq
 800df50:	6819      	ldreq	r1, [r3, #0]
 800df52:	685b      	ldreq	r3, [r3, #4]
 800df54:	1809      	addeq	r1, r1, r0
 800df56:	6021      	streq	r1, [r4, #0]
 800df58:	e7ed      	b.n	800df36 <_free_r+0x1e>
 800df5a:	461a      	mov	r2, r3
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	b10b      	cbz	r3, 800df64 <_free_r+0x4c>
 800df60:	42a3      	cmp	r3, r4
 800df62:	d9fa      	bls.n	800df5a <_free_r+0x42>
 800df64:	6811      	ldr	r1, [r2, #0]
 800df66:	1850      	adds	r0, r2, r1
 800df68:	42a0      	cmp	r0, r4
 800df6a:	d10b      	bne.n	800df84 <_free_r+0x6c>
 800df6c:	6820      	ldr	r0, [r4, #0]
 800df6e:	4401      	add	r1, r0
 800df70:	1850      	adds	r0, r2, r1
 800df72:	6011      	str	r1, [r2, #0]
 800df74:	4283      	cmp	r3, r0
 800df76:	d1e0      	bne.n	800df3a <_free_r+0x22>
 800df78:	6818      	ldr	r0, [r3, #0]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	4408      	add	r0, r1
 800df7e:	6053      	str	r3, [r2, #4]
 800df80:	6010      	str	r0, [r2, #0]
 800df82:	e7da      	b.n	800df3a <_free_r+0x22>
 800df84:	d902      	bls.n	800df8c <_free_r+0x74>
 800df86:	230c      	movs	r3, #12
 800df88:	602b      	str	r3, [r5, #0]
 800df8a:	e7d6      	b.n	800df3a <_free_r+0x22>
 800df8c:	6820      	ldr	r0, [r4, #0]
 800df8e:	1821      	adds	r1, r4, r0
 800df90:	428b      	cmp	r3, r1
 800df92:	bf02      	ittt	eq
 800df94:	6819      	ldreq	r1, [r3, #0]
 800df96:	685b      	ldreq	r3, [r3, #4]
 800df98:	1809      	addeq	r1, r1, r0
 800df9a:	6063      	str	r3, [r4, #4]
 800df9c:	bf08      	it	eq
 800df9e:	6021      	streq	r1, [r4, #0]
 800dfa0:	6054      	str	r4, [r2, #4]
 800dfa2:	e7ca      	b.n	800df3a <_free_r+0x22>
 800dfa4:	bd38      	pop	{r3, r4, r5, pc}
 800dfa6:	bf00      	nop
 800dfa8:	20003f00 	.word	0x20003f00

0800dfac <malloc>:
 800dfac:	4b02      	ldr	r3, [pc, #8]	@ (800dfb8 <malloc+0xc>)
 800dfae:	4601      	mov	r1, r0
 800dfb0:	6818      	ldr	r0, [r3, #0]
 800dfb2:	f000 b825 	b.w	800e000 <_malloc_r>
 800dfb6:	bf00      	nop
 800dfb8:	2000001c 	.word	0x2000001c

0800dfbc <sbrk_aligned>:
 800dfbc:	b570      	push	{r4, r5, r6, lr}
 800dfbe:	4e0f      	ldr	r6, [pc, #60]	@ (800dffc <sbrk_aligned+0x40>)
 800dfc0:	460c      	mov	r4, r1
 800dfc2:	4605      	mov	r5, r0
 800dfc4:	6831      	ldr	r1, [r6, #0]
 800dfc6:	b911      	cbnz	r1, 800dfce <sbrk_aligned+0x12>
 800dfc8:	f000 fe4c 	bl	800ec64 <_sbrk_r>
 800dfcc:	6030      	str	r0, [r6, #0]
 800dfce:	4621      	mov	r1, r4
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	f000 fe47 	bl	800ec64 <_sbrk_r>
 800dfd6:	1c43      	adds	r3, r0, #1
 800dfd8:	d103      	bne.n	800dfe2 <sbrk_aligned+0x26>
 800dfda:	f04f 34ff 	mov.w	r4, #4294967295
 800dfde:	4620      	mov	r0, r4
 800dfe0:	bd70      	pop	{r4, r5, r6, pc}
 800dfe2:	1cc4      	adds	r4, r0, #3
 800dfe4:	f024 0403 	bic.w	r4, r4, #3
 800dfe8:	42a0      	cmp	r0, r4
 800dfea:	d0f8      	beq.n	800dfde <sbrk_aligned+0x22>
 800dfec:	1a21      	subs	r1, r4, r0
 800dfee:	4628      	mov	r0, r5
 800dff0:	f000 fe38 	bl	800ec64 <_sbrk_r>
 800dff4:	3001      	adds	r0, #1
 800dff6:	d1f2      	bne.n	800dfde <sbrk_aligned+0x22>
 800dff8:	e7ef      	b.n	800dfda <sbrk_aligned+0x1e>
 800dffa:	bf00      	nop
 800dffc:	20003efc 	.word	0x20003efc

0800e000 <_malloc_r>:
 800e000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e004:	1ccd      	adds	r5, r1, #3
 800e006:	4606      	mov	r6, r0
 800e008:	f025 0503 	bic.w	r5, r5, #3
 800e00c:	3508      	adds	r5, #8
 800e00e:	2d0c      	cmp	r5, #12
 800e010:	bf38      	it	cc
 800e012:	250c      	movcc	r5, #12
 800e014:	2d00      	cmp	r5, #0
 800e016:	db01      	blt.n	800e01c <_malloc_r+0x1c>
 800e018:	42a9      	cmp	r1, r5
 800e01a:	d904      	bls.n	800e026 <_malloc_r+0x26>
 800e01c:	230c      	movs	r3, #12
 800e01e:	6033      	str	r3, [r6, #0]
 800e020:	2000      	movs	r0, #0
 800e022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e026:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e0fc <_malloc_r+0xfc>
 800e02a:	f000 f869 	bl	800e100 <__malloc_lock>
 800e02e:	f8d8 3000 	ldr.w	r3, [r8]
 800e032:	461c      	mov	r4, r3
 800e034:	bb44      	cbnz	r4, 800e088 <_malloc_r+0x88>
 800e036:	4629      	mov	r1, r5
 800e038:	4630      	mov	r0, r6
 800e03a:	f7ff ffbf 	bl	800dfbc <sbrk_aligned>
 800e03e:	1c43      	adds	r3, r0, #1
 800e040:	4604      	mov	r4, r0
 800e042:	d158      	bne.n	800e0f6 <_malloc_r+0xf6>
 800e044:	f8d8 4000 	ldr.w	r4, [r8]
 800e048:	4627      	mov	r7, r4
 800e04a:	2f00      	cmp	r7, #0
 800e04c:	d143      	bne.n	800e0d6 <_malloc_r+0xd6>
 800e04e:	2c00      	cmp	r4, #0
 800e050:	d04b      	beq.n	800e0ea <_malloc_r+0xea>
 800e052:	6823      	ldr	r3, [r4, #0]
 800e054:	4639      	mov	r1, r7
 800e056:	4630      	mov	r0, r6
 800e058:	eb04 0903 	add.w	r9, r4, r3
 800e05c:	f000 fe02 	bl	800ec64 <_sbrk_r>
 800e060:	4581      	cmp	r9, r0
 800e062:	d142      	bne.n	800e0ea <_malloc_r+0xea>
 800e064:	6821      	ldr	r1, [r4, #0]
 800e066:	4630      	mov	r0, r6
 800e068:	1a6d      	subs	r5, r5, r1
 800e06a:	4629      	mov	r1, r5
 800e06c:	f7ff ffa6 	bl	800dfbc <sbrk_aligned>
 800e070:	3001      	adds	r0, #1
 800e072:	d03a      	beq.n	800e0ea <_malloc_r+0xea>
 800e074:	6823      	ldr	r3, [r4, #0]
 800e076:	442b      	add	r3, r5
 800e078:	6023      	str	r3, [r4, #0]
 800e07a:	f8d8 3000 	ldr.w	r3, [r8]
 800e07e:	685a      	ldr	r2, [r3, #4]
 800e080:	bb62      	cbnz	r2, 800e0dc <_malloc_r+0xdc>
 800e082:	f8c8 7000 	str.w	r7, [r8]
 800e086:	e00f      	b.n	800e0a8 <_malloc_r+0xa8>
 800e088:	6822      	ldr	r2, [r4, #0]
 800e08a:	1b52      	subs	r2, r2, r5
 800e08c:	d420      	bmi.n	800e0d0 <_malloc_r+0xd0>
 800e08e:	2a0b      	cmp	r2, #11
 800e090:	d917      	bls.n	800e0c2 <_malloc_r+0xc2>
 800e092:	1961      	adds	r1, r4, r5
 800e094:	42a3      	cmp	r3, r4
 800e096:	6025      	str	r5, [r4, #0]
 800e098:	bf18      	it	ne
 800e09a:	6059      	strne	r1, [r3, #4]
 800e09c:	6863      	ldr	r3, [r4, #4]
 800e09e:	bf08      	it	eq
 800e0a0:	f8c8 1000 	streq.w	r1, [r8]
 800e0a4:	5162      	str	r2, [r4, r5]
 800e0a6:	604b      	str	r3, [r1, #4]
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	f000 f82f 	bl	800e10c <__malloc_unlock>
 800e0ae:	f104 000b 	add.w	r0, r4, #11
 800e0b2:	1d23      	adds	r3, r4, #4
 800e0b4:	f020 0007 	bic.w	r0, r0, #7
 800e0b8:	1ac2      	subs	r2, r0, r3
 800e0ba:	bf1c      	itt	ne
 800e0bc:	1a1b      	subne	r3, r3, r0
 800e0be:	50a3      	strne	r3, [r4, r2]
 800e0c0:	e7af      	b.n	800e022 <_malloc_r+0x22>
 800e0c2:	6862      	ldr	r2, [r4, #4]
 800e0c4:	42a3      	cmp	r3, r4
 800e0c6:	bf0c      	ite	eq
 800e0c8:	f8c8 2000 	streq.w	r2, [r8]
 800e0cc:	605a      	strne	r2, [r3, #4]
 800e0ce:	e7eb      	b.n	800e0a8 <_malloc_r+0xa8>
 800e0d0:	4623      	mov	r3, r4
 800e0d2:	6864      	ldr	r4, [r4, #4]
 800e0d4:	e7ae      	b.n	800e034 <_malloc_r+0x34>
 800e0d6:	463c      	mov	r4, r7
 800e0d8:	687f      	ldr	r7, [r7, #4]
 800e0da:	e7b6      	b.n	800e04a <_malloc_r+0x4a>
 800e0dc:	461a      	mov	r2, r3
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	42a3      	cmp	r3, r4
 800e0e2:	d1fb      	bne.n	800e0dc <_malloc_r+0xdc>
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	6053      	str	r3, [r2, #4]
 800e0e8:	e7de      	b.n	800e0a8 <_malloc_r+0xa8>
 800e0ea:	230c      	movs	r3, #12
 800e0ec:	4630      	mov	r0, r6
 800e0ee:	6033      	str	r3, [r6, #0]
 800e0f0:	f000 f80c 	bl	800e10c <__malloc_unlock>
 800e0f4:	e794      	b.n	800e020 <_malloc_r+0x20>
 800e0f6:	6005      	str	r5, [r0, #0]
 800e0f8:	e7d6      	b.n	800e0a8 <_malloc_r+0xa8>
 800e0fa:	bf00      	nop
 800e0fc:	20003f00 	.word	0x20003f00

0800e100 <__malloc_lock>:
 800e100:	4801      	ldr	r0, [pc, #4]	@ (800e108 <__malloc_lock+0x8>)
 800e102:	f7ff b89a 	b.w	800d23a <__retarget_lock_acquire_recursive>
 800e106:	bf00      	nop
 800e108:	20003ef8 	.word	0x20003ef8

0800e10c <__malloc_unlock>:
 800e10c:	4801      	ldr	r0, [pc, #4]	@ (800e114 <__malloc_unlock+0x8>)
 800e10e:	f7ff b895 	b.w	800d23c <__retarget_lock_release_recursive>
 800e112:	bf00      	nop
 800e114:	20003ef8 	.word	0x20003ef8

0800e118 <_Balloc>:
 800e118:	b570      	push	{r4, r5, r6, lr}
 800e11a:	69c6      	ldr	r6, [r0, #28]
 800e11c:	4604      	mov	r4, r0
 800e11e:	460d      	mov	r5, r1
 800e120:	b976      	cbnz	r6, 800e140 <_Balloc+0x28>
 800e122:	2010      	movs	r0, #16
 800e124:	f7ff ff42 	bl	800dfac <malloc>
 800e128:	4602      	mov	r2, r0
 800e12a:	61e0      	str	r0, [r4, #28]
 800e12c:	b920      	cbnz	r0, 800e138 <_Balloc+0x20>
 800e12e:	4b18      	ldr	r3, [pc, #96]	@ (800e190 <_Balloc+0x78>)
 800e130:	216b      	movs	r1, #107	@ 0x6b
 800e132:	4818      	ldr	r0, [pc, #96]	@ (800e194 <_Balloc+0x7c>)
 800e134:	f000 fda6 	bl	800ec84 <__assert_func>
 800e138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e13c:	6006      	str	r6, [r0, #0]
 800e13e:	60c6      	str	r6, [r0, #12]
 800e140:	69e6      	ldr	r6, [r4, #28]
 800e142:	68f3      	ldr	r3, [r6, #12]
 800e144:	b183      	cbz	r3, 800e168 <_Balloc+0x50>
 800e146:	69e3      	ldr	r3, [r4, #28]
 800e148:	68db      	ldr	r3, [r3, #12]
 800e14a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e14e:	b9b8      	cbnz	r0, 800e180 <_Balloc+0x68>
 800e150:	2101      	movs	r1, #1
 800e152:	4620      	mov	r0, r4
 800e154:	fa01 f605 	lsl.w	r6, r1, r5
 800e158:	1d72      	adds	r2, r6, #5
 800e15a:	0092      	lsls	r2, r2, #2
 800e15c:	f000 fdb0 	bl	800ecc0 <_calloc_r>
 800e160:	b160      	cbz	r0, 800e17c <_Balloc+0x64>
 800e162:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e166:	e00e      	b.n	800e186 <_Balloc+0x6e>
 800e168:	2221      	movs	r2, #33	@ 0x21
 800e16a:	2104      	movs	r1, #4
 800e16c:	4620      	mov	r0, r4
 800e16e:	f000 fda7 	bl	800ecc0 <_calloc_r>
 800e172:	69e3      	ldr	r3, [r4, #28]
 800e174:	60f0      	str	r0, [r6, #12]
 800e176:	68db      	ldr	r3, [r3, #12]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d1e4      	bne.n	800e146 <_Balloc+0x2e>
 800e17c:	2000      	movs	r0, #0
 800e17e:	bd70      	pop	{r4, r5, r6, pc}
 800e180:	6802      	ldr	r2, [r0, #0]
 800e182:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e186:	2300      	movs	r3, #0
 800e188:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e18c:	e7f7      	b.n	800e17e <_Balloc+0x66>
 800e18e:	bf00      	nop
 800e190:	08010761 	.word	0x08010761
 800e194:	080107e1 	.word	0x080107e1

0800e198 <_Bfree>:
 800e198:	b570      	push	{r4, r5, r6, lr}
 800e19a:	69c6      	ldr	r6, [r0, #28]
 800e19c:	4605      	mov	r5, r0
 800e19e:	460c      	mov	r4, r1
 800e1a0:	b976      	cbnz	r6, 800e1c0 <_Bfree+0x28>
 800e1a2:	2010      	movs	r0, #16
 800e1a4:	f7ff ff02 	bl	800dfac <malloc>
 800e1a8:	4602      	mov	r2, r0
 800e1aa:	61e8      	str	r0, [r5, #28]
 800e1ac:	b920      	cbnz	r0, 800e1b8 <_Bfree+0x20>
 800e1ae:	4b09      	ldr	r3, [pc, #36]	@ (800e1d4 <_Bfree+0x3c>)
 800e1b0:	218f      	movs	r1, #143	@ 0x8f
 800e1b2:	4809      	ldr	r0, [pc, #36]	@ (800e1d8 <_Bfree+0x40>)
 800e1b4:	f000 fd66 	bl	800ec84 <__assert_func>
 800e1b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e1bc:	6006      	str	r6, [r0, #0]
 800e1be:	60c6      	str	r6, [r0, #12]
 800e1c0:	b13c      	cbz	r4, 800e1d2 <_Bfree+0x3a>
 800e1c2:	69eb      	ldr	r3, [r5, #28]
 800e1c4:	6862      	ldr	r2, [r4, #4]
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e1cc:	6021      	str	r1, [r4, #0]
 800e1ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e1d2:	bd70      	pop	{r4, r5, r6, pc}
 800e1d4:	08010761 	.word	0x08010761
 800e1d8:	080107e1 	.word	0x080107e1

0800e1dc <__multadd>:
 800e1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e0:	f101 0c14 	add.w	ip, r1, #20
 800e1e4:	4607      	mov	r7, r0
 800e1e6:	460c      	mov	r4, r1
 800e1e8:	461e      	mov	r6, r3
 800e1ea:	690d      	ldr	r5, [r1, #16]
 800e1ec:	2000      	movs	r0, #0
 800e1ee:	f8dc 3000 	ldr.w	r3, [ip]
 800e1f2:	3001      	adds	r0, #1
 800e1f4:	b299      	uxth	r1, r3
 800e1f6:	4285      	cmp	r5, r0
 800e1f8:	fb02 6101 	mla	r1, r2, r1, r6
 800e1fc:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e200:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800e204:	b289      	uxth	r1, r1
 800e206:	fb02 3306 	mla	r3, r2, r6, r3
 800e20a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e20e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e212:	f84c 1b04 	str.w	r1, [ip], #4
 800e216:	dcea      	bgt.n	800e1ee <__multadd+0x12>
 800e218:	b30e      	cbz	r6, 800e25e <__multadd+0x82>
 800e21a:	68a3      	ldr	r3, [r4, #8]
 800e21c:	42ab      	cmp	r3, r5
 800e21e:	dc19      	bgt.n	800e254 <__multadd+0x78>
 800e220:	6861      	ldr	r1, [r4, #4]
 800e222:	4638      	mov	r0, r7
 800e224:	3101      	adds	r1, #1
 800e226:	f7ff ff77 	bl	800e118 <_Balloc>
 800e22a:	4680      	mov	r8, r0
 800e22c:	b928      	cbnz	r0, 800e23a <__multadd+0x5e>
 800e22e:	4602      	mov	r2, r0
 800e230:	4b0c      	ldr	r3, [pc, #48]	@ (800e264 <__multadd+0x88>)
 800e232:	21ba      	movs	r1, #186	@ 0xba
 800e234:	480c      	ldr	r0, [pc, #48]	@ (800e268 <__multadd+0x8c>)
 800e236:	f000 fd25 	bl	800ec84 <__assert_func>
 800e23a:	6922      	ldr	r2, [r4, #16]
 800e23c:	f104 010c 	add.w	r1, r4, #12
 800e240:	300c      	adds	r0, #12
 800e242:	3202      	adds	r2, #2
 800e244:	0092      	lsls	r2, r2, #2
 800e246:	f7ff f808 	bl	800d25a <memcpy>
 800e24a:	4621      	mov	r1, r4
 800e24c:	4644      	mov	r4, r8
 800e24e:	4638      	mov	r0, r7
 800e250:	f7ff ffa2 	bl	800e198 <_Bfree>
 800e254:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e258:	3501      	adds	r5, #1
 800e25a:	615e      	str	r6, [r3, #20]
 800e25c:	6125      	str	r5, [r4, #16]
 800e25e:	4620      	mov	r0, r4
 800e260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e264:	080107d0 	.word	0x080107d0
 800e268:	080107e1 	.word	0x080107e1

0800e26c <__hi0bits>:
 800e26c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e270:	4603      	mov	r3, r0
 800e272:	bf36      	itet	cc
 800e274:	0403      	lslcc	r3, r0, #16
 800e276:	2000      	movcs	r0, #0
 800e278:	2010      	movcc	r0, #16
 800e27a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e27e:	bf3c      	itt	cc
 800e280:	021b      	lslcc	r3, r3, #8
 800e282:	3008      	addcc	r0, #8
 800e284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e288:	bf3c      	itt	cc
 800e28a:	011b      	lslcc	r3, r3, #4
 800e28c:	3004      	addcc	r0, #4
 800e28e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e292:	bf3c      	itt	cc
 800e294:	009b      	lslcc	r3, r3, #2
 800e296:	3002      	addcc	r0, #2
 800e298:	2b00      	cmp	r3, #0
 800e29a:	db05      	blt.n	800e2a8 <__hi0bits+0x3c>
 800e29c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e2a0:	f100 0001 	add.w	r0, r0, #1
 800e2a4:	bf08      	it	eq
 800e2a6:	2020      	moveq	r0, #32
 800e2a8:	4770      	bx	lr

0800e2aa <__lo0bits>:
 800e2aa:	6803      	ldr	r3, [r0, #0]
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	f013 0007 	ands.w	r0, r3, #7
 800e2b2:	d00b      	beq.n	800e2cc <__lo0bits+0x22>
 800e2b4:	07d9      	lsls	r1, r3, #31
 800e2b6:	d421      	bmi.n	800e2fc <__lo0bits+0x52>
 800e2b8:	0798      	lsls	r0, r3, #30
 800e2ba:	bf47      	ittee	mi
 800e2bc:	085b      	lsrmi	r3, r3, #1
 800e2be:	2001      	movmi	r0, #1
 800e2c0:	089b      	lsrpl	r3, r3, #2
 800e2c2:	2002      	movpl	r0, #2
 800e2c4:	bf4c      	ite	mi
 800e2c6:	6013      	strmi	r3, [r2, #0]
 800e2c8:	6013      	strpl	r3, [r2, #0]
 800e2ca:	4770      	bx	lr
 800e2cc:	b299      	uxth	r1, r3
 800e2ce:	b909      	cbnz	r1, 800e2d4 <__lo0bits+0x2a>
 800e2d0:	0c1b      	lsrs	r3, r3, #16
 800e2d2:	2010      	movs	r0, #16
 800e2d4:	b2d9      	uxtb	r1, r3
 800e2d6:	b909      	cbnz	r1, 800e2dc <__lo0bits+0x32>
 800e2d8:	3008      	adds	r0, #8
 800e2da:	0a1b      	lsrs	r3, r3, #8
 800e2dc:	0719      	lsls	r1, r3, #28
 800e2de:	bf04      	itt	eq
 800e2e0:	091b      	lsreq	r3, r3, #4
 800e2e2:	3004      	addeq	r0, #4
 800e2e4:	0799      	lsls	r1, r3, #30
 800e2e6:	bf04      	itt	eq
 800e2e8:	089b      	lsreq	r3, r3, #2
 800e2ea:	3002      	addeq	r0, #2
 800e2ec:	07d9      	lsls	r1, r3, #31
 800e2ee:	d403      	bmi.n	800e2f8 <__lo0bits+0x4e>
 800e2f0:	085b      	lsrs	r3, r3, #1
 800e2f2:	f100 0001 	add.w	r0, r0, #1
 800e2f6:	d003      	beq.n	800e300 <__lo0bits+0x56>
 800e2f8:	6013      	str	r3, [r2, #0]
 800e2fa:	4770      	bx	lr
 800e2fc:	2000      	movs	r0, #0
 800e2fe:	4770      	bx	lr
 800e300:	2020      	movs	r0, #32
 800e302:	4770      	bx	lr

0800e304 <__i2b>:
 800e304:	b510      	push	{r4, lr}
 800e306:	460c      	mov	r4, r1
 800e308:	2101      	movs	r1, #1
 800e30a:	f7ff ff05 	bl	800e118 <_Balloc>
 800e30e:	4602      	mov	r2, r0
 800e310:	b928      	cbnz	r0, 800e31e <__i2b+0x1a>
 800e312:	4b05      	ldr	r3, [pc, #20]	@ (800e328 <__i2b+0x24>)
 800e314:	f240 1145 	movw	r1, #325	@ 0x145
 800e318:	4804      	ldr	r0, [pc, #16]	@ (800e32c <__i2b+0x28>)
 800e31a:	f000 fcb3 	bl	800ec84 <__assert_func>
 800e31e:	2301      	movs	r3, #1
 800e320:	6144      	str	r4, [r0, #20]
 800e322:	6103      	str	r3, [r0, #16]
 800e324:	bd10      	pop	{r4, pc}
 800e326:	bf00      	nop
 800e328:	080107d0 	.word	0x080107d0
 800e32c:	080107e1 	.word	0x080107e1

0800e330 <__multiply>:
 800e330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e334:	4614      	mov	r4, r2
 800e336:	690a      	ldr	r2, [r1, #16]
 800e338:	460f      	mov	r7, r1
 800e33a:	b085      	sub	sp, #20
 800e33c:	6923      	ldr	r3, [r4, #16]
 800e33e:	429a      	cmp	r2, r3
 800e340:	bfa2      	ittt	ge
 800e342:	4623      	movge	r3, r4
 800e344:	460c      	movge	r4, r1
 800e346:	461f      	movge	r7, r3
 800e348:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e34c:	68a3      	ldr	r3, [r4, #8]
 800e34e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e352:	6861      	ldr	r1, [r4, #4]
 800e354:	eb0a 0609 	add.w	r6, sl, r9
 800e358:	42b3      	cmp	r3, r6
 800e35a:	bfb8      	it	lt
 800e35c:	3101      	addlt	r1, #1
 800e35e:	f7ff fedb 	bl	800e118 <_Balloc>
 800e362:	b930      	cbnz	r0, 800e372 <__multiply+0x42>
 800e364:	4602      	mov	r2, r0
 800e366:	4b45      	ldr	r3, [pc, #276]	@ (800e47c <__multiply+0x14c>)
 800e368:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e36c:	4844      	ldr	r0, [pc, #272]	@ (800e480 <__multiply+0x150>)
 800e36e:	f000 fc89 	bl	800ec84 <__assert_func>
 800e372:	f100 0514 	add.w	r5, r0, #20
 800e376:	2200      	movs	r2, #0
 800e378:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e37c:	462b      	mov	r3, r5
 800e37e:	4543      	cmp	r3, r8
 800e380:	d321      	bcc.n	800e3c6 <__multiply+0x96>
 800e382:	f107 0114 	add.w	r1, r7, #20
 800e386:	f104 0214 	add.w	r2, r4, #20
 800e38a:	f104 0715 	add.w	r7, r4, #21
 800e38e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e392:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e396:	9302      	str	r3, [sp, #8]
 800e398:	1b13      	subs	r3, r2, r4
 800e39a:	3b15      	subs	r3, #21
 800e39c:	f023 0303 	bic.w	r3, r3, #3
 800e3a0:	3304      	adds	r3, #4
 800e3a2:	42ba      	cmp	r2, r7
 800e3a4:	bf38      	it	cc
 800e3a6:	2304      	movcc	r3, #4
 800e3a8:	9301      	str	r3, [sp, #4]
 800e3aa:	9b02      	ldr	r3, [sp, #8]
 800e3ac:	9103      	str	r1, [sp, #12]
 800e3ae:	428b      	cmp	r3, r1
 800e3b0:	d80c      	bhi.n	800e3cc <__multiply+0x9c>
 800e3b2:	2e00      	cmp	r6, #0
 800e3b4:	dd03      	ble.n	800e3be <__multiply+0x8e>
 800e3b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d05b      	beq.n	800e476 <__multiply+0x146>
 800e3be:	6106      	str	r6, [r0, #16]
 800e3c0:	b005      	add	sp, #20
 800e3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3c6:	f843 2b04 	str.w	r2, [r3], #4
 800e3ca:	e7d8      	b.n	800e37e <__multiply+0x4e>
 800e3cc:	f8b1 a000 	ldrh.w	sl, [r1]
 800e3d0:	f1ba 0f00 	cmp.w	sl, #0
 800e3d4:	d024      	beq.n	800e420 <__multiply+0xf0>
 800e3d6:	f104 0e14 	add.w	lr, r4, #20
 800e3da:	46a9      	mov	r9, r5
 800e3dc:	f04f 0c00 	mov.w	ip, #0
 800e3e0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e3e4:	f8d9 3000 	ldr.w	r3, [r9]
 800e3e8:	fa1f fb87 	uxth.w	fp, r7
 800e3ec:	4572      	cmp	r2, lr
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	fb0a 330b 	mla	r3, sl, fp, r3
 800e3f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e3f8:	f8d9 7000 	ldr.w	r7, [r9]
 800e3fc:	4463      	add	r3, ip
 800e3fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e402:	fb0a c70b 	mla	r7, sl, fp, ip
 800e406:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e40a:	b29b      	uxth	r3, r3
 800e40c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e410:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e414:	f849 3b04 	str.w	r3, [r9], #4
 800e418:	d8e2      	bhi.n	800e3e0 <__multiply+0xb0>
 800e41a:	9b01      	ldr	r3, [sp, #4]
 800e41c:	f845 c003 	str.w	ip, [r5, r3]
 800e420:	9b03      	ldr	r3, [sp, #12]
 800e422:	3104      	adds	r1, #4
 800e424:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e428:	f1b9 0f00 	cmp.w	r9, #0
 800e42c:	d021      	beq.n	800e472 <__multiply+0x142>
 800e42e:	682b      	ldr	r3, [r5, #0]
 800e430:	f104 0c14 	add.w	ip, r4, #20
 800e434:	46ae      	mov	lr, r5
 800e436:	f04f 0a00 	mov.w	sl, #0
 800e43a:	f8bc b000 	ldrh.w	fp, [ip]
 800e43e:	b29b      	uxth	r3, r3
 800e440:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e444:	fb09 770b 	mla	r7, r9, fp, r7
 800e448:	4457      	add	r7, sl
 800e44a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e44e:	f84e 3b04 	str.w	r3, [lr], #4
 800e452:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e456:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e45a:	f8be 3000 	ldrh.w	r3, [lr]
 800e45e:	4562      	cmp	r2, ip
 800e460:	fb09 330a 	mla	r3, r9, sl, r3
 800e464:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e468:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e46c:	d8e5      	bhi.n	800e43a <__multiply+0x10a>
 800e46e:	9f01      	ldr	r7, [sp, #4]
 800e470:	51eb      	str	r3, [r5, r7]
 800e472:	3504      	adds	r5, #4
 800e474:	e799      	b.n	800e3aa <__multiply+0x7a>
 800e476:	3e01      	subs	r6, #1
 800e478:	e79b      	b.n	800e3b2 <__multiply+0x82>
 800e47a:	bf00      	nop
 800e47c:	080107d0 	.word	0x080107d0
 800e480:	080107e1 	.word	0x080107e1

0800e484 <__pow5mult>:
 800e484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e488:	4615      	mov	r5, r2
 800e48a:	f012 0203 	ands.w	r2, r2, #3
 800e48e:	4607      	mov	r7, r0
 800e490:	460e      	mov	r6, r1
 800e492:	d007      	beq.n	800e4a4 <__pow5mult+0x20>
 800e494:	3a01      	subs	r2, #1
 800e496:	4c25      	ldr	r4, [pc, #148]	@ (800e52c <__pow5mult+0xa8>)
 800e498:	2300      	movs	r3, #0
 800e49a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e49e:	f7ff fe9d 	bl	800e1dc <__multadd>
 800e4a2:	4606      	mov	r6, r0
 800e4a4:	10ad      	asrs	r5, r5, #2
 800e4a6:	d03d      	beq.n	800e524 <__pow5mult+0xa0>
 800e4a8:	69fc      	ldr	r4, [r7, #28]
 800e4aa:	b97c      	cbnz	r4, 800e4cc <__pow5mult+0x48>
 800e4ac:	2010      	movs	r0, #16
 800e4ae:	f7ff fd7d 	bl	800dfac <malloc>
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	61f8      	str	r0, [r7, #28]
 800e4b6:	b928      	cbnz	r0, 800e4c4 <__pow5mult+0x40>
 800e4b8:	4b1d      	ldr	r3, [pc, #116]	@ (800e530 <__pow5mult+0xac>)
 800e4ba:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e4be:	481d      	ldr	r0, [pc, #116]	@ (800e534 <__pow5mult+0xb0>)
 800e4c0:	f000 fbe0 	bl	800ec84 <__assert_func>
 800e4c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e4c8:	6004      	str	r4, [r0, #0]
 800e4ca:	60c4      	str	r4, [r0, #12]
 800e4cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e4d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e4d4:	b94c      	cbnz	r4, 800e4ea <__pow5mult+0x66>
 800e4d6:	f240 2171 	movw	r1, #625	@ 0x271
 800e4da:	4638      	mov	r0, r7
 800e4dc:	f7ff ff12 	bl	800e304 <__i2b>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	4604      	mov	r4, r0
 800e4e4:	f8c8 0008 	str.w	r0, [r8, #8]
 800e4e8:	6003      	str	r3, [r0, #0]
 800e4ea:	f04f 0900 	mov.w	r9, #0
 800e4ee:	07eb      	lsls	r3, r5, #31
 800e4f0:	d50a      	bpl.n	800e508 <__pow5mult+0x84>
 800e4f2:	4631      	mov	r1, r6
 800e4f4:	4622      	mov	r2, r4
 800e4f6:	4638      	mov	r0, r7
 800e4f8:	f7ff ff1a 	bl	800e330 <__multiply>
 800e4fc:	4680      	mov	r8, r0
 800e4fe:	4631      	mov	r1, r6
 800e500:	4638      	mov	r0, r7
 800e502:	4646      	mov	r6, r8
 800e504:	f7ff fe48 	bl	800e198 <_Bfree>
 800e508:	106d      	asrs	r5, r5, #1
 800e50a:	d00b      	beq.n	800e524 <__pow5mult+0xa0>
 800e50c:	6820      	ldr	r0, [r4, #0]
 800e50e:	b938      	cbnz	r0, 800e520 <__pow5mult+0x9c>
 800e510:	4622      	mov	r2, r4
 800e512:	4621      	mov	r1, r4
 800e514:	4638      	mov	r0, r7
 800e516:	f7ff ff0b 	bl	800e330 <__multiply>
 800e51a:	6020      	str	r0, [r4, #0]
 800e51c:	f8c0 9000 	str.w	r9, [r0]
 800e520:	4604      	mov	r4, r0
 800e522:	e7e4      	b.n	800e4ee <__pow5mult+0x6a>
 800e524:	4630      	mov	r0, r6
 800e526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e52a:	bf00      	nop
 800e52c:	0801083c 	.word	0x0801083c
 800e530:	08010761 	.word	0x08010761
 800e534:	080107e1 	.word	0x080107e1

0800e538 <__lshift>:
 800e538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e53c:	460c      	mov	r4, r1
 800e53e:	4607      	mov	r7, r0
 800e540:	4691      	mov	r9, r2
 800e542:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e546:	6923      	ldr	r3, [r4, #16]
 800e548:	6849      	ldr	r1, [r1, #4]
 800e54a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e54e:	68a3      	ldr	r3, [r4, #8]
 800e550:	f108 0601 	add.w	r6, r8, #1
 800e554:	42b3      	cmp	r3, r6
 800e556:	db0b      	blt.n	800e570 <__lshift+0x38>
 800e558:	4638      	mov	r0, r7
 800e55a:	f7ff fddd 	bl	800e118 <_Balloc>
 800e55e:	4605      	mov	r5, r0
 800e560:	b948      	cbnz	r0, 800e576 <__lshift+0x3e>
 800e562:	4602      	mov	r2, r0
 800e564:	4b28      	ldr	r3, [pc, #160]	@ (800e608 <__lshift+0xd0>)
 800e566:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e56a:	4828      	ldr	r0, [pc, #160]	@ (800e60c <__lshift+0xd4>)
 800e56c:	f000 fb8a 	bl	800ec84 <__assert_func>
 800e570:	3101      	adds	r1, #1
 800e572:	005b      	lsls	r3, r3, #1
 800e574:	e7ee      	b.n	800e554 <__lshift+0x1c>
 800e576:	2300      	movs	r3, #0
 800e578:	f100 0114 	add.w	r1, r0, #20
 800e57c:	f100 0210 	add.w	r2, r0, #16
 800e580:	4618      	mov	r0, r3
 800e582:	4553      	cmp	r3, sl
 800e584:	db33      	blt.n	800e5ee <__lshift+0xb6>
 800e586:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e58a:	f104 0314 	add.w	r3, r4, #20
 800e58e:	6920      	ldr	r0, [r4, #16]
 800e590:	f019 091f 	ands.w	r9, r9, #31
 800e594:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e598:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e59c:	d02b      	beq.n	800e5f6 <__lshift+0xbe>
 800e59e:	f1c9 0e20 	rsb	lr, r9, #32
 800e5a2:	468a      	mov	sl, r1
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	6818      	ldr	r0, [r3, #0]
 800e5a8:	fa00 f009 	lsl.w	r0, r0, r9
 800e5ac:	4310      	orrs	r0, r2
 800e5ae:	f84a 0b04 	str.w	r0, [sl], #4
 800e5b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5b6:	459c      	cmp	ip, r3
 800e5b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800e5bc:	d8f3      	bhi.n	800e5a6 <__lshift+0x6e>
 800e5be:	ebac 0304 	sub.w	r3, ip, r4
 800e5c2:	f104 0015 	add.w	r0, r4, #21
 800e5c6:	3b15      	subs	r3, #21
 800e5c8:	f023 0303 	bic.w	r3, r3, #3
 800e5cc:	3304      	adds	r3, #4
 800e5ce:	4584      	cmp	ip, r0
 800e5d0:	bf38      	it	cc
 800e5d2:	2304      	movcc	r3, #4
 800e5d4:	50ca      	str	r2, [r1, r3]
 800e5d6:	b10a      	cbz	r2, 800e5dc <__lshift+0xa4>
 800e5d8:	f108 0602 	add.w	r6, r8, #2
 800e5dc:	3e01      	subs	r6, #1
 800e5de:	4638      	mov	r0, r7
 800e5e0:	4621      	mov	r1, r4
 800e5e2:	612e      	str	r6, [r5, #16]
 800e5e4:	f7ff fdd8 	bl	800e198 <_Bfree>
 800e5e8:	4628      	mov	r0, r5
 800e5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	f842 0f04 	str.w	r0, [r2, #4]!
 800e5f4:	e7c5      	b.n	800e582 <__lshift+0x4a>
 800e5f6:	3904      	subs	r1, #4
 800e5f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5fc:	459c      	cmp	ip, r3
 800e5fe:	f841 2f04 	str.w	r2, [r1, #4]!
 800e602:	d8f9      	bhi.n	800e5f8 <__lshift+0xc0>
 800e604:	e7ea      	b.n	800e5dc <__lshift+0xa4>
 800e606:	bf00      	nop
 800e608:	080107d0 	.word	0x080107d0
 800e60c:	080107e1 	.word	0x080107e1

0800e610 <__mcmp>:
 800e610:	4603      	mov	r3, r0
 800e612:	690a      	ldr	r2, [r1, #16]
 800e614:	6900      	ldr	r0, [r0, #16]
 800e616:	1a80      	subs	r0, r0, r2
 800e618:	b530      	push	{r4, r5, lr}
 800e61a:	d10e      	bne.n	800e63a <__mcmp+0x2a>
 800e61c:	3314      	adds	r3, #20
 800e61e:	3114      	adds	r1, #20
 800e620:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e624:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e628:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e62c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e630:	4295      	cmp	r5, r2
 800e632:	d003      	beq.n	800e63c <__mcmp+0x2c>
 800e634:	d205      	bcs.n	800e642 <__mcmp+0x32>
 800e636:	f04f 30ff 	mov.w	r0, #4294967295
 800e63a:	bd30      	pop	{r4, r5, pc}
 800e63c:	42a3      	cmp	r3, r4
 800e63e:	d3f3      	bcc.n	800e628 <__mcmp+0x18>
 800e640:	e7fb      	b.n	800e63a <__mcmp+0x2a>
 800e642:	2001      	movs	r0, #1
 800e644:	e7f9      	b.n	800e63a <__mcmp+0x2a>
	...

0800e648 <__mdiff>:
 800e648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e64c:	4689      	mov	r9, r1
 800e64e:	4606      	mov	r6, r0
 800e650:	4611      	mov	r1, r2
 800e652:	4614      	mov	r4, r2
 800e654:	4648      	mov	r0, r9
 800e656:	f7ff ffdb 	bl	800e610 <__mcmp>
 800e65a:	1e05      	subs	r5, r0, #0
 800e65c:	d112      	bne.n	800e684 <__mdiff+0x3c>
 800e65e:	4629      	mov	r1, r5
 800e660:	4630      	mov	r0, r6
 800e662:	f7ff fd59 	bl	800e118 <_Balloc>
 800e666:	4602      	mov	r2, r0
 800e668:	b928      	cbnz	r0, 800e676 <__mdiff+0x2e>
 800e66a:	4b41      	ldr	r3, [pc, #260]	@ (800e770 <__mdiff+0x128>)
 800e66c:	f240 2137 	movw	r1, #567	@ 0x237
 800e670:	4840      	ldr	r0, [pc, #256]	@ (800e774 <__mdiff+0x12c>)
 800e672:	f000 fb07 	bl	800ec84 <__assert_func>
 800e676:	2301      	movs	r3, #1
 800e678:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e67c:	4610      	mov	r0, r2
 800e67e:	b003      	add	sp, #12
 800e680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e684:	bfbc      	itt	lt
 800e686:	464b      	movlt	r3, r9
 800e688:	46a1      	movlt	r9, r4
 800e68a:	4630      	mov	r0, r6
 800e68c:	bfb8      	it	lt
 800e68e:	2501      	movlt	r5, #1
 800e690:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e694:	bfb4      	ite	lt
 800e696:	461c      	movlt	r4, r3
 800e698:	2500      	movge	r5, #0
 800e69a:	f7ff fd3d 	bl	800e118 <_Balloc>
 800e69e:	4602      	mov	r2, r0
 800e6a0:	b918      	cbnz	r0, 800e6aa <__mdiff+0x62>
 800e6a2:	4b33      	ldr	r3, [pc, #204]	@ (800e770 <__mdiff+0x128>)
 800e6a4:	f240 2145 	movw	r1, #581	@ 0x245
 800e6a8:	e7e2      	b.n	800e670 <__mdiff+0x28>
 800e6aa:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e6ae:	f104 0e14 	add.w	lr, r4, #20
 800e6b2:	6926      	ldr	r6, [r4, #16]
 800e6b4:	f100 0b14 	add.w	fp, r0, #20
 800e6b8:	60c5      	str	r5, [r0, #12]
 800e6ba:	f109 0514 	add.w	r5, r9, #20
 800e6be:	f109 0310 	add.w	r3, r9, #16
 800e6c2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e6c6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e6ca:	46d9      	mov	r9, fp
 800e6cc:	f04f 0c00 	mov.w	ip, #0
 800e6d0:	9301      	str	r3, [sp, #4]
 800e6d2:	9b01      	ldr	r3, [sp, #4]
 800e6d4:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e6d8:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e6dc:	4576      	cmp	r6, lr
 800e6de:	9301      	str	r3, [sp, #4]
 800e6e0:	fa1f f38a 	uxth.w	r3, sl
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	b283      	uxth	r3, r0
 800e6e8:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800e6ec:	eba1 0303 	sub.w	r3, r1, r3
 800e6f0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e6f4:	4463      	add	r3, ip
 800e6f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e6fa:	b29b      	uxth	r3, r3
 800e6fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e700:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e704:	f849 3b04 	str.w	r3, [r9], #4
 800e708:	d8e3      	bhi.n	800e6d2 <__mdiff+0x8a>
 800e70a:	1b33      	subs	r3, r6, r4
 800e70c:	3415      	adds	r4, #21
 800e70e:	3b15      	subs	r3, #21
 800e710:	f023 0303 	bic.w	r3, r3, #3
 800e714:	3304      	adds	r3, #4
 800e716:	42a6      	cmp	r6, r4
 800e718:	bf38      	it	cc
 800e71a:	2304      	movcc	r3, #4
 800e71c:	441d      	add	r5, r3
 800e71e:	445b      	add	r3, fp
 800e720:	462c      	mov	r4, r5
 800e722:	461e      	mov	r6, r3
 800e724:	4544      	cmp	r4, r8
 800e726:	d30e      	bcc.n	800e746 <__mdiff+0xfe>
 800e728:	f108 0103 	add.w	r1, r8, #3
 800e72c:	1b49      	subs	r1, r1, r5
 800e72e:	3d03      	subs	r5, #3
 800e730:	f021 0103 	bic.w	r1, r1, #3
 800e734:	45a8      	cmp	r8, r5
 800e736:	bf38      	it	cc
 800e738:	2100      	movcc	r1, #0
 800e73a:	440b      	add	r3, r1
 800e73c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e740:	b199      	cbz	r1, 800e76a <__mdiff+0x122>
 800e742:	6117      	str	r7, [r2, #16]
 800e744:	e79a      	b.n	800e67c <__mdiff+0x34>
 800e746:	f854 1b04 	ldr.w	r1, [r4], #4
 800e74a:	46e6      	mov	lr, ip
 800e74c:	fa1f fc81 	uxth.w	ip, r1
 800e750:	0c08      	lsrs	r0, r1, #16
 800e752:	4471      	add	r1, lr
 800e754:	44f4      	add	ip, lr
 800e756:	b289      	uxth	r1, r1
 800e758:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e75c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e760:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e764:	f846 1b04 	str.w	r1, [r6], #4
 800e768:	e7dc      	b.n	800e724 <__mdiff+0xdc>
 800e76a:	3f01      	subs	r7, #1
 800e76c:	e7e6      	b.n	800e73c <__mdiff+0xf4>
 800e76e:	bf00      	nop
 800e770:	080107d0 	.word	0x080107d0
 800e774:	080107e1 	.word	0x080107e1

0800e778 <__d2b>:
 800e778:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e77c:	460f      	mov	r7, r1
 800e77e:	2101      	movs	r1, #1
 800e780:	4616      	mov	r6, r2
 800e782:	ec59 8b10 	vmov	r8, r9, d0
 800e786:	f7ff fcc7 	bl	800e118 <_Balloc>
 800e78a:	4604      	mov	r4, r0
 800e78c:	b930      	cbnz	r0, 800e79c <__d2b+0x24>
 800e78e:	4602      	mov	r2, r0
 800e790:	4b23      	ldr	r3, [pc, #140]	@ (800e820 <__d2b+0xa8>)
 800e792:	f240 310f 	movw	r1, #783	@ 0x30f
 800e796:	4823      	ldr	r0, [pc, #140]	@ (800e824 <__d2b+0xac>)
 800e798:	f000 fa74 	bl	800ec84 <__assert_func>
 800e79c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e7a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e7a4:	b10d      	cbz	r5, 800e7aa <__d2b+0x32>
 800e7a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e7aa:	9301      	str	r3, [sp, #4]
 800e7ac:	f1b8 0300 	subs.w	r3, r8, #0
 800e7b0:	d023      	beq.n	800e7fa <__d2b+0x82>
 800e7b2:	4668      	mov	r0, sp
 800e7b4:	9300      	str	r3, [sp, #0]
 800e7b6:	f7ff fd78 	bl	800e2aa <__lo0bits>
 800e7ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e7be:	b1d0      	cbz	r0, 800e7f6 <__d2b+0x7e>
 800e7c0:	f1c0 0320 	rsb	r3, r0, #32
 800e7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800e7c8:	40c2      	lsrs	r2, r0
 800e7ca:	430b      	orrs	r3, r1
 800e7cc:	9201      	str	r2, [sp, #4]
 800e7ce:	6163      	str	r3, [r4, #20]
 800e7d0:	9b01      	ldr	r3, [sp, #4]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	61a3      	str	r3, [r4, #24]
 800e7d6:	bf0c      	ite	eq
 800e7d8:	2201      	moveq	r2, #1
 800e7da:	2202      	movne	r2, #2
 800e7dc:	6122      	str	r2, [r4, #16]
 800e7de:	b1a5      	cbz	r5, 800e80a <__d2b+0x92>
 800e7e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e7e4:	4405      	add	r5, r0
 800e7e6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e7ea:	603d      	str	r5, [r7, #0]
 800e7ec:	6030      	str	r0, [r6, #0]
 800e7ee:	4620      	mov	r0, r4
 800e7f0:	b003      	add	sp, #12
 800e7f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7f6:	6161      	str	r1, [r4, #20]
 800e7f8:	e7ea      	b.n	800e7d0 <__d2b+0x58>
 800e7fa:	a801      	add	r0, sp, #4
 800e7fc:	f7ff fd55 	bl	800e2aa <__lo0bits>
 800e800:	9b01      	ldr	r3, [sp, #4]
 800e802:	3020      	adds	r0, #32
 800e804:	2201      	movs	r2, #1
 800e806:	6163      	str	r3, [r4, #20]
 800e808:	e7e8      	b.n	800e7dc <__d2b+0x64>
 800e80a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e80e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e812:	6038      	str	r0, [r7, #0]
 800e814:	6918      	ldr	r0, [r3, #16]
 800e816:	f7ff fd29 	bl	800e26c <__hi0bits>
 800e81a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e81e:	e7e5      	b.n	800e7ec <__d2b+0x74>
 800e820:	080107d0 	.word	0x080107d0
 800e824:	080107e1 	.word	0x080107e1

0800e828 <__ssputs_r>:
 800e828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e82c:	461f      	mov	r7, r3
 800e82e:	688e      	ldr	r6, [r1, #8]
 800e830:	4682      	mov	sl, r0
 800e832:	460c      	mov	r4, r1
 800e834:	42be      	cmp	r6, r7
 800e836:	4690      	mov	r8, r2
 800e838:	680b      	ldr	r3, [r1, #0]
 800e83a:	d82d      	bhi.n	800e898 <__ssputs_r+0x70>
 800e83c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e840:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e844:	d026      	beq.n	800e894 <__ssputs_r+0x6c>
 800e846:	6965      	ldr	r5, [r4, #20]
 800e848:	6909      	ldr	r1, [r1, #16]
 800e84a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e84e:	eba3 0901 	sub.w	r9, r3, r1
 800e852:	1c7b      	adds	r3, r7, #1
 800e854:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e858:	444b      	add	r3, r9
 800e85a:	106d      	asrs	r5, r5, #1
 800e85c:	429d      	cmp	r5, r3
 800e85e:	bf38      	it	cc
 800e860:	461d      	movcc	r5, r3
 800e862:	0553      	lsls	r3, r2, #21
 800e864:	d527      	bpl.n	800e8b6 <__ssputs_r+0x8e>
 800e866:	4629      	mov	r1, r5
 800e868:	f7ff fbca 	bl	800e000 <_malloc_r>
 800e86c:	4606      	mov	r6, r0
 800e86e:	b360      	cbz	r0, 800e8ca <__ssputs_r+0xa2>
 800e870:	464a      	mov	r2, r9
 800e872:	6921      	ldr	r1, [r4, #16]
 800e874:	f7fe fcf1 	bl	800d25a <memcpy>
 800e878:	89a3      	ldrh	r3, [r4, #12]
 800e87a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e87e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e882:	81a3      	strh	r3, [r4, #12]
 800e884:	6126      	str	r6, [r4, #16]
 800e886:	444e      	add	r6, r9
 800e888:	6165      	str	r5, [r4, #20]
 800e88a:	eba5 0509 	sub.w	r5, r5, r9
 800e88e:	6026      	str	r6, [r4, #0]
 800e890:	463e      	mov	r6, r7
 800e892:	60a5      	str	r5, [r4, #8]
 800e894:	42be      	cmp	r6, r7
 800e896:	d900      	bls.n	800e89a <__ssputs_r+0x72>
 800e898:	463e      	mov	r6, r7
 800e89a:	4632      	mov	r2, r6
 800e89c:	4641      	mov	r1, r8
 800e89e:	6820      	ldr	r0, [r4, #0]
 800e8a0:	f000 f9c6 	bl	800ec30 <memmove>
 800e8a4:	68a3      	ldr	r3, [r4, #8]
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	1b9b      	subs	r3, r3, r6
 800e8aa:	60a3      	str	r3, [r4, #8]
 800e8ac:	6823      	ldr	r3, [r4, #0]
 800e8ae:	4433      	add	r3, r6
 800e8b0:	6023      	str	r3, [r4, #0]
 800e8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8b6:	462a      	mov	r2, r5
 800e8b8:	f000 fa28 	bl	800ed0c <_realloc_r>
 800e8bc:	4606      	mov	r6, r0
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	d1e0      	bne.n	800e884 <__ssputs_r+0x5c>
 800e8c2:	6921      	ldr	r1, [r4, #16]
 800e8c4:	4650      	mov	r0, sl
 800e8c6:	f7ff fb27 	bl	800df18 <_free_r>
 800e8ca:	230c      	movs	r3, #12
 800e8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e8d0:	f8ca 3000 	str.w	r3, [sl]
 800e8d4:	89a3      	ldrh	r3, [r4, #12]
 800e8d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8da:	81a3      	strh	r3, [r4, #12]
 800e8dc:	e7e9      	b.n	800e8b2 <__ssputs_r+0x8a>
	...

0800e8e0 <_svfiprintf_r>:
 800e8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e4:	4698      	mov	r8, r3
 800e8e6:	898b      	ldrh	r3, [r1, #12]
 800e8e8:	b09d      	sub	sp, #116	@ 0x74
 800e8ea:	4607      	mov	r7, r0
 800e8ec:	061b      	lsls	r3, r3, #24
 800e8ee:	460d      	mov	r5, r1
 800e8f0:	4614      	mov	r4, r2
 800e8f2:	d510      	bpl.n	800e916 <_svfiprintf_r+0x36>
 800e8f4:	690b      	ldr	r3, [r1, #16]
 800e8f6:	b973      	cbnz	r3, 800e916 <_svfiprintf_r+0x36>
 800e8f8:	2140      	movs	r1, #64	@ 0x40
 800e8fa:	f7ff fb81 	bl	800e000 <_malloc_r>
 800e8fe:	6028      	str	r0, [r5, #0]
 800e900:	6128      	str	r0, [r5, #16]
 800e902:	b930      	cbnz	r0, 800e912 <_svfiprintf_r+0x32>
 800e904:	230c      	movs	r3, #12
 800e906:	603b      	str	r3, [r7, #0]
 800e908:	f04f 30ff 	mov.w	r0, #4294967295
 800e90c:	b01d      	add	sp, #116	@ 0x74
 800e90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e912:	2340      	movs	r3, #64	@ 0x40
 800e914:	616b      	str	r3, [r5, #20]
 800e916:	2300      	movs	r3, #0
 800e918:	f8cd 800c 	str.w	r8, [sp, #12]
 800e91c:	f04f 0901 	mov.w	r9, #1
 800e920:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800eac4 <_svfiprintf_r+0x1e4>
 800e924:	9309      	str	r3, [sp, #36]	@ 0x24
 800e926:	2320      	movs	r3, #32
 800e928:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e92c:	2330      	movs	r3, #48	@ 0x30
 800e92e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e932:	4623      	mov	r3, r4
 800e934:	469a      	mov	sl, r3
 800e936:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e93a:	b10a      	cbz	r2, 800e940 <_svfiprintf_r+0x60>
 800e93c:	2a25      	cmp	r2, #37	@ 0x25
 800e93e:	d1f9      	bne.n	800e934 <_svfiprintf_r+0x54>
 800e940:	ebba 0b04 	subs.w	fp, sl, r4
 800e944:	d00b      	beq.n	800e95e <_svfiprintf_r+0x7e>
 800e946:	465b      	mov	r3, fp
 800e948:	4622      	mov	r2, r4
 800e94a:	4629      	mov	r1, r5
 800e94c:	4638      	mov	r0, r7
 800e94e:	f7ff ff6b 	bl	800e828 <__ssputs_r>
 800e952:	3001      	adds	r0, #1
 800e954:	f000 80a7 	beq.w	800eaa6 <_svfiprintf_r+0x1c6>
 800e958:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e95a:	445a      	add	r2, fp
 800e95c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e95e:	f89a 3000 	ldrb.w	r3, [sl]
 800e962:	2b00      	cmp	r3, #0
 800e964:	f000 809f 	beq.w	800eaa6 <_svfiprintf_r+0x1c6>
 800e968:	2300      	movs	r3, #0
 800e96a:	f04f 32ff 	mov.w	r2, #4294967295
 800e96e:	f10a 0a01 	add.w	sl, sl, #1
 800e972:	9304      	str	r3, [sp, #16]
 800e974:	9307      	str	r3, [sp, #28]
 800e976:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e97a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e97c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e980:	4654      	mov	r4, sl
 800e982:	2205      	movs	r2, #5
 800e984:	484f      	ldr	r0, [pc, #316]	@ (800eac4 <_svfiprintf_r+0x1e4>)
 800e986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e98a:	f7fe fc58 	bl	800d23e <memchr>
 800e98e:	9a04      	ldr	r2, [sp, #16]
 800e990:	b9d8      	cbnz	r0, 800e9ca <_svfiprintf_r+0xea>
 800e992:	06d0      	lsls	r0, r2, #27
 800e994:	bf44      	itt	mi
 800e996:	2320      	movmi	r3, #32
 800e998:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e99c:	0711      	lsls	r1, r2, #28
 800e99e:	bf44      	itt	mi
 800e9a0:	232b      	movmi	r3, #43	@ 0x2b
 800e9a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9a6:	f89a 3000 	ldrb.w	r3, [sl]
 800e9aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9ac:	d015      	beq.n	800e9da <_svfiprintf_r+0xfa>
 800e9ae:	9a07      	ldr	r2, [sp, #28]
 800e9b0:	4654      	mov	r4, sl
 800e9b2:	2000      	movs	r0, #0
 800e9b4:	f04f 0c0a 	mov.w	ip, #10
 800e9b8:	4621      	mov	r1, r4
 800e9ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9be:	3b30      	subs	r3, #48	@ 0x30
 800e9c0:	2b09      	cmp	r3, #9
 800e9c2:	d94b      	bls.n	800ea5c <_svfiprintf_r+0x17c>
 800e9c4:	b1b0      	cbz	r0, 800e9f4 <_svfiprintf_r+0x114>
 800e9c6:	9207      	str	r2, [sp, #28]
 800e9c8:	e014      	b.n	800e9f4 <_svfiprintf_r+0x114>
 800e9ca:	eba0 0308 	sub.w	r3, r0, r8
 800e9ce:	46a2      	mov	sl, r4
 800e9d0:	fa09 f303 	lsl.w	r3, r9, r3
 800e9d4:	4313      	orrs	r3, r2
 800e9d6:	9304      	str	r3, [sp, #16]
 800e9d8:	e7d2      	b.n	800e980 <_svfiprintf_r+0xa0>
 800e9da:	9b03      	ldr	r3, [sp, #12]
 800e9dc:	1d19      	adds	r1, r3, #4
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	9103      	str	r1, [sp, #12]
 800e9e4:	bfbb      	ittet	lt
 800e9e6:	425b      	neglt	r3, r3
 800e9e8:	f042 0202 	orrlt.w	r2, r2, #2
 800e9ec:	9307      	strge	r3, [sp, #28]
 800e9ee:	9307      	strlt	r3, [sp, #28]
 800e9f0:	bfb8      	it	lt
 800e9f2:	9204      	strlt	r2, [sp, #16]
 800e9f4:	7823      	ldrb	r3, [r4, #0]
 800e9f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800e9f8:	d10a      	bne.n	800ea10 <_svfiprintf_r+0x130>
 800e9fa:	7863      	ldrb	r3, [r4, #1]
 800e9fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9fe:	d132      	bne.n	800ea66 <_svfiprintf_r+0x186>
 800ea00:	9b03      	ldr	r3, [sp, #12]
 800ea02:	3402      	adds	r4, #2
 800ea04:	1d1a      	adds	r2, r3, #4
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea0c:	9203      	str	r2, [sp, #12]
 800ea0e:	9305      	str	r3, [sp, #20]
 800ea10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ead4 <_svfiprintf_r+0x1f4>
 800ea14:	2203      	movs	r2, #3
 800ea16:	7821      	ldrb	r1, [r4, #0]
 800ea18:	4650      	mov	r0, sl
 800ea1a:	f7fe fc10 	bl	800d23e <memchr>
 800ea1e:	b138      	cbz	r0, 800ea30 <_svfiprintf_r+0x150>
 800ea20:	eba0 000a 	sub.w	r0, r0, sl
 800ea24:	2240      	movs	r2, #64	@ 0x40
 800ea26:	9b04      	ldr	r3, [sp, #16]
 800ea28:	3401      	adds	r4, #1
 800ea2a:	4082      	lsls	r2, r0
 800ea2c:	4313      	orrs	r3, r2
 800ea2e:	9304      	str	r3, [sp, #16]
 800ea30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea34:	2206      	movs	r2, #6
 800ea36:	4824      	ldr	r0, [pc, #144]	@ (800eac8 <_svfiprintf_r+0x1e8>)
 800ea38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea3c:	f7fe fbff 	bl	800d23e <memchr>
 800ea40:	2800      	cmp	r0, #0
 800ea42:	d036      	beq.n	800eab2 <_svfiprintf_r+0x1d2>
 800ea44:	4b21      	ldr	r3, [pc, #132]	@ (800eacc <_svfiprintf_r+0x1ec>)
 800ea46:	bb1b      	cbnz	r3, 800ea90 <_svfiprintf_r+0x1b0>
 800ea48:	9b03      	ldr	r3, [sp, #12]
 800ea4a:	3307      	adds	r3, #7
 800ea4c:	f023 0307 	bic.w	r3, r3, #7
 800ea50:	3308      	adds	r3, #8
 800ea52:	9303      	str	r3, [sp, #12]
 800ea54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea56:	4433      	add	r3, r6
 800ea58:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea5a:	e76a      	b.n	800e932 <_svfiprintf_r+0x52>
 800ea5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea60:	460c      	mov	r4, r1
 800ea62:	2001      	movs	r0, #1
 800ea64:	e7a8      	b.n	800e9b8 <_svfiprintf_r+0xd8>
 800ea66:	2300      	movs	r3, #0
 800ea68:	3401      	adds	r4, #1
 800ea6a:	f04f 0c0a 	mov.w	ip, #10
 800ea6e:	4619      	mov	r1, r3
 800ea70:	9305      	str	r3, [sp, #20]
 800ea72:	4620      	mov	r0, r4
 800ea74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea78:	3a30      	subs	r2, #48	@ 0x30
 800ea7a:	2a09      	cmp	r2, #9
 800ea7c:	d903      	bls.n	800ea86 <_svfiprintf_r+0x1a6>
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d0c6      	beq.n	800ea10 <_svfiprintf_r+0x130>
 800ea82:	9105      	str	r1, [sp, #20]
 800ea84:	e7c4      	b.n	800ea10 <_svfiprintf_r+0x130>
 800ea86:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	e7f0      	b.n	800ea72 <_svfiprintf_r+0x192>
 800ea90:	ab03      	add	r3, sp, #12
 800ea92:	462a      	mov	r2, r5
 800ea94:	a904      	add	r1, sp, #16
 800ea96:	4638      	mov	r0, r7
 800ea98:	9300      	str	r3, [sp, #0]
 800ea9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ead0 <_svfiprintf_r+0x1f0>)
 800ea9c:	f7fd fe6e 	bl	800c77c <_printf_float>
 800eaa0:	1c42      	adds	r2, r0, #1
 800eaa2:	4606      	mov	r6, r0
 800eaa4:	d1d6      	bne.n	800ea54 <_svfiprintf_r+0x174>
 800eaa6:	89ab      	ldrh	r3, [r5, #12]
 800eaa8:	065b      	lsls	r3, r3, #25
 800eaaa:	f53f af2d 	bmi.w	800e908 <_svfiprintf_r+0x28>
 800eaae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eab0:	e72c      	b.n	800e90c <_svfiprintf_r+0x2c>
 800eab2:	ab03      	add	r3, sp, #12
 800eab4:	462a      	mov	r2, r5
 800eab6:	a904      	add	r1, sp, #16
 800eab8:	4638      	mov	r0, r7
 800eaba:	9300      	str	r3, [sp, #0]
 800eabc:	4b04      	ldr	r3, [pc, #16]	@ (800ead0 <_svfiprintf_r+0x1f0>)
 800eabe:	f7fe f8f9 	bl	800ccb4 <_printf_i>
 800eac2:	e7ed      	b.n	800eaa0 <_svfiprintf_r+0x1c0>
 800eac4:	08010938 	.word	0x08010938
 800eac8:	08010942 	.word	0x08010942
 800eacc:	0800c77d 	.word	0x0800c77d
 800ead0:	0800e829 	.word	0x0800e829
 800ead4:	0801093e 	.word	0x0801093e

0800ead8 <__sflush_r>:
 800ead8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae0:	0716      	lsls	r6, r2, #28
 800eae2:	4605      	mov	r5, r0
 800eae4:	460c      	mov	r4, r1
 800eae6:	d454      	bmi.n	800eb92 <__sflush_r+0xba>
 800eae8:	684b      	ldr	r3, [r1, #4]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	dc02      	bgt.n	800eaf4 <__sflush_r+0x1c>
 800eaee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	dd48      	ble.n	800eb86 <__sflush_r+0xae>
 800eaf4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eaf6:	2e00      	cmp	r6, #0
 800eaf8:	d045      	beq.n	800eb86 <__sflush_r+0xae>
 800eafa:	2300      	movs	r3, #0
 800eafc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eb00:	682f      	ldr	r7, [r5, #0]
 800eb02:	6a21      	ldr	r1, [r4, #32]
 800eb04:	602b      	str	r3, [r5, #0]
 800eb06:	d030      	beq.n	800eb6a <__sflush_r+0x92>
 800eb08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eb0a:	89a3      	ldrh	r3, [r4, #12]
 800eb0c:	0759      	lsls	r1, r3, #29
 800eb0e:	d505      	bpl.n	800eb1c <__sflush_r+0x44>
 800eb10:	6863      	ldr	r3, [r4, #4]
 800eb12:	1ad2      	subs	r2, r2, r3
 800eb14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eb16:	b10b      	cbz	r3, 800eb1c <__sflush_r+0x44>
 800eb18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eb1a:	1ad2      	subs	r2, r2, r3
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb20:	6a21      	ldr	r1, [r4, #32]
 800eb22:	4628      	mov	r0, r5
 800eb24:	47b0      	blx	r6
 800eb26:	1c43      	adds	r3, r0, #1
 800eb28:	89a3      	ldrh	r3, [r4, #12]
 800eb2a:	d106      	bne.n	800eb3a <__sflush_r+0x62>
 800eb2c:	6829      	ldr	r1, [r5, #0]
 800eb2e:	291d      	cmp	r1, #29
 800eb30:	d82b      	bhi.n	800eb8a <__sflush_r+0xb2>
 800eb32:	4a2a      	ldr	r2, [pc, #168]	@ (800ebdc <__sflush_r+0x104>)
 800eb34:	410a      	asrs	r2, r1
 800eb36:	07d6      	lsls	r6, r2, #31
 800eb38:	d427      	bmi.n	800eb8a <__sflush_r+0xb2>
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	04d9      	lsls	r1, r3, #19
 800eb3e:	6062      	str	r2, [r4, #4]
 800eb40:	6922      	ldr	r2, [r4, #16]
 800eb42:	6022      	str	r2, [r4, #0]
 800eb44:	d504      	bpl.n	800eb50 <__sflush_r+0x78>
 800eb46:	1c42      	adds	r2, r0, #1
 800eb48:	d101      	bne.n	800eb4e <__sflush_r+0x76>
 800eb4a:	682b      	ldr	r3, [r5, #0]
 800eb4c:	b903      	cbnz	r3, 800eb50 <__sflush_r+0x78>
 800eb4e:	6560      	str	r0, [r4, #84]	@ 0x54
 800eb50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb52:	602f      	str	r7, [r5, #0]
 800eb54:	b1b9      	cbz	r1, 800eb86 <__sflush_r+0xae>
 800eb56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb5a:	4299      	cmp	r1, r3
 800eb5c:	d002      	beq.n	800eb64 <__sflush_r+0x8c>
 800eb5e:	4628      	mov	r0, r5
 800eb60:	f7ff f9da 	bl	800df18 <_free_r>
 800eb64:	2300      	movs	r3, #0
 800eb66:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb68:	e00d      	b.n	800eb86 <__sflush_r+0xae>
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	47b0      	blx	r6
 800eb70:	4602      	mov	r2, r0
 800eb72:	1c50      	adds	r0, r2, #1
 800eb74:	d1c9      	bne.n	800eb0a <__sflush_r+0x32>
 800eb76:	682b      	ldr	r3, [r5, #0]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d0c6      	beq.n	800eb0a <__sflush_r+0x32>
 800eb7c:	2b1d      	cmp	r3, #29
 800eb7e:	d001      	beq.n	800eb84 <__sflush_r+0xac>
 800eb80:	2b16      	cmp	r3, #22
 800eb82:	d11d      	bne.n	800ebc0 <__sflush_r+0xe8>
 800eb84:	602f      	str	r7, [r5, #0]
 800eb86:	2000      	movs	r0, #0
 800eb88:	e021      	b.n	800ebce <__sflush_r+0xf6>
 800eb8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb8e:	b21b      	sxth	r3, r3
 800eb90:	e01a      	b.n	800ebc8 <__sflush_r+0xf0>
 800eb92:	690f      	ldr	r7, [r1, #16]
 800eb94:	2f00      	cmp	r7, #0
 800eb96:	d0f6      	beq.n	800eb86 <__sflush_r+0xae>
 800eb98:	0793      	lsls	r3, r2, #30
 800eb9a:	680e      	ldr	r6, [r1, #0]
 800eb9c:	600f      	str	r7, [r1, #0]
 800eb9e:	bf0c      	ite	eq
 800eba0:	694b      	ldreq	r3, [r1, #20]
 800eba2:	2300      	movne	r3, #0
 800eba4:	eba6 0807 	sub.w	r8, r6, r7
 800eba8:	608b      	str	r3, [r1, #8]
 800ebaa:	f1b8 0f00 	cmp.w	r8, #0
 800ebae:	ddea      	ble.n	800eb86 <__sflush_r+0xae>
 800ebb0:	4643      	mov	r3, r8
 800ebb2:	463a      	mov	r2, r7
 800ebb4:	6a21      	ldr	r1, [r4, #32]
 800ebb6:	4628      	mov	r0, r5
 800ebb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ebba:	47b0      	blx	r6
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	dc08      	bgt.n	800ebd2 <__sflush_r+0xfa>
 800ebc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebc8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebcc:	81a3      	strh	r3, [r4, #12]
 800ebce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebd2:	4407      	add	r7, r0
 800ebd4:	eba8 0800 	sub.w	r8, r8, r0
 800ebd8:	e7e7      	b.n	800ebaa <__sflush_r+0xd2>
 800ebda:	bf00      	nop
 800ebdc:	dfbffffe 	.word	0xdfbffffe

0800ebe0 <_fflush_r>:
 800ebe0:	b538      	push	{r3, r4, r5, lr}
 800ebe2:	690b      	ldr	r3, [r1, #16]
 800ebe4:	4605      	mov	r5, r0
 800ebe6:	460c      	mov	r4, r1
 800ebe8:	b913      	cbnz	r3, 800ebf0 <_fflush_r+0x10>
 800ebea:	2500      	movs	r5, #0
 800ebec:	4628      	mov	r0, r5
 800ebee:	bd38      	pop	{r3, r4, r5, pc}
 800ebf0:	b118      	cbz	r0, 800ebfa <_fflush_r+0x1a>
 800ebf2:	6a03      	ldr	r3, [r0, #32]
 800ebf4:	b90b      	cbnz	r3, 800ebfa <_fflush_r+0x1a>
 800ebf6:	f7fe fa09 	bl	800d00c <__sinit>
 800ebfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d0f3      	beq.n	800ebea <_fflush_r+0xa>
 800ec02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ec04:	07d0      	lsls	r0, r2, #31
 800ec06:	d404      	bmi.n	800ec12 <_fflush_r+0x32>
 800ec08:	0599      	lsls	r1, r3, #22
 800ec0a:	d402      	bmi.n	800ec12 <_fflush_r+0x32>
 800ec0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec0e:	f7fe fb14 	bl	800d23a <__retarget_lock_acquire_recursive>
 800ec12:	4628      	mov	r0, r5
 800ec14:	4621      	mov	r1, r4
 800ec16:	f7ff ff5f 	bl	800ead8 <__sflush_r>
 800ec1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ec1c:	4605      	mov	r5, r0
 800ec1e:	07da      	lsls	r2, r3, #31
 800ec20:	d4e4      	bmi.n	800ebec <_fflush_r+0xc>
 800ec22:	89a3      	ldrh	r3, [r4, #12]
 800ec24:	059b      	lsls	r3, r3, #22
 800ec26:	d4e1      	bmi.n	800ebec <_fflush_r+0xc>
 800ec28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec2a:	f7fe fb07 	bl	800d23c <__retarget_lock_release_recursive>
 800ec2e:	e7dd      	b.n	800ebec <_fflush_r+0xc>

0800ec30 <memmove>:
 800ec30:	4288      	cmp	r0, r1
 800ec32:	b510      	push	{r4, lr}
 800ec34:	eb01 0402 	add.w	r4, r1, r2
 800ec38:	d902      	bls.n	800ec40 <memmove+0x10>
 800ec3a:	4284      	cmp	r4, r0
 800ec3c:	4623      	mov	r3, r4
 800ec3e:	d807      	bhi.n	800ec50 <memmove+0x20>
 800ec40:	1e43      	subs	r3, r0, #1
 800ec42:	42a1      	cmp	r1, r4
 800ec44:	d008      	beq.n	800ec58 <memmove+0x28>
 800ec46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec4e:	e7f8      	b.n	800ec42 <memmove+0x12>
 800ec50:	4402      	add	r2, r0
 800ec52:	4601      	mov	r1, r0
 800ec54:	428a      	cmp	r2, r1
 800ec56:	d100      	bne.n	800ec5a <memmove+0x2a>
 800ec58:	bd10      	pop	{r4, pc}
 800ec5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec62:	e7f7      	b.n	800ec54 <memmove+0x24>

0800ec64 <_sbrk_r>:
 800ec64:	b538      	push	{r3, r4, r5, lr}
 800ec66:	2300      	movs	r3, #0
 800ec68:	4d05      	ldr	r5, [pc, #20]	@ (800ec80 <_sbrk_r+0x1c>)
 800ec6a:	4604      	mov	r4, r0
 800ec6c:	4608      	mov	r0, r1
 800ec6e:	602b      	str	r3, [r5, #0]
 800ec70:	f7f5 f942 	bl	8003ef8 <_sbrk>
 800ec74:	1c43      	adds	r3, r0, #1
 800ec76:	d102      	bne.n	800ec7e <_sbrk_r+0x1a>
 800ec78:	682b      	ldr	r3, [r5, #0]
 800ec7a:	b103      	cbz	r3, 800ec7e <_sbrk_r+0x1a>
 800ec7c:	6023      	str	r3, [r4, #0]
 800ec7e:	bd38      	pop	{r3, r4, r5, pc}
 800ec80:	20003ef4 	.word	0x20003ef4

0800ec84 <__assert_func>:
 800ec84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec86:	4614      	mov	r4, r2
 800ec88:	461a      	mov	r2, r3
 800ec8a:	4b09      	ldr	r3, [pc, #36]	@ (800ecb0 <__assert_func+0x2c>)
 800ec8c:	4605      	mov	r5, r0
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	68d8      	ldr	r0, [r3, #12]
 800ec92:	b954      	cbnz	r4, 800ecaa <__assert_func+0x26>
 800ec94:	4b07      	ldr	r3, [pc, #28]	@ (800ecb4 <__assert_func+0x30>)
 800ec96:	461c      	mov	r4, r3
 800ec98:	9100      	str	r1, [sp, #0]
 800ec9a:	4907      	ldr	r1, [pc, #28]	@ (800ecb8 <__assert_func+0x34>)
 800ec9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eca0:	462b      	mov	r3, r5
 800eca2:	f000 f86f 	bl	800ed84 <fiprintf>
 800eca6:	f000 f87f 	bl	800eda8 <abort>
 800ecaa:	4b04      	ldr	r3, [pc, #16]	@ (800ecbc <__assert_func+0x38>)
 800ecac:	e7f4      	b.n	800ec98 <__assert_func+0x14>
 800ecae:	bf00      	nop
 800ecb0:	2000001c 	.word	0x2000001c
 800ecb4:	0801098e 	.word	0x0801098e
 800ecb8:	08010960 	.word	0x08010960
 800ecbc:	08010953 	.word	0x08010953

0800ecc0 <_calloc_r>:
 800ecc0:	b570      	push	{r4, r5, r6, lr}
 800ecc2:	fba1 5402 	umull	r5, r4, r1, r2
 800ecc6:	b93c      	cbnz	r4, 800ecd8 <_calloc_r+0x18>
 800ecc8:	4629      	mov	r1, r5
 800ecca:	f7ff f999 	bl	800e000 <_malloc_r>
 800ecce:	4606      	mov	r6, r0
 800ecd0:	b928      	cbnz	r0, 800ecde <_calloc_r+0x1e>
 800ecd2:	2600      	movs	r6, #0
 800ecd4:	4630      	mov	r0, r6
 800ecd6:	bd70      	pop	{r4, r5, r6, pc}
 800ecd8:	220c      	movs	r2, #12
 800ecda:	6002      	str	r2, [r0, #0]
 800ecdc:	e7f9      	b.n	800ecd2 <_calloc_r+0x12>
 800ecde:	462a      	mov	r2, r5
 800ece0:	4621      	mov	r1, r4
 800ece2:	f7fe fa2c 	bl	800d13e <memset>
 800ece6:	e7f5      	b.n	800ecd4 <_calloc_r+0x14>

0800ece8 <__ascii_mbtowc>:
 800ece8:	b082      	sub	sp, #8
 800ecea:	b901      	cbnz	r1, 800ecee <__ascii_mbtowc+0x6>
 800ecec:	a901      	add	r1, sp, #4
 800ecee:	b142      	cbz	r2, 800ed02 <__ascii_mbtowc+0x1a>
 800ecf0:	b14b      	cbz	r3, 800ed06 <__ascii_mbtowc+0x1e>
 800ecf2:	7813      	ldrb	r3, [r2, #0]
 800ecf4:	600b      	str	r3, [r1, #0]
 800ecf6:	7812      	ldrb	r2, [r2, #0]
 800ecf8:	1e10      	subs	r0, r2, #0
 800ecfa:	bf18      	it	ne
 800ecfc:	2001      	movne	r0, #1
 800ecfe:	b002      	add	sp, #8
 800ed00:	4770      	bx	lr
 800ed02:	4610      	mov	r0, r2
 800ed04:	e7fb      	b.n	800ecfe <__ascii_mbtowc+0x16>
 800ed06:	f06f 0001 	mvn.w	r0, #1
 800ed0a:	e7f8      	b.n	800ecfe <__ascii_mbtowc+0x16>

0800ed0c <_realloc_r>:
 800ed0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed10:	4680      	mov	r8, r0
 800ed12:	4615      	mov	r5, r2
 800ed14:	460c      	mov	r4, r1
 800ed16:	b921      	cbnz	r1, 800ed22 <_realloc_r+0x16>
 800ed18:	4611      	mov	r1, r2
 800ed1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed1e:	f7ff b96f 	b.w	800e000 <_malloc_r>
 800ed22:	b92a      	cbnz	r2, 800ed30 <_realloc_r+0x24>
 800ed24:	f7ff f8f8 	bl	800df18 <_free_r>
 800ed28:	2400      	movs	r4, #0
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed30:	f000 f841 	bl	800edb6 <_malloc_usable_size_r>
 800ed34:	4285      	cmp	r5, r0
 800ed36:	4606      	mov	r6, r0
 800ed38:	d802      	bhi.n	800ed40 <_realloc_r+0x34>
 800ed3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ed3e:	d8f4      	bhi.n	800ed2a <_realloc_r+0x1e>
 800ed40:	4629      	mov	r1, r5
 800ed42:	4640      	mov	r0, r8
 800ed44:	f7ff f95c 	bl	800e000 <_malloc_r>
 800ed48:	4607      	mov	r7, r0
 800ed4a:	2800      	cmp	r0, #0
 800ed4c:	d0ec      	beq.n	800ed28 <_realloc_r+0x1c>
 800ed4e:	42b5      	cmp	r5, r6
 800ed50:	462a      	mov	r2, r5
 800ed52:	4621      	mov	r1, r4
 800ed54:	bf28      	it	cs
 800ed56:	4632      	movcs	r2, r6
 800ed58:	f7fe fa7f 	bl	800d25a <memcpy>
 800ed5c:	4621      	mov	r1, r4
 800ed5e:	4640      	mov	r0, r8
 800ed60:	463c      	mov	r4, r7
 800ed62:	f7ff f8d9 	bl	800df18 <_free_r>
 800ed66:	e7e0      	b.n	800ed2a <_realloc_r+0x1e>

0800ed68 <__ascii_wctomb>:
 800ed68:	4603      	mov	r3, r0
 800ed6a:	4608      	mov	r0, r1
 800ed6c:	b141      	cbz	r1, 800ed80 <__ascii_wctomb+0x18>
 800ed6e:	2aff      	cmp	r2, #255	@ 0xff
 800ed70:	d904      	bls.n	800ed7c <__ascii_wctomb+0x14>
 800ed72:	228a      	movs	r2, #138	@ 0x8a
 800ed74:	f04f 30ff 	mov.w	r0, #4294967295
 800ed78:	601a      	str	r2, [r3, #0]
 800ed7a:	4770      	bx	lr
 800ed7c:	2001      	movs	r0, #1
 800ed7e:	700a      	strb	r2, [r1, #0]
 800ed80:	4770      	bx	lr
	...

0800ed84 <fiprintf>:
 800ed84:	b40e      	push	{r1, r2, r3}
 800ed86:	b503      	push	{r0, r1, lr}
 800ed88:	ab03      	add	r3, sp, #12
 800ed8a:	4601      	mov	r1, r0
 800ed8c:	4805      	ldr	r0, [pc, #20]	@ (800eda4 <fiprintf+0x20>)
 800ed8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed92:	6800      	ldr	r0, [r0, #0]
 800ed94:	9301      	str	r3, [sp, #4]
 800ed96:	f000 f83f 	bl	800ee18 <_vfiprintf_r>
 800ed9a:	b002      	add	sp, #8
 800ed9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eda0:	b003      	add	sp, #12
 800eda2:	4770      	bx	lr
 800eda4:	2000001c 	.word	0x2000001c

0800eda8 <abort>:
 800eda8:	2006      	movs	r0, #6
 800edaa:	b508      	push	{r3, lr}
 800edac:	f000 fa08 	bl	800f1c0 <raise>
 800edb0:	2001      	movs	r0, #1
 800edb2:	f7f5 f829 	bl	8003e08 <_exit>

0800edb6 <_malloc_usable_size_r>:
 800edb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edba:	1f18      	subs	r0, r3, #4
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	bfbc      	itt	lt
 800edc0:	580b      	ldrlt	r3, [r1, r0]
 800edc2:	18c0      	addlt	r0, r0, r3
 800edc4:	4770      	bx	lr

0800edc6 <__sfputc_r>:
 800edc6:	6893      	ldr	r3, [r2, #8]
 800edc8:	3b01      	subs	r3, #1
 800edca:	2b00      	cmp	r3, #0
 800edcc:	6093      	str	r3, [r2, #8]
 800edce:	b410      	push	{r4}
 800edd0:	da08      	bge.n	800ede4 <__sfputc_r+0x1e>
 800edd2:	6994      	ldr	r4, [r2, #24]
 800edd4:	42a3      	cmp	r3, r4
 800edd6:	db01      	blt.n	800eddc <__sfputc_r+0x16>
 800edd8:	290a      	cmp	r1, #10
 800edda:	d103      	bne.n	800ede4 <__sfputc_r+0x1e>
 800eddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ede0:	f000 b932 	b.w	800f048 <__swbuf_r>
 800ede4:	6813      	ldr	r3, [r2, #0]
 800ede6:	1c58      	adds	r0, r3, #1
 800ede8:	6010      	str	r0, [r2, #0]
 800edea:	4608      	mov	r0, r1
 800edec:	7019      	strb	r1, [r3, #0]
 800edee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edf2:	4770      	bx	lr

0800edf4 <__sfputs_r>:
 800edf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edf6:	4606      	mov	r6, r0
 800edf8:	460f      	mov	r7, r1
 800edfa:	4614      	mov	r4, r2
 800edfc:	18d5      	adds	r5, r2, r3
 800edfe:	42ac      	cmp	r4, r5
 800ee00:	d101      	bne.n	800ee06 <__sfputs_r+0x12>
 800ee02:	2000      	movs	r0, #0
 800ee04:	e007      	b.n	800ee16 <__sfputs_r+0x22>
 800ee06:	463a      	mov	r2, r7
 800ee08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee0c:	4630      	mov	r0, r6
 800ee0e:	f7ff ffda 	bl	800edc6 <__sfputc_r>
 800ee12:	1c43      	adds	r3, r0, #1
 800ee14:	d1f3      	bne.n	800edfe <__sfputs_r+0xa>
 800ee16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ee18 <_vfiprintf_r>:
 800ee18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee1c:	460d      	mov	r5, r1
 800ee1e:	b09d      	sub	sp, #116	@ 0x74
 800ee20:	4614      	mov	r4, r2
 800ee22:	4698      	mov	r8, r3
 800ee24:	4606      	mov	r6, r0
 800ee26:	b118      	cbz	r0, 800ee30 <_vfiprintf_r+0x18>
 800ee28:	6a03      	ldr	r3, [r0, #32]
 800ee2a:	b90b      	cbnz	r3, 800ee30 <_vfiprintf_r+0x18>
 800ee2c:	f7fe f8ee 	bl	800d00c <__sinit>
 800ee30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee32:	07d9      	lsls	r1, r3, #31
 800ee34:	d405      	bmi.n	800ee42 <_vfiprintf_r+0x2a>
 800ee36:	89ab      	ldrh	r3, [r5, #12]
 800ee38:	059a      	lsls	r2, r3, #22
 800ee3a:	d402      	bmi.n	800ee42 <_vfiprintf_r+0x2a>
 800ee3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee3e:	f7fe f9fc 	bl	800d23a <__retarget_lock_acquire_recursive>
 800ee42:	89ab      	ldrh	r3, [r5, #12]
 800ee44:	071b      	lsls	r3, r3, #28
 800ee46:	d501      	bpl.n	800ee4c <_vfiprintf_r+0x34>
 800ee48:	692b      	ldr	r3, [r5, #16]
 800ee4a:	b99b      	cbnz	r3, 800ee74 <_vfiprintf_r+0x5c>
 800ee4c:	4629      	mov	r1, r5
 800ee4e:	4630      	mov	r0, r6
 800ee50:	f000 f938 	bl	800f0c4 <__swsetup_r>
 800ee54:	b170      	cbz	r0, 800ee74 <_vfiprintf_r+0x5c>
 800ee56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee58:	07dc      	lsls	r4, r3, #31
 800ee5a:	d504      	bpl.n	800ee66 <_vfiprintf_r+0x4e>
 800ee5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee60:	b01d      	add	sp, #116	@ 0x74
 800ee62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee66:	89ab      	ldrh	r3, [r5, #12]
 800ee68:	0598      	lsls	r0, r3, #22
 800ee6a:	d4f7      	bmi.n	800ee5c <_vfiprintf_r+0x44>
 800ee6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee6e:	f7fe f9e5 	bl	800d23c <__retarget_lock_release_recursive>
 800ee72:	e7f3      	b.n	800ee5c <_vfiprintf_r+0x44>
 800ee74:	2300      	movs	r3, #0
 800ee76:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee7a:	f04f 0901 	mov.w	r9, #1
 800ee7e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800f034 <_vfiprintf_r+0x21c>
 800ee82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee84:	2320      	movs	r3, #32
 800ee86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee8a:	2330      	movs	r3, #48	@ 0x30
 800ee8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee90:	4623      	mov	r3, r4
 800ee92:	469a      	mov	sl, r3
 800ee94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee98:	b10a      	cbz	r2, 800ee9e <_vfiprintf_r+0x86>
 800ee9a:	2a25      	cmp	r2, #37	@ 0x25
 800ee9c:	d1f9      	bne.n	800ee92 <_vfiprintf_r+0x7a>
 800ee9e:	ebba 0b04 	subs.w	fp, sl, r4
 800eea2:	d00b      	beq.n	800eebc <_vfiprintf_r+0xa4>
 800eea4:	465b      	mov	r3, fp
 800eea6:	4622      	mov	r2, r4
 800eea8:	4629      	mov	r1, r5
 800eeaa:	4630      	mov	r0, r6
 800eeac:	f7ff ffa2 	bl	800edf4 <__sfputs_r>
 800eeb0:	3001      	adds	r0, #1
 800eeb2:	f000 80a7 	beq.w	800f004 <_vfiprintf_r+0x1ec>
 800eeb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eeb8:	445a      	add	r2, fp
 800eeba:	9209      	str	r2, [sp, #36]	@ 0x24
 800eebc:	f89a 3000 	ldrb.w	r3, [sl]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	f000 809f 	beq.w	800f004 <_vfiprintf_r+0x1ec>
 800eec6:	2300      	movs	r3, #0
 800eec8:	f04f 32ff 	mov.w	r2, #4294967295
 800eecc:	f10a 0a01 	add.w	sl, sl, #1
 800eed0:	9304      	str	r3, [sp, #16]
 800eed2:	9307      	str	r3, [sp, #28]
 800eed4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eed8:	931a      	str	r3, [sp, #104]	@ 0x68
 800eeda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eede:	4654      	mov	r4, sl
 800eee0:	2205      	movs	r2, #5
 800eee2:	4854      	ldr	r0, [pc, #336]	@ (800f034 <_vfiprintf_r+0x21c>)
 800eee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eee8:	f7fe f9a9 	bl	800d23e <memchr>
 800eeec:	9a04      	ldr	r2, [sp, #16]
 800eeee:	b9d8      	cbnz	r0, 800ef28 <_vfiprintf_r+0x110>
 800eef0:	06d1      	lsls	r1, r2, #27
 800eef2:	bf44      	itt	mi
 800eef4:	2320      	movmi	r3, #32
 800eef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eefa:	0713      	lsls	r3, r2, #28
 800eefc:	bf44      	itt	mi
 800eefe:	232b      	movmi	r3, #43	@ 0x2b
 800ef00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef04:	f89a 3000 	ldrb.w	r3, [sl]
 800ef08:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef0a:	d015      	beq.n	800ef38 <_vfiprintf_r+0x120>
 800ef0c:	9a07      	ldr	r2, [sp, #28]
 800ef0e:	4654      	mov	r4, sl
 800ef10:	2000      	movs	r0, #0
 800ef12:	f04f 0c0a 	mov.w	ip, #10
 800ef16:	4621      	mov	r1, r4
 800ef18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef1c:	3b30      	subs	r3, #48	@ 0x30
 800ef1e:	2b09      	cmp	r3, #9
 800ef20:	d94b      	bls.n	800efba <_vfiprintf_r+0x1a2>
 800ef22:	b1b0      	cbz	r0, 800ef52 <_vfiprintf_r+0x13a>
 800ef24:	9207      	str	r2, [sp, #28]
 800ef26:	e014      	b.n	800ef52 <_vfiprintf_r+0x13a>
 800ef28:	eba0 0308 	sub.w	r3, r0, r8
 800ef2c:	46a2      	mov	sl, r4
 800ef2e:	fa09 f303 	lsl.w	r3, r9, r3
 800ef32:	4313      	orrs	r3, r2
 800ef34:	9304      	str	r3, [sp, #16]
 800ef36:	e7d2      	b.n	800eede <_vfiprintf_r+0xc6>
 800ef38:	9b03      	ldr	r3, [sp, #12]
 800ef3a:	1d19      	adds	r1, r3, #4
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	9103      	str	r1, [sp, #12]
 800ef42:	bfbb      	ittet	lt
 800ef44:	425b      	neglt	r3, r3
 800ef46:	f042 0202 	orrlt.w	r2, r2, #2
 800ef4a:	9307      	strge	r3, [sp, #28]
 800ef4c:	9307      	strlt	r3, [sp, #28]
 800ef4e:	bfb8      	it	lt
 800ef50:	9204      	strlt	r2, [sp, #16]
 800ef52:	7823      	ldrb	r3, [r4, #0]
 800ef54:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef56:	d10a      	bne.n	800ef6e <_vfiprintf_r+0x156>
 800ef58:	7863      	ldrb	r3, [r4, #1]
 800ef5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef5c:	d132      	bne.n	800efc4 <_vfiprintf_r+0x1ac>
 800ef5e:	9b03      	ldr	r3, [sp, #12]
 800ef60:	3402      	adds	r4, #2
 800ef62:	1d1a      	adds	r2, r3, #4
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef6a:	9203      	str	r2, [sp, #12]
 800ef6c:	9305      	str	r3, [sp, #20]
 800ef6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f044 <_vfiprintf_r+0x22c>
 800ef72:	2203      	movs	r2, #3
 800ef74:	7821      	ldrb	r1, [r4, #0]
 800ef76:	4650      	mov	r0, sl
 800ef78:	f7fe f961 	bl	800d23e <memchr>
 800ef7c:	b138      	cbz	r0, 800ef8e <_vfiprintf_r+0x176>
 800ef7e:	eba0 000a 	sub.w	r0, r0, sl
 800ef82:	2240      	movs	r2, #64	@ 0x40
 800ef84:	9b04      	ldr	r3, [sp, #16]
 800ef86:	3401      	adds	r4, #1
 800ef88:	4082      	lsls	r2, r0
 800ef8a:	4313      	orrs	r3, r2
 800ef8c:	9304      	str	r3, [sp, #16]
 800ef8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef92:	2206      	movs	r2, #6
 800ef94:	4828      	ldr	r0, [pc, #160]	@ (800f038 <_vfiprintf_r+0x220>)
 800ef96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef9a:	f7fe f950 	bl	800d23e <memchr>
 800ef9e:	2800      	cmp	r0, #0
 800efa0:	d03f      	beq.n	800f022 <_vfiprintf_r+0x20a>
 800efa2:	4b26      	ldr	r3, [pc, #152]	@ (800f03c <_vfiprintf_r+0x224>)
 800efa4:	bb1b      	cbnz	r3, 800efee <_vfiprintf_r+0x1d6>
 800efa6:	9b03      	ldr	r3, [sp, #12]
 800efa8:	3307      	adds	r3, #7
 800efaa:	f023 0307 	bic.w	r3, r3, #7
 800efae:	3308      	adds	r3, #8
 800efb0:	9303      	str	r3, [sp, #12]
 800efb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efb4:	443b      	add	r3, r7
 800efb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800efb8:	e76a      	b.n	800ee90 <_vfiprintf_r+0x78>
 800efba:	fb0c 3202 	mla	r2, ip, r2, r3
 800efbe:	460c      	mov	r4, r1
 800efc0:	2001      	movs	r0, #1
 800efc2:	e7a8      	b.n	800ef16 <_vfiprintf_r+0xfe>
 800efc4:	2300      	movs	r3, #0
 800efc6:	3401      	adds	r4, #1
 800efc8:	f04f 0c0a 	mov.w	ip, #10
 800efcc:	4619      	mov	r1, r3
 800efce:	9305      	str	r3, [sp, #20]
 800efd0:	4620      	mov	r0, r4
 800efd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efd6:	3a30      	subs	r2, #48	@ 0x30
 800efd8:	2a09      	cmp	r2, #9
 800efda:	d903      	bls.n	800efe4 <_vfiprintf_r+0x1cc>
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d0c6      	beq.n	800ef6e <_vfiprintf_r+0x156>
 800efe0:	9105      	str	r1, [sp, #20]
 800efe2:	e7c4      	b.n	800ef6e <_vfiprintf_r+0x156>
 800efe4:	fb0c 2101 	mla	r1, ip, r1, r2
 800efe8:	4604      	mov	r4, r0
 800efea:	2301      	movs	r3, #1
 800efec:	e7f0      	b.n	800efd0 <_vfiprintf_r+0x1b8>
 800efee:	ab03      	add	r3, sp, #12
 800eff0:	462a      	mov	r2, r5
 800eff2:	a904      	add	r1, sp, #16
 800eff4:	4630      	mov	r0, r6
 800eff6:	9300      	str	r3, [sp, #0]
 800eff8:	4b11      	ldr	r3, [pc, #68]	@ (800f040 <_vfiprintf_r+0x228>)
 800effa:	f7fd fbbf 	bl	800c77c <_printf_float>
 800effe:	4607      	mov	r7, r0
 800f000:	1c78      	adds	r0, r7, #1
 800f002:	d1d6      	bne.n	800efb2 <_vfiprintf_r+0x19a>
 800f004:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f006:	07d9      	lsls	r1, r3, #31
 800f008:	d405      	bmi.n	800f016 <_vfiprintf_r+0x1fe>
 800f00a:	89ab      	ldrh	r3, [r5, #12]
 800f00c:	059a      	lsls	r2, r3, #22
 800f00e:	d402      	bmi.n	800f016 <_vfiprintf_r+0x1fe>
 800f010:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f012:	f7fe f913 	bl	800d23c <__retarget_lock_release_recursive>
 800f016:	89ab      	ldrh	r3, [r5, #12]
 800f018:	065b      	lsls	r3, r3, #25
 800f01a:	f53f af1f 	bmi.w	800ee5c <_vfiprintf_r+0x44>
 800f01e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f020:	e71e      	b.n	800ee60 <_vfiprintf_r+0x48>
 800f022:	ab03      	add	r3, sp, #12
 800f024:	462a      	mov	r2, r5
 800f026:	a904      	add	r1, sp, #16
 800f028:	4630      	mov	r0, r6
 800f02a:	9300      	str	r3, [sp, #0]
 800f02c:	4b04      	ldr	r3, [pc, #16]	@ (800f040 <_vfiprintf_r+0x228>)
 800f02e:	f7fd fe41 	bl	800ccb4 <_printf_i>
 800f032:	e7e4      	b.n	800effe <_vfiprintf_r+0x1e6>
 800f034:	08010938 	.word	0x08010938
 800f038:	08010942 	.word	0x08010942
 800f03c:	0800c77d 	.word	0x0800c77d
 800f040:	0800edf5 	.word	0x0800edf5
 800f044:	0801093e 	.word	0x0801093e

0800f048 <__swbuf_r>:
 800f048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f04a:	460e      	mov	r6, r1
 800f04c:	4614      	mov	r4, r2
 800f04e:	4605      	mov	r5, r0
 800f050:	b118      	cbz	r0, 800f05a <__swbuf_r+0x12>
 800f052:	6a03      	ldr	r3, [r0, #32]
 800f054:	b90b      	cbnz	r3, 800f05a <__swbuf_r+0x12>
 800f056:	f7fd ffd9 	bl	800d00c <__sinit>
 800f05a:	69a3      	ldr	r3, [r4, #24]
 800f05c:	60a3      	str	r3, [r4, #8]
 800f05e:	89a3      	ldrh	r3, [r4, #12]
 800f060:	071a      	lsls	r2, r3, #28
 800f062:	d501      	bpl.n	800f068 <__swbuf_r+0x20>
 800f064:	6923      	ldr	r3, [r4, #16]
 800f066:	b943      	cbnz	r3, 800f07a <__swbuf_r+0x32>
 800f068:	4621      	mov	r1, r4
 800f06a:	4628      	mov	r0, r5
 800f06c:	f000 f82a 	bl	800f0c4 <__swsetup_r>
 800f070:	b118      	cbz	r0, 800f07a <__swbuf_r+0x32>
 800f072:	f04f 37ff 	mov.w	r7, #4294967295
 800f076:	4638      	mov	r0, r7
 800f078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f07a:	6823      	ldr	r3, [r4, #0]
 800f07c:	b2f6      	uxtb	r6, r6
 800f07e:	6922      	ldr	r2, [r4, #16]
 800f080:	4637      	mov	r7, r6
 800f082:	1a98      	subs	r0, r3, r2
 800f084:	6963      	ldr	r3, [r4, #20]
 800f086:	4283      	cmp	r3, r0
 800f088:	dc05      	bgt.n	800f096 <__swbuf_r+0x4e>
 800f08a:	4621      	mov	r1, r4
 800f08c:	4628      	mov	r0, r5
 800f08e:	f7ff fda7 	bl	800ebe0 <_fflush_r>
 800f092:	2800      	cmp	r0, #0
 800f094:	d1ed      	bne.n	800f072 <__swbuf_r+0x2a>
 800f096:	68a3      	ldr	r3, [r4, #8]
 800f098:	3b01      	subs	r3, #1
 800f09a:	60a3      	str	r3, [r4, #8]
 800f09c:	6823      	ldr	r3, [r4, #0]
 800f09e:	1c5a      	adds	r2, r3, #1
 800f0a0:	6022      	str	r2, [r4, #0]
 800f0a2:	701e      	strb	r6, [r3, #0]
 800f0a4:	1c43      	adds	r3, r0, #1
 800f0a6:	6962      	ldr	r2, [r4, #20]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d004      	beq.n	800f0b6 <__swbuf_r+0x6e>
 800f0ac:	89a3      	ldrh	r3, [r4, #12]
 800f0ae:	07db      	lsls	r3, r3, #31
 800f0b0:	d5e1      	bpl.n	800f076 <__swbuf_r+0x2e>
 800f0b2:	2e0a      	cmp	r6, #10
 800f0b4:	d1df      	bne.n	800f076 <__swbuf_r+0x2e>
 800f0b6:	4621      	mov	r1, r4
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	f7ff fd91 	bl	800ebe0 <_fflush_r>
 800f0be:	2800      	cmp	r0, #0
 800f0c0:	d0d9      	beq.n	800f076 <__swbuf_r+0x2e>
 800f0c2:	e7d6      	b.n	800f072 <__swbuf_r+0x2a>

0800f0c4 <__swsetup_r>:
 800f0c4:	b538      	push	{r3, r4, r5, lr}
 800f0c6:	4b29      	ldr	r3, [pc, #164]	@ (800f16c <__swsetup_r+0xa8>)
 800f0c8:	4605      	mov	r5, r0
 800f0ca:	460c      	mov	r4, r1
 800f0cc:	6818      	ldr	r0, [r3, #0]
 800f0ce:	b118      	cbz	r0, 800f0d8 <__swsetup_r+0x14>
 800f0d0:	6a03      	ldr	r3, [r0, #32]
 800f0d2:	b90b      	cbnz	r3, 800f0d8 <__swsetup_r+0x14>
 800f0d4:	f7fd ff9a 	bl	800d00c <__sinit>
 800f0d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0dc:	0719      	lsls	r1, r3, #28
 800f0de:	d422      	bmi.n	800f126 <__swsetup_r+0x62>
 800f0e0:	06da      	lsls	r2, r3, #27
 800f0e2:	d407      	bmi.n	800f0f4 <__swsetup_r+0x30>
 800f0e4:	2209      	movs	r2, #9
 800f0e6:	602a      	str	r2, [r5, #0]
 800f0e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f0:	81a3      	strh	r3, [r4, #12]
 800f0f2:	e033      	b.n	800f15c <__swsetup_r+0x98>
 800f0f4:	0758      	lsls	r0, r3, #29
 800f0f6:	d512      	bpl.n	800f11e <__swsetup_r+0x5a>
 800f0f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f0fa:	b141      	cbz	r1, 800f10e <__swsetup_r+0x4a>
 800f0fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f100:	4299      	cmp	r1, r3
 800f102:	d002      	beq.n	800f10a <__swsetup_r+0x46>
 800f104:	4628      	mov	r0, r5
 800f106:	f7fe ff07 	bl	800df18 <_free_r>
 800f10a:	2300      	movs	r3, #0
 800f10c:	6363      	str	r3, [r4, #52]	@ 0x34
 800f10e:	89a3      	ldrh	r3, [r4, #12]
 800f110:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f114:	81a3      	strh	r3, [r4, #12]
 800f116:	2300      	movs	r3, #0
 800f118:	6063      	str	r3, [r4, #4]
 800f11a:	6923      	ldr	r3, [r4, #16]
 800f11c:	6023      	str	r3, [r4, #0]
 800f11e:	89a3      	ldrh	r3, [r4, #12]
 800f120:	f043 0308 	orr.w	r3, r3, #8
 800f124:	81a3      	strh	r3, [r4, #12]
 800f126:	6923      	ldr	r3, [r4, #16]
 800f128:	b94b      	cbnz	r3, 800f13e <__swsetup_r+0x7a>
 800f12a:	89a3      	ldrh	r3, [r4, #12]
 800f12c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f134:	d003      	beq.n	800f13e <__swsetup_r+0x7a>
 800f136:	4621      	mov	r1, r4
 800f138:	4628      	mov	r0, r5
 800f13a:	f000 f882 	bl	800f242 <__smakebuf_r>
 800f13e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f142:	f013 0201 	ands.w	r2, r3, #1
 800f146:	d00a      	beq.n	800f15e <__swsetup_r+0x9a>
 800f148:	2200      	movs	r2, #0
 800f14a:	60a2      	str	r2, [r4, #8]
 800f14c:	6962      	ldr	r2, [r4, #20]
 800f14e:	4252      	negs	r2, r2
 800f150:	61a2      	str	r2, [r4, #24]
 800f152:	6922      	ldr	r2, [r4, #16]
 800f154:	b942      	cbnz	r2, 800f168 <__swsetup_r+0xa4>
 800f156:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f15a:	d1c5      	bne.n	800f0e8 <__swsetup_r+0x24>
 800f15c:	bd38      	pop	{r3, r4, r5, pc}
 800f15e:	0799      	lsls	r1, r3, #30
 800f160:	bf58      	it	pl
 800f162:	6962      	ldrpl	r2, [r4, #20]
 800f164:	60a2      	str	r2, [r4, #8]
 800f166:	e7f4      	b.n	800f152 <__swsetup_r+0x8e>
 800f168:	2000      	movs	r0, #0
 800f16a:	e7f7      	b.n	800f15c <__swsetup_r+0x98>
 800f16c:	2000001c 	.word	0x2000001c

0800f170 <_raise_r>:
 800f170:	291f      	cmp	r1, #31
 800f172:	b538      	push	{r3, r4, r5, lr}
 800f174:	4605      	mov	r5, r0
 800f176:	460c      	mov	r4, r1
 800f178:	d904      	bls.n	800f184 <_raise_r+0x14>
 800f17a:	2316      	movs	r3, #22
 800f17c:	6003      	str	r3, [r0, #0]
 800f17e:	f04f 30ff 	mov.w	r0, #4294967295
 800f182:	bd38      	pop	{r3, r4, r5, pc}
 800f184:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f186:	b112      	cbz	r2, 800f18e <_raise_r+0x1e>
 800f188:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f18c:	b94b      	cbnz	r3, 800f1a2 <_raise_r+0x32>
 800f18e:	4628      	mov	r0, r5
 800f190:	f000 f830 	bl	800f1f4 <_getpid_r>
 800f194:	4622      	mov	r2, r4
 800f196:	4601      	mov	r1, r0
 800f198:	4628      	mov	r0, r5
 800f19a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f19e:	f000 b817 	b.w	800f1d0 <_kill_r>
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	d00a      	beq.n	800f1bc <_raise_r+0x4c>
 800f1a6:	1c59      	adds	r1, r3, #1
 800f1a8:	d103      	bne.n	800f1b2 <_raise_r+0x42>
 800f1aa:	2316      	movs	r3, #22
 800f1ac:	6003      	str	r3, [r0, #0]
 800f1ae:	2001      	movs	r0, #1
 800f1b0:	e7e7      	b.n	800f182 <_raise_r+0x12>
 800f1b2:	2100      	movs	r1, #0
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f1ba:	4798      	blx	r3
 800f1bc:	2000      	movs	r0, #0
 800f1be:	e7e0      	b.n	800f182 <_raise_r+0x12>

0800f1c0 <raise>:
 800f1c0:	4b02      	ldr	r3, [pc, #8]	@ (800f1cc <raise+0xc>)
 800f1c2:	4601      	mov	r1, r0
 800f1c4:	6818      	ldr	r0, [r3, #0]
 800f1c6:	f7ff bfd3 	b.w	800f170 <_raise_r>
 800f1ca:	bf00      	nop
 800f1cc:	2000001c 	.word	0x2000001c

0800f1d0 <_kill_r>:
 800f1d0:	b538      	push	{r3, r4, r5, lr}
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	4d06      	ldr	r5, [pc, #24]	@ (800f1f0 <_kill_r+0x20>)
 800f1d6:	4604      	mov	r4, r0
 800f1d8:	4608      	mov	r0, r1
 800f1da:	4611      	mov	r1, r2
 800f1dc:	602b      	str	r3, [r5, #0]
 800f1de:	f7f4 fe03 	bl	8003de8 <_kill>
 800f1e2:	1c43      	adds	r3, r0, #1
 800f1e4:	d102      	bne.n	800f1ec <_kill_r+0x1c>
 800f1e6:	682b      	ldr	r3, [r5, #0]
 800f1e8:	b103      	cbz	r3, 800f1ec <_kill_r+0x1c>
 800f1ea:	6023      	str	r3, [r4, #0]
 800f1ec:	bd38      	pop	{r3, r4, r5, pc}
 800f1ee:	bf00      	nop
 800f1f0:	20003ef4 	.word	0x20003ef4

0800f1f4 <_getpid_r>:
 800f1f4:	f7f4 bdf0 	b.w	8003dd8 <_getpid>

0800f1f8 <__swhatbuf_r>:
 800f1f8:	b570      	push	{r4, r5, r6, lr}
 800f1fa:	460c      	mov	r4, r1
 800f1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f200:	b096      	sub	sp, #88	@ 0x58
 800f202:	4615      	mov	r5, r2
 800f204:	2900      	cmp	r1, #0
 800f206:	461e      	mov	r6, r3
 800f208:	da0c      	bge.n	800f224 <__swhatbuf_r+0x2c>
 800f20a:	89a3      	ldrh	r3, [r4, #12]
 800f20c:	2100      	movs	r1, #0
 800f20e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f212:	bf14      	ite	ne
 800f214:	2340      	movne	r3, #64	@ 0x40
 800f216:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f21a:	2000      	movs	r0, #0
 800f21c:	6031      	str	r1, [r6, #0]
 800f21e:	602b      	str	r3, [r5, #0]
 800f220:	b016      	add	sp, #88	@ 0x58
 800f222:	bd70      	pop	{r4, r5, r6, pc}
 800f224:	466a      	mov	r2, sp
 800f226:	f000 f849 	bl	800f2bc <_fstat_r>
 800f22a:	2800      	cmp	r0, #0
 800f22c:	dbed      	blt.n	800f20a <__swhatbuf_r+0x12>
 800f22e:	9901      	ldr	r1, [sp, #4]
 800f230:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f234:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f238:	4259      	negs	r1, r3
 800f23a:	4159      	adcs	r1, r3
 800f23c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f240:	e7eb      	b.n	800f21a <__swhatbuf_r+0x22>

0800f242 <__smakebuf_r>:
 800f242:	898b      	ldrh	r3, [r1, #12]
 800f244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f246:	079d      	lsls	r5, r3, #30
 800f248:	4606      	mov	r6, r0
 800f24a:	460c      	mov	r4, r1
 800f24c:	d507      	bpl.n	800f25e <__smakebuf_r+0x1c>
 800f24e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f252:	6023      	str	r3, [r4, #0]
 800f254:	6123      	str	r3, [r4, #16]
 800f256:	2301      	movs	r3, #1
 800f258:	6163      	str	r3, [r4, #20]
 800f25a:	b003      	add	sp, #12
 800f25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f25e:	ab01      	add	r3, sp, #4
 800f260:	466a      	mov	r2, sp
 800f262:	f7ff ffc9 	bl	800f1f8 <__swhatbuf_r>
 800f266:	9f00      	ldr	r7, [sp, #0]
 800f268:	4605      	mov	r5, r0
 800f26a:	4630      	mov	r0, r6
 800f26c:	4639      	mov	r1, r7
 800f26e:	f7fe fec7 	bl	800e000 <_malloc_r>
 800f272:	b948      	cbnz	r0, 800f288 <__smakebuf_r+0x46>
 800f274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f278:	059a      	lsls	r2, r3, #22
 800f27a:	d4ee      	bmi.n	800f25a <__smakebuf_r+0x18>
 800f27c:	f023 0303 	bic.w	r3, r3, #3
 800f280:	f043 0302 	orr.w	r3, r3, #2
 800f284:	81a3      	strh	r3, [r4, #12]
 800f286:	e7e2      	b.n	800f24e <__smakebuf_r+0xc>
 800f288:	89a3      	ldrh	r3, [r4, #12]
 800f28a:	6020      	str	r0, [r4, #0]
 800f28c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f290:	81a3      	strh	r3, [r4, #12]
 800f292:	9b01      	ldr	r3, [sp, #4]
 800f294:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f298:	b15b      	cbz	r3, 800f2b2 <__smakebuf_r+0x70>
 800f29a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f29e:	4630      	mov	r0, r6
 800f2a0:	f000 f81e 	bl	800f2e0 <_isatty_r>
 800f2a4:	b128      	cbz	r0, 800f2b2 <__smakebuf_r+0x70>
 800f2a6:	89a3      	ldrh	r3, [r4, #12]
 800f2a8:	f023 0303 	bic.w	r3, r3, #3
 800f2ac:	f043 0301 	orr.w	r3, r3, #1
 800f2b0:	81a3      	strh	r3, [r4, #12]
 800f2b2:	89a3      	ldrh	r3, [r4, #12]
 800f2b4:	431d      	orrs	r5, r3
 800f2b6:	81a5      	strh	r5, [r4, #12]
 800f2b8:	e7cf      	b.n	800f25a <__smakebuf_r+0x18>
	...

0800f2bc <_fstat_r>:
 800f2bc:	b538      	push	{r3, r4, r5, lr}
 800f2be:	2300      	movs	r3, #0
 800f2c0:	4d06      	ldr	r5, [pc, #24]	@ (800f2dc <_fstat_r+0x20>)
 800f2c2:	4604      	mov	r4, r0
 800f2c4:	4608      	mov	r0, r1
 800f2c6:	4611      	mov	r1, r2
 800f2c8:	602b      	str	r3, [r5, #0]
 800f2ca:	f7f4 fded 	bl	8003ea8 <_fstat>
 800f2ce:	1c43      	adds	r3, r0, #1
 800f2d0:	d102      	bne.n	800f2d8 <_fstat_r+0x1c>
 800f2d2:	682b      	ldr	r3, [r5, #0]
 800f2d4:	b103      	cbz	r3, 800f2d8 <_fstat_r+0x1c>
 800f2d6:	6023      	str	r3, [r4, #0]
 800f2d8:	bd38      	pop	{r3, r4, r5, pc}
 800f2da:	bf00      	nop
 800f2dc:	20003ef4 	.word	0x20003ef4

0800f2e0 <_isatty_r>:
 800f2e0:	b538      	push	{r3, r4, r5, lr}
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	4d05      	ldr	r5, [pc, #20]	@ (800f2fc <_isatty_r+0x1c>)
 800f2e6:	4604      	mov	r4, r0
 800f2e8:	4608      	mov	r0, r1
 800f2ea:	602b      	str	r3, [r5, #0]
 800f2ec:	f7f4 fdec 	bl	8003ec8 <_isatty>
 800f2f0:	1c43      	adds	r3, r0, #1
 800f2f2:	d102      	bne.n	800f2fa <_isatty_r+0x1a>
 800f2f4:	682b      	ldr	r3, [r5, #0]
 800f2f6:	b103      	cbz	r3, 800f2fa <_isatty_r+0x1a>
 800f2f8:	6023      	str	r3, [r4, #0]
 800f2fa:	bd38      	pop	{r3, r4, r5, pc}
 800f2fc:	20003ef4 	.word	0x20003ef4

0800f300 <ceil>:
 800f300:	ec51 0b10 	vmov	r0, r1, d0
 800f304:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f30c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800f310:	460c      	mov	r4, r1
 800f312:	4605      	mov	r5, r0
 800f314:	4680      	mov	r8, r0
 800f316:	2e13      	cmp	r6, #19
 800f318:	dc2f      	bgt.n	800f37a <ceil+0x7a>
 800f31a:	2e00      	cmp	r6, #0
 800f31c:	da11      	bge.n	800f342 <ceil+0x42>
 800f31e:	a332      	add	r3, pc, #200	@ (adr r3, 800f3e8 <ceil+0xe8>)
 800f320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f324:	f7f0 ffc6 	bl	80002b4 <__adddf3>
 800f328:	2200      	movs	r2, #0
 800f32a:	2300      	movs	r3, #0
 800f32c:	f7f1 fc08 	bl	8000b40 <__aeabi_dcmpgt>
 800f330:	b120      	cbz	r0, 800f33c <ceil+0x3c>
 800f332:	2c00      	cmp	r4, #0
 800f334:	db50      	blt.n	800f3d8 <ceil+0xd8>
 800f336:	4325      	orrs	r5, r4
 800f338:	d152      	bne.n	800f3e0 <ceil+0xe0>
 800f33a:	462c      	mov	r4, r5
 800f33c:	4621      	mov	r1, r4
 800f33e:	4628      	mov	r0, r5
 800f340:	e024      	b.n	800f38c <ceil+0x8c>
 800f342:	4f2b      	ldr	r7, [pc, #172]	@ (800f3f0 <ceil+0xf0>)
 800f344:	4137      	asrs	r7, r6
 800f346:	ea01 0307 	and.w	r3, r1, r7
 800f34a:	4303      	orrs	r3, r0
 800f34c:	d01e      	beq.n	800f38c <ceil+0x8c>
 800f34e:	a326      	add	r3, pc, #152	@ (adr r3, 800f3e8 <ceil+0xe8>)
 800f350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f354:	f7f0 ffae 	bl	80002b4 <__adddf3>
 800f358:	2200      	movs	r2, #0
 800f35a:	2300      	movs	r3, #0
 800f35c:	f7f1 fbf0 	bl	8000b40 <__aeabi_dcmpgt>
 800f360:	2800      	cmp	r0, #0
 800f362:	d0eb      	beq.n	800f33c <ceil+0x3c>
 800f364:	2c00      	cmp	r4, #0
 800f366:	f04f 0500 	mov.w	r5, #0
 800f36a:	bfc2      	ittt	gt
 800f36c:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 800f370:	4133      	asrgt	r3, r6
 800f372:	18e4      	addgt	r4, r4, r3
 800f374:	ea24 0407 	bic.w	r4, r4, r7
 800f378:	e7e0      	b.n	800f33c <ceil+0x3c>
 800f37a:	2e33      	cmp	r6, #51	@ 0x33
 800f37c:	dd0a      	ble.n	800f394 <ceil+0x94>
 800f37e:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800f382:	d103      	bne.n	800f38c <ceil+0x8c>
 800f384:	4602      	mov	r2, r0
 800f386:	460b      	mov	r3, r1
 800f388:	f7f0 ff94 	bl	80002b4 <__adddf3>
 800f38c:	ec41 0b10 	vmov	d0, r0, r1
 800f390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f394:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800f398:	f04f 37ff 	mov.w	r7, #4294967295
 800f39c:	40df      	lsrs	r7, r3
 800f39e:	4238      	tst	r0, r7
 800f3a0:	d0f4      	beq.n	800f38c <ceil+0x8c>
 800f3a2:	a311      	add	r3, pc, #68	@ (adr r3, 800f3e8 <ceil+0xe8>)
 800f3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a8:	f7f0 ff84 	bl	80002b4 <__adddf3>
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	f7f1 fbc6 	bl	8000b40 <__aeabi_dcmpgt>
 800f3b4:	2800      	cmp	r0, #0
 800f3b6:	d0c1      	beq.n	800f33c <ceil+0x3c>
 800f3b8:	2c00      	cmp	r4, #0
 800f3ba:	dd0a      	ble.n	800f3d2 <ceil+0xd2>
 800f3bc:	2e14      	cmp	r6, #20
 800f3be:	d101      	bne.n	800f3c4 <ceil+0xc4>
 800f3c0:	3401      	adds	r4, #1
 800f3c2:	e006      	b.n	800f3d2 <ceil+0xd2>
 800f3c4:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	40b3      	lsls	r3, r6
 800f3cc:	441d      	add	r5, r3
 800f3ce:	45a8      	cmp	r8, r5
 800f3d0:	d8f6      	bhi.n	800f3c0 <ceil+0xc0>
 800f3d2:	ea25 0507 	bic.w	r5, r5, r7
 800f3d6:	e7b1      	b.n	800f33c <ceil+0x3c>
 800f3d8:	2500      	movs	r5, #0
 800f3da:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800f3de:	e7ad      	b.n	800f33c <ceil+0x3c>
 800f3e0:	2500      	movs	r5, #0
 800f3e2:	4c04      	ldr	r4, [pc, #16]	@ (800f3f4 <ceil+0xf4>)
 800f3e4:	e7aa      	b.n	800f33c <ceil+0x3c>
 800f3e6:	bf00      	nop
 800f3e8:	8800759c 	.word	0x8800759c
 800f3ec:	7e37e43c 	.word	0x7e37e43c
 800f3f0:	000fffff 	.word	0x000fffff
 800f3f4:	3ff00000 	.word	0x3ff00000

0800f3f8 <floor>:
 800f3f8:	ec51 0b10 	vmov	r0, r1, d0
 800f3fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f404:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800f408:	460c      	mov	r4, r1
 800f40a:	4605      	mov	r5, r0
 800f40c:	4680      	mov	r8, r0
 800f40e:	2e13      	cmp	r6, #19
 800f410:	dc35      	bgt.n	800f47e <floor+0x86>
 800f412:	2e00      	cmp	r6, #0
 800f414:	da17      	bge.n	800f446 <floor+0x4e>
 800f416:	a334      	add	r3, pc, #208	@ (adr r3, 800f4e8 <floor+0xf0>)
 800f418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f41c:	f7f0 ff4a 	bl	80002b4 <__adddf3>
 800f420:	2200      	movs	r2, #0
 800f422:	2300      	movs	r3, #0
 800f424:	f7f1 fb8c 	bl	8000b40 <__aeabi_dcmpgt>
 800f428:	b150      	cbz	r0, 800f440 <floor+0x48>
 800f42a:	2c00      	cmp	r4, #0
 800f42c:	da56      	bge.n	800f4dc <floor+0xe4>
 800f42e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800f432:	432c      	orrs	r4, r5
 800f434:	2500      	movs	r5, #0
 800f436:	42ac      	cmp	r4, r5
 800f438:	4c2d      	ldr	r4, [pc, #180]	@ (800f4f0 <floor+0xf8>)
 800f43a:	bf08      	it	eq
 800f43c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800f440:	4621      	mov	r1, r4
 800f442:	4628      	mov	r0, r5
 800f444:	e024      	b.n	800f490 <floor+0x98>
 800f446:	4f2b      	ldr	r7, [pc, #172]	@ (800f4f4 <floor+0xfc>)
 800f448:	4137      	asrs	r7, r6
 800f44a:	ea01 0307 	and.w	r3, r1, r7
 800f44e:	4303      	orrs	r3, r0
 800f450:	d01e      	beq.n	800f490 <floor+0x98>
 800f452:	a325      	add	r3, pc, #148	@ (adr r3, 800f4e8 <floor+0xf0>)
 800f454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f458:	f7f0 ff2c 	bl	80002b4 <__adddf3>
 800f45c:	2200      	movs	r2, #0
 800f45e:	2300      	movs	r3, #0
 800f460:	f7f1 fb6e 	bl	8000b40 <__aeabi_dcmpgt>
 800f464:	2800      	cmp	r0, #0
 800f466:	d0eb      	beq.n	800f440 <floor+0x48>
 800f468:	2c00      	cmp	r4, #0
 800f46a:	f04f 0500 	mov.w	r5, #0
 800f46e:	bfbe      	ittt	lt
 800f470:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800f474:	4133      	asrlt	r3, r6
 800f476:	18e4      	addlt	r4, r4, r3
 800f478:	ea24 0407 	bic.w	r4, r4, r7
 800f47c:	e7e0      	b.n	800f440 <floor+0x48>
 800f47e:	2e33      	cmp	r6, #51	@ 0x33
 800f480:	dd0a      	ble.n	800f498 <floor+0xa0>
 800f482:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800f486:	d103      	bne.n	800f490 <floor+0x98>
 800f488:	4602      	mov	r2, r0
 800f48a:	460b      	mov	r3, r1
 800f48c:	f7f0 ff12 	bl	80002b4 <__adddf3>
 800f490:	ec41 0b10 	vmov	d0, r0, r1
 800f494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f498:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800f49c:	f04f 37ff 	mov.w	r7, #4294967295
 800f4a0:	40df      	lsrs	r7, r3
 800f4a2:	4207      	tst	r7, r0
 800f4a4:	d0f4      	beq.n	800f490 <floor+0x98>
 800f4a6:	a310      	add	r3, pc, #64	@ (adr r3, 800f4e8 <floor+0xf0>)
 800f4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ac:	f7f0 ff02 	bl	80002b4 <__adddf3>
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	f7f1 fb44 	bl	8000b40 <__aeabi_dcmpgt>
 800f4b8:	2800      	cmp	r0, #0
 800f4ba:	d0c1      	beq.n	800f440 <floor+0x48>
 800f4bc:	2c00      	cmp	r4, #0
 800f4be:	da0a      	bge.n	800f4d6 <floor+0xde>
 800f4c0:	2e14      	cmp	r6, #20
 800f4c2:	d101      	bne.n	800f4c8 <floor+0xd0>
 800f4c4:	3401      	adds	r4, #1
 800f4c6:	e006      	b.n	800f4d6 <floor+0xde>
 800f4c8:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	40b3      	lsls	r3, r6
 800f4d0:	441d      	add	r5, r3
 800f4d2:	4545      	cmp	r5, r8
 800f4d4:	d3f6      	bcc.n	800f4c4 <floor+0xcc>
 800f4d6:	ea25 0507 	bic.w	r5, r5, r7
 800f4da:	e7b1      	b.n	800f440 <floor+0x48>
 800f4dc:	2500      	movs	r5, #0
 800f4de:	462c      	mov	r4, r5
 800f4e0:	e7ae      	b.n	800f440 <floor+0x48>
 800f4e2:	bf00      	nop
 800f4e4:	f3af 8000 	nop.w
 800f4e8:	8800759c 	.word	0x8800759c
 800f4ec:	7e37e43c 	.word	0x7e37e43c
 800f4f0:	bff00000 	.word	0xbff00000
 800f4f4:	000fffff 	.word	0x000fffff

0800f4f8 <roundf>:
 800f4f8:	feb8 0a40 	vrinta.f32	s0, s0
 800f4fc:	4770      	bx	lr
	...

0800f500 <_init>:
 800f500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f502:	bf00      	nop
 800f504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f506:	bc08      	pop	{r3}
 800f508:	469e      	mov	lr, r3
 800f50a:	4770      	bx	lr

0800f50c <_fini>:
 800f50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f50e:	bf00      	nop
 800f510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f512:	bc08      	pop	{r3}
 800f514:	469e      	mov	lr, r3
 800f516:	4770      	bx	lr
